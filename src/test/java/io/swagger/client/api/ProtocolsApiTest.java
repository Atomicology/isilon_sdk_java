/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateAuthRefreshItemResponse;
import io.swagger.client.model.CreateNfsAliasResponse;
import io.swagger.client.model.CreateNfsNlmSessionsCheckItemResponse;
import io.swagger.client.model.CreateQuotaReportResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.FtpSettings;
import io.swagger.client.model.FtpSettingsExtended;
import io.swagger.client.model.HdfsLogLevel;
import io.swagger.client.model.HdfsProxyuserCreateParams;
import io.swagger.client.model.HdfsProxyusers;
import io.swagger.client.model.HdfsRack;
import io.swagger.client.model.HdfsRackCreateParams;
import io.swagger.client.model.HdfsRacks;
import io.swagger.client.model.HdfsRacksExtended;
import io.swagger.client.model.HdfsRangerPluginSettings;
import io.swagger.client.model.HdfsRangerPluginSettingsSettings;
import io.swagger.client.model.HdfsSettings;
import io.swagger.client.model.HdfsSettingsSettings;
import io.swagger.client.model.HttpSettings;
import io.swagger.client.model.HttpSettingsSettings;
import io.swagger.client.model.NdmpContextsBackup;
import io.swagger.client.model.NdmpContextsBackupExtended;
import io.swagger.client.model.NdmpContextsBre;
import io.swagger.client.model.NdmpContextsBreExtended;
import io.swagger.client.model.NdmpDiagnostics;
import io.swagger.client.model.NdmpDiagnosticsDiagnostics;
import io.swagger.client.model.NdmpDumpdates;
import io.swagger.client.model.NdmpLogs;
import io.swagger.client.model.NdmpSessions;
import io.swagger.client.model.NdmpSessionsExtended;
import io.swagger.client.model.NdmpSettingsDmas;
import io.swagger.client.model.NdmpSettingsGlobal;
import io.swagger.client.model.NdmpSettingsGlobalGlobal;
import io.swagger.client.model.NdmpSettingsPreferredIp;
import io.swagger.client.model.NdmpSettingsPreferredIpCreateParams;
import io.swagger.client.model.NdmpSettingsPreferredIps;
import io.swagger.client.model.NdmpSettingsVariable;
import io.swagger.client.model.NdmpSettingsVariableCreateParams;
import io.swagger.client.model.NdmpSettingsVariables;
import io.swagger.client.model.NdmpUser;
import io.swagger.client.model.NdmpUserCreateParams;
import io.swagger.client.model.NdmpUsers;
import io.swagger.client.model.NdmpUsersExtended;
import io.swagger.client.model.NfsAlias;
import io.swagger.client.model.NfsAliasCreateParams;
import io.swagger.client.model.NfsAliases;
import io.swagger.client.model.NfsAliasesExtended;
import io.swagger.client.model.NfsCheckExtended;
import io.swagger.client.model.NfsExport;
import io.swagger.client.model.NfsExportCreateParams;
import io.swagger.client.model.NfsExports;
import io.swagger.client.model.NfsExportsExtended;
import io.swagger.client.model.NfsExportsSummary;
import io.swagger.client.model.NfsLogLevel;
import io.swagger.client.model.NfsNetgroup;
import io.swagger.client.model.NfsNlmLocks;
import io.swagger.client.model.NfsNlmSessions;
import io.swagger.client.model.NfsNlmSessionsExtended;
import io.swagger.client.model.NfsNlmWaiters;
import io.swagger.client.model.NfsSettingsExport;
import io.swagger.client.model.NfsSettingsExportSettings;
import io.swagger.client.model.NfsSettingsGlobal;
import io.swagger.client.model.NfsSettingsGlobalSettings;
import io.swagger.client.model.NfsSettingsZone;
import io.swagger.client.model.NfsSettingsZoneSettings;
import io.swagger.client.model.NtpServer;
import io.swagger.client.model.NtpServerCreateParams;
import io.swagger.client.model.NtpServers;
import io.swagger.client.model.NtpServersExtended;
import io.swagger.client.model.NtpSettings;
import io.swagger.client.model.NtpSettingsSettings;
import io.swagger.client.model.SmbLogLevel;
import io.swagger.client.model.SmbLogLevelFilter;
import io.swagger.client.model.SmbLogLevelFilters;
import io.swagger.client.model.SmbOpenfiles;
import io.swagger.client.model.SmbSessions;
import io.swagger.client.model.SmbSettingsGlobal;
import io.swagger.client.model.SmbSettingsGlobalExtended;
import io.swagger.client.model.SmbSettingsShare;
import io.swagger.client.model.SmbSettingsShareExtended;
import io.swagger.client.model.SmbShare;
import io.swagger.client.model.SmbShareCreateParams;
import io.swagger.client.model.SmbShares;
import io.swagger.client.model.SmbSharesExtended;
import io.swagger.client.model.SmbSharesSummary;
import io.swagger.client.model.SnmpSettings;
import io.swagger.client.model.SnmpSettingsExtended;
import io.swagger.client.model.SwiftAccount;
import io.swagger.client.model.SwiftAccounts;
import io.swagger.client.model.SwiftAccountsExtended;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProtocolsApi
 */
@Ignore
public class ProtocolsApiTest {

    private final ProtocolsApi api = new ProtocolsApi();

    
    /**
     * 
     *
     * Create a new HDFS proxyuser.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHdfsProxyuserTest() throws ApiException {
        HdfsProxyuserCreateParams hdfsProxyuser = null;
        String zone = null;
        CreateResponse response = api.createHdfsProxyuser(hdfsProxyuser, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new HDFS rack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHdfsRackTest() throws ApiException {
        HdfsRackCreateParams hdfsRack = null;
        String zone = null;
        CreateResponse response = api.createHdfsRack(hdfsRack, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a preferred ip preference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNdmpSettingsPreferredIpTest() throws ApiException {
        NdmpSettingsPreferredIpCreateParams ndmpSettingsPreferredIp = null;
        Empty response = api.createNdmpSettingsPreferredIp(ndmpSettingsPreferredIp);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a preferred NDMP environment variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNdmpSettingsVariableTest() throws ApiException {
        NdmpSettingsVariableCreateParams ndmpSettingsVariable = null;
        String ndmpSettingsVariableId = null;
        Empty response = api.createNdmpSettingsVariable(ndmpSettingsVariable, ndmpSettingsVariableId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Created a new user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNdmpUserTest() throws ApiException {
        NdmpUserCreateParams ndmpUser = null;
        Empty response = api.createNdmpUser(ndmpUser);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new NFS alias.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNfsAliasTest() throws ApiException {
        NfsAliasCreateParams nfsAlias = null;
        String zone = null;
        CreateNfsAliasResponse response = api.createNfsAlias(nfsAlias, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new NFS export.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNfsExportTest() throws ApiException {
        NfsExportCreateParams nfsExport = null;
        Boolean force = null;
        Boolean ignoreUnresolvableHosts = null;
        String zone = null;
        Boolean ignoreConflicts = null;
        Boolean ignoreBadPaths = null;
        Boolean ignoreBadAuth = null;
        CreateQuotaReportResponse response = api.createNfsExport(nfsExport, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update the NFS netgroups in the cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNfsNetgroupCheckItemTest() throws ApiException {
        Empty nfsNetgroupCheckItem = null;
        String host = null;
        Empty response = api.createNfsNetgroupCheckItem(nfsNetgroupCheckItem, host);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Flush the NFS netgroups in the cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNfsNetgroupFlushItemTest() throws ApiException {
        Empty nfsNetgroupFlushItem = null;
        String host = null;
        Empty response = api.createNfsNetgroupFlushItem(nfsNetgroupFlushItem, host);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Perform an active scan for lost NFSv3 locks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNfsNlmSessionsCheckItemTest() throws ApiException {
        Empty nfsNlmSessionsCheckItem = null;
        String clusterIp = null;
        String zone = null;
        CreateNfsNlmSessionsCheckItemResponse response = api.createNfsNlmSessionsCheckItem(nfsNlmSessionsCheckItem, clusterIp, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reload default NFS export configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNfsReloadItemTest() throws ApiException {
        Empty nfsReloadItem = null;
        String zone = null;
        Empty response = api.createNfsReloadItem(nfsReloadItem, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create an NTP server entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNtpServerTest() throws ApiException {
        NtpServerCreateParams ntpServer = null;
        CreateResponse response = api.createNtpServer(ntpServer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add an SMB log filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmbLogLevelFilterTest() throws ApiException {
        SmbLogLevelFilter smbLogLevelFilter = null;
        CreateAuthRefreshItemResponse response = api.createSmbLogLevelFilter(smbLogLevelFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new share.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSmbShareTest() throws ApiException {
        SmbShareCreateParams smbShare = null;
        String zone = null;
        CreateResponse response = api.createSmbShare(smbShare, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new Swift account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSwiftAccountTest() throws ApiException {
        SwiftAccount swiftAccount = null;
        String zone = null;
        CreateResponse response = api.createSwiftAccount(swiftAccount, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete an HDFS proxyuser.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHdfsProxyuserTest() throws ApiException {
        String hdfsProxyuserId = null;
        String zone = null;
        api.deleteHdfsProxyuser(hdfsProxyuserId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the HDFS rack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteHdfsRackTest() throws ApiException {
        String hdfsRackId = null;
        String zone = null;
        api.deleteHdfsRack(hdfsRackId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a backup context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpContextsBackupByIdTest() throws ApiException {
        String ndmpContextsBackupId = null;
        api.deleteNdmpContextsBackupById(ndmpContextsBackupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a NDMP BRE context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpContextsBreByIdTest() throws ApiException {
        String ndmpContextsBreId = null;
        api.deleteNdmpContextsBreById(ndmpContextsBreId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a restore context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpContextsRestoreByIdTest() throws ApiException {
        String ndmpContextsRestoreId = null;
        api.deleteNdmpContextsRestoreById(ndmpContextsRestoreId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete dumpdates entries of a specified path.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpDumpdateTest() throws ApiException {
        String ndmpDumpdateId = null;
        Integer level = null;
        api.deleteNdmpDumpdate(ndmpDumpdateId, level);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the ndmp session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpSessionTest() throws ApiException {
        String ndmpSessionId = null;
        String lnn = null;
        api.deleteNdmpSession(ndmpSessionId, lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a preferred ip preference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpSettingsPreferredIpTest() throws ApiException {
        String ndmpSettingsPreferredIpId = null;
        api.deleteNdmpSettingsPreferredIp(ndmpSettingsPreferredIpId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete preferred environment variable entries
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpSettingsVariableTest() throws ApiException {
        String ndmpSettingsVariableId = null;
        String name = null;
        api.deleteNdmpSettingsVariable(ndmpSettingsVariableId, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNdmpUserTest() throws ApiException {
        String ndmpUserId = null;
        api.deleteNdmpUser(ndmpUserId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the export.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNfsAliasTest() throws ApiException {
        String nfsAliasId = null;
        String zone = null;
        api.deleteNfsAlias(nfsAliasId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the export.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNfsExportTest() throws ApiException {
        String nfsExportId = null;
        String zone = null;
        api.deleteNfsExport(nfsExportId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all lock state for this host.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNfsNlmSessionTest() throws ApiException {
        String nfsNlmSessionId = null;
        String clusterIp = null;
        String zone = null;
        Boolean refresh = null;
        api.deleteNfsNlmSession(nfsNlmSessionId, clusterIp, zone, refresh);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete an NTP server entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNtpServerTest() throws ApiException {
        String ntpServerId = null;
        api.deleteNtpServer(ntpServerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all NTP server entries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNtpServersTest() throws ApiException {
        api.deleteNtpServers();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete log filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbLogLevelFilterTest() throws ApiException {
        String smbLogLevelFilterId = null;
        api.deleteSmbLogLevelFilter(smbLogLevelFilterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete existing SMB log filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbLogLevelFiltersTest() throws ApiException {
        String level = null;
        api.deleteSmbLogLevelFilters(level);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Close the file in the SMB server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbOpenfileTest() throws ApiException {
        String smbOpenfileId = null;
        api.deleteSmbOpenfile(smbOpenfileId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Close the SMB session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbSessionTest() throws ApiException {
        String smbSessionId = null;
        api.deleteSmbSession(smbSessionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Close the SMB session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbSessionsComputerUserTest() throws ApiException {
        String smbSessionsComputerUser = null;
        String computer = null;
        api.deleteSmbSessionsComputerUser(smbSessionsComputerUser, computer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the share.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbShareTest() throws ApiException {
        String smbShareId = null;
        String zone = null;
        api.deleteSmbShare(smbShareId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete multiple smb shares.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmbSharesTest() throws ApiException {
        api.deleteSmbShares();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a Swift account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSwiftAccountTest() throws ApiException {
        String swiftAccountId = null;
        String zone = null;
        api.deleteSwiftAccount(swiftAccountId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the FTP settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFtpSettingsTest() throws ApiException {
        FtpSettings response = api.getFtpSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the HDFS service log-level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHdfsLogLevelTest() throws ApiException {
        HdfsLogLevel response = api.getHdfsLogLevel();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View the proxyuser.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHdfsProxyuserTest() throws ApiException {
        String hdfsProxyuserId = null;
        String zone = null;
        HdfsProxyusers response = api.getHdfsProxyuser(hdfsProxyuserId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the HDFS rack.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHdfsRackTest() throws ApiException {
        String hdfsRackId = null;
        String zone = null;
        HdfsRacks response = api.getHdfsRack(hdfsRackId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve HDFS ranger-plugin properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHdfsRangerPluginSettingsTest() throws ApiException {
        String zone = null;
        HdfsRangerPluginSettings response = api.getHdfsRangerPluginSettings(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve HDFS properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHdfsSettingsTest() throws ApiException {
        String zone = null;
        HdfsSettings response = api.getHdfsSettings(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve HTTP properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHttpSettingsTest() throws ApiException {
        HttpSettings response = api.getHttpSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get List of NDMP Backup Contexts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpContextsBackupTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        NdmpContextsBackupExtended response = api.getNdmpContextsBackup(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a NDMP backup context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpContextsBackupByIdTest() throws ApiException {
        String ndmpContextsBackupId = null;
        NdmpContextsBackup response = api.getNdmpContextsBackupById(ndmpContextsBackupId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of NDMP BRE Contexts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpContextsBreTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        NdmpContextsBreExtended response = api.getNdmpContextsBre(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a NDMP BRE context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpContextsBreByIdTest() throws ApiException {
        String ndmpContextsBreId = null;
        NdmpContextsBre response = api.getNdmpContextsBreById(ndmpContextsBreId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get List of NDMP Restore Contexts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpContextsRestoreTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        NdmpContextsBackupExtended response = api.getNdmpContextsRestore(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a NDMP restore context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpContextsRestoreByIdTest() throws ApiException {
        String ndmpContextsRestoreId = null;
        NdmpContextsBackup response = api.getNdmpContextsRestoreById(ndmpContextsRestoreId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List ndmp diagnostics settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpDiagnosticsTest() throws ApiException {
        NdmpDiagnostics response = api.getNdmpDiagnostics();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of dumpdates entries.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpDumpdateTest() throws ApiException {
        String ndmpDumpdateId = null;
        String sort = null;
        String resume = null;
        Integer level = null;
        Integer limit = null;
        String path = null;
        String dir = null;
        NdmpDumpdates response = api.getNdmpDumpdate(ndmpDumpdateId, sort, resume, level, limit, path, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get NDMP logs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpLogsTest() throws ApiException {
        String lnn = null;
        Integer page = null;
        Integer pagesize = null;
        NdmpLogs response = api.getNdmpLogs(lnn, page, pagesize);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the ndmp session.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpSessionTest() throws ApiException {
        String ndmpSessionId = null;
        String lnn = null;
        NdmpSessions response = api.getNdmpSession(ndmpSessionId, lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all ndmp sessions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpSessionsTest() throws ApiException {
        Boolean consolidate = null;
        String node = null;
        String session = null;
        Integer limit = null;
        String resume = null;
        NdmpSessionsExtended response = api.getNdmpSessions(consolidate, node, session, limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of supported dma vendors.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpSettingsDmasTest() throws ApiException {
        NdmpSettingsDmas response = api.getNdmpSettingsDmas();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List global ndmp settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpSettingsGlobalTest() throws ApiException {
        NdmpSettingsGlobal response = api.getNdmpSettingsGlobal();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get one preference by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpSettingsPreferredIpTest() throws ApiException {
        String ndmpSettingsPreferredIpId = null;
        NdmpSettingsPreferredIps response = api.getNdmpSettingsPreferredIp(ndmpSettingsPreferredIpId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of preferred environment variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpSettingsVariableTest() throws ApiException {
        String ndmpSettingsVariableId = null;
        String path = null;
        Integer limit = null;
        String resume = null;
        NdmpSettingsVariables response = api.getNdmpSettingsVariable(ndmpSettingsVariableId, path, limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNdmpUserTest() throws ApiException {
        String ndmpUserId = null;
        NdmpUsers response = api.getNdmpUser(ndmpUserId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve export information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsAliasTest() throws ApiException {
        String nfsAliasId = null;
        String scope = null;
        Boolean check = null;
        String zone = null;
        NfsAliases response = api.getNfsAlias(nfsAliasId, scope, check, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve NFS export validation information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsCheckTest() throws ApiException {
        Boolean ignoreBadPaths = null;
        Boolean ignoreBadAuth = null;
        String zone = null;
        Boolean ignoreUnresolvableHosts = null;
        NfsCheckExtended response = api.getNfsCheck(ignoreBadPaths, ignoreBadAuth, zone, ignoreUnresolvableHosts);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve export information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsExportTest() throws ApiException {
        String nfsExportId = null;
        String scope = null;
        String zone = null;
        NfsExports response = api.getNfsExport(nfsExportId, scope, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve NFS export summary information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsExportsSummaryTest() throws ApiException {
        String zone = null;
        NfsExportsSummary response = api.getNfsExportsSummary(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current NFS service logging level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsLogLevelTest() throws ApiException {
        NfsLogLevel response = api.getNfsLogLevel();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current NFS netgroup cache settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsNetgroupTest() throws ApiException {
        String host = null;
        NfsNetgroup response = api.getNfsNetgroup(host);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NLM locks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsNlmLocksTest() throws ApiException {
        String sort = null;
        String created = null;
        String lin = null;
        String resume = null;
        String client = null;
        Integer limit = null;
        String clientId = null;
        String path = null;
        String dir = null;
        NfsNlmLocks response = api.getNfsNlmLocks(sort, created, lin, resume, client, limit, clientId, path, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all lock state for a single client.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsNlmSessionTest() throws ApiException {
        String nfsNlmSessionId = null;
        String clusterIp = null;
        String zone = null;
        NfsNlmSessions response = api.getNfsNlmSession(nfsNlmSessionId, clusterIp, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NSM clients (optionally filtered by either zone or IP)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsNlmSessionsTest() throws ApiException {
        String sort = null;
        String ip = null;
        Integer limit = null;
        String zone = null;
        String dir = null;
        NfsNlmSessionsExtended response = api.getNfsNlmSessions(sort, ip, limit, zone, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NLM lock waiters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsNlmWaitersTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        NfsNlmWaiters response = api.getNfsNlmWaiters(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve export information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsSettingsExportTest() throws ApiException {
        String scope = null;
        String zone = null;
        NfsSettingsExport response = api.getNfsSettingsExport(scope, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the NFS configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsSettingsGlobalTest() throws ApiException {
        String scope = null;
        NfsSettingsGlobal response = api.getNfsSettingsGlobal(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the NFS server settings for this zone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNfsSettingsZoneTest() throws ApiException {
        String zone = null;
        NfsSettingsZone response = api.getNfsSettingsZone(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one NTP server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNtpServerTest() throws ApiException {
        String ntpServerId = null;
        NtpServers response = api.getNtpServer(ntpServerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the NTP settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNtpSettingsTest() throws ApiException {
        NtpSettings response = api.getNtpSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current SMB logging level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbLogLevelTest() throws ApiException {
        SmbLogLevel response = api.getSmbLogLevel();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View log filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbLogLevelFilterTest() throws ApiException {
        String smbLogLevelFilterId = null;
        SmbLogLevelFilters response = api.getSmbLogLevelFilter(smbLogLevelFilterId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List open files.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbOpenfilesTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        SmbOpenfiles response = api.getSmbOpenfiles(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List open sessions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbSessionsTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        SmbSessions response = api.getSmbSessions(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbSettingsGlobalTest() throws ApiException {
        String scope = null;
        SmbSettingsGlobal response = api.getSmbSettingsGlobal(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbSettingsShareTest() throws ApiException {
        String scope = null;
        String zone = null;
        SmbSettingsShare response = api.getSmbSettingsShare(scope, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve share.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbShareTest() throws ApiException {
        String smbShareId = null;
        String scope = null;
        Boolean resolveNames = null;
        String zone = null;
        SmbShares response = api.getSmbShare(smbShareId, scope, resolveNames, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return summary information about shares.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmbSharesSummaryTest() throws ApiException {
        String zone = null;
        SmbSharesSummary response = api.getSmbSharesSummary(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the SNMP settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnmpSettingsTest() throws ApiException {
        SnmpSettings response = api.getSnmpSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List a swift account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSwiftAccountTest() throws ApiException {
        String swiftAccountId = null;
        String zone = null;
        SwiftAccounts response = api.getSwiftAccount(swiftAccountId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all proxyusers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHdfsProxyusersTest() throws ApiException {
        String zone = null;
        HdfsProxyusers response = api.listHdfsProxyusers(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all racks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHdfsRacksTest() throws ApiException {
        String zone = null;
        HdfsRacksExtended response = api.listHdfsRacks(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of preferences.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNdmpSettingsPreferredIpsTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        NdmpSettingsPreferredIps response = api.listNdmpSettingsPreferredIps(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all ndmp administrators.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNdmpUsersTest() throws ApiException {
        NdmpUsersExtended response = api.listNdmpUsers();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NFS aliases.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNfsAliasesTest() throws ApiException {
        String sort = null;
        String zone = null;
        String resume = null;
        Integer limit = null;
        Boolean check = null;
        String dir = null;
        NfsAliasesExtended response = api.listNfsAliases(sort, zone, resume, limit, check, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NFS exports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNfsExportsTest() throws ApiException {
        String sort = null;
        String zone = null;
        String resume = null;
        String scope = null;
        Integer limit = null;
        Integer offset = null;
        String path = null;
        Boolean check = null;
        String dir = null;
        NfsExportsExtended response = api.listNfsExports(sort, zone, resume, scope, limit, offset, path, check, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NTP servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNtpServersTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        NtpServersExtended response = api.listNtpServers(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current SMB log filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSmbLogLevelFiltersTest() throws ApiException {
        String sort = null;
        String dir = null;
        String level = null;
        SmbLogLevelFilters response = api.listSmbLogLevelFilters(sort, dir, level);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all shares.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSmbSharesTest() throws ApiException {
        String sort = null;
        String zone = null;
        String resume = null;
        Boolean resolveNames = null;
        Integer limit = null;
        Integer offset = null;
        String scope = null;
        String dir = null;
        SmbSharesExtended response = api.listSmbShares(sort, zone, resume, resolveNames, limit, offset, scope, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all swift accounts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSwiftAccountsTest() throws ApiException {
        String zone = null;
        SwiftAccountsExtended response = api.listSwiftAccounts(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the FTP settings. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFtpSettingsTest() throws ApiException {
        FtpSettingsExtended ftpSettings = null;
        api.updateFtpSettings(ftpSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the HDFS service log-level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHdfsLogLevelTest() throws ApiException {
        HdfsLogLevel hdfsLogLevel = null;
        api.updateHdfsLogLevel(hdfsLogLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify an HDFS proxyuser.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHdfsProxyuserTest() throws ApiException {
        Empty hdfsProxyuser = null;
        String hdfsProxyuserId = null;
        String zone = null;
        api.updateHdfsProxyuser(hdfsProxyuser, hdfsProxyuserId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the HDFS rack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHdfsRackTest() throws ApiException {
        HdfsRack hdfsRack = null;
        String hdfsRackId = null;
        String zone = null;
        api.updateHdfsRack(hdfsRack, hdfsRackId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify HDFS ranger-plugin properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHdfsRangerPluginSettingsTest() throws ApiException {
        HdfsRangerPluginSettingsSettings hdfsRangerPluginSettings = null;
        String zone = null;
        api.updateHdfsRangerPluginSettings(hdfsRangerPluginSettings, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify HDFS properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHdfsSettingsTest() throws ApiException {
        HdfsSettingsSettings hdfsSettings = null;
        String zone = null;
        api.updateHdfsSettings(hdfsSettings, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify HTTP properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHttpSettingsTest() throws ApiException {
        HttpSettingsSettings httpSettings = null;
        api.updateHttpSettings(httpSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify ndmp diagnostics settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNdmpDiagnosticsTest() throws ApiException {
        NdmpDiagnosticsDiagnostics ndmpDiagnostics = null;
        api.updateNdmpDiagnostics(ndmpDiagnostics);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNdmpSettingsGlobalTest() throws ApiException {
        NdmpSettingsGlobalGlobal ndmpSettingsGlobal = null;
        api.updateNdmpSettingsGlobal(ndmpSettingsGlobal);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify a preferred ip preference.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNdmpSettingsPreferredIpTest() throws ApiException {
        NdmpSettingsPreferredIp ndmpSettingsPreferredIp = null;
        String ndmpSettingsPreferredIpId = null;
        api.updateNdmpSettingsPreferredIp(ndmpSettingsPreferredIp, ndmpSettingsPreferredIpId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify or create a NDMP preferred environment variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNdmpSettingsVariableTest() throws ApiException {
        NdmpSettingsVariable ndmpSettingsVariable = null;
        String ndmpSettingsVariableId = null;
        String name = null;
        api.updateNdmpSettingsVariable(ndmpSettingsVariable, ndmpSettingsVariableId, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNdmpUserTest() throws ApiException {
        NdmpUser ndmpUser = null;
        String ndmpUserId = null;
        api.updateNdmpUser(ndmpUser, ndmpUserId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the alias. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsAliasTest() throws ApiException {
        NfsAlias nfsAlias = null;
        String nfsAliasId = null;
        String zone = null;
        api.updateNfsAlias(nfsAlias, nfsAliasId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the export. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsExportTest() throws ApiException {
        NfsExport nfsExport = null;
        String nfsExportId = null;
        Boolean force = null;
        Boolean ignoreUnresolvableHosts = null;
        String zone = null;
        Boolean ignoreConflicts = null;
        Boolean ignoreBadPaths = null;
        Boolean ignoreBadAuth = null;
        api.updateNfsExport(nfsExport, nfsExportId, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the current NFS service logging level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsLogLevelTest() throws ApiException {
        NfsLogLevel nfsLogLevel = null;
        api.updateNfsLogLevel(nfsLogLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the current NFS netgroup settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsNetgroupTest() throws ApiException {
        NfsNetgroup nfsNetgroup = null;
        String host = null;
        api.updateNfsNetgroup(nfsNetgroup, host);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsSettingsExportTest() throws ApiException {
        NfsSettingsExportSettings nfsSettingsExport = null;
        String zone = null;
        api.updateNfsSettingsExport(nfsSettingsExport, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsSettingsGlobalTest() throws ApiException {
        NfsSettingsGlobalSettings nfsSettingsGlobal = null;
        String scope = null;
        api.updateNfsSettingsGlobal(nfsSettingsGlobal, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the NFS server settings for this zone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNfsSettingsZoneTest() throws ApiException {
        NfsSettingsZoneSettings nfsSettingsZone = null;
        String zone = null;
        api.updateNfsSettingsZone(nfsSettingsZone, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the key value for an NTP server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNtpServerTest() throws ApiException {
        NtpServer ntpServer = null;
        String ntpServerId = null;
        api.updateNtpServer(ntpServer, ntpServerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the NTP settings. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNtpSettingsTest() throws ApiException {
        NtpSettingsSettings ntpSettings = null;
        api.updateNtpSettings(ntpSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the current SMB logging level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSmbLogLevelTest() throws ApiException {
        SmbLogLevel smbLogLevel = null;
        api.updateSmbLogLevel(smbLogLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSmbSettingsGlobalTest() throws ApiException {
        SmbSettingsGlobalExtended smbSettingsGlobal = null;
        api.updateSmbSettingsGlobal(smbSettingsGlobal);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSmbSettingsShareTest() throws ApiException {
        SmbSettingsShareExtended smbSettingsShare = null;
        String zone = null;
        api.updateSmbSettingsShare(smbSettingsShare, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify share. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSmbShareTest() throws ApiException {
        SmbShare smbShare = null;
        String smbShareId = null;
        String zone = null;
        api.updateSmbShare(smbShare, smbShareId, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the SNMP settings. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSnmpSettingsTest() throws ApiException {
        SnmpSettingsExtended snmpSettings = null;
        api.updateSnmpSettings(snmpSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify a Swift account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSwiftAccountTest() throws ApiException {
        SwiftAccount swiftAccount = null;
        String swiftAccountId = null;
        String zone = null;
        api.updateSwiftAccount(swiftAccount, swiftAccountId, zone);

        // TODO: test validations
    }
    
}
