/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateQuotaReportResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.EventAlertCondition;
import io.swagger.client.model.EventAlertConditionCreateParams;
import io.swagger.client.model.EventAlertConditions;
import io.swagger.client.model.EventAlertConditionsExtended;
import io.swagger.client.model.EventCategories;
import io.swagger.client.model.EventCategoriesExtended;
import io.swagger.client.model.EventChannel;
import io.swagger.client.model.EventChannelCreateParams;
import io.swagger.client.model.EventChannels;
import io.swagger.client.model.EventChannelsExtended;
import io.swagger.client.model.EventEvent;
import io.swagger.client.model.EventEventgroupDefinitions;
import io.swagger.client.model.EventEventgroupDefinitionsExtended;
import io.swagger.client.model.EventEventgroupOccurrence;
import io.swagger.client.model.EventEventgroupOccurrences;
import io.swagger.client.model.EventEventgroupOccurrencesExtended;
import io.swagger.client.model.EventEventlists;
import io.swagger.client.model.EventEventlistsExtended;
import io.swagger.client.model.EventSettings;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventApi
 */
@Ignore
public class EventApiTest {

    private final EventApi api = new EventApi();

    
    /**
     * 
     *
     * Create a new alert condition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventAlertConditionTest() throws ApiException {
        EventAlertConditionCreateParams eventAlertCondition = null;
        CreateResponse response = api.createEventAlertCondition(eventAlertCondition);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventChannelTest() throws ApiException {
        EventChannelCreateParams eventChannel = null;
        CreateResponse response = api.createEventChannel(eventChannel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a test event.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventEventTest() throws ApiException {
        EventEvent eventEvent = null;
        CreateQuotaReportResponse response = api.createEventEvent(eventEvent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the alert-condition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventAlertConditionTest() throws ApiException {
        String eventAlertConditionId = null;
        api.deleteEventAlertCondition(eventAlertConditionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Bulk delete of alert conditions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventAlertConditionsTest() throws ApiException {
        String channel = null;
        api.deleteEventAlertConditions(channel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventChannelTest() throws ApiException {
        String eventChannelId = null;
        api.deleteEventChannel(eventChannelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the alert-condition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventAlertConditionTest() throws ApiException {
        String eventAlertConditionId = null;
        EventAlertConditions response = api.getEventAlertCondition(eventAlertConditionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all eventgroup categories.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventCategoriesTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        EventCategoriesExtended response = api.getEventCategories(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the eventgroup category.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventCategoryTest() throws ApiException {
        String eventCategoryId = null;
        EventCategories response = api.getEventCategory(eventCategoryId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventChannelTest() throws ApiException {
        String eventChannelId = null;
        EventChannels response = api.getEventChannel(eventChannelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the eventgroup definition.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventgroupDefinitionTest() throws ApiException {
        String eventEventgroupDefinitionId = null;
        EventEventgroupDefinitions response = api.getEventEventgroupDefinition(eventEventgroupDefinitionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all eventgroup definitions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventgroupDefinitionsTest() throws ApiException {
        Integer category = null;
        Integer limit = null;
        String resume = null;
        EventEventgroupDefinitionsExtended response = api.getEventEventgroupDefinitions(category, limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve individual eventgroup occurrence.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventgroupOccurrenceTest() throws ApiException {
        String eventEventgroupOccurrenceId = null;
        EventEventgroupOccurrences response = api.getEventEventgroupOccurrence(eventEventgroupOccurrenceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all eventgroup occurrences.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventgroupOccurrencesTest() throws ApiException {
        Boolean resolved = null;
        String sort = null;
        Integer begin = null;
        Integer end = null;
        Integer eventCount = null;
        String resume = null;
        Boolean ignore = null;
        Integer limit = null;
        String resolver = null;
        String cause = null;
        String dir = null;
        EventEventgroupOccurrencesExtended response = api.getEventEventgroupOccurrences(resolved, sort, begin, end, eventCount, resume, ignore, limit, resolver, cause, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the list of events for a eventgroup occureence.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventlistTest() throws ApiException {
        String eventEventlistId = null;
        EventEventlists response = api.getEventEventlist(eventEventlistId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all event occurrences grouped by eventgroup occurrence.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventEventlistsTest() throws ApiException {
        String eventInstance = null;
        Integer limit = null;
        String resume = null;
        EventEventlistsExtended response = api.getEventEventlists(eventInstance, limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventSettingsTest() throws ApiException {
        EventSettings response = api.getEventSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all alert conditions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEventAlertConditionsTest() throws ApiException {
        String channels = null;
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        EventAlertConditionsExtended response = api.listEventAlertConditions(channels, sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all channels.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listEventChannelsTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        EventChannelsExtended response = api.listEventChannels(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the alert-condition
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventAlertConditionTest() throws ApiException {
        EventAlertCondition eventAlertCondition = null;
        String eventAlertConditionId = null;
        api.updateEventAlertCondition(eventAlertCondition, eventAlertConditionId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the channel.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventChannelTest() throws ApiException {
        EventChannel eventChannel = null;
        String eventChannelId = null;
        api.updateEventChannel(eventChannel, eventChannelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * modify eventgroup occurrence.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventEventgroupOccurrenceTest() throws ApiException {
        EventEventgroupOccurrence eventEventgroupOccurrence = null;
        String eventEventgroupOccurrenceId = null;
        api.updateEventEventgroupOccurrence(eventEventgroupOccurrence, eventEventgroupOccurrenceId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify all eventgroup occurrences, resolve or ignore all
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventEventgroupOccurrencesTest() throws ApiException {
        EventEventgroupOccurrence eventEventgroupOccurrences = null;
        api.updateEventEventgroupOccurrences(eventEventgroupOccurrences);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEventSettingsTest() throws ApiException {
        EventSettings eventSettings = null;
        api.updateEventSettings(eventSettings);

        // TODO: test validations
    }
    
}
