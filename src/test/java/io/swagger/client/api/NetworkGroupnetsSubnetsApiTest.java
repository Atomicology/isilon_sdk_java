/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.PoolsPoolInterfaces;
import io.swagger.client.model.PoolsPoolRule;
import io.swagger.client.model.PoolsPoolRuleCreateParams;
import io.swagger.client.model.PoolsPoolRules;
import io.swagger.client.model.PoolsPoolRulesExtended;
import io.swagger.client.model.PoolsPoolScResumeNode;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkGroupnetsSubnetsApi
 */
@Ignore
public class NetworkGroupnetsSubnetsApiTest {

    private final NetworkGroupnetsSubnetsApi api = new NetworkGroupnetsSubnetsApi();

    
    /**
     * 
     *
     * Rebalance IP addresses in specified pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPoolsPoolRebalanceIpTest() throws ApiException {
        Empty poolsPoolRebalanceIp = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        Empty response = api.createPoolsPoolRebalanceIp(poolsPoolRebalanceIp, groupnet, subnet, pool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPoolsPoolRuleTest() throws ApiException {
        PoolsPoolRuleCreateParams poolsPoolRule = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        CreateResponse response = api.createPoolsPoolRule(poolsPoolRule, groupnet, subnet, pool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Resume suspended nodes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPoolsPoolScResumeNodeTest() throws ApiException {
        PoolsPoolScResumeNode poolsPoolScResumeNode = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        Empty response = api.createPoolsPoolScResumeNode(poolsPoolScResumeNode, groupnet, subnet, pool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Suspend nodes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPoolsPoolScSuspendNodeTest() throws ApiException {
        PoolsPoolScResumeNode poolsPoolScSuspendNode = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        Empty response = api.createPoolsPoolScSuspendNode(poolsPoolScSuspendNode, groupnet, subnet, pool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a network rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePoolsPoolRuleTest() throws ApiException {
        String poolsPoolRuleId = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        api.deletePoolsPoolRule(poolsPoolRuleId, groupnet, subnet, pool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of interfaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoolsPoolInterfacesTest() throws ApiException {
        String groupnet = null;
        String subnet = null;
        String pool = null;
        String sort = null;
        String resume = null;
        Integer limit = null;
        String dir = null;
        String lnns = null;
        PoolsPoolInterfaces response = api.getPoolsPoolInterfaces(groupnet, subnet, pool, sort, resume, limit, dir, lnns);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single network rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPoolsPoolRuleTest() throws ApiException {
        String poolsPoolRuleId = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        PoolsPoolRules response = api.getPoolsPoolRule(poolsPoolRuleId, groupnet, subnet, pool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of network rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPoolsPoolRulesTest() throws ApiException {
        String groupnet = null;
        String subnet = null;
        String pool = null;
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        PoolsPoolRulesExtended response = api.listPoolsPoolRules(groupnet, subnet, pool, sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify a network rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePoolsPoolRuleTest() throws ApiException {
        PoolsPoolRule poolsPoolRule = null;
        String poolsPoolRuleId = null;
        String groupnet = null;
        String subnet = null;
        String pool = null;
        api.updatePoolsPoolRule(poolsPoolRule, poolsPoolRuleId, groupnet, subnet, pool);

        // TODO: test validations
    }
    
}
