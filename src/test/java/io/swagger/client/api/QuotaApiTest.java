/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateQuotaReportResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.LicenseLicense;
import io.swagger.client.model.QuotaNotification;
import io.swagger.client.model.QuotaNotificationCreateParams;
import io.swagger.client.model.QuotaNotifications;
import io.swagger.client.model.QuotaNotificationsExtended;
import io.swagger.client.model.QuotaQuota;
import io.swagger.client.model.QuotaQuotaCreateParams;
import io.swagger.client.model.QuotaQuotas;
import io.swagger.client.model.QuotaQuotasExtended;
import io.swagger.client.model.QuotaQuotasSummary;
import io.swagger.client.model.QuotaReports;
import io.swagger.client.model.ReportAbout;
import io.swagger.client.model.SettingsMappingExtended;
import io.swagger.client.model.SettingsMappingExtendedExtended;
import io.swagger.client.model.SettingsMappings;
import io.swagger.client.model.SettingsReports;
import io.swagger.client.model.SettingsReportsExtended;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuotaApi
 */
@Ignore
public class QuotaApiTest {

    private final QuotaApi api = new QuotaApi();

    
    /**
     * 
     *
     * Create a new quota.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQuotaQuotaTest() throws ApiException {
        QuotaQuotaCreateParams quotaQuota = null;
        String zone = null;
        CreateResponse response = api.createQuotaQuota(quotaQuota, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new report. The type of this report is &#39;manual&#39;; it is also sometimes called &#39;live&#39; or &#39;ad-hoc&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQuotaReportTest() throws ApiException {
        Empty quotaReport = null;
        CreateQuotaReportResponse response = api.createQuotaReport(quotaReport);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new rule. The new rule must not conflict with an existing rule (e.g. match both the type and domain fields).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSettingsMappingTest() throws ApiException {
        SettingsMappingExtendedExtended settingsMapping = null;
        CreateResponse response = api.createSettingsMapping(settingsMapping);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new global notification rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSettingsNotificationTest() throws ApiException {
        QuotaNotificationCreateParams settingsNotification = null;
        CreateResponse response = api.createSettingsNotification(settingsNotification);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the quota.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuotaQuotaTest() throws ApiException {
        String quotaQuotaId = null;
        api.deleteQuotaQuota(quotaQuotaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all or matching quotas.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuotaQuotasTest() throws ApiException {
        Boolean enforced = null;
        Boolean includeSnapshots = null;
        String zone = null;
        Boolean recursePathChildren = null;
        Boolean recursePathParents = null;
        String persona = null;
        String path = null;
        String type = null;
        api.deleteQuotaQuotas(enforced, includeSnapshots, zone, recursePathChildren, recursePathParents, persona, path, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuotaReportTest() throws ApiException {
        String quotaReportId = null;
        api.deleteQuotaReport(quotaReportId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the mapping.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsMappingTest() throws ApiException {
        String settingsMappingId = null;
        api.deleteSettingsMapping(settingsMappingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsMappingsTest() throws ApiException {
        api.deleteSettingsMappings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the notification rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsNotificationTest() throws ApiException {
        String settingsNotificationId = null;
        api.deleteSettingsNotification(settingsNotificationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsNotificationsTest() throws ApiException {
        api.deleteSettingsNotifications();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve license information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuotaLicenseTest() throws ApiException {
        LicenseLicense response = api.getQuotaLicense();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve quota information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuotaQuotaTest() throws ApiException {
        String quotaQuotaId = null;
        Boolean resolveNames = null;
        String zone = null;
        QuotaQuotas response = api.getQuotaQuota(quotaQuotaId, resolveNames, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return summary information about quotas.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuotaQuotasSummaryTest() throws ApiException {
        QuotaQuotasSummary response = api.getQuotaQuotasSummary();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve report data (XML) or contents (meta-data).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuotaReportTest() throws ApiException {
        String quotaReportId = null;
        Boolean contents = null;
        ReportAbout response = api.getQuotaReport(quotaReportId, contents);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the mapping information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsMappingTest() throws ApiException {
        String settingsMappingId = null;
        SettingsMappings response = api.getSettingsMapping(settingsMappingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve notification rule information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsNotificationTest() throws ApiException {
        String settingsNotificationId = null;
        QuotaNotifications response = api.getSettingsNotification(settingsNotificationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsReportsTest() throws ApiException {
        SettingsReports response = api.getSettingsReports();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all or matching quotas. Can also be used to retrieve quota state from existing reports. For any query argument not supplied, the default behavior is return all.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listQuotaQuotasTest() throws ApiException {
        Boolean enforced = null;
        Boolean includeSnapshots = null;
        String zone = null;
        String resume = null;
        Boolean recursePathChildren = null;
        Boolean resolveNames = null;
        Boolean recursePathParents = null;
        String persona = null;
        Integer limit = null;
        Boolean exceeded = null;
        String path = null;
        String type = null;
        String reportId = null;
        QuotaQuotasExtended response = api.listQuotaQuotas(enforced, includeSnapshots, zone, resume, recursePathChildren, resolveNames, recursePathParents, persona, limit, exceeded, path, type, reportId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all or matching reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listQuotaReportsTest() throws ApiException {
        String sort = null;
        String resume = null;
        String generated = null;
        Integer limit = null;
        String type = null;
        String dir = null;
        QuotaReports response = api.listQuotaReports(sort, resume, generated, limit, type, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsMappingsTest() throws ApiException {
        SettingsMappings response = api.listSettingsMappings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsNotificationsTest() throws ApiException {
        QuotaNotificationsExtended response = api.listSettingsNotifications();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify quota. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuotaQuotaTest() throws ApiException {
        QuotaQuota quotaQuota = null;
        String quotaQuotaId = null;
        api.updateQuotaQuota(quotaQuota, quotaQuotaId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the mapping.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsMappingTest() throws ApiException {
        SettingsMappingExtended settingsMapping = null;
        String settingsMappingId = null;
        api.updateSettingsMapping(settingsMapping, settingsMappingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsNotificationTest() throws ApiException {
        QuotaNotification settingsNotification = null;
        String settingsNotificationId = null;
        api.updateSettingsNotification(settingsNotification, settingsNotificationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsReportsTest() throws ApiException {
        SettingsReportsExtended settingsReports = null;
        api.updateSettingsReports(settingsReports);

        // TODO: test validations
    }
    
}
