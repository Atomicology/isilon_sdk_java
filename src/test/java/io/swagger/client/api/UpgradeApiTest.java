/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ClusterArchiveItem;
import io.swagger.client.model.ClusterAssessItem;
import io.swagger.client.model.ClusterFirmwareProgress;
import io.swagger.client.model.ClusterFirmwareStatus;
import io.swagger.client.model.ClusterFirmwareUpgradeItem;
import io.swagger.client.model.ClusterNodes;
import io.swagger.client.model.ClusterNodesExtended;
import io.swagger.client.model.ClusterPatchPatch;
import io.swagger.client.model.ClusterPatchPatches;
import io.swagger.client.model.ClusterPatchPatchesExtended;
import io.swagger.client.model.ClusterRetryLastActionItem;
import io.swagger.client.model.ClusterUpgrade;
import io.swagger.client.model.ClusterUpgradeItem;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.HardwareStartItem;
import io.swagger.client.model.HardwareStatus;
import io.swagger.client.model.HardwareStopItem;
import io.swagger.client.model.UpgradeCluster;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UpgradeApi
 */
@Ignore
public class UpgradeApiTest {

    private final UpgradeApi api = new UpgradeApi();

    
    /**
     * 
     *
     * Let system absorb any remaining or new nodes inside the existing upgrade.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterAddRemainingNodeTest() throws ApiException {
        Empty clusterAddRemainingNode = null;
        Empty response = api.createClusterAddRemainingNode(clusterAddRemainingNode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start an archive of an upgrade.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterArchiveItemTest() throws ApiException {
        ClusterArchiveItem clusterArchiveItem = null;
        Empty response = api.createClusterArchiveItem(clusterArchiveItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start upgrade assessment on cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterAssessItemTest() throws ApiException {
        ClusterAssessItem clusterAssessItem = null;
        Empty response = api.createClusterAssessItem(clusterAssessItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Commit the upgrade of a cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterCommitItemTest() throws ApiException {
        Empty clusterCommitItem = null;
        Empty response = api.createClusterCommitItem(clusterCommitItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start firmware upgrade assessment on cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterFirmwareAssessItemTest() throws ApiException {
        Empty clusterFirmwareAssessItem = null;
        Empty response = api.createClusterFirmwareAssessItem(clusterFirmwareAssessItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The settings necessary to start a firmware upgrade.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterFirmwareUpgradeItemTest() throws ApiException {
        ClusterFirmwareUpgradeItem clusterFirmwareUpgradeItem = null;
        Empty response = api.createClusterFirmwareUpgradeItem(clusterFirmwareUpgradeItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Abort the previous action performed by the patch system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterPatchAbortItemTest() throws ApiException {
        Empty clusterPatchAbortItem = null;
        Empty response = api.createClusterPatchAbortItem(clusterPatchAbortItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Install a patch.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterPatchPatchTest() throws ApiException {
        ClusterPatchPatch clusterPatchPatch = null;
        Boolean override = null;
        Boolean rolling = null;
        CreateResponse response = api.createClusterPatchPatch(clusterPatchPatch, override, rolling);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retry the last upgrade action, in-case the previous attempt failed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterRetryLastActionItemTest() throws ApiException {
        ClusterRetryLastActionItem clusterRetryLastActionItem = null;
        Empty response = api.createClusterRetryLastActionItem(clusterRetryLastActionItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Rollback the upgrade of a cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterRollbackItemTest() throws ApiException {
        Empty clusterRollbackItem = null;
        Empty response = api.createClusterRollbackItem(clusterRollbackItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The settings necessary to start an upgrade.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterUpgradeItemTest() throws ApiException {
        ClusterUpgradeItem clusterUpgradeItem = null;
        Empty response = api.createClusterUpgradeItem(clusterUpgradeItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start a hardware upgrade
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHardwareStartItemTest() throws ApiException {
        HardwareStartItem hardwareStartItem = null;
        api.createHardwareStartItem(hardwareStartItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Stop an in-progess hardware upgrade process
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHardwareStopItemTest() throws ApiException {
        HardwareStopItem hardwareStopItem = null;
        api.createHardwareStopItem(hardwareStopItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Uninstall a patch.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClusterPatchPatchTest() throws ApiException {
        String clusterPatchPatchId = null;
        Boolean override = null;
        Boolean rolling = null;
        api.deleteClusterPatchPatch(clusterPatchPatchId, override, rolling);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cluster wide firmware upgrade status info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterFirmwareProgressTest() throws ApiException {
        ClusterFirmwareProgress response = api.getClusterFirmwareProgress();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The firmware status for the cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterFirmwareStatusTest() throws ApiException {
        Boolean devices = null;
        Boolean _package = null;
        ClusterFirmwareStatus response = api.getClusterFirmwareStatus(devices, _package);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The node details useful during an upgrade or assessment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNodeTest() throws ApiException {
        Integer clusterNodeId = null;
        ClusterNodes response = api.getClusterNode(clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View information about nodes during an upgrade, rollback, or pre-upgrade assessment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNodesTest() throws ApiException {
        ClusterNodesExtended response = api.getClusterNodes();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single patch.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterPatchPatchTest() throws ApiException {
        String clusterPatchPatchId = null;
        Boolean local = null;
        String location = null;
        ClusterPatchPatches response = api.getClusterPatchPatch(clusterPatchPatchId, local, location);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View the status of hardware upgrades in progress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHardwareStatusTest() throws ApiException {
        HardwareStatus response = api.getHardwareStatus();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cluster wide upgrade status info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpgradeClusterTest() throws ApiException {
        UpgradeCluster response = api.getUpgradeCluster();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all patches.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listClusterPatchPatchesTest() throws ApiException {
        String sort = null;
        String resume = null;
        Integer limit = null;
        String location = null;
        Boolean local = null;
        String dir = null;
        ClusterPatchPatchesExtended response = api.listClusterPatchPatches(sort, resume, limit, location, local, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add nodes to a running upgrade.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterUpgradeTest() throws ApiException {
        ClusterUpgrade clusterUpgrade = null;
        api.updateClusterUpgrade(clusterUpgrade);

        // TODO: test validations
    }
    
}
