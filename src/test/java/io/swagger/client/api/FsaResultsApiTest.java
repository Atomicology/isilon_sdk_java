/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.HistogramStatBy;
import io.swagger.client.model.ResultDirectories;
import io.swagger.client.model.ResultHistogram;
import io.swagger.client.model.ResultTopDirs;
import io.swagger.client.model.ResultTopFiles;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FsaResultsApi
 */
@Ignore
public class FsaResultsApiTest {

    private final FsaResultsApi api = new FsaResultsApi();

    
    /**
     * 
     *
     * This resource retrieves a histogram breakout for an individual FSA result set. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistogramStatByTest() throws ApiException {
        String id = null;
        String stat = null;
        HistogramStatBy response = api.getHistogramStatBy(id, stat);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves a histogram breakout for an individual FSA result set. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistogramStatByBreakoutTest() throws ApiException {
        String histogramStatByBreakout = null;
        String id = null;
        String stat = null;
        String directoryFilter = null;
        String attributeFilter = null;
        String nodePoolFilter = null;
        String diskPoolFilter = null;
        String tierFilter = null;
        Integer compReport = null;
        Integer logSizeFilter = null;
        Integer physSizeFilter = null;
        Integer limit = null;
        String pathExtFilter = null;
        Integer ctimeFilter = null;
        Integer atimeFilter = null;
        HistogramStatBy response = api.getHistogramStatByBreakout(histogramStatByBreakout, id, stat, directoryFilter, attributeFilter, nodePoolFilter, diskPoolFilter, tierFilter, compReport, logSizeFilter, physSizeFilter, limit, pathExtFilter, ctimeFilter, atimeFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves directory information. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultDirectoriesTest() throws ApiException {
        String id = null;
        String sort = null;
        String path = null;
        Integer limit = null;
        Integer compReport = null;
        String dir = null;
        ResultDirectories response = api.getResultDirectories(id, sort, path, limit, compReport, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves directory information. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultDirectoryTest() throws ApiException {
        Integer resultDirectoryId = null;
        String id = null;
        String sort = null;
        Integer limit = null;
        Integer compReport = null;
        String dir = null;
        ResultDirectories response = api.getResultDirectory(resultDirectoryId, id, sort, limit, compReport, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultHistogramTest() throws ApiException {
        String id = null;
        ResultHistogram response = api.getResultHistogram(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultHistogramStatTest() throws ApiException {
        String resultHistogramStat = null;
        String id = null;
        String directoryFilter = null;
        String attributeFilter = null;
        String nodePoolFilter = null;
        String diskPoolFilter = null;
        String tierFilter = null;
        Integer compReport = null;
        Integer logSizeFilter = null;
        Integer physSizeFilter = null;
        String pathExtFilter = null;
        Integer ctimeFilter = null;
        Integer atimeFilter = null;
        ResultHistogram response = api.getResultHistogramStat(resultHistogramStat, id, directoryFilter, attributeFilter, nodePoolFilter, diskPoolFilter, tierFilter, compReport, logSizeFilter, physSizeFilter, pathExtFilter, ctimeFilter, atimeFilter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves the top directories. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultTopDirTest() throws ApiException {
        String resultTopDirId = null;
        String id = null;
        String sort = null;
        Integer start = null;
        Integer limit = null;
        Integer compReport = null;
        String dir = null;
        ResultTopDirs response = api.getResultTopDir(resultTopDirId, id, sort, start, limit, compReport, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves the top directories. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultTopDirsTest() throws ApiException {
        String id = null;
        ResultTopDirs response = api.getResultTopDirs(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves the top files. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultTopFileTest() throws ApiException {
        String resultTopFileId = null;
        String id = null;
        String sort = null;
        Integer start = null;
        Integer limit = null;
        Integer compReport = null;
        String dir = null;
        ResultTopFiles response = api.getResultTopFile(resultTopFileId, id, sort, start, limit, compReport, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This resource retrieves the top files. ID in the resource path is the result set ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResultTopFilesTest() throws ApiException {
        String id = null;
        ResultTopFiles response = api.getResultTopFiles(id);

        // TODO: test validations
    }
    
}
