/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AntivirusPolicies;
import io.swagger.client.model.AntivirusPoliciesExtended;
import io.swagger.client.model.AntivirusPolicy;
import io.swagger.client.model.AntivirusPolicyCreateParams;
import io.swagger.client.model.AntivirusQuarantine;
import io.swagger.client.model.AntivirusQuarantinePathParams;
import io.swagger.client.model.AntivirusScanItem;
import io.swagger.client.model.AntivirusServer;
import io.swagger.client.model.AntivirusServerCreateParams;
import io.swagger.client.model.AntivirusServers;
import io.swagger.client.model.AntivirusServersExtended;
import io.swagger.client.model.AntivirusSettings;
import io.swagger.client.model.AntivirusSettingsSettings;
import io.swagger.client.model.CreateAntivirusScanItemResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.ReportsScans;
import io.swagger.client.model.ReportsScansExtended;
import io.swagger.client.model.ReportsThreats;
import io.swagger.client.model.ReportsThreatsExtended;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AntivirusApi
 */
@Ignore
public class AntivirusApiTest {

    private final AntivirusApi api = new AntivirusApi();

    
    /**
     * 
     *
     * Create new antivirus scan policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAntivirusPolicyTest() throws ApiException {
        AntivirusPolicyCreateParams antivirusPolicy = null;
        CreateResponse response = api.createAntivirusPolicy(antivirusPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Manually scan a file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAntivirusScanItemTest() throws ApiException {
        AntivirusScanItem antivirusScanItem = null;
        CreateAntivirusScanItemResponse response = api.createAntivirusScanItem(antivirusScanItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create new antivirus servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAntivirusServerTest() throws ApiException {
        AntivirusServerCreateParams antivirusServer = null;
        CreateResponse response = api.createAntivirusServer(antivirusServer);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all antivirus scan policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAntivirusPoliciesTest() throws ApiException {
        api.deleteAntivirusPolicies();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete an antivirus scan policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAntivirusPolicyTest() throws ApiException {
        String antivirusPolicyId = null;
        api.deleteAntivirusPolicy(antivirusPolicyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete an antivirus server entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAntivirusServerTest() throws ApiException {
        String antivirusServerId = null;
        api.deleteAntivirusServer(antivirusServerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all antivirus servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAntivirusServersTest() throws ApiException {
        api.deleteAntivirusServers();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete one antivirus scan report, and all of its associated threat reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReportsScanTest() throws ApiException {
        String reportsScanId = null;
        api.deleteReportsScan(reportsScanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete antivirus scan reports, and any threat reports associated with those scans.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteReportsScansTest() throws ApiException {
        Integer age = null;
        api.deleteReportsScans(age);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one antivirus scan policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAntivirusPolicyTest() throws ApiException {
        String antivirusPolicyId = null;
        AntivirusPolicies response = api.getAntivirusPolicy(antivirusPolicyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the quarantine status of the file at the specified path.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAntivirusQuarantinePathTest() throws ApiException {
        String antivirusQuarantinePath = null;
        AntivirusQuarantine response = api.getAntivirusQuarantinePath(antivirusQuarantinePath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one antivirus server entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAntivirusServerTest() throws ApiException {
        String antivirusServerId = null;
        AntivirusServers response = api.getAntivirusServer(antivirusServerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the Antivirus settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAntivirusSettingsTest() throws ApiException {
        AntivirusSettings response = api.getAntivirusSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one antivirus scan report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportsScanTest() throws ApiException {
        String reportsScanId = null;
        ReportsScans response = api.getReportsScan(reportsScanId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List antivirus scan reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportsScansTest() throws ApiException {
        String sort = null;
        String status = null;
        String resume = null;
        Integer limit = null;
        String dir = null;
        String policyId = null;
        ReportsScansExtended response = api.getReportsScans(sort, status, resume, limit, dir, policyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve one antivirus threat report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportsThreatTest() throws ApiException {
        String reportsThreatId = null;
        ReportsThreats response = api.getReportsThreat(reportsThreatId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List antivirus threat reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReportsThreatsTest() throws ApiException {
        String sort = null;
        String scanId = null;
        String resume = null;
        Integer limit = null;
        String file = null;
        String remediation = null;
        String dir = null;
        ReportsThreatsExtended response = api.getReportsThreats(sort, scanId, resume, limit, file, remediation, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List antivirus scan policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAntivirusPoliciesTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        AntivirusPoliciesExtended response = api.listAntivirusPolicies(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List antivirus servers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAntivirusServersTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        AntivirusServersExtended response = api.listAntivirusServers(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify an antivirus scan policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAntivirusPolicyTest() throws ApiException {
        AntivirusPolicy antivirusPolicy = null;
        String antivirusPolicyId = null;
        api.updateAntivirusPolicy(antivirusPolicy, antivirusPolicyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAntivirusQuarantinePathTest() throws ApiException {
        AntivirusQuarantinePathParams antivirusQuarantinePathParams = null;
        String antivirusQuarantinePath = null;
        api.updateAntivirusQuarantinePath(antivirusQuarantinePathParams, antivirusQuarantinePath);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify an antivirus server entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAntivirusServerTest() throws ApiException {
        AntivirusServer antivirusServer = null;
        String antivirusServerId = null;
        api.updateAntivirusServer(antivirusServer, antivirusServerId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAntivirusSettingsTest() throws ApiException {
        AntivirusSettingsSettings antivirusSettings = null;
        api.updateAntivirusSettings(antivirusSettings);

        // TODO: test validations
    }
    
}
