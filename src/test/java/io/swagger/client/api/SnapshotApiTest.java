/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateSnapshotAliasResponse;
import io.swagger.client.model.CreateSnapshotChangelistResponse;
import io.swagger.client.model.CreateSnapshotRepstateResponse;
import io.swagger.client.model.CreateSnapshotScheduleResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.LicenseLicense;
import io.swagger.client.model.SnapshotAlias;
import io.swagger.client.model.SnapshotAliasCreateParams;
import io.swagger.client.model.SnapshotAliases;
import io.swagger.client.model.SnapshotAliasesExtended;
import io.swagger.client.model.SnapshotChangelists;
import io.swagger.client.model.SnapshotChangelistsExtended;
import io.swagger.client.model.SnapshotPending;
import io.swagger.client.model.SnapshotRepstates;
import io.swagger.client.model.SnapshotRepstatesExtended;
import io.swagger.client.model.SnapshotSchedule;
import io.swagger.client.model.SnapshotScheduleCreateParams;
import io.swagger.client.model.SnapshotSchedules;
import io.swagger.client.model.SnapshotSchedulesExtended;
import io.swagger.client.model.SnapshotSettings;
import io.swagger.client.model.SnapshotSettingsExtended;
import io.swagger.client.model.SnapshotSnapshot;
import io.swagger.client.model.SnapshotSnapshotCreateParams;
import io.swagger.client.model.SnapshotSnapshotExtended;
import io.swagger.client.model.SnapshotSnapshots;
import io.swagger.client.model.SnapshotSnapshotsExtended;
import io.swagger.client.model.SnapshotSnapshotsSummary;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SnapshotApi
 */
@Ignore
public class SnapshotApiTest {

    private final SnapshotApi api = new SnapshotApi();

    
    /**
     * 
     *
     * Create a new snapshot alias.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotAliasTest() throws ApiException {
        SnapshotAliasCreateParams snapshotAlias = null;
        CreateSnapshotAliasResponse response = api.createSnapshotAlias(snapshotAlias);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new changelist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotChangelistTest() throws ApiException {
        SnapshotChangelists snapshotChangelist = null;
        CreateSnapshotChangelistResponse response = api.createSnapshotChangelist(snapshotChangelist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new repstates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotRepstateTest() throws ApiException {
        SnapshotRepstates snapshotRepstate = null;
        CreateSnapshotRepstateResponse response = api.createSnapshotRepstate(snapshotRepstate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new schedule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotScheduleTest() throws ApiException {
        SnapshotScheduleCreateParams snapshotSchedule = null;
        CreateSnapshotScheduleResponse response = api.createSnapshotSchedule(snapshotSchedule);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSnapshotSnapshotTest() throws ApiException {
        SnapshotSnapshotCreateParams snapshotSnapshot = null;
        SnapshotSnapshotExtended response = api.createSnapshotSnapshot(snapshotSnapshot);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the snapshot alias
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotAliasTest() throws ApiException {
        String snapshotAliasId = null;
        api.deleteSnapshotAlias(snapshotAliasId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all or matching snapshot aliases.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotAliasesTest() throws ApiException {
        api.deleteSnapshotAliases();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the specified changelist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotChangelistTest() throws ApiException {
        String snapshotChangelistId = null;
        api.deleteSnapshotChangelist(snapshotChangelistId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the specified repstate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotRepstateTest() throws ApiException {
        String snapshotRepstateId = null;
        api.deleteSnapshotRepstate(snapshotRepstateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the schedule. This does not affect already created snapshots.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotScheduleTest() throws ApiException {
        String snapshotScheduleId = null;
        api.deleteSnapshotSchedule(snapshotScheduleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all snapshot schedules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotSchedulesTest() throws ApiException {
        api.deleteSnapshotSchedules();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotSnapshotTest() throws ApiException {
        String snapshotSnapshotId = null;
        api.deleteSnapshotSnapshot(snapshotSnapshotId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all or matching snapshots.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSnapshotSnapshotsTest() throws ApiException {
        String type = null;
        String schedule = null;
        api.deleteSnapshotSnapshots(type, schedule);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve snapshot alias information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotAliasTest() throws ApiException {
        String snapshotAliasId = null;
        SnapshotAliases response = api.getSnapshotAlias(snapshotAliasId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve basic information on a changelist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotChangelistTest() throws ApiException {
        String snapshotChangelistId = null;
        Integer limit = null;
        String resume = null;
        SnapshotChangelists response = api.getSnapshotChangelist(snapshotChangelistId, limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve license information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotLicenseTest() throws ApiException {
        LicenseLicense response = api.getSnapshotLicense();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return list of snapshots to be taken.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotPendingTest() throws ApiException {
        Integer limit = null;
        Integer begin = null;
        String schedule = null;
        Integer end = null;
        String resume = null;
        SnapshotPending response = api.getSnapshotPending(limit, begin, schedule, end, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve basic information on a repstate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotRepstateTest() throws ApiException {
        String snapshotRepstateId = null;
        Integer limit = null;
        String resume = null;
        SnapshotRepstates response = api.getSnapshotRepstate(snapshotRepstateId, limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the schedule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotScheduleTest() throws ApiException {
        String snapshotScheduleId = null;
        SnapshotSchedules response = api.getSnapshotSchedule(snapshotScheduleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotSettingsTest() throws ApiException {
        SnapshotSettings response = api.getSnapshotSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve snapshot information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotSnapshotTest() throws ApiException {
        String snapshotSnapshotId = null;
        SnapshotSnapshots response = api.getSnapshotSnapshot(snapshotSnapshotId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return summary information about snapshots.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSnapshotSnapshotsSummaryTest() throws ApiException {
        SnapshotSnapshotsSummary response = api.getSnapshotSnapshotsSummary();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all or matching snapshot aliases.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotAliasesTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        SnapshotAliasesExtended response = api.listSnapshotAliases(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all changelists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotChangelistsTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        SnapshotChangelistsExtended response = api.listSnapshotChangelists(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all repstates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotRepstatesTest() throws ApiException {
        Integer limit = null;
        String resume = null;
        SnapshotRepstatesExtended response = api.listSnapshotRepstates(limit, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all or matching schedules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotSchedulesTest() throws ApiException {
        String sort = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        SnapshotSchedulesExtended response = api.listSnapshotSchedules(sort, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all or matching snapshots.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSnapshotSnapshotsTest() throws ApiException {
        String sort = null;
        String schedule = null;
        String resume = null;
        String state = null;
        Integer limit = null;
        String type = null;
        String dir = null;
        SnapshotSnapshotsExtended response = api.listSnapshotSnapshots(sort, schedule, resume, state, limit, type, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify snapshot alias. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSnapshotAliasTest() throws ApiException {
        SnapshotAlias snapshotAlias = null;
        String snapshotAliasId = null;
        api.updateSnapshotAlias(snapshotAlias, snapshotAliasId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the schedule. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSnapshotScheduleTest() throws ApiException {
        SnapshotSchedule snapshotSchedule = null;
        String snapshotScheduleId = null;
        api.updateSnapshotSchedule(snapshotSchedule, snapshotScheduleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSnapshotSettingsTest() throws ApiException {
        SnapshotSettingsExtended snapshotSettings = null;
        api.updateSnapshotSettings(snapshotSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify snapshot. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSnapshotSnapshotTest() throws ApiException {
        SnapshotSnapshot snapshotSnapshot = null;
        String snapshotSnapshotId = null;
        api.updateSnapshotSnapshot(snapshotSnapshot, snapshotSnapshotId);

        // TODO: test validations
    }
    
}
