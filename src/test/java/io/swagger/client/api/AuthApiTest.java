/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AuthAccess;
import io.swagger.client.model.AuthCacheItem;
import io.swagger.client.model.AuthGroup;
import io.swagger.client.model.AuthGroupCreateParams;
import io.swagger.client.model.AuthGroups;
import io.swagger.client.model.AuthGroupsExtended;
import io.swagger.client.model.AuthId;
import io.swagger.client.model.AuthLdapTemplates;
import io.swagger.client.model.AuthLdapTemplatesExtended;
import io.swagger.client.model.AuthLogLevel;
import io.swagger.client.model.AuthLogLevelExtended;
import io.swagger.client.model.AuthNetgroups;
import io.swagger.client.model.AuthPrivileges;
import io.swagger.client.model.AuthRole;
import io.swagger.client.model.AuthRoleCreateParams;
import io.swagger.client.model.AuthRoles;
import io.swagger.client.model.AuthRolesExtended;
import io.swagger.client.model.AuthShells;
import io.swagger.client.model.AuthUser;
import io.swagger.client.model.AuthUserCreateParams;
import io.swagger.client.model.AuthUsers;
import io.swagger.client.model.AuthUsersExtended;
import io.swagger.client.model.AuthWellknowns;
import io.swagger.client.model.CreateAuthRefreshItemResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.MappingDump;
import io.swagger.client.model.MappingIdentities;
import io.swagger.client.model.MappingIdentityCreateParams;
import io.swagger.client.model.MappingImport;
import io.swagger.client.model.MappingUsersLookup;
import io.swagger.client.model.MappingUsersRules;
import io.swagger.client.model.MappingUsersRulesExtended;
import io.swagger.client.model.ProvidersAds;
import io.swagger.client.model.ProvidersAdsExtended;
import io.swagger.client.model.ProvidersAdsIdParams;
import io.swagger.client.model.ProvidersAdsItem;
import io.swagger.client.model.ProvidersFile;
import io.swagger.client.model.ProvidersFileIdParams;
import io.swagger.client.model.ProvidersFileItem;
import io.swagger.client.model.ProvidersKrb5;
import io.swagger.client.model.ProvidersKrb5Extended;
import io.swagger.client.model.ProvidersKrb5IdParams;
import io.swagger.client.model.ProvidersKrb5Item;
import io.swagger.client.model.ProvidersLdap;
import io.swagger.client.model.ProvidersLdapIdParams;
import io.swagger.client.model.ProvidersLdapItem;
import io.swagger.client.model.ProvidersLocal;
import io.swagger.client.model.ProvidersLocalIdParams;
import io.swagger.client.model.ProvidersNis;
import io.swagger.client.model.ProvidersNisExtended;
import io.swagger.client.model.ProvidersNisIdParams;
import io.swagger.client.model.ProvidersNisItem;
import io.swagger.client.model.ProvidersSummary;
import io.swagger.client.model.SettingsAcls;
import io.swagger.client.model.SettingsAclsExtended;
import io.swagger.client.model.SettingsGlobal;
import io.swagger.client.model.SettingsGlobalGlobalSettings;
import io.swagger.client.model.SettingsKrb5Defaults;
import io.swagger.client.model.SettingsKrb5DefaultsKrb5Settings;
import io.swagger.client.model.SettingsKrb5Domain;
import io.swagger.client.model.SettingsKrb5DomainCreateParams;
import io.swagger.client.model.SettingsKrb5Domains;
import io.swagger.client.model.SettingsKrb5Realm;
import io.swagger.client.model.SettingsKrb5RealmCreateParams;
import io.swagger.client.model.SettingsKrb5Realms;
import io.swagger.client.model.SettingsMapping;
import io.swagger.client.model.SettingsMappingMappingSettings;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * 
     *
     * Flush the Security Objects Cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthCacheItemTest() throws ApiException {
        AuthCacheItem authCacheItem = null;
        String zone = null;
        CreateResponse response = api.createAuthCacheItem(authCacheItem, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthGroupTest() throws ApiException {
        AuthGroupCreateParams authGroup = null;
        Boolean force = null;
        String zone = null;
        String provider = null;
        CreateResponse response = api.createAuthGroup(authGroup, force, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Refresh the authentication service configuration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthRefreshItemTest() throws ApiException {
        Empty authRefreshItem = null;
        CreateAuthRefreshItemResponse response = api.createAuthRefreshItem(authRefreshItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthRoleTest() throws ApiException {
        AuthRoleCreateParams authRole = null;
        CreateResponse response = api.createAuthRole(authRole);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthUserTest() throws ApiException {
        AuthUserCreateParams authUser = null;
        Boolean force = null;
        String zone = null;
        String provider = null;
        CreateResponse response = api.createAuthUser(authUser, force, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Manually set or modify a mapping between two personae.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMappingIdentityTest() throws ApiException {
        MappingIdentityCreateParams mappingIdentity = null;
        Boolean _2way = null;
        String zone = null;
        Boolean replace = null;
        Empty response = api.createMappingIdentity(mappingIdentity, _2way, zone, replace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Manually set or modify a mapping between two personae.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMappingIdentity_0Test() throws ApiException {
        Empty mappingIdentity = null;
        String mappingIdentityId = null;
        String type = null;
        String zone = null;
        MappingIdentities response = api.createMappingIdentity_0(mappingIdentity, mappingIdentityId, type, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new ADS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProvidersAdsItemTest() throws ApiException {
        ProvidersAdsItem providersAdsItem = null;
        CreateResponse response = api.createProvidersAdsItem(providersAdsItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new file provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProvidersFileItemTest() throws ApiException {
        ProvidersFileItem providersFileItem = null;
        CreateResponse response = api.createProvidersFileItem(providersFileItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new KRB5 provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProvidersKrb5ItemTest() throws ApiException {
        ProvidersKrb5Item providersKrb5Item = null;
        CreateResponse response = api.createProvidersKrb5Item(providersKrb5Item);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new LDAP provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProvidersLdapItemTest() throws ApiException {
        ProvidersLdapItem providersLdapItem = null;
        Boolean force = null;
        CreateResponse response = api.createProvidersLdapItem(providersLdapItem, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new NIS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProvidersNisItemTest() throws ApiException {
        ProvidersNisItem providersNisItem = null;
        CreateResponse response = api.createProvidersNisItem(providersNisItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new krb5 domain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSettingsKrb5DomainTest() throws ApiException {
        SettingsKrb5DomainCreateParams settingsKrb5Domain = null;
        CreateResponse response = api.createSettingsKrb5Domain(settingsKrb5Domain);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new krb5 realm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSettingsKrb5RealmTest() throws ApiException {
        SettingsKrb5RealmCreateParams settingsKrb5Realm = null;
        CreateResponse response = api.createSettingsKrb5Realm(settingsKrb5Realm);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthGroupTest() throws ApiException {
        String authGroupId = null;
        Boolean cached = null;
        String zone = null;
        String provider = null;
        api.deleteAuthGroup(authGroupId, cached, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Flush the groups cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthGroupsTest() throws ApiException {
        Boolean cached = null;
        String zone = null;
        String provider = null;
        api.deleteAuthGroups(cached, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthRoleTest() throws ApiException {
        String authRoleId = null;
        api.deleteAuthRole(authRoleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthUserTest() throws ApiException {
        String authUserId = null;
        Boolean cached = null;
        String zone = null;
        String provider = null;
        api.deleteAuthUser(authUserId, cached, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Flush the users cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthUsersTest() throws ApiException {
        Boolean cached = null;
        String zone = null;
        String provider = null;
        api.deleteAuthUsers(cached, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Flush the entire idmap cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMappingIdentitiesTest() throws ApiException {
        String filter = null;
        String zone = null;
        Boolean remove = null;
        api.deleteMappingIdentities(filter, zone, remove);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Flush the entire idmap cache.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMappingIdentityTest() throws ApiException {
        String mappingIdentityId = null;
        String zone = null;
        Boolean _2way = null;
        String target = null;
        Boolean remove = null;
        api.deleteMappingIdentity(mappingIdentityId, zone, _2way, target, remove);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the ADS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProvidersAdsByIdTest() throws ApiException {
        String providersAdsId = null;
        api.deleteProvidersAdsById(providersAdsId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the file provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProvidersFileByIdTest() throws ApiException {
        String providersFileId = null;
        api.deleteProvidersFileById(providersFileId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the KRB5 provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProvidersKrb5ByIdTest() throws ApiException {
        String providersKrb5Id = null;
        api.deleteProvidersKrb5ById(providersKrb5Id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the LDAP provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProvidersLdapByIdTest() throws ApiException {
        String providersLdapId = null;
        api.deleteProvidersLdapById(providersLdapId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the local provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProvidersLocalByIdTest() throws ApiException {
        String providersLocalId = null;
        api.deleteProvidersLocalById(providersLocalId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete the NIS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProvidersNisByIdTest() throws ApiException {
        String providersNisId = null;
        api.deleteProvidersNisById(providersNisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a krb5 domain.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsKrb5DomainTest() throws ApiException {
        String settingsKrb5DomainId = null;
        api.deleteSettingsKrb5Domain(settingsKrb5DomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a realm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSettingsKrb5RealmTest() throws ApiException {
        String settingsKrb5RealmId = null;
        api.deleteSettingsKrb5Realm(settingsKrb5RealmId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Determine user&#39;s access rights to a file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthAccessUserTest() throws ApiException {
        String authAccessUser = null;
        String path = null;
        String share = null;
        String zone = null;
        Boolean numeric = null;
        AuthAccess response = api.getAuthAccessUser(authAccessUser, path, share, zone, numeric);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the group information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthGroupTest() throws ApiException {
        String authGroupId = null;
        Boolean cached = null;
        Boolean resolveNames = null;
        Boolean queryMemberOf = null;
        String zone = null;
        String provider = null;
        AuthGroups response = api.getAuthGroup(authGroupId, cached, resolveNames, queryMemberOf, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the current security token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthIdTest() throws ApiException {
        AuthId response = api.getAuthId();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the LDAP provider template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthLdapTemplateTest() throws ApiException {
        String authLdapTemplateId = null;
        AuthLdapTemplates response = api.getAuthLdapTemplate(authLdapTemplateId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all LDAP provider templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthLdapTemplatesTest() throws ApiException {
        AuthLdapTemplatesExtended response = api.getAuthLdapTemplates();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the current authentications service and netlogon logging level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthLogLevelTest() throws ApiException {
        AuthLogLevel response = api.getAuthLogLevel();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the user information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthNetgroupTest() throws ApiException {
        String authNetgroupId = null;
        Boolean ignoreErrors = null;
        Boolean recursive = null;
        String zone = null;
        String provider = null;
        AuthNetgroups response = api.getAuthNetgroup(authNetgroupId, ignoreErrors, recursive, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all privileges.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthPrivilegesTest() throws ApiException {
        AuthPrivileges response = api.getAuthPrivileges();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the role information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthRoleTest() throws ApiException {
        String authRoleId = null;
        Boolean resolveNames = null;
        AuthRoles response = api.getAuthRole(authRoleId, resolveNames);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all shells.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthShellsTest() throws ApiException {
        AuthShells response = api.getAuthShells();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the user information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthUserTest() throws ApiException {
        String authUserId = null;
        Boolean cached = null;
        Boolean resolveNames = null;
        Boolean queryMemberOf = null;
        String zone = null;
        String provider = null;
        AuthUsers response = api.getAuthUser(authUserId, cached, resolveNames, queryMemberOf, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the wellknown persona.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthWellknownTest() throws ApiException {
        String authWellknownId = null;
        String scope = null;
        AuthWellknowns response = api.getAuthWellknown(authWellknownId, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all wellknown personas.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthWellknownsTest() throws ApiException {
        AuthWellknowns response = api.getAuthWellknowns();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMappingDumpTest() throws ApiException {
        Boolean nocreate = null;
        String zone = null;
        MappingDump response = api.getMappingDump(nocreate, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMappingIdentityTest() throws ApiException {
        String mappingIdentityId = null;
        Boolean nocreate = null;
        String zone = null;
        MappingIdentities response = api.getMappingIdentity(mappingIdentityId, nocreate, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the user information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMappingUsersLookupTest() throws ApiException {
        Integer primaryGid = null;
        Integer uid = null;
        String zone = null;
        List<Integer> gid = null;
        String user = null;
        String kerberosPrincipal = null;
        MappingUsersLookup response = api.getMappingUsersLookup(primaryGid, uid, zone, gid, user, kerberosPrincipal);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the user mapping rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMappingUsersRulesTest() throws ApiException {
        String zone = null;
        MappingUsersRules response = api.getMappingUsersRules(zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the ADS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersAdsByIdTest() throws ApiException {
        String providersAdsId = null;
        String scope = null;
        ProvidersAds response = api.getProvidersAdsById(providersAdsId, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the file provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersFileByIdTest() throws ApiException {
        String providersFileId = null;
        String scope = null;
        ProvidersFile response = api.getProvidersFileById(providersFileId, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the KRB5 provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersKrb5ByIdTest() throws ApiException {
        String providersKrb5Id = null;
        String scope = null;
        ProvidersKrb5 response = api.getProvidersKrb5ById(providersKrb5Id, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the LDAP provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersLdapByIdTest() throws ApiException {
        String providersLdapId = null;
        String scope = null;
        ProvidersLdap response = api.getProvidersLdapById(providersLdapId, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all local providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersLocalTest() throws ApiException {
        String scope = null;
        ProvidersLocal response = api.getProvidersLocal(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the local provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersLocalByIdTest() throws ApiException {
        String providersLocalId = null;
        String scope = null;
        ProvidersLocal response = api.getProvidersLocalById(providersLocalId, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the NIS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersNisByIdTest() throws ApiException {
        String providersNisId = null;
        String scope = null;
        ProvidersNis response = api.getProvidersNisById(providersNisId, scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the summary information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersSummaryTest() throws ApiException {
        String groupnet = null;
        String zone = null;
        ProvidersSummary response = api.getProvidersSummary(groupnet, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the ACL policy settings and preset configurations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsAclsTest() throws ApiException {
        String preset = null;
        SettingsAcls response = api.getSettingsAcls(preset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the global settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsGlobalTest() throws ApiException {
        String scope = null;
        String zone = null;
        SettingsGlobal response = api.getSettingsGlobal(scope, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the krb5 settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsKrb5DefaultsTest() throws ApiException {
        SettingsKrb5Defaults response = api.getSettingsKrb5Defaults();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View the krb5 domain settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsKrb5DomainTest() throws ApiException {
        String settingsKrb5DomainId = null;
        SettingsKrb5Domains response = api.getSettingsKrb5Domain(settingsKrb5DomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the krb5 settings for realms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsKrb5RealmTest() throws ApiException {
        String settingsKrb5RealmId = null;
        SettingsKrb5Realms response = api.getSettingsKrb5Realm(settingsKrb5RealmId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the mapping settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSettingsMappingTest() throws ApiException {
        String scope = null;
        String zone = null;
        SettingsMapping response = api.getSettingsMapping(scope, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthGroupsTest() throws ApiException {
        String domain = null;
        String zone = null;
        String resume = null;
        Boolean cached = null;
        Boolean resolveNames = null;
        String filter = null;
        Integer limit = null;
        String provider = null;
        Boolean queryMemberOf = null;
        AuthGroupsExtended response = api.listAuthGroups(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all roles.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthRolesTest() throws ApiException {
        String sort = null;
        Boolean resolveNames = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        AuthRolesExtended response = api.listAuthRoles(sort, resolveNames, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthUsersTest() throws ApiException {
        String domain = null;
        String zone = null;
        String resume = null;
        Boolean cached = null;
        Boolean resolveNames = null;
        String filter = null;
        Integer limit = null;
        String provider = null;
        Boolean queryMemberOf = null;
        AuthUsersExtended response = api.listAuthUsers(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all ADS providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProvidersAdsTest() throws ApiException {
        String scope = null;
        ProvidersAdsExtended response = api.listProvidersAds(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all file providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProvidersFileTest() throws ApiException {
        String scope = null;
        ProvidersFile response = api.listProvidersFile(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all KRB5 providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProvidersKrb5Test() throws ApiException {
        String scope = null;
        ProvidersKrb5Extended response = api.listProvidersKrb5(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all LDAP providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProvidersLdapTest() throws ApiException {
        String scope = null;
        ProvidersLdap response = api.listProvidersLdap(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all NIS providers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProvidersNisTest() throws ApiException {
        String scope = null;
        ProvidersNisExtended response = api.listProvidersNis(scope);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the krb5 settings for domains.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsKrb5DomainsTest() throws ApiException {
        SettingsKrb5Domains response = api.listSettingsKrb5Domains();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the krb5 settings for realms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSettingsKrb5RealmsTest() throws ApiException {
        SettingsKrb5Realms response = api.listSettingsKrb5Realms();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAuthGroupTest() throws ApiException {
        AuthGroup authGroup = null;
        String authGroupId = null;
        Boolean force = null;
        String zone = null;
        String provider = null;
        api.updateAuthGroup(authGroup, authGroupId, force, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the current authentication service and netlogon logging level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAuthLogLevelTest() throws ApiException {
        AuthLogLevelExtended authLogLevel = null;
        api.updateAuthLogLevel(authLogLevel);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the role.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAuthRoleTest() throws ApiException {
        AuthRole authRole = null;
        String authRoleId = null;
        api.updateAuthRole(authRole, authRoleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAuthUserTest() throws ApiException {
        AuthUser authUser = null;
        String authUserId = null;
        Boolean force = null;
        String zone = null;
        String provider = null;
        api.updateAuthUser(authUser, authUserId, force, zone, provider);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set or update a list of mappings between two personae.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMappingImportTest() throws ApiException {
        MappingImport mappingImport = null;
        String zone = null;
        Boolean replace = null;
        api.updateMappingImport(mappingImport, zone, replace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the user mapping rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMappingUsersRulesTest() throws ApiException {
        MappingUsersRulesExtended mappingUsersRules = null;
        String zone = null;
        api.updateMappingUsersRules(mappingUsersRules, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the ADS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvidersAdsByIdTest() throws ApiException {
        ProvidersAdsIdParams providersAdsIdParams = null;
        String providersAdsId = null;
        api.updateProvidersAdsById(providersAdsIdParams, providersAdsId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the file provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvidersFileByIdTest() throws ApiException {
        ProvidersFileIdParams providersFileIdParams = null;
        String providersFileId = null;
        api.updateProvidersFileById(providersFileIdParams, providersFileId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the KRB5 provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvidersKrb5ByIdTest() throws ApiException {
        ProvidersKrb5IdParams providersKrb5IdParams = null;
        String providersKrb5Id = null;
        api.updateProvidersKrb5ById(providersKrb5IdParams, providersKrb5Id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the LDAP provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvidersLdapByIdTest() throws ApiException {
        ProvidersLdapIdParams providersLdapIdParams = null;
        String providersLdapId = null;
        Boolean force = null;
        api.updateProvidersLdapById(providersLdapIdParams, providersLdapId, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the local provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvidersLocalByIdTest() throws ApiException {
        ProvidersLocalIdParams providersLocalIdParams = null;
        String providersLocalId = null;
        api.updateProvidersLocalById(providersLocalIdParams, providersLocalId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the NIS provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProvidersNisByIdTest() throws ApiException {
        ProvidersNisIdParams providersNisIdParams = null;
        String providersNisId = null;
        api.updateProvidersNisById(providersNisIdParams, providersNisId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify cluster ACL policy settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsAclsTest() throws ApiException {
        SettingsAclsExtended settingsAcls = null;
        api.updateSettingsAcls(settingsAcls);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the global settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsGlobalTest() throws ApiException {
        SettingsGlobalGlobalSettings settingsGlobal = null;
        String zone = null;
        api.updateSettingsGlobal(settingsGlobal, zone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the krb5 settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsKrb5DefaultsTest() throws ApiException {
        SettingsKrb5DefaultsKrb5Settings settingsKrb5Defaults = null;
        api.updateSettingsKrb5Defaults(settingsKrb5Defaults);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the krb5 domain settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsKrb5DomainTest() throws ApiException {
        SettingsKrb5Domain settingsKrb5Domain = null;
        String settingsKrb5DomainId = null;
        api.updateSettingsKrb5Domain(settingsKrb5Domain, settingsKrb5DomainId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the krb5 realm settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsKrb5RealmTest() throws ApiException {
        SettingsKrb5Realm settingsKrb5Realm = null;
        String settingsKrb5RealmId = null;
        api.updateSettingsKrb5Realm(settingsKrb5Realm, settingsKrb5RealmId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the mapping settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSettingsMappingTest() throws ApiException {
        SettingsMappingMappingSettings settingsMapping = null;
        String zone = null;
        api.updateSettingsMapping(settingsMapping, zone);

        // TODO: test validations
    }
    
}
