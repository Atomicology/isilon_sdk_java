/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.DrivesDriveFirmware;
import io.swagger.client.model.DrivesDriveFirmwareUpdate;
import io.swagger.client.model.DrivesDriveFirmwareUpdateItem;
import io.swagger.client.model.DrivesDriveFormatItem;
import io.swagger.client.model.DrivesDrivePurposeItem;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.NodeDriveconfig;
import io.swagger.client.model.NodeDriveconfigExtended;
import io.swagger.client.model.NodeDrives;
import io.swagger.client.model.NodeDrivesPurposelist;
import io.swagger.client.model.NodeHardware;
import io.swagger.client.model.NodeHardwareFast;
import io.swagger.client.model.NodePartitions;
import io.swagger.client.model.NodeSensors;
import io.swagger.client.model.NodeSleds;
import io.swagger.client.model.NodeState;
import io.swagger.client.model.NodeStateReadonly;
import io.swagger.client.model.NodeStateReadonlyExtended;
import io.swagger.client.model.NodeStateServicelight;
import io.swagger.client.model.NodeStateServicelightExtended;
import io.swagger.client.model.NodeStateSmartfail;
import io.swagger.client.model.NodeStateSmartfailExtended;
import io.swagger.client.model.NodeStatus;
import io.swagger.client.model.NodeStatusBatterystatus;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClusterNodesApi
 */
@Ignore
public class ClusterNodesApiTest {

    private final ClusterNodesApi api = new ClusterNodesApi();

    
    /**
     * 
     *
     * Add a drive to a node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDriveAddItemTest() throws ApiException {
        Empty drivesDriveAddItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDriveAddItem(drivesDriveAddItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start a drive firmware update.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDriveFirmwareUpdateItemTest() throws ApiException {
        DrivesDriveFirmwareUpdateItem drivesDriveFirmwareUpdateItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDriveFirmwareUpdateItem(drivesDriveFirmwareUpdateItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Format a drive for use by OneFS.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDriveFormatItemTest() throws ApiException {
        DrivesDriveFormatItem drivesDriveFormatItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDriveFormatItem(drivesDriveFormatItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Assign a drive to a specific use case.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDrivePurposeItemTest() throws ApiException {
        DrivesDrivePurposeItem drivesDrivePurposeItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDrivePurposeItem(drivesDrivePurposeItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a drive from use by OneFS.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDriveSmartfailItemTest() throws ApiException {
        Empty drivesDriveSmartfailItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDriveSmartfailItem(drivesDriveSmartfailItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Stop restriping from a smartfailing drive.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDriveStopfailItemTest() throws ApiException {
        Empty drivesDriveStopfailItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDriveStopfailItem(drivesDriveStopfailItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Temporarily remove a drive from use by OneFS.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDrivesDriveSuspendItemTest() throws ApiException {
        Empty drivesDriveSuspendItem = null;
        Integer lnn = null;
        String driveid = null;
        Empty response = api.createDrivesDriveSuspendItem(drivesDriveSuspendItem, lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Reboot the node specified by &lt;LNN&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeRebootItemTest() throws ApiException {
        Empty nodeRebootItem = null;
        Integer lnn = null;
        Boolean force = null;
        Empty response = api.createNodeRebootItem(nodeRebootItem, lnn, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Shutdown the node specified by &lt;LNN&gt;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeShutdownItemTest() throws ApiException {
        Empty nodeShutdownItem = null;
        Integer lnn = null;
        Boolean force = null;
        Empty response = api.createNodeShutdownItem(nodeShutdownItem, lnn, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve drive firmware information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDrivesDriveFirmwareTest() throws ApiException {
        Integer lnn = null;
        String driveid = null;
        DrivesDriveFirmware response = api.getDrivesDriveFirmware(lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve drive information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeDriveTest() throws ApiException {
        String nodeDriveId = null;
        Integer lnn = null;
        BigDecimal timeout = null;
        NodeDrives response = api.getNodeDrive(nodeDriveId, lnn, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a node&#39;s drive subsystem XML configuration file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeDriveconfigTest() throws ApiException {
        Integer lnn = null;
        BigDecimal timeout = null;
        NodeDriveconfig response = api.getNodeDriveconfig(lnn, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List the drives on this node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeDrivesTest() throws ApiException {
        Integer lnn = null;
        BigDecimal timeout = null;
        NodeDrives response = api.getNodeDrives(lnn, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists the available purposes for drives in this node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeDrivesPurposelistTest() throws ApiException {
        Integer lnn = null;
        NodeDrivesPurposelist response = api.getNodeDrivesPurposelist(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node hardware identity information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeHardwareTest() throws ApiException {
        Integer lnn = null;
        BigDecimal timeout = null;
        NodeHardware response = api.getNodeHardware(lnn, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Quickly retrieve a subset of node hardware identity information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeHardwareFastTest() throws ApiException {
        Integer lnn = null;
        NodeHardwareFast response = api.getNodeHardwareFast(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node partition information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodePartitionsTest() throws ApiException {
        Integer lnn = null;
        NodePartitions response = api.getNodePartitions(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node sensor information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeSensorsTest() throws ApiException {
        Integer lnn = null;
        NodeSensors response = api.getNodeSensors(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeSledTest() throws ApiException {
        String nodeSledId = null;
        Integer lnn = null;
        BigDecimal timeout = null;
        NodeSleds response = api.getNodeSled(nodeSledId, lnn, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get detailed information for all sleds in this node. Equivalent to /5/cluster/nodes/&lt;lnn&gt;/sleds/all.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeSledsTest() throws ApiException {
        Integer lnn = null;
        BigDecimal timeout = null;
        NodeSleds response = api.getNodeSleds(lnn, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node state information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeStateTest() throws ApiException {
        Integer lnn = null;
        NodeState response = api.getNodeState(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node readonly state information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeStateReadonlyTest() throws ApiException {
        Integer lnn = null;
        NodeStateReadonly response = api.getNodeStateReadonly(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node service light state information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeStateServicelightTest() throws ApiException {
        Integer lnn = null;
        NodeStateServicelight response = api.getNodeStateServicelight(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node smartfail state information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeStateSmartfailTest() throws ApiException {
        Integer lnn = null;
        NodeStateSmartfail response = api.getNodeStateSmartfail(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node status information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeStatusTest() throws ApiException {
        Integer lnn = null;
        NodeStatus response = api.getNodeStatus(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node battery status information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeStatusBatterystatusTest() throws ApiException {
        Integer lnn = null;
        NodeStatusBatterystatus response = api.getNodeStatusBatterystatus(lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve firmware update information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDrivesDriveFirmwareUpdateTest() throws ApiException {
        Integer lnn = null;
        String driveid = null;
        DrivesDriveFirmwareUpdate response = api.listDrivesDriveFirmwareUpdate(lnn, driveid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify a node&#39;s drive subsystem XML configuration file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeDriveconfigTest() throws ApiException {
        NodeDriveconfigExtended nodeDriveconfig = null;
        Integer lnn = null;
        api.updateNodeDriveconfig(nodeDriveconfig, lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more node readonly state settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeStateReadonlyTest() throws ApiException {
        NodeStateReadonlyExtended nodeStateReadonly = null;
        Integer lnn = null;
        api.updateNodeStateReadonly(nodeStateReadonly, lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more node service light state settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeStateServicelightTest() throws ApiException {
        NodeStateServicelightExtended nodeStateServicelight = null;
        Integer lnn = null;
        api.updateNodeStateServicelight(nodeStateServicelight, lnn);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify smartfail state of the node.  Only the &#39;smartfailed&#39; body member has any effect on node smartfail state.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeStateSmartfailTest() throws ApiException {
        NodeStateSmartfailExtended nodeStateSmartfail = null;
        Integer lnn = null;
        api.updateNodeStateSmartfail(nodeStateSmartfail, lnn);

        // TODO: test validations
    }
    
}
