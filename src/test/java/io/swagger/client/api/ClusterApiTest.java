/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.math.BigDecimal;
import io.swagger.client.model.ClusterAddNodeItem;
import io.swagger.client.model.ClusterConfig;
import io.swagger.client.model.ClusterEmail;
import io.swagger.client.model.ClusterEmailExtended;
import io.swagger.client.model.ClusterIdentity;
import io.swagger.client.model.ClusterNode;
import io.swagger.client.model.ClusterNodesAvailable;
import io.swagger.client.model.ClusterNodesExtendedExtended;
import io.swagger.client.model.ClusterNodesExtendedExtendedExtended;
import io.swagger.client.model.ClusterOwner;
import io.swagger.client.model.ClusterStatfs;
import io.swagger.client.model.ClusterTime;
import io.swagger.client.model.ClusterTimeExtended;
import io.swagger.client.model.ClusterTimezone;
import io.swagger.client.model.ClusterTimezoneExtended;
import io.swagger.client.model.ClusterVersion;
import io.swagger.client.model.DiagnosticsGatherSettings;
import io.swagger.client.model.DiagnosticsGatherSettingsExtended;
import io.swagger.client.model.DiagnosticsGatherStatus;
import io.swagger.client.model.DiagnosticsNetloggerSettings;
import io.swagger.client.model.DiagnosticsNetloggerStatus;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.TimezoneRegionTimezone;
import io.swagger.client.model.TimezoneRegions;
import io.swagger.client.model.TimezoneSettings;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClusterApi
 */
@Ignore
public class ClusterApiTest {

    private final ClusterApi api = new ClusterApi();

    
    /**
     * 
     *
     * Serial number and arguments of node to add.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createClusterAddNodeItemTest() throws ApiException {
        ClusterAddNodeItem clusterAddNodeItem = null;
        Empty response = api.createClusterAddNodeItem(clusterAddNodeItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start a new gather
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiagnosticsGatherStartItemTest() throws ApiException {
        DiagnosticsGatherSettingsExtended diagnosticsGatherStartItem = null;
        Empty response = api.createDiagnosticsGatherStartItem(diagnosticsGatherStartItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Stop a running gather
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiagnosticsGatherStopItemTest() throws ApiException {
        Empty diagnosticsGatherStopItem = null;
        Empty response = api.createDiagnosticsGatherStopItem(diagnosticsGatherStopItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start a new packet caputre
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiagnosticsNetloggerStartItemTest() throws ApiException {
        DiagnosticsNetloggerSettings diagnosticsNetloggerStartItem = null;
        Empty response = api.createDiagnosticsNetloggerStartItem(diagnosticsNetloggerStartItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Stop a running packet capture
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDiagnosticsNetloggerStopItemTest() throws ApiException {
        Empty diagnosticsNetloggerStopItem = null;
        Empty response = api.createDiagnosticsNetloggerStopItem(diagnosticsNetloggerStopItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the cluster information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterConfigTest() throws ApiException {
        ClusterConfig response = api.getClusterConfig();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the cluster email notification settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterEmailTest() throws ApiException {
        ClusterEmail response = api.getClusterEmail();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the cluster IP addresses including IPV4 and IPV6.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterExternalIpsTest() throws ApiException {
        List<String> response = api.getClusterExternalIps();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the login information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterIdentityTest() throws ApiException {
        ClusterIdentity response = api.getClusterIdentity();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNodeTest() throws ApiException {
        Integer clusterNodeId = null;
        BigDecimal timeout = null;
        ClusterNodesExtendedExtended response = api.getClusterNode(clusterNodeId, timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List the nodes on this cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNodesTest() throws ApiException {
        BigDecimal timeout = null;
        ClusterNodesExtendedExtendedExtended response = api.getClusterNodes(timeout);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all nodes that are available to add to this cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterNodesAvailableTest() throws ApiException {
        ClusterNodesAvailable response = api.getClusterNodesAvailable();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the cluster contact info settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterOwnerTest() throws ApiException {
        ClusterOwner response = api.getClusterOwner();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the filesystem statistics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterStatfsTest() throws ApiException {
        ClusterStatfs response = api.getClusterStatfs();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the current time as reported by each node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterTimeTest() throws ApiException {
        ClusterTime response = api.getClusterTime();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the cluster timezone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterTimezoneTest() throws ApiException {
        ClusterTimezone response = api.getClusterTimezone();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the OneFS version as reported by each node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClusterVersionTest() throws ApiException {
        ClusterVersion response = api.getClusterVersion();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the status of isi_gather_info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiagnosticsGatherTest() throws ApiException {
        DiagnosticsGatherStatus response = api.getDiagnosticsGather();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the default options for isi_gather_info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiagnosticsGatherSettingsTest() throws ApiException {
        DiagnosticsGatherSettings response = api.getDiagnosticsGatherSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the status of isi_gather_info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiagnosticsGatherStatusTest() throws ApiException {
        DiagnosticsGatherStatus response = api.getDiagnosticsGatherStatus();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the status of isi_netlogger.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiagnosticsNetloggerTest() throws ApiException {
        DiagnosticsNetloggerStatus response = api.getDiagnosticsNetlogger();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the default options for isi_netlogger.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiagnosticsNetloggerSettingsTest() throws ApiException {
        DiagnosticsNetloggerSettings response = api.getDiagnosticsNetloggerSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the status of isi_netlogger.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiagnosticsNetloggerStatusTest() throws ApiException {
        DiagnosticsNetloggerStatus response = api.getDiagnosticsNetloggerStatus();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List timezone regions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTimezoneRegionTest() throws ApiException {
        String timezoneRegionId = null;
        String sort = null;
        String resume = null;
        Boolean showAll = null;
        Boolean dstReset = null;
        Integer limit = null;
        String dir = null;
        TimezoneRegions response = api.getTimezoneRegion(timezoneRegionId, sort, resume, showAll, dstReset, limit, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the cluster timezone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTimezoneSettingsTest() throws ApiException {
        TimezoneSettings response = api.getTimezoneSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the cluster email notification settings.  All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterEmailTest() throws ApiException {
        ClusterEmailExtended clusterEmail = null;
        api.updateClusterEmail(clusterEmail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more node settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterNodeTest() throws ApiException {
        ClusterNode clusterNode = null;
        Integer clusterNodeId = null;
        api.updateClusterNode(clusterNode, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the cluster contact info settings.  All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterOwnerTest() throws ApiException {
        ClusterOwner clusterOwner = null;
        api.updateClusterOwner(clusterOwner);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set cluster time.  Time will mostly be synchronized across nodes, but there may be slight drift.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterTimeTest() throws ApiException {
        ClusterTimeExtended clusterTime = null;
        api.updateClusterTime(clusterTime);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set a new timezone for the cluster.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClusterTimezoneTest() throws ApiException {
        ClusterTimezoneExtended clusterTimezone = null;
        api.updateClusterTimezone(clusterTimezone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the default options for isi_gather_info.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDiagnosticsGatherSettingsTest() throws ApiException {
        DiagnosticsGatherSettingsExtended diagnosticsGatherSettings = null;
        api.updateDiagnosticsGatherSettings(diagnosticsGatherSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set the default options for isi_netlogger.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDiagnosticsNetloggerSettingsTest() throws ApiException {
        DiagnosticsNetloggerSettings diagnosticsNetloggerSettings = null;
        api.updateDiagnosticsNetloggerSettings(diagnosticsNetloggerSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the cluster timezone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTimezoneSettingsTest() throws ApiException {
        TimezoneRegionTimezone timezoneSettings = null;
        api.updateTimezoneSettings(timezoneSettings);

        // TODO: test validations
    }
    
}
