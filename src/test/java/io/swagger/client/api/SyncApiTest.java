/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.CreateSyncReportsRotateItemResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.HistoryFile;
import io.swagger.client.model.LicenseLicense;
import io.swagger.client.model.SyncJob;
import io.swagger.client.model.SyncJobCreateParams;
import io.swagger.client.model.SyncJobs;
import io.swagger.client.model.SyncJobsExtended;
import io.swagger.client.model.SyncPolicies;
import io.swagger.client.model.SyncPoliciesExtended;
import io.swagger.client.model.SyncPolicy;
import io.swagger.client.model.SyncPolicyCreateParams;
import io.swagger.client.model.SyncReports;
import io.swagger.client.model.SyncReportsExtended;
import io.swagger.client.model.SyncReportsRotate;
import io.swagger.client.model.SyncRule;
import io.swagger.client.model.SyncRuleCreateParams;
import io.swagger.client.model.SyncRules;
import io.swagger.client.model.SyncRulesExtended;
import io.swagger.client.model.SyncSettings;
import io.swagger.client.model.SyncSettingsExtended;
import io.swagger.client.model.TargetPolicies;
import io.swagger.client.model.TargetPoliciesExtended;
import io.swagger.client.model.TargetReports;
import io.swagger.client.model.TargetReportsExtended;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SyncApi
 */
@Ignore
public class SyncApiTest {

    private final SyncApi api = new SyncApi();

    
    /**
     * 
     *
     * Start a SyncIQ job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyncJobTest() throws ApiException {
        SyncJobCreateParams syncJob = null;
        CreateResponse response = api.createSyncJob(syncJob);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a SyncIQ policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyncPolicyTest() throws ApiException {
        SyncPolicyCreateParams syncPolicy = null;
        CreateResponse response = api.createSyncPolicy(syncPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Rotate the records in the database(s).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyncReportsRotateItemTest() throws ApiException {
        Empty syncReportsRotateItem = null;
        CreateSyncReportsRotateItemResponse response = api.createSyncReportsRotateItem(syncReportsRotateItem);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new SyncIQ performance rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSyncRuleTest() throws ApiException {
        SyncRuleCreateParams syncRule = null;
        CreateResponse response = api.createSyncRule(syncRule);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all SyncIQ policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSyncPoliciesTest() throws ApiException {
        Boolean localOnly = null;
        Boolean force = null;
        api.deleteSyncPolicies(localOnly, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a single SyncIQ policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSyncPolicyTest() throws ApiException {
        String syncPolicyId = null;
        Boolean localOnly = null;
        Boolean force = null;
        api.deleteSyncPolicy(syncPolicyId, localOnly, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a single SyncIQ performance rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSyncRuleTest() throws ApiException {
        String syncRuleId = null;
        api.deleteSyncRule(syncRuleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all SyncIQ performance rules or all rules of a specified type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSyncRulesTest() throws ApiException {
        String type = null;
        api.deleteSyncRules(type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Break the target association with this cluster for this policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetPolicyTest() throws ApiException {
        String targetPolicyId = null;
        Boolean force = null;
        api.deleteTargetPolicy(targetPolicyId, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List cpu performance data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryCpuTest() throws ApiException {
        Integer begin = null;
        Integer end = null;
        HistoryFile response = api.getHistoryCpu(begin, end);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List file operations performance data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryFileTest() throws ApiException {
        Integer begin = null;
        Integer end = null;
        HistoryFile response = api.getHistoryFile(begin, end);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List network operations performance data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryNetworkTest() throws ApiException {
        Integer begin = null;
        Integer end = null;
        HistoryFile response = api.getHistoryNetwork(begin, end);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List worker performance data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryWorkerTest() throws ApiException {
        Integer begin = null;
        Integer end = null;
        HistoryFile response = api.getHistoryWorker(begin, end);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single SyncIQ job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncJobTest() throws ApiException {
        String syncJobId = null;
        SyncJobs response = api.getSyncJob(syncJobId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve license information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncLicenseTest() throws ApiException {
        LicenseLicense response = api.getSyncLicense();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single SyncIQ policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncPolicyTest() throws ApiException {
        String syncPolicyId = null;
        SyncPolicies response = api.getSyncPolicy(syncPolicyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single SyncIQ report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncReportTest() throws ApiException {
        String syncReportId = null;
        SyncReports response = api.getSyncReport(syncReportId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of SyncIQ reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncReportsTest() throws ApiException {
        String sort = null;
        String resume = null;
        Integer newerThan = null;
        String policyName = null;
        String state = null;
        Integer limit = null;
        Integer reportsPerPolicy = null;
        String dir = null;
        SyncReportsExtended response = api.getSyncReports(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single SyncIQ performance rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncRuleTest() throws ApiException {
        String syncRuleId = null;
        SyncRules response = api.getSyncRule(syncRuleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the global SyncIQ settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSyncSettingsTest() throws ApiException {
        SyncSettings response = api.getSyncSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all SyncIQ target policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetPoliciesTest() throws ApiException {
        String sort = null;
        String targetPath = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        TargetPoliciesExtended response = api.getTargetPolicies(sort, targetPath, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single SyncIQ target policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetPolicyTest() throws ApiException {
        String targetPolicyId = null;
        TargetPolicies response = api.getTargetPolicy(targetPolicyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View a single SyncIQ target report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetReportTest() throws ApiException {
        String targetReportId = null;
        TargetReports response = api.getTargetReport(targetReportId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of SyncIQ target reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetReportsTest() throws ApiException {
        String sort = null;
        String resume = null;
        Integer newerThan = null;
        String policyName = null;
        String state = null;
        Integer limit = null;
        Integer reportsPerPolicy = null;
        String dir = null;
        TargetReportsExtended response = api.getTargetReports(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of SyncIQ jobs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSyncJobsTest() throws ApiException {
        String sort = null;
        String state = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        SyncJobsExtended response = api.listSyncJobs(sort, state, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all SyncIQ policies.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSyncPoliciesTest() throws ApiException {
        String sort = null;
        String resume = null;
        Boolean summary = null;
        Integer limit = null;
        String scope = null;
        String dir = null;
        SyncPoliciesExtended response = api.listSyncPolicies(sort, resume, summary, limit, scope, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Whether the rotation is still running or not.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSyncReportsRotateTest() throws ApiException {
        SyncReportsRotate response = api.listSyncReportsRotate();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all SyncIQ performance rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSyncRulesTest() throws ApiException {
        String sort = null;
        String type = null;
        Integer limit = null;
        String dir = null;
        String resume = null;
        SyncRulesExtended response = api.listSyncRules(sort, type, limit, dir, resume);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Perform an action (pause, cancel, etc...) on a single job.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSyncJobTest() throws ApiException {
        SyncJob syncJob = null;
        String syncJobId = null;
        api.updateSyncJob(syncJob, syncJobId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify a single SyncIQ policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSyncPolicyTest() throws ApiException {
        SyncPolicy syncPolicy = null;
        String syncPolicyId = null;
        api.updateSyncPolicy(syncPolicy, syncPolicyId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify a single SyncIQ performance rule.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSyncRuleTest() throws ApiException {
        SyncRule syncRule = null;
        String syncRuleId = null;
        api.updateSyncRule(syncRule, syncRuleId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify the global SyncIQ settings.  All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSyncSettingsTest() throws ApiException {
        SyncSettingsExtended syncSettings = null;
        api.updateSyncSettings(syncSettings);

        // TODO: test validations
    }
    
}
