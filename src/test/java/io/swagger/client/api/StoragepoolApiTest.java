/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CompatibilitiesClassActive;
import io.swagger.client.model.CompatibilitiesClassActiveExtended;
import io.swagger.client.model.CompatibilitiesClassActiveItem;
import io.swagger.client.model.CompatibilitiesClassAvailable;
import io.swagger.client.model.CompatibilitiesSsdActive;
import io.swagger.client.model.CompatibilitiesSsdActiveExtended;
import io.swagger.client.model.CompatibilitiesSsdActiveIdParams;
import io.swagger.client.model.CompatibilitiesSsdActiveItem;
import io.swagger.client.model.CompatibilitiesSsdAvailable;
import io.swagger.client.model.CreateCompatibilitiesClassActiveItemResponse;
import io.swagger.client.model.CreateStoragepoolTierResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.StoragepoolNodepool;
import io.swagger.client.model.StoragepoolNodepoolCreateParams;
import io.swagger.client.model.StoragepoolNodepools;
import io.swagger.client.model.StoragepoolNodepoolsExtended;
import io.swagger.client.model.StoragepoolSettings;
import io.swagger.client.model.StoragepoolSettingsExtended;
import io.swagger.client.model.StoragepoolStatus;
import io.swagger.client.model.StoragepoolStoragepools;
import io.swagger.client.model.StoragepoolSuggestedProtection;
import io.swagger.client.model.StoragepoolTier;
import io.swagger.client.model.StoragepoolTierCreateParams;
import io.swagger.client.model.StoragepoolTiers;
import io.swagger.client.model.StoragepoolTiersExtended;
import io.swagger.client.model.StoragepoolUnprovisioned;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoragepoolApi
 */
@Ignore
public class StoragepoolApiTest {

    private final StoragepoolApi api = new StoragepoolApi();

    
    /**
     * 
     *
     * Create a new compatibility
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCompatibilitiesClassActiveItemTest() throws ApiException {
        CompatibilitiesClassActiveItem compatibilitiesClassActiveItem = null;
        Boolean assess = null;
        CreateCompatibilitiesClassActiveItemResponse response = api.createCompatibilitiesClassActiveItem(compatibilitiesClassActiveItem, assess);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new ssd compatibility
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCompatibilitiesSsdActiveItemTest() throws ApiException {
        CompatibilitiesSsdActiveItem compatibilitiesSsdActiveItem = null;
        Boolean assess = null;
        CreateCompatibilitiesClassActiveItemResponse response = api.createCompatibilitiesSsdActiveItem(compatibilitiesSsdActiveItem, assess);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new node pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoragepoolNodepoolTest() throws ApiException {
        StoragepoolNodepoolCreateParams storagepoolNodepool = null;
        CreateStoragepoolTierResponse response = api.createStoragepoolNodepool(storagepoolNodepool);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new tier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoragepoolTierTest() throws ApiException {
        StoragepoolTierCreateParams storagepoolTier = null;
        CreateStoragepoolTierResponse response = api.createStoragepoolTier(storagepoolTier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete an active compatibility by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCompatibilitiesClassActiveByIdTest() throws ApiException {
        String compatibilitiesClassActiveId = null;
        Boolean assess = null;
        api.deleteCompatibilitiesClassActiveById(compatibilitiesClassActiveId, assess);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete an active ssd compatibility by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCompatibilitiesSsdActiveByIdTest() throws ApiException {
        String compatibilitiesSsdActiveId = null;
        Boolean assess = null;
        api.deleteCompatibilitiesSsdActiveById(compatibilitiesSsdActiveId, assess);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete node pool.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragepoolNodepoolTest() throws ApiException {
        String storagepoolNodepoolId = null;
        api.deleteStoragepoolNodepool(storagepoolNodepoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all node pools.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragepoolNodepoolsTest() throws ApiException {
        api.deleteStoragepoolNodepools();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete tier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragepoolTierTest() throws ApiException {
        String storagepoolTierId = null;
        api.deleteStoragepoolTier(storagepoolTierId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all tiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoragepoolTiersTest() throws ApiException {
        api.deleteStoragepoolTiers();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get an active compatibilities by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompatibilitiesClassActiveByIdTest() throws ApiException {
        String compatibilitiesClassActiveId = null;
        CompatibilitiesClassActive response = api.getCompatibilitiesClassActiveById(compatibilitiesClassActiveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of available compatibilities
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompatibilitiesClassAvailableTest() throws ApiException {
        CompatibilitiesClassAvailable response = api.getCompatibilitiesClassAvailable();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a active ssd compatibilities by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompatibilitiesSsdActiveByIdTest() throws ApiException {
        String compatibilitiesSsdActiveId = null;
        CompatibilitiesSsdActive response = api.getCompatibilitiesSsdActiveById(compatibilitiesSsdActiveId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of available ssd compatibilities
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompatibilitiesSsdAvailableTest() throws ApiException {
        CompatibilitiesSsdAvailable response = api.getCompatibilitiesSsdAvailable();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve node pool information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolNodepoolTest() throws ApiException {
        String storagepoolNodepoolId = null;
        StoragepoolNodepools response = api.getStoragepoolNodepool(storagepoolNodepoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all storagepool settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolSettingsTest() throws ApiException {
        StoragepoolSettings response = api.getStoragepoolSettings();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List any health conditions detected.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolStatusTest() throws ApiException {
        StoragepoolStatus response = api.getStoragepoolStatus();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all storage pools.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolStoragepoolsTest() throws ApiException {
        String sort = null;
        String toplevels = null;
        String dir = null;
        StoragepoolStoragepools response = api.getStoragepoolStoragepools(sort, toplevels, dir);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve the suggested protection policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolSuggestedProtectionNidTest() throws ApiException {
        String storagepoolSuggestedProtectionNid = null;
        StoragepoolSuggestedProtection response = api.getStoragepoolSuggestedProtectionNid(storagepoolSuggestedProtectionNid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve tier information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolTierTest() throws ApiException {
        String storagepoolTierId = null;
        StoragepoolTiers response = api.getStoragepoolTier(storagepoolTierId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the unprovisioned nodes and drives
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoragepoolUnprovisionedTest() throws ApiException {
        StoragepoolUnprovisioned response = api.getStoragepoolUnprovisioned();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of active compatibilities
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCompatibilitiesClassActiveTest() throws ApiException {
        CompatibilitiesClassActiveExtended response = api.listCompatibilitiesClassActive();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of active ssd compatibilities
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCompatibilitiesSsdActiveTest() throws ApiException {
        CompatibilitiesSsdActiveExtended response = api.listCompatibilitiesSsdActive();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all node pools.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listStoragepoolNodepoolsTest() throws ApiException {
        StoragepoolNodepoolsExtended response = api.listStoragepoolNodepools();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all tiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listStoragepoolTiersTest() throws ApiException {
        StoragepoolTiersExtended response = api.listStoragepoolTiers();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify an ssd compatibility by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompatibilitiesSsdActiveByIdTest() throws ApiException {
        CompatibilitiesSsdActiveIdParams compatibilitiesSsdActiveIdParams = null;
        String compatibilitiesSsdActiveId = null;
        Boolean assess = null;
        api.updateCompatibilitiesSsdActiveById(compatibilitiesSsdActiveIdParams, compatibilitiesSsdActiveId, assess);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify node pool. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoragepoolNodepoolTest() throws ApiException {
        StoragepoolNodepool storagepoolNodepool = null;
        String storagepoolNodepoolId = null;
        api.updateStoragepoolNodepool(storagepoolNodepool, storagepoolNodepoolId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify one or more settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoragepoolSettingsTest() throws ApiException {
        StoragepoolSettingsExtended storagepoolSettings = null;
        api.updateStoragepoolSettings(storagepoolSettings);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Modify tier. All input fields are optional, but one or more must be supplied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoragepoolTierTest() throws ApiException {
        StoragepoolTier storagepoolTier = null;
        String storagepoolTierId = null;
        api.updateStoragepoolTier(storagepoolTier, storagepoolTierId);

        // TODO: test validations
    }
    
}
