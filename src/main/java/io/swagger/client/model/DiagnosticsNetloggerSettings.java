/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DiagnosticsNetloggerSettings
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class DiagnosticsNetloggerSettings {
  @SerializedName("clients")
  private String clients = null;

  @SerializedName("count")
  private Integer count = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("interfaces")
  private String interfaces = null;

  @SerializedName("nodelist")
  private String nodelist = null;

  @SerializedName("ports")
  private String ports = null;

  @SerializedName("protocols")
  private String protocols = null;

  @SerializedName("snaplength")
  private Integer snaplength = null;

  public DiagnosticsNetloggerSettings clients(String clients) {
    this.clients = clients;
    return this;
  }

   /**
   * IP Addresses or host names of clients
   * @return clients
  **/
  @ApiModelProperty(value = "IP Addresses or host names of clients")
  public String getClients() {
    return clients;
  }

  public void setClients(String clients) {
    this.clients = clients;
  }

  public DiagnosticsNetloggerSettings count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Count of capture files to keep, 0 is infinite.
   * minimum: 0
   * maximum: 1024
   * @return count
  **/
  @ApiModelProperty(value = "Count of capture files to keep, 0 is infinite.")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public DiagnosticsNetloggerSettings duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * Duration in minutes of each capture file
   * minimum: 1
   * maximum: 255
   * @return duration
  **/
  @ApiModelProperty(value = "Duration in minutes of each capture file")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public DiagnosticsNetloggerSettings interfaces(String interfaces) {
    this.interfaces = interfaces;
    return this;
  }

   /**
   * Network interfaces to capture on.
   * @return interfaces
  **/
  @ApiModelProperty(value = "Network interfaces to capture on.")
  public String getInterfaces() {
    return interfaces;
  }

  public void setInterfaces(String interfaces) {
    this.interfaces = interfaces;
  }

  public DiagnosticsNetloggerSettings nodelist(String nodelist) {
    this.nodelist = nodelist;
    return this;
  }

   /**
   * List of nodes, or empty for all
   * @return nodelist
  **/
  @ApiModelProperty(value = "List of nodes, or empty for all")
  public String getNodelist() {
    return nodelist;
  }

  public void setNodelist(String nodelist) {
    this.nodelist = nodelist;
  }

  public DiagnosticsNetloggerSettings ports(String ports) {
    this.ports = ports;
    return this;
  }

   /**
   * List of Integers of TCP or UDP ports
   * @return ports
  **/
  @ApiModelProperty(value = "List of Integers of TCP or UDP ports")
  public String getPorts() {
    return ports;
  }

  public void setPorts(String ports) {
    this.ports = ports;
  }

  public DiagnosticsNetloggerSettings protocols(String protocols) {
    this.protocols = protocols;
    return this;
  }

   /**
   * which protocol(s) to gather on
   * @return protocols
  **/
  @ApiModelProperty(value = "which protocol(s) to gather on")
  public String getProtocols() {
    return protocols;
  }

  public void setProtocols(String protocols) {
    this.protocols = protocols;
  }

  public DiagnosticsNetloggerSettings snaplength(Integer snaplength) {
    this.snaplength = snaplength;
    return this;
  }

   /**
   * Amount of bytes per packet to capture
   * minimum: 64
   * maximum: 9100
   * @return snaplength
  **/
  @ApiModelProperty(value = "Amount of bytes per packet to capture")
  public Integer getSnaplength() {
    return snaplength;
  }

  public void setSnaplength(Integer snaplength) {
    this.snaplength = snaplength;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticsNetloggerSettings diagnosticsNetloggerSettings = (DiagnosticsNetloggerSettings) o;
    return Objects.equals(this.clients, diagnosticsNetloggerSettings.clients) &&
        Objects.equals(this.count, diagnosticsNetloggerSettings.count) &&
        Objects.equals(this.duration, diagnosticsNetloggerSettings.duration) &&
        Objects.equals(this.interfaces, diagnosticsNetloggerSettings.interfaces) &&
        Objects.equals(this.nodelist, diagnosticsNetloggerSettings.nodelist) &&
        Objects.equals(this.ports, diagnosticsNetloggerSettings.ports) &&
        Objects.equals(this.protocols, diagnosticsNetloggerSettings.protocols) &&
        Objects.equals(this.snaplength, diagnosticsNetloggerSettings.snaplength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clients, count, duration, interfaces, nodelist, ports, protocols, snaplength);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticsNetloggerSettings {\n");
    
    sb.append("    clients: ").append(toIndentedString(clients)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    interfaces: ").append(toIndentedString(interfaces)).append("\n");
    sb.append("    nodelist: ").append(toIndentedString(nodelist)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    snaplength: ").append(toIndentedString(snaplength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

