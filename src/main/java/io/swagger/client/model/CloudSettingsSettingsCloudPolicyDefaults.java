/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CloudSettingsSettingsCloudPolicyDefaultsCache;
import java.io.IOException;

/**
 * CloudSettingsSettingsCloudPolicyDefaults
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class CloudSettingsSettingsCloudPolicyDefaults {
  @SerializedName("archive_snapshot_files")
  private Boolean archiveSnapshotFiles = null;

  @SerializedName("cache")
  private CloudSettingsSettingsCloudPolicyDefaultsCache cache = null;

  @SerializedName("compression")
  private Boolean compression = null;

  @SerializedName("data_retention")
  private Integer dataRetention = null;

  @SerializedName("encryption")
  private Boolean encryption = null;

  @SerializedName("full_backup_retention")
  private Integer fullBackupRetention = null;

  @SerializedName("incremental_backup_retention")
  private Integer incrementalBackupRetention = null;

  @SerializedName("writeback_frequency")
  private Integer writebackFrequency = null;

  public CloudSettingsSettingsCloudPolicyDefaults archiveSnapshotFiles(Boolean archiveSnapshotFiles) {
    this.archiveSnapshotFiles = archiveSnapshotFiles;
    return this;
  }

   /**
   * Specifies if files with snapshots should be archived.
   * @return archiveSnapshotFiles
  **/
  @ApiModelProperty(value = "Specifies if files with snapshots should be archived.")
  public Boolean isArchiveSnapshotFiles() {
    return archiveSnapshotFiles;
  }

  public void setArchiveSnapshotFiles(Boolean archiveSnapshotFiles) {
    this.archiveSnapshotFiles = archiveSnapshotFiles;
  }

  public CloudSettingsSettingsCloudPolicyDefaults cache(CloudSettingsSettingsCloudPolicyDefaultsCache cache) {
    this.cache = cache;
    return this;
  }

   /**
   * Specifies default cloudpool cache settings for new filepool policies.
   * @return cache
  **/
  @ApiModelProperty(value = "Specifies default cloudpool cache settings for new filepool policies.")
  public CloudSettingsSettingsCloudPolicyDefaultsCache getCache() {
    return cache;
  }

  public void setCache(CloudSettingsSettingsCloudPolicyDefaultsCache cache) {
    this.cache = cache;
  }

  public CloudSettingsSettingsCloudPolicyDefaults compression(Boolean compression) {
    this.compression = compression;
    return this;
  }

   /**
   * Specifies if files should be compressed.
   * @return compression
  **/
  @ApiModelProperty(value = "Specifies if files should be compressed.")
  public Boolean isCompression() {
    return compression;
  }

  public void setCompression(Boolean compression) {
    this.compression = compression;
  }

  public CloudSettingsSettingsCloudPolicyDefaults dataRetention(Integer dataRetention) {
    this.dataRetention = dataRetention;
    return this;
  }

   /**
   * Specifies the minimum amount of time archived data will be retained in the cloud after deletion.
   * @return dataRetention
  **/
  @ApiModelProperty(value = "Specifies the minimum amount of time archived data will be retained in the cloud after deletion.")
  public Integer getDataRetention() {
    return dataRetention;
  }

  public void setDataRetention(Integer dataRetention) {
    this.dataRetention = dataRetention;
  }

  public CloudSettingsSettingsCloudPolicyDefaults encryption(Boolean encryption) {
    this.encryption = encryption;
    return this;
  }

   /**
   * Specifies if files should be encrypted.
   * @return encryption
  **/
  @ApiModelProperty(value = "Specifies if files should be encrypted.")
  public Boolean isEncryption() {
    return encryption;
  }

  public void setEncryption(Boolean encryption) {
    this.encryption = encryption;
  }

  public CloudSettingsSettingsCloudPolicyDefaults fullBackupRetention(Integer fullBackupRetention) {
    this.fullBackupRetention = fullBackupRetention;
    return this;
  }

   /**
   * (Used with NDMP backups only.  Not applicable to SyncIQ.)  The minimum amount of time cloud files will be retained after the creation of a full NDMP backup.
   * @return fullBackupRetention
  **/
  @ApiModelProperty(value = "(Used with NDMP backups only.  Not applicable to SyncIQ.)  The minimum amount of time cloud files will be retained after the creation of a full NDMP backup.")
  public Integer getFullBackupRetention() {
    return fullBackupRetention;
  }

  public void setFullBackupRetention(Integer fullBackupRetention) {
    this.fullBackupRetention = fullBackupRetention;
  }

  public CloudSettingsSettingsCloudPolicyDefaults incrementalBackupRetention(Integer incrementalBackupRetention) {
    this.incrementalBackupRetention = incrementalBackupRetention;
    return this;
  }

   /**
   * (Used with SyncIQ and NDMP backups.)  The minimum amount of time cloud files will be retained after the creation of a SyncIQ backup or an incremental NDMP backup.
   * @return incrementalBackupRetention
  **/
  @ApiModelProperty(value = "(Used with SyncIQ and NDMP backups.)  The minimum amount of time cloud files will be retained after the creation of a SyncIQ backup or an incremental NDMP backup.")
  public Integer getIncrementalBackupRetention() {
    return incrementalBackupRetention;
  }

  public void setIncrementalBackupRetention(Integer incrementalBackupRetention) {
    this.incrementalBackupRetention = incrementalBackupRetention;
  }

  public CloudSettingsSettingsCloudPolicyDefaults writebackFrequency(Integer writebackFrequency) {
    this.writebackFrequency = writebackFrequency;
    return this;
  }

   /**
   * The minimum amount of time to wait before updating cloud data with local changes.
   * @return writebackFrequency
  **/
  @ApiModelProperty(value = "The minimum amount of time to wait before updating cloud data with local changes.")
  public Integer getWritebackFrequency() {
    return writebackFrequency;
  }

  public void setWritebackFrequency(Integer writebackFrequency) {
    this.writebackFrequency = writebackFrequency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudSettingsSettingsCloudPolicyDefaults cloudSettingsSettingsCloudPolicyDefaults = (CloudSettingsSettingsCloudPolicyDefaults) o;
    return Objects.equals(this.archiveSnapshotFiles, cloudSettingsSettingsCloudPolicyDefaults.archiveSnapshotFiles) &&
        Objects.equals(this.cache, cloudSettingsSettingsCloudPolicyDefaults.cache) &&
        Objects.equals(this.compression, cloudSettingsSettingsCloudPolicyDefaults.compression) &&
        Objects.equals(this.dataRetention, cloudSettingsSettingsCloudPolicyDefaults.dataRetention) &&
        Objects.equals(this.encryption, cloudSettingsSettingsCloudPolicyDefaults.encryption) &&
        Objects.equals(this.fullBackupRetention, cloudSettingsSettingsCloudPolicyDefaults.fullBackupRetention) &&
        Objects.equals(this.incrementalBackupRetention, cloudSettingsSettingsCloudPolicyDefaults.incrementalBackupRetention) &&
        Objects.equals(this.writebackFrequency, cloudSettingsSettingsCloudPolicyDefaults.writebackFrequency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archiveSnapshotFiles, cache, compression, dataRetention, encryption, fullBackupRetention, incrementalBackupRetention, writebackFrequency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudSettingsSettingsCloudPolicyDefaults {\n");
    
    sb.append("    archiveSnapshotFiles: ").append(toIndentedString(archiveSnapshotFiles)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    dataRetention: ").append(toIndentedString(dataRetention)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    fullBackupRetention: ").append(toIndentedString(fullBackupRetention)).append("\n");
    sb.append("    incrementalBackupRetention: ").append(toIndentedString(incrementalBackupRetention)).append("\n");
    sb.append("    writebackFrequency: ").append(toIndentedString(writebackFrequency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

