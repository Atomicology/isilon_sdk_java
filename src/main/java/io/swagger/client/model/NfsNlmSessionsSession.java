/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NfsNlmSessionsSession
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class NfsNlmSessionsSession {
  @SerializedName("delegates")
  private List<Integer> delegates = null;

  /**
   * The sort of host that this entry represents
   */
  @JsonAdapter(HostTypeEnum.Adapter.class)
  public enum HostTypeEnum {
    CLIENT("client"),
    
    SERVER("server"),
    
    REVERSE("reverse"),
    
    EXPIRED("expired");

    private String value;

    HostTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostTypeEnum fromValue(String text) {
      for (HostTypeEnum b : HostTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HostTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HostTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("host_type")
  private HostTypeEnum hostType = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("is_active")
  private Boolean isActive = null;

  @SerializedName("last_modified")
  private Integer lastModified = null;

  @SerializedName("node_ip")
  private String nodeIp = null;

  @SerializedName("notify_attempts_remaining")
  private Integer notifyAttemptsRemaining = null;

  @SerializedName("notify_error")
  private String notifyError = null;

  @SerializedName("notify_last_attempt")
  private Integer notifyLastAttempt = null;

  public NfsNlmSessionsSession delegates(List<Integer> delegates) {
    this.delegates = delegates;
    return this;
  }

  public NfsNlmSessionsSession addDelegatesItem(Integer delegatesItem) {
    if (this.delegates == null) {
      this.delegates = new ArrayList<Integer>();
    }
    this.delegates.add(delegatesItem);
    return this;
  }

   /**
   * Get delegates
   * @return delegates
  **/
  @ApiModelProperty(value = "")
  public List<Integer> getDelegates() {
    return delegates;
  }

  public void setDelegates(List<Integer> delegates) {
    this.delegates = delegates;
  }

  public NfsNlmSessionsSession hostType(HostTypeEnum hostType) {
    this.hostType = hostType;
    return this;
  }

   /**
   * The sort of host that this entry represents
   * @return hostType
  **/
  @ApiModelProperty(value = "The sort of host that this entry represents")
  public HostTypeEnum getHostType() {
    return hostType;
  }

  public void setHostType(HostTypeEnum hostType) {
    this.hostType = hostType;
  }

  public NfsNlmSessionsSession hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The host being monitored
   * @return hostname
  **/
  @ApiModelProperty(value = "The host being monitored")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

  public NfsNlmSessionsSession isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * Whether or not the client is actively being monitored
   * @return isActive
  **/
  @ApiModelProperty(value = "Whether or not the client is actively being monitored")
  public Boolean isIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public NfsNlmSessionsSession lastModified(Integer lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Unix time in seconds that the client was last modified (monitored or unmonitored)
   * @return lastModified
  **/
  @ApiModelProperty(value = "Unix time in seconds that the client was last modified (monitored or unmonitored)")
  public Integer getLastModified() {
    return lastModified;
  }

  public void setLastModified(Integer lastModified) {
    this.lastModified = lastModified;
  }

  public NfsNlmSessionsSession nodeIp(String nodeIp) {
    this.nodeIp = nodeIp;
    return this;
  }

   /**
   * An IP address for which NSM has client records
   * @return nodeIp
  **/
  @ApiModelProperty(value = "An IP address for which NSM has client records")
  public String getNodeIp() {
    return nodeIp;
  }

  public void setNodeIp(String nodeIp) {
    this.nodeIp = nodeIp;
  }

  public NfsNlmSessionsSession notifyAttemptsRemaining(Integer notifyAttemptsRemaining) {
    this.notifyAttemptsRemaining = notifyAttemptsRemaining;
    return this;
  }

   /**
   * Number of times we will attempt to notify this client before giving up
   * @return notifyAttemptsRemaining
  **/
  @ApiModelProperty(value = "Number of times we will attempt to notify this client before giving up")
  public Integer getNotifyAttemptsRemaining() {
    return notifyAttemptsRemaining;
  }

  public void setNotifyAttemptsRemaining(Integer notifyAttemptsRemaining) {
    this.notifyAttemptsRemaining = notifyAttemptsRemaining;
  }

  public NfsNlmSessionsSession notifyError(String notifyError) {
    this.notifyError = notifyError;
    return this;
  }

   /**
   * Last error recieved attempting to notify this client
   * @return notifyError
  **/
  @ApiModelProperty(value = "Last error recieved attempting to notify this client")
  public String getNotifyError() {
    return notifyError;
  }

  public void setNotifyError(String notifyError) {
    this.notifyError = notifyError;
  }

  public NfsNlmSessionsSession notifyLastAttempt(Integer notifyLastAttempt) {
    this.notifyLastAttempt = notifyLastAttempt;
    return this;
  }

   /**
   * Unix time in seconds when we last attempted to notify this clients
   * @return notifyLastAttempt
  **/
  @ApiModelProperty(value = "Unix time in seconds when we last attempted to notify this clients")
  public Integer getNotifyLastAttempt() {
    return notifyLastAttempt;
  }

  public void setNotifyLastAttempt(Integer notifyLastAttempt) {
    this.notifyLastAttempt = notifyLastAttempt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfsNlmSessionsSession nfsNlmSessionsSession = (NfsNlmSessionsSession) o;
    return Objects.equals(this.delegates, nfsNlmSessionsSession.delegates) &&
        Objects.equals(this.hostType, nfsNlmSessionsSession.hostType) &&
        Objects.equals(this.hostname, nfsNlmSessionsSession.hostname) &&
        Objects.equals(this.isActive, nfsNlmSessionsSession.isActive) &&
        Objects.equals(this.lastModified, nfsNlmSessionsSession.lastModified) &&
        Objects.equals(this.nodeIp, nfsNlmSessionsSession.nodeIp) &&
        Objects.equals(this.notifyAttemptsRemaining, nfsNlmSessionsSession.notifyAttemptsRemaining) &&
        Objects.equals(this.notifyError, nfsNlmSessionsSession.notifyError) &&
        Objects.equals(this.notifyLastAttempt, nfsNlmSessionsSession.notifyLastAttempt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delegates, hostType, hostname, isActive, lastModified, nodeIp, notifyAttemptsRemaining, notifyError, notifyLastAttempt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfsNlmSessionsSession {\n");
    
    sb.append("    delegates: ").append(toIndentedString(delegates)).append("\n");
    sb.append("    hostType: ").append(toIndentedString(hostType)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    nodeIp: ").append(toIndentedString(nodeIp)).append("\n");
    sb.append("    notifyAttemptsRemaining: ").append(toIndentedString(notifyAttemptsRemaining)).append("\n");
    sb.append("    notifyError: ").append(toIndentedString(notifyError)).append("\n");
    sb.append("    notifyLastAttempt: ").append(toIndentedString(notifyLastAttempt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

