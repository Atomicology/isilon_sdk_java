/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NodePartitionsNodePartitionStatfs
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class NodePartitionsNodePartitionStatfs {
  @SerializedName("f_bavail")
  private Integer fBavail = null;

  @SerializedName("f_bfree")
  private Integer fBfree = null;

  @SerializedName("f_blocks")
  private Integer fBlocks = null;

  @SerializedName("f_bsize")
  private Integer fBsize = null;

  @SerializedName("f_ffree")
  private Integer fFfree = null;

  @SerializedName("f_files")
  private Integer fFiles = null;

  @SerializedName("f_flags")
  private Integer fFlags = null;

  @SerializedName("f_fstypename")
  private String fFstypename = null;

  @SerializedName("f_iosize")
  private Integer fIosize = null;

  @SerializedName("f_mntfromname")
  private String fMntfromname = null;

  @SerializedName("f_mntonname")
  private String fMntonname = null;

  @SerializedName("f_namemax")
  private Integer fNamemax = null;

  @SerializedName("f_owner")
  private Integer fOwner = null;

  @SerializedName("f_type")
  private Integer fType = null;

  @SerializedName("f_version")
  private Integer fVersion = null;

  public NodePartitionsNodePartitionStatfs fBavail(Integer fBavail) {
    this.fBavail = fBavail;
    return this;
  }

   /**
   * Free blocks available to non-superuser on this partition.
   * @return fBavail
  **/
  @ApiModelProperty(value = "Free blocks available to non-superuser on this partition.")
  public Integer getFBavail() {
    return fBavail;
  }

  public void setFBavail(Integer fBavail) {
    this.fBavail = fBavail;
  }

  public NodePartitionsNodePartitionStatfs fBfree(Integer fBfree) {
    this.fBfree = fBfree;
    return this;
  }

   /**
   * Free blocks on this partition.
   * @return fBfree
  **/
  @ApiModelProperty(value = "Free blocks on this partition.")
  public Integer getFBfree() {
    return fBfree;
  }

  public void setFBfree(Integer fBfree) {
    this.fBfree = fBfree;
  }

  public NodePartitionsNodePartitionStatfs fBlocks(Integer fBlocks) {
    this.fBlocks = fBlocks;
    return this;
  }

   /**
   * Total data blocks on this partition.
   * @return fBlocks
  **/
  @ApiModelProperty(value = "Total data blocks on this partition.")
  public Integer getFBlocks() {
    return fBlocks;
  }

  public void setFBlocks(Integer fBlocks) {
    this.fBlocks = fBlocks;
  }

  public NodePartitionsNodePartitionStatfs fBsize(Integer fBsize) {
    this.fBsize = fBsize;
    return this;
  }

   /**
   * Filesystem fragment size; block size in OneFS.
   * @return fBsize
  **/
  @ApiModelProperty(value = "Filesystem fragment size; block size in OneFS.")
  public Integer getFBsize() {
    return fBsize;
  }

  public void setFBsize(Integer fBsize) {
    this.fBsize = fBsize;
  }

  public NodePartitionsNodePartitionStatfs fFfree(Integer fFfree) {
    this.fFfree = fFfree;
    return this;
  }

   /**
   * Free file nodes avail to non-superuser.
   * @return fFfree
  **/
  @ApiModelProperty(value = "Free file nodes avail to non-superuser.")
  public Integer getFFfree() {
    return fFfree;
  }

  public void setFFfree(Integer fFfree) {
    this.fFfree = fFfree;
  }

  public NodePartitionsNodePartitionStatfs fFiles(Integer fFiles) {
    this.fFiles = fFiles;
    return this;
  }

   /**
   * Total file nodes in filesystem.
   * @return fFiles
  **/
  @ApiModelProperty(value = "Total file nodes in filesystem.")
  public Integer getFFiles() {
    return fFiles;
  }

  public void setFFiles(Integer fFiles) {
    this.fFiles = fFiles;
  }

  public NodePartitionsNodePartitionStatfs fFlags(Integer fFlags) {
    this.fFlags = fFlags;
    return this;
  }

   /**
   * Mount exported flags.
   * @return fFlags
  **/
  @ApiModelProperty(value = "Mount exported flags.")
  public Integer getFFlags() {
    return fFlags;
  }

  public void setFFlags(Integer fFlags) {
    this.fFlags = fFlags;
  }

  public NodePartitionsNodePartitionStatfs fFstypename(String fFstypename) {
    this.fFstypename = fFstypename;
    return this;
  }

   /**
   * File system type name.
   * @return fFstypename
  **/
  @ApiModelProperty(value = "File system type name.")
  public String getFFstypename() {
    return fFstypename;
  }

  public void setFFstypename(String fFstypename) {
    this.fFstypename = fFstypename;
  }

  public NodePartitionsNodePartitionStatfs fIosize(Integer fIosize) {
    this.fIosize = fIosize;
    return this;
  }

   /**
   * Optimal transfer block size.
   * @return fIosize
  **/
  @ApiModelProperty(value = "Optimal transfer block size.")
  public Integer getFIosize() {
    return fIosize;
  }

  public void setFIosize(Integer fIosize) {
    this.fIosize = fIosize;
  }

  public NodePartitionsNodePartitionStatfs fMntfromname(String fMntfromname) {
    this.fMntfromname = fMntfromname;
    return this;
  }

   /**
   * Names of devices this partition is mounted from.
   * @return fMntfromname
  **/
  @ApiModelProperty(value = "Names of devices this partition is mounted from.")
  public String getFMntfromname() {
    return fMntfromname;
  }

  public void setFMntfromname(String fMntfromname) {
    this.fMntfromname = fMntfromname;
  }

  public NodePartitionsNodePartitionStatfs fMntonname(String fMntonname) {
    this.fMntonname = fMntonname;
    return this;
  }

   /**
   * Directory this partition is mounted to.
   * @return fMntonname
  **/
  @ApiModelProperty(value = "Directory this partition is mounted to.")
  public String getFMntonname() {
    return fMntonname;
  }

  public void setFMntonname(String fMntonname) {
    this.fMntonname = fMntonname;
  }

  public NodePartitionsNodePartitionStatfs fNamemax(Integer fNamemax) {
    this.fNamemax = fNamemax;
    return this;
  }

   /**
   * Maximum filename length.
   * @return fNamemax
  **/
  @ApiModelProperty(value = "Maximum filename length.")
  public Integer getFNamemax() {
    return fNamemax;
  }

  public void setFNamemax(Integer fNamemax) {
    this.fNamemax = fNamemax;
  }

  public NodePartitionsNodePartitionStatfs fOwner(Integer fOwner) {
    this.fOwner = fOwner;
    return this;
  }

   /**
   * UID of user that mounted the filesystem.
   * @return fOwner
  **/
  @ApiModelProperty(value = "UID of user that mounted the filesystem.")
  public Integer getFOwner() {
    return fOwner;
  }

  public void setFOwner(Integer fOwner) {
    this.fOwner = fOwner;
  }

  public NodePartitionsNodePartitionStatfs fType(Integer fType) {
    this.fType = fType;
    return this;
  }

   /**
   * Type of filesystem.
   * @return fType
  **/
  @ApiModelProperty(value = "Type of filesystem.")
  public Integer getFType() {
    return fType;
  }

  public void setFType(Integer fType) {
    this.fType = fType;
  }

  public NodePartitionsNodePartitionStatfs fVersion(Integer fVersion) {
    this.fVersion = fVersion;
    return this;
  }

   /**
   * statfs() structure version number.
   * @return fVersion
  **/
  @ApiModelProperty(value = "statfs() structure version number.")
  public Integer getFVersion() {
    return fVersion;
  }

  public void setFVersion(Integer fVersion) {
    this.fVersion = fVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodePartitionsNodePartitionStatfs nodePartitionsNodePartitionStatfs = (NodePartitionsNodePartitionStatfs) o;
    return Objects.equals(this.fBavail, nodePartitionsNodePartitionStatfs.fBavail) &&
        Objects.equals(this.fBfree, nodePartitionsNodePartitionStatfs.fBfree) &&
        Objects.equals(this.fBlocks, nodePartitionsNodePartitionStatfs.fBlocks) &&
        Objects.equals(this.fBsize, nodePartitionsNodePartitionStatfs.fBsize) &&
        Objects.equals(this.fFfree, nodePartitionsNodePartitionStatfs.fFfree) &&
        Objects.equals(this.fFiles, nodePartitionsNodePartitionStatfs.fFiles) &&
        Objects.equals(this.fFlags, nodePartitionsNodePartitionStatfs.fFlags) &&
        Objects.equals(this.fFstypename, nodePartitionsNodePartitionStatfs.fFstypename) &&
        Objects.equals(this.fIosize, nodePartitionsNodePartitionStatfs.fIosize) &&
        Objects.equals(this.fMntfromname, nodePartitionsNodePartitionStatfs.fMntfromname) &&
        Objects.equals(this.fMntonname, nodePartitionsNodePartitionStatfs.fMntonname) &&
        Objects.equals(this.fNamemax, nodePartitionsNodePartitionStatfs.fNamemax) &&
        Objects.equals(this.fOwner, nodePartitionsNodePartitionStatfs.fOwner) &&
        Objects.equals(this.fType, nodePartitionsNodePartitionStatfs.fType) &&
        Objects.equals(this.fVersion, nodePartitionsNodePartitionStatfs.fVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fBavail, fBfree, fBlocks, fBsize, fFfree, fFiles, fFlags, fFstypename, fIosize, fMntfromname, fMntonname, fNamemax, fOwner, fType, fVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodePartitionsNodePartitionStatfs {\n");
    
    sb.append("    fBavail: ").append(toIndentedString(fBavail)).append("\n");
    sb.append("    fBfree: ").append(toIndentedString(fBfree)).append("\n");
    sb.append("    fBlocks: ").append(toIndentedString(fBlocks)).append("\n");
    sb.append("    fBsize: ").append(toIndentedString(fBsize)).append("\n");
    sb.append("    fFfree: ").append(toIndentedString(fFfree)).append("\n");
    sb.append("    fFiles: ").append(toIndentedString(fFiles)).append("\n");
    sb.append("    fFlags: ").append(toIndentedString(fFlags)).append("\n");
    sb.append("    fFstypename: ").append(toIndentedString(fFstypename)).append("\n");
    sb.append("    fIosize: ").append(toIndentedString(fIosize)).append("\n");
    sb.append("    fMntfromname: ").append(toIndentedString(fMntfromname)).append("\n");
    sb.append("    fMntonname: ").append(toIndentedString(fMntonname)).append("\n");
    sb.append("    fNamemax: ").append(toIndentedString(fNamemax)).append("\n");
    sb.append("    fOwner: ").append(toIndentedString(fOwner)).append("\n");
    sb.append("    fType: ").append(toIndentedString(fType)).append("\n");
    sb.append("    fVersion: ").append(toIndentedString(fVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

