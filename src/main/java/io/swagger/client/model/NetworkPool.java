/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SubnetsSubnetPoolIface;
import io.swagger.client.model.SubnetsSubnetPoolRange;
import io.swagger.client.model.SubnetsSubnetPoolStaticRoute;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NetworkPool
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class NetworkPool {
  @SerializedName("access_zone")
  private String accessZone = null;

  /**
   * IP address format.
   */
  @JsonAdapter(AddrFamilyEnum.Adapter.class)
  public enum AddrFamilyEnum {
    IPV4("ipv4"),
    
    IPV6("ipv6");

    private String value;

    AddrFamilyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddrFamilyEnum fromValue(String text) {
      for (AddrFamilyEnum b : AddrFamilyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AddrFamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddrFamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddrFamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AddrFamilyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("addr_family")
  private AddrFamilyEnum addrFamily = null;

  /**
   * OneFS supports the following NIC aggregation modes.
   */
  @JsonAdapter(AggregationModeEnum.Adapter.class)
  public enum AggregationModeEnum {
    ROUNDROBIN("roundrobin"),
    
    FAILOVER("failover"),
    
    LACP("lacp"),
    
    FEC("fec");

    private String value;

    AggregationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationModeEnum fromValue(String text) {
      for (AggregationModeEnum b : AggregationModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AggregationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AggregationModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("aggregation_mode")
  private AggregationModeEnum aggregationMode = null;

  /**
   * Specifies how IP address allocation is done among pool members.
   */
  @JsonAdapter(AllocMethodEnum.Adapter.class)
  public enum AllocMethodEnum {
    DYNAMIC("dynamic"),
    
    STATIC("static");

    private String value;

    AllocMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocMethodEnum fromValue(String text) {
      for (AllocMethodEnum b : AllocMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AllocMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AllocMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("alloc_method")
  private AllocMethodEnum allocMethod = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("groupnet")
  private String groupnet = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("ifaces")
  private List<SubnetsSubnetPoolIface> ifaces = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("ranges")
  private List<SubnetsSubnetPoolRange> ranges = null;

  /**
   * Rebalance policy..
   */
  @JsonAdapter(RebalancePolicyEnum.Adapter.class)
  public enum RebalancePolicyEnum {
    AUTO("auto"),
    
    MANUAL("manual");

    private String value;

    RebalancePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RebalancePolicyEnum fromValue(String text) {
      for (RebalancePolicyEnum b : RebalancePolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RebalancePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RebalancePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RebalancePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RebalancePolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("rebalance_policy")
  private RebalancePolicyEnum rebalancePolicy = null;

  @SerializedName("rules")
  private List<String> rules = null;

  @SerializedName("sc_auto_unsuspend_delay")
  private Integer scAutoUnsuspendDelay = null;

  /**
   * SmartConnect client connection balancing policy.
   */
  @JsonAdapter(ScConnectPolicyEnum.Adapter.class)
  public enum ScConnectPolicyEnum {
    ROUND_ROBIN("round_robin"),
    
    CONN_COUNT("conn_count"),
    
    THROUGHPUT("throughput"),
    
    CPU_USAGE("cpu_usage");

    private String value;

    ScConnectPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScConnectPolicyEnum fromValue(String text) {
      for (ScConnectPolicyEnum b : ScConnectPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScConnectPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScConnectPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScConnectPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScConnectPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sc_connect_policy")
  private ScConnectPolicyEnum scConnectPolicy = null;

  @SerializedName("sc_dns_zone")
  private String scDnsZone = null;

  @SerializedName("sc_dns_zone_aliases")
  private List<String> scDnsZoneAliases = null;

  /**
   * SmartConnect IP failover policy.
   */
  @JsonAdapter(ScFailoverPolicyEnum.Adapter.class)
  public enum ScFailoverPolicyEnum {
    ROUND_ROBIN("round_robin"),
    
    CONN_COUNT("conn_count"),
    
    THROUGHPUT("throughput"),
    
    CPU_USAGE("cpu_usage");

    private String value;

    ScFailoverPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScFailoverPolicyEnum fromValue(String text) {
      for (ScFailoverPolicyEnum b : ScFailoverPolicyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScFailoverPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScFailoverPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScFailoverPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScFailoverPolicyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sc_failover_policy")
  private ScFailoverPolicyEnum scFailoverPolicy = null;

  @SerializedName("sc_subnet")
  private String scSubnet = null;

  @SerializedName("sc_suspended_nodes")
  private List<Integer> scSuspendedNodes = null;

  @SerializedName("sc_ttl")
  private Integer scTtl = null;

  @SerializedName("static_routes")
  private List<SubnetsSubnetPoolStaticRoute> staticRoutes = null;

  @SerializedName("subnet")
  private String subnet = null;

  public NetworkPool accessZone(String accessZone) {
    this.accessZone = accessZone;
    return this;
  }

   /**
   * Name of a valid access zone to map IP address pool to the zone.
   * @return accessZone
  **/
  @ApiModelProperty(value = "Name of a valid access zone to map IP address pool to the zone.")
  public String getAccessZone() {
    return accessZone;
  }

  public void setAccessZone(String accessZone) {
    this.accessZone = accessZone;
  }

  public NetworkPool addrFamily(AddrFamilyEnum addrFamily) {
    this.addrFamily = addrFamily;
    return this;
  }

   /**
   * IP address format.
   * @return addrFamily
  **/
  @ApiModelProperty(value = "IP address format.")
  public AddrFamilyEnum getAddrFamily() {
    return addrFamily;
  }

  public void setAddrFamily(AddrFamilyEnum addrFamily) {
    this.addrFamily = addrFamily;
  }

  public NetworkPool aggregationMode(AggregationModeEnum aggregationMode) {
    this.aggregationMode = aggregationMode;
    return this;
  }

   /**
   * OneFS supports the following NIC aggregation modes.
   * @return aggregationMode
  **/
  @ApiModelProperty(value = "OneFS supports the following NIC aggregation modes.")
  public AggregationModeEnum getAggregationMode() {
    return aggregationMode;
  }

  public void setAggregationMode(AggregationModeEnum aggregationMode) {
    this.aggregationMode = aggregationMode;
  }

  public NetworkPool allocMethod(AllocMethodEnum allocMethod) {
    this.allocMethod = allocMethod;
    return this;
  }

   /**
   * Specifies how IP address allocation is done among pool members.
   * @return allocMethod
  **/
  @ApiModelProperty(value = "Specifies how IP address allocation is done among pool members.")
  public AllocMethodEnum getAllocMethod() {
    return allocMethod;
  }

  public void setAllocMethod(AllocMethodEnum allocMethod) {
    this.allocMethod = allocMethod;
  }

  public NetworkPool description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the pool.
   * @return description
  **/
  @ApiModelProperty(value = "A description of the pool.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public NetworkPool groupnet(String groupnet) {
    this.groupnet = groupnet;
    return this;
  }

   /**
   * Name of the groupnet this pool belongs to.
   * @return groupnet
  **/
  @ApiModelProperty(value = "Name of the groupnet this pool belongs to.")
  public String getGroupnet() {
    return groupnet;
  }

  public void setGroupnet(String groupnet) {
    this.groupnet = groupnet;
  }

  public NetworkPool id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique Pool ID.
   * @return id
  **/
  @ApiModelProperty(value = "Unique Pool ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public NetworkPool ifaces(List<SubnetsSubnetPoolIface> ifaces) {
    this.ifaces = ifaces;
    return this;
  }

  public NetworkPool addIfacesItem(SubnetsSubnetPoolIface ifacesItem) {
    if (this.ifaces == null) {
      this.ifaces = new ArrayList<SubnetsSubnetPoolIface>();
    }
    this.ifaces.add(ifacesItem);
    return this;
  }

   /**
   * List of interface members in this pool.
   * @return ifaces
  **/
  @ApiModelProperty(value = "List of interface members in this pool.")
  public List<SubnetsSubnetPoolIface> getIfaces() {
    return ifaces;
  }

  public void setIfaces(List<SubnetsSubnetPoolIface> ifaces) {
    this.ifaces = ifaces;
  }

  public NetworkPool name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the pool. It must be unique throughout the given subnet.It&#39;s a required field with POST method.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NetworkPool ranges(List<SubnetsSubnetPoolRange> ranges) {
    this.ranges = ranges;
    return this;
  }

  public NetworkPool addRangesItem(SubnetsSubnetPoolRange rangesItem) {
    if (this.ranges == null) {
      this.ranges = new ArrayList<SubnetsSubnetPoolRange>();
    }
    this.ranges.add(rangesItem);
    return this;
  }

   /**
   * List of IP address ranges in this pool.
   * @return ranges
  **/
  @ApiModelProperty(value = "List of IP address ranges in this pool.")
  public List<SubnetsSubnetPoolRange> getRanges() {
    return ranges;
  }

  public void setRanges(List<SubnetsSubnetPoolRange> ranges) {
    this.ranges = ranges;
  }

  public NetworkPool rebalancePolicy(RebalancePolicyEnum rebalancePolicy) {
    this.rebalancePolicy = rebalancePolicy;
    return this;
  }

   /**
   * Rebalance policy..
   * @return rebalancePolicy
  **/
  @ApiModelProperty(value = "Rebalance policy..")
  public RebalancePolicyEnum getRebalancePolicy() {
    return rebalancePolicy;
  }

  public void setRebalancePolicy(RebalancePolicyEnum rebalancePolicy) {
    this.rebalancePolicy = rebalancePolicy;
  }

  public NetworkPool rules(List<String> rules) {
    this.rules = rules;
    return this;
  }

  public NetworkPool addRulesItem(String rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<String>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Names of the rules in this pool.
   * @return rules
  **/
  @ApiModelProperty(value = "Names of the rules in this pool.")
  public List<String> getRules() {
    return rules;
  }

  public void setRules(List<String> rules) {
    this.rules = rules;
  }

  public NetworkPool scAutoUnsuspendDelay(Integer scAutoUnsuspendDelay) {
    this.scAutoUnsuspendDelay = scAutoUnsuspendDelay;
    return this;
  }

   /**
   * Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.
   * minimum: 0
   * maximum: 86400
   * @return scAutoUnsuspendDelay
  **/
  @ApiModelProperty(value = "Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.")
  public Integer getScAutoUnsuspendDelay() {
    return scAutoUnsuspendDelay;
  }

  public void setScAutoUnsuspendDelay(Integer scAutoUnsuspendDelay) {
    this.scAutoUnsuspendDelay = scAutoUnsuspendDelay;
  }

  public NetworkPool scConnectPolicy(ScConnectPolicyEnum scConnectPolicy) {
    this.scConnectPolicy = scConnectPolicy;
    return this;
  }

   /**
   * SmartConnect client connection balancing policy.
   * @return scConnectPolicy
  **/
  @ApiModelProperty(value = "SmartConnect client connection balancing policy.")
  public ScConnectPolicyEnum getScConnectPolicy() {
    return scConnectPolicy;
  }

  public void setScConnectPolicy(ScConnectPolicyEnum scConnectPolicy) {
    this.scConnectPolicy = scConnectPolicy;
  }

  public NetworkPool scDnsZone(String scDnsZone) {
    this.scDnsZone = scDnsZone;
    return this;
  }

   /**
   * SmartConnect zone name for the pool.
   * @return scDnsZone
  **/
  @ApiModelProperty(value = "SmartConnect zone name for the pool.")
  public String getScDnsZone() {
    return scDnsZone;
  }

  public void setScDnsZone(String scDnsZone) {
    this.scDnsZone = scDnsZone;
  }

  public NetworkPool scDnsZoneAliases(List<String> scDnsZoneAliases) {
    this.scDnsZoneAliases = scDnsZoneAliases;
    return this;
  }

  public NetworkPool addScDnsZoneAliasesItem(String scDnsZoneAliasesItem) {
    if (this.scDnsZoneAliases == null) {
      this.scDnsZoneAliases = new ArrayList<String>();
    }
    this.scDnsZoneAliases.add(scDnsZoneAliasesItem);
    return this;
  }

   /**
   * List of SmartConnect zone aliases (DNS names) to the pool.
   * @return scDnsZoneAliases
  **/
  @ApiModelProperty(value = "List of SmartConnect zone aliases (DNS names) to the pool.")
  public List<String> getScDnsZoneAliases() {
    return scDnsZoneAliases;
  }

  public void setScDnsZoneAliases(List<String> scDnsZoneAliases) {
    this.scDnsZoneAliases = scDnsZoneAliases;
  }

  public NetworkPool scFailoverPolicy(ScFailoverPolicyEnum scFailoverPolicy) {
    this.scFailoverPolicy = scFailoverPolicy;
    return this;
  }

   /**
   * SmartConnect IP failover policy.
   * @return scFailoverPolicy
  **/
  @ApiModelProperty(value = "SmartConnect IP failover policy.")
  public ScFailoverPolicyEnum getScFailoverPolicy() {
    return scFailoverPolicy;
  }

  public void setScFailoverPolicy(ScFailoverPolicyEnum scFailoverPolicy) {
    this.scFailoverPolicy = scFailoverPolicy;
  }

  public NetworkPool scSubnet(String scSubnet) {
    this.scSubnet = scSubnet;
    return this;
  }

   /**
   * Name of SmartConnect service subnet for this pool.
   * @return scSubnet
  **/
  @ApiModelProperty(value = "Name of SmartConnect service subnet for this pool.")
  public String getScSubnet() {
    return scSubnet;
  }

  public void setScSubnet(String scSubnet) {
    this.scSubnet = scSubnet;
  }

  public NetworkPool scSuspendedNodes(List<Integer> scSuspendedNodes) {
    this.scSuspendedNodes = scSuspendedNodes;
    return this;
  }

  public NetworkPool addScSuspendedNodesItem(Integer scSuspendedNodesItem) {
    if (this.scSuspendedNodes == null) {
      this.scSuspendedNodes = new ArrayList<Integer>();
    }
    this.scSuspendedNodes.add(scSuspendedNodesItem);
    return this;
  }

   /**
   * List of LNNs showing currently suspended nodes in SmartConnect.
   * @return scSuspendedNodes
  **/
  @ApiModelProperty(value = "List of LNNs showing currently suspended nodes in SmartConnect.")
  public List<Integer> getScSuspendedNodes() {
    return scSuspendedNodes;
  }

  public void setScSuspendedNodes(List<Integer> scSuspendedNodes) {
    this.scSuspendedNodes = scSuspendedNodes;
  }

  public NetworkPool scTtl(Integer scTtl) {
    this.scTtl = scTtl;
    return this;
  }

   /**
   * Time to live value for SmartConnect DNS query responses in seconds.
   * minimum: 0
   * maximum: 2147483647
   * @return scTtl
  **/
  @ApiModelProperty(value = "Time to live value for SmartConnect DNS query responses in seconds.")
  public Integer getScTtl() {
    return scTtl;
  }

  public void setScTtl(Integer scTtl) {
    this.scTtl = scTtl;
  }

  public NetworkPool staticRoutes(List<SubnetsSubnetPoolStaticRoute> staticRoutes) {
    this.staticRoutes = staticRoutes;
    return this;
  }

  public NetworkPool addStaticRoutesItem(SubnetsSubnetPoolStaticRoute staticRoutesItem) {
    if (this.staticRoutes == null) {
      this.staticRoutes = new ArrayList<SubnetsSubnetPoolStaticRoute>();
    }
    this.staticRoutes.add(staticRoutesItem);
    return this;
  }

   /**
   * List of interface members in this pool.
   * @return staticRoutes
  **/
  @ApiModelProperty(value = "List of interface members in this pool.")
  public List<SubnetsSubnetPoolStaticRoute> getStaticRoutes() {
    return staticRoutes;
  }

  public void setStaticRoutes(List<SubnetsSubnetPoolStaticRoute> staticRoutes) {
    this.staticRoutes = staticRoutes;
  }

  public NetworkPool subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

   /**
   * The name of the subnet.
   * @return subnet
  **/
  @ApiModelProperty(value = "The name of the subnet.")
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkPool networkPool = (NetworkPool) o;
    return Objects.equals(this.accessZone, networkPool.accessZone) &&
        Objects.equals(this.addrFamily, networkPool.addrFamily) &&
        Objects.equals(this.aggregationMode, networkPool.aggregationMode) &&
        Objects.equals(this.allocMethod, networkPool.allocMethod) &&
        Objects.equals(this.description, networkPool.description) &&
        Objects.equals(this.groupnet, networkPool.groupnet) &&
        Objects.equals(this.id, networkPool.id) &&
        Objects.equals(this.ifaces, networkPool.ifaces) &&
        Objects.equals(this.name, networkPool.name) &&
        Objects.equals(this.ranges, networkPool.ranges) &&
        Objects.equals(this.rebalancePolicy, networkPool.rebalancePolicy) &&
        Objects.equals(this.rules, networkPool.rules) &&
        Objects.equals(this.scAutoUnsuspendDelay, networkPool.scAutoUnsuspendDelay) &&
        Objects.equals(this.scConnectPolicy, networkPool.scConnectPolicy) &&
        Objects.equals(this.scDnsZone, networkPool.scDnsZone) &&
        Objects.equals(this.scDnsZoneAliases, networkPool.scDnsZoneAliases) &&
        Objects.equals(this.scFailoverPolicy, networkPool.scFailoverPolicy) &&
        Objects.equals(this.scSubnet, networkPool.scSubnet) &&
        Objects.equals(this.scSuspendedNodes, networkPool.scSuspendedNodes) &&
        Objects.equals(this.scTtl, networkPool.scTtl) &&
        Objects.equals(this.staticRoutes, networkPool.staticRoutes) &&
        Objects.equals(this.subnet, networkPool.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessZone, addrFamily, aggregationMode, allocMethod, description, groupnet, id, ifaces, name, ranges, rebalancePolicy, rules, scAutoUnsuspendDelay, scConnectPolicy, scDnsZone, scDnsZoneAliases, scFailoverPolicy, scSubnet, scSuspendedNodes, scTtl, staticRoutes, subnet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkPool {\n");
    
    sb.append("    accessZone: ").append(toIndentedString(accessZone)).append("\n");
    sb.append("    addrFamily: ").append(toIndentedString(addrFamily)).append("\n");
    sb.append("    aggregationMode: ").append(toIndentedString(aggregationMode)).append("\n");
    sb.append("    allocMethod: ").append(toIndentedString(allocMethod)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groupnet: ").append(toIndentedString(groupnet)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ifaces: ").append(toIndentedString(ifaces)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ranges: ").append(toIndentedString(ranges)).append("\n");
    sb.append("    rebalancePolicy: ").append(toIndentedString(rebalancePolicy)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    scAutoUnsuspendDelay: ").append(toIndentedString(scAutoUnsuspendDelay)).append("\n");
    sb.append("    scConnectPolicy: ").append(toIndentedString(scConnectPolicy)).append("\n");
    sb.append("    scDnsZone: ").append(toIndentedString(scDnsZone)).append("\n");
    sb.append("    scDnsZoneAliases: ").append(toIndentedString(scDnsZoneAliases)).append("\n");
    sb.append("    scFailoverPolicy: ").append(toIndentedString(scFailoverPolicy)).append("\n");
    sb.append("    scSubnet: ").append(toIndentedString(scSubnet)).append("\n");
    sb.append("    scSuspendedNodes: ").append(toIndentedString(scSuspendedNodes)).append("\n");
    sb.append("    scTtl: ").append(toIndentedString(scTtl)).append("\n");
    sb.append("    staticRoutes: ").append(toIndentedString(staticRoutes)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

