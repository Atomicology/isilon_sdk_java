/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {
  @SerializedName("attribute_exists")
  private Boolean attributeExists = null;

  @SerializedName("begins_with")
  private Boolean beginsWith = null;

  @SerializedName("case_sensitive")
  private Boolean caseSensitive = null;

  @SerializedName("field")
  private String field = null;

  @SerializedName("operator")
  private String operator = null;

  /**
   * The file attribute to be compared to a given value
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NAME("name"),
    
    PATH("path"),
    
    LINK_COUNT("link_count"),
    
    ACCESSED_TIME("accessed_time"),
    
    BIRTH_TIME("birth_time"),
    
    CHANGED_TIME("changed_time"),
    
    METADATA_CHANGED_TIME("metadata_changed_time"),
    
    SIZE("size"),
    
    FILE_TYPE("file_type"),
    
    CUSTOM_ATTRIBUTE("custom_attribute");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("units")
  private String units = null;

  @SerializedName("use_relative_time")
  private Boolean useRelativeTime = null;

  @SerializedName("value")
  private String value = null;

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem attributeExists(Boolean attributeExists) {
    this.attributeExists = attributeExists;
    return this;
  }

   /**
   * Indicates whether the existence of an attribute indicates a match (valid only with &#39;type&#39; &#x3D; &#39;custom_attribute&#39;)
   * @return attributeExists
  **/
  @ApiModelProperty(value = "Indicates whether the existence of an attribute indicates a match (valid only with 'type' = 'custom_attribute')")
  public Boolean isAttributeExists() {
    return attributeExists;
  }

  public void setAttributeExists(Boolean attributeExists) {
    this.attributeExists = attributeExists;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem beginsWith(Boolean beginsWith) {
    this.beginsWith = beginsWith;
    return this;
  }

   /**
   * True to match files recursively under the given path. (valid only with &#39;type&#39; &#x3D; &#39;path&#39;)
   * @return beginsWith
  **/
  @ApiModelProperty(value = "True to match files recursively under the given path. (valid only with 'type' = 'path')")
  public Boolean isBeginsWith() {
    return beginsWith;
  }

  public void setBeginsWith(Boolean beginsWith) {
    this.beginsWith = beginsWith;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

   /**
   * True to indicate case sensitivity when comparing file attributes (valid only with &#39;type&#39; &#x3D; &#39;name&#39; or &#39;type&#39; &#x3D; &#39;path&#39;)
   * @return caseSensitive
  **/
  @ApiModelProperty(value = "True to indicate case sensitivity when comparing file attributes (valid only with 'type' = 'name' or 'type' = 'path')")
  public Boolean isCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem field(String field) {
    this.field = field;
    return this;
  }

   /**
   * File attribute field name to be compared in a custom comparison (valid only with &#39;type&#39; &#x3D; &#39;custom_attribute&#39;)
   * @return field
  **/
  @ApiModelProperty(value = "File attribute field name to be compared in a custom comparison (valid only with 'type' = 'custom_attribute')")
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem operator(String operator) {
    this.operator = operator;
    return this;
  }

   /**
   * The comparison operator to use while comparing an attribute with its value
   * @return operator
  **/
  @ApiModelProperty(value = "The comparison operator to use while comparing an attribute with its value")
  public String getOperator() {
    return operator;
  }

  public void setOperator(String operator) {
    this.operator = operator;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The file attribute to be compared to a given value
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The file attribute to be compared to a given value")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem units(String units) {
    this.units = units;
    return this;
  }

   /**
   * Size unit value. One of &#39;B&#39;,&#39;KB&#39;,&#39;MB&#39;,&#39;GB&#39;,&#39;TB&#39;,&#39;PB&#39;,&#39;EB&#39; (valid only with &#39;type&#39; &#x3D; &#39;size&#39;)
   * @return units
  **/
  @ApiModelProperty(value = "Size unit value. One of 'B','KB','MB','GB','TB','PB','EB' (valid only with 'type' = 'size')")
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem useRelativeTime(Boolean useRelativeTime) {
    this.useRelativeTime = useRelativeTime;
    return this;
  }

   /**
   * Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with &#39;type&#39; in {accessed_time, birth_time, changed_time or metadata_changed_time}
   * @return useRelativeTime
  **/
  @ApiModelProperty(value = "Whether time units refer to a calendar date and time (e.g., Jun 3, 2009) or a relative duration (e.g., 2 weeks) (valid only with 'type' in {accessed_time, birth_time, changed_time or metadata_changed_time}")
  public Boolean isUseRelativeTime() {
    return useRelativeTime;
  }

  public void setUseRelativeTime(Boolean useRelativeTime) {
    this.useRelativeTime = useRelativeTime;
  }

  public FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value to be compared against a file attribute
   * @return value
  **/
  @ApiModelProperty(value = "The value to be compared against a file attribute")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem = (FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem) o;
    return Objects.equals(this.attributeExists, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.attributeExists) &&
        Objects.equals(this.beginsWith, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.beginsWith) &&
        Objects.equals(this.caseSensitive, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.caseSensitive) &&
        Objects.equals(this.field, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.field) &&
        Objects.equals(this.operator, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.operator) &&
        Objects.equals(this.type, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.type) &&
        Objects.equals(this.units, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.units) &&
        Objects.equals(this.useRelativeTime, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.useRelativeTime) &&
        Objects.equals(this.value, filepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeExists, beginsWith, caseSensitive, field, operator, type, units, useRelativeTime, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilepoolPolicyFileMatchingPatternOrCriteriaItemAndCriteriaItem {\n");
    
    sb.append("    attributeExists: ").append(toIndentedString(attributeExists)).append("\n");
    sb.append("    beginsWith: ").append(toIndentedString(beginsWith)).append("\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    useRelativeTime: ").append(toIndentedString(useRelativeTime)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

