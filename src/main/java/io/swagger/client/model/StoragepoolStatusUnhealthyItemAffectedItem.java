/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.StoragepoolStatusUnprovisionedItem;
import java.io.IOException;

/**
 * StoragepoolStatusUnhealthyItemAffectedItem
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class StoragepoolStatusUnhealthyItemAffectedItem {
  @SerializedName("device")
  private StoragepoolStatusUnprovisionedItem device = null;

  @SerializedName("down")
  private Boolean down = null;

  @SerializedName("restriping")
  private Boolean restriping = null;

  @SerializedName("smartfailed")
  private Boolean smartfailed = null;

  /**
   * The type of affected device.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NODE("node"),
    
    DRIVE("drive");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public StoragepoolStatusUnhealthyItemAffectedItem device(StoragepoolStatusUnprovisionedItem device) {
    this.device = device;
    return this;
  }

   /**
   * 
   * @return device
  **/
  @ApiModelProperty(value = "")
  public StoragepoolStatusUnprovisionedItem getDevice() {
    return device;
  }

  public void setDevice(StoragepoolStatusUnprovisionedItem device) {
    this.device = device;
  }

  public StoragepoolStatusUnhealthyItemAffectedItem down(Boolean down) {
    this.down = down;
    return this;
  }

   /**
   * Whether or not the device is currently down.
   * @return down
  **/
  @ApiModelProperty(required = true, value = "Whether or not the device is currently down.")
  public Boolean isDown() {
    return down;
  }

  public void setDown(Boolean down) {
    this.down = down;
  }

  public StoragepoolStatusUnhealthyItemAffectedItem restriping(Boolean restriping) {
    this.restriping = restriping;
    return this;
  }

   /**
   * Whether or not the device is currently being repaired.
   * @return restriping
  **/
  @ApiModelProperty(required = true, value = "Whether or not the device is currently being repaired.")
  public Boolean isRestriping() {
    return restriping;
  }

  public void setRestriping(Boolean restriping) {
    this.restriping = restriping;
  }

  public StoragepoolStatusUnhealthyItemAffectedItem smartfailed(Boolean smartfailed) {
    this.smartfailed = smartfailed;
    return this;
  }

   /**
   * Whether or not the device is currently smartfailed.
   * @return smartfailed
  **/
  @ApiModelProperty(required = true, value = "Whether or not the device is currently smartfailed.")
  public Boolean isSmartfailed() {
    return smartfailed;
  }

  public void setSmartfailed(Boolean smartfailed) {
    this.smartfailed = smartfailed;
  }

  public StoragepoolStatusUnhealthyItemAffectedItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of affected device.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of affected device.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoragepoolStatusUnhealthyItemAffectedItem storagepoolStatusUnhealthyItemAffectedItem = (StoragepoolStatusUnhealthyItemAffectedItem) o;
    return Objects.equals(this.device, storagepoolStatusUnhealthyItemAffectedItem.device) &&
        Objects.equals(this.down, storagepoolStatusUnhealthyItemAffectedItem.down) &&
        Objects.equals(this.restriping, storagepoolStatusUnhealthyItemAffectedItem.restriping) &&
        Objects.equals(this.smartfailed, storagepoolStatusUnhealthyItemAffectedItem.smartfailed) &&
        Objects.equals(this.type, storagepoolStatusUnhealthyItemAffectedItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(device, down, restriping, smartfailed, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoragepoolStatusUnhealthyItemAffectedItem {\n");
    
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    down: ").append(toIndentedString(down)).append("\n");
    sb.append("    restriping: ").append(toIndentedString(restriping)).append("\n");
    sb.append("    smartfailed: ").append(toIndentedString(smartfailed)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

