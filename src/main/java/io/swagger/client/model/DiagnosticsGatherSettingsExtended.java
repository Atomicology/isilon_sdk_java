/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DiagnosticsGatherSettings;
import java.io.IOException;

/**
 * DiagnosticsGatherSettingsExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class DiagnosticsGatherSettingsExtended {
  @SerializedName("esrs")
  private Boolean esrs = null;

  @SerializedName("ftp_upload")
  private Boolean ftpUpload = null;

  @SerializedName("ftp_upload_host")
  private String ftpUploadHost = null;

  @SerializedName("ftp_upload_mode")
  private String ftpUploadMode = null;

  @SerializedName("ftp_upload_path")
  private String ftpUploadPath = null;

  @SerializedName("ftp_upload_proxy")
  private String ftpUploadProxy = null;

  @SerializedName("ftp_upload_proxy_port")
  private Integer ftpUploadProxyPort = null;

  @SerializedName("ftp_upload_user")
  private String ftpUploadUser = null;

  /**
   * Set gather to full or incremental.
   */
  @JsonAdapter(GatherModeEnum.Adapter.class)
  public enum GatherModeEnum {
    FULL("full"),
    
    INCREMENTAL("incremental");

    private String value;

    GatherModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatherModeEnum fromValue(String text) {
      for (GatherModeEnum b : GatherModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GatherModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatherModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatherModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GatherModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("gather_mode")
  private GatherModeEnum gatherMode = null;

  @SerializedName("http_upload")
  private Boolean httpUpload = null;

  @SerializedName("http_upload_host")
  private String httpUploadHost = null;

  @SerializedName("http_upload_path")
  private String httpUploadPath = null;

  @SerializedName("http_upload_proxy")
  private String httpUploadProxy = null;

  @SerializedName("http_upload_proxy_port")
  private Integer httpUploadProxyPort = null;

  @SerializedName("upload")
  private Boolean upload = null;

  @SerializedName("ftp_upload_pass")
  private String ftpUploadPass = null;

  public DiagnosticsGatherSettingsExtended esrs(Boolean esrs) {
    this.esrs = esrs;
    return this;
  }

   /**
   * Use ESRS for upload of gather.
   * @return esrs
  **/
  @ApiModelProperty(value = "Use ESRS for upload of gather.")
  public Boolean isEsrs() {
    return esrs;
  }

  public void setEsrs(Boolean esrs) {
    this.esrs = esrs;
  }

  public DiagnosticsGatherSettingsExtended ftpUpload(Boolean ftpUpload) {
    this.ftpUpload = ftpUpload;
    return this;
  }

   /**
   * Get ftpUpload
   * @return ftpUpload
  **/
  @ApiModelProperty(value = "")
  public Boolean isFtpUpload() {
    return ftpUpload;
  }

  public void setFtpUpload(Boolean ftpUpload) {
    this.ftpUpload = ftpUpload;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadHost(String ftpUploadHost) {
    this.ftpUploadHost = ftpUploadHost;
    return this;
  }

   /**
   * Alternate FTP host to upload to.
   * @return ftpUploadHost
  **/
  @ApiModelProperty(value = "Alternate FTP host to upload to.")
  public String getFtpUploadHost() {
    return ftpUploadHost;
  }

  public void setFtpUploadHost(String ftpUploadHost) {
    this.ftpUploadHost = ftpUploadHost;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadMode(String ftpUploadMode) {
    this.ftpUploadMode = ftpUploadMode;
    return this;
  }

   /**
   * FTP upload mode.
   * @return ftpUploadMode
  **/
  @ApiModelProperty(value = "FTP upload mode.")
  public String getFtpUploadMode() {
    return ftpUploadMode;
  }

  public void setFtpUploadMode(String ftpUploadMode) {
    this.ftpUploadMode = ftpUploadMode;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadPath(String ftpUploadPath) {
    this.ftpUploadPath = ftpUploadPath;
    return this;
  }

   /**
   * Alternate FTP path to upload to.
   * @return ftpUploadPath
  **/
  @ApiModelProperty(value = "Alternate FTP path to upload to.")
  public String getFtpUploadPath() {
    return ftpUploadPath;
  }

  public void setFtpUploadPath(String ftpUploadPath) {
    this.ftpUploadPath = ftpUploadPath;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadProxy(String ftpUploadProxy) {
    this.ftpUploadProxy = ftpUploadProxy;
    return this;
  }

   /**
   * FTP proxy to use for upload.
   * @return ftpUploadProxy
  **/
  @ApiModelProperty(value = "FTP proxy to use for upload.")
  public String getFtpUploadProxy() {
    return ftpUploadProxy;
  }

  public void setFtpUploadProxy(String ftpUploadProxy) {
    this.ftpUploadProxy = ftpUploadProxy;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadProxyPort(Integer ftpUploadProxyPort) {
    this.ftpUploadProxyPort = ftpUploadProxyPort;
    return this;
  }

   /**
   * FTP proxy port to use for upload.
   * minimum: 1
   * maximum: 65535
   * @return ftpUploadProxyPort
  **/
  @ApiModelProperty(value = "FTP proxy port to use for upload.")
  public Integer getFtpUploadProxyPort() {
    return ftpUploadProxyPort;
  }

  public void setFtpUploadProxyPort(Integer ftpUploadProxyPort) {
    this.ftpUploadProxyPort = ftpUploadProxyPort;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadUser(String ftpUploadUser) {
    this.ftpUploadUser = ftpUploadUser;
    return this;
  }

   /**
   * FTP user for upload.
   * @return ftpUploadUser
  **/
  @ApiModelProperty(value = "FTP user for upload.")
  public String getFtpUploadUser() {
    return ftpUploadUser;
  }

  public void setFtpUploadUser(String ftpUploadUser) {
    this.ftpUploadUser = ftpUploadUser;
  }

  public DiagnosticsGatherSettingsExtended gatherMode(GatherModeEnum gatherMode) {
    this.gatherMode = gatherMode;
    return this;
  }

   /**
   * Set gather to full or incremental.
   * @return gatherMode
  **/
  @ApiModelProperty(value = "Set gather to full or incremental.")
  public GatherModeEnum getGatherMode() {
    return gatherMode;
  }

  public void setGatherMode(GatherModeEnum gatherMode) {
    this.gatherMode = gatherMode;
  }

  public DiagnosticsGatherSettingsExtended httpUpload(Boolean httpUpload) {
    this.httpUpload = httpUpload;
    return this;
  }

   /**
   * Whether or not to use HTTP upload on completed gather.
   * @return httpUpload
  **/
  @ApiModelProperty(value = "Whether or not to use HTTP upload on completed gather.")
  public Boolean isHttpUpload() {
    return httpUpload;
  }

  public void setHttpUpload(Boolean httpUpload) {
    this.httpUpload = httpUpload;
  }

  public DiagnosticsGatherSettingsExtended httpUploadHost(String httpUploadHost) {
    this.httpUploadHost = httpUploadHost;
    return this;
  }

   /**
   * Alternate HTTP Host to upload to.
   * @return httpUploadHost
  **/
  @ApiModelProperty(value = "Alternate HTTP Host to upload to.")
  public String getHttpUploadHost() {
    return httpUploadHost;
  }

  public void setHttpUploadHost(String httpUploadHost) {
    this.httpUploadHost = httpUploadHost;
  }

  public DiagnosticsGatherSettingsExtended httpUploadPath(String httpUploadPath) {
    this.httpUploadPath = httpUploadPath;
    return this;
  }

   /**
   * Alternate path to write gather to.
   * @return httpUploadPath
  **/
  @ApiModelProperty(value = "Alternate path to write gather to.")
  public String getHttpUploadPath() {
    return httpUploadPath;
  }

  public void setHttpUploadPath(String httpUploadPath) {
    this.httpUploadPath = httpUploadPath;
  }

  public DiagnosticsGatherSettingsExtended httpUploadProxy(String httpUploadProxy) {
    this.httpUploadProxy = httpUploadProxy;
    return this;
  }

   /**
   * Proxy to use for HTTP upload.
   * @return httpUploadProxy
  **/
  @ApiModelProperty(value = "Proxy to use for HTTP upload.")
  public String getHttpUploadProxy() {
    return httpUploadProxy;
  }

  public void setHttpUploadProxy(String httpUploadProxy) {
    this.httpUploadProxy = httpUploadProxy;
  }

  public DiagnosticsGatherSettingsExtended httpUploadProxyPort(Integer httpUploadProxyPort) {
    this.httpUploadProxyPort = httpUploadProxyPort;
    return this;
  }

   /**
   * Alternate port for proxy server
   * minimum: 1
   * maximum: 65535
   * @return httpUploadProxyPort
  **/
  @ApiModelProperty(value = "Alternate port for proxy server")
  public Integer getHttpUploadProxyPort() {
    return httpUploadProxyPort;
  }

  public void setHttpUploadProxyPort(Integer httpUploadProxyPort) {
    this.httpUploadProxyPort = httpUploadProxyPort;
  }

  public DiagnosticsGatherSettingsExtended upload(Boolean upload) {
    this.upload = upload;
    return this;
  }

   /**
   * Upload gather to EMC.
   * @return upload
  **/
  @ApiModelProperty(value = "Upload gather to EMC.")
  public Boolean isUpload() {
    return upload;
  }

  public void setUpload(Boolean upload) {
    this.upload = upload;
  }

  public DiagnosticsGatherSettingsExtended ftpUploadPass(String ftpUploadPass) {
    this.ftpUploadPass = ftpUploadPass;
    return this;
  }

   /**
   * FTP password for upload.
   * @return ftpUploadPass
  **/
  @ApiModelProperty(value = "FTP password for upload.")
  public String getFtpUploadPass() {
    return ftpUploadPass;
  }

  public void setFtpUploadPass(String ftpUploadPass) {
    this.ftpUploadPass = ftpUploadPass;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticsGatherSettingsExtended diagnosticsGatherSettingsExtended = (DiagnosticsGatherSettingsExtended) o;
    return Objects.equals(this.esrs, diagnosticsGatherSettingsExtended.esrs) &&
        Objects.equals(this.ftpUpload, diagnosticsGatherSettingsExtended.ftpUpload) &&
        Objects.equals(this.ftpUploadHost, diagnosticsGatherSettingsExtended.ftpUploadHost) &&
        Objects.equals(this.ftpUploadMode, diagnosticsGatherSettingsExtended.ftpUploadMode) &&
        Objects.equals(this.ftpUploadPath, diagnosticsGatherSettingsExtended.ftpUploadPath) &&
        Objects.equals(this.ftpUploadProxy, diagnosticsGatherSettingsExtended.ftpUploadProxy) &&
        Objects.equals(this.ftpUploadProxyPort, diagnosticsGatherSettingsExtended.ftpUploadProxyPort) &&
        Objects.equals(this.ftpUploadUser, diagnosticsGatherSettingsExtended.ftpUploadUser) &&
        Objects.equals(this.gatherMode, diagnosticsGatherSettingsExtended.gatherMode) &&
        Objects.equals(this.httpUpload, diagnosticsGatherSettingsExtended.httpUpload) &&
        Objects.equals(this.httpUploadHost, diagnosticsGatherSettingsExtended.httpUploadHost) &&
        Objects.equals(this.httpUploadPath, diagnosticsGatherSettingsExtended.httpUploadPath) &&
        Objects.equals(this.httpUploadProxy, diagnosticsGatherSettingsExtended.httpUploadProxy) &&
        Objects.equals(this.httpUploadProxyPort, diagnosticsGatherSettingsExtended.httpUploadProxyPort) &&
        Objects.equals(this.upload, diagnosticsGatherSettingsExtended.upload) &&
        Objects.equals(this.ftpUploadPass, diagnosticsGatherSettingsExtended.ftpUploadPass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(esrs, ftpUpload, ftpUploadHost, ftpUploadMode, ftpUploadPath, ftpUploadProxy, ftpUploadProxyPort, ftpUploadUser, gatherMode, httpUpload, httpUploadHost, httpUploadPath, httpUploadProxy, httpUploadProxyPort, upload, ftpUploadPass);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticsGatherSettingsExtended {\n");
    
    sb.append("    esrs: ").append(toIndentedString(esrs)).append("\n");
    sb.append("    ftpUpload: ").append(toIndentedString(ftpUpload)).append("\n");
    sb.append("    ftpUploadHost: ").append(toIndentedString(ftpUploadHost)).append("\n");
    sb.append("    ftpUploadMode: ").append(toIndentedString(ftpUploadMode)).append("\n");
    sb.append("    ftpUploadPath: ").append(toIndentedString(ftpUploadPath)).append("\n");
    sb.append("    ftpUploadProxy: ").append(toIndentedString(ftpUploadProxy)).append("\n");
    sb.append("    ftpUploadProxyPort: ").append(toIndentedString(ftpUploadProxyPort)).append("\n");
    sb.append("    ftpUploadUser: ").append(toIndentedString(ftpUploadUser)).append("\n");
    sb.append("    gatherMode: ").append(toIndentedString(gatherMode)).append("\n");
    sb.append("    httpUpload: ").append(toIndentedString(httpUpload)).append("\n");
    sb.append("    httpUploadHost: ").append(toIndentedString(httpUploadHost)).append("\n");
    sb.append("    httpUploadPath: ").append(toIndentedString(httpUploadPath)).append("\n");
    sb.append("    httpUploadProxy: ").append(toIndentedString(httpUploadProxy)).append("\n");
    sb.append("    httpUploadProxyPort: ").append(toIndentedString(httpUploadProxyPort)).append("\n");
    sb.append("    upload: ").append(toIndentedString(upload)).append("\n");
    sb.append("    ftpUploadPass: ").append(toIndentedString(ftpUploadPass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

