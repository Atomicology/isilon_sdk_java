/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SnapshotSnapshot;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * SnapshotSnapshotExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T09:38:03.973-07:00")
public class SnapshotSnapshotExtended {
  @SerializedName("alias")
  private String alias = null;

  @SerializedName("expires")
  private Integer expires = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("created")
  private Integer created = null;

  @SerializedName("has_locks")
  private Boolean hasLocks = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("pct_filesystem")
  private BigDecimal pctFilesystem = null;

  @SerializedName("pct_reserve")
  private BigDecimal pctReserve = null;

  @SerializedName("schedule")
  private String schedule = null;

  @SerializedName("shadow_bytes")
  private Integer shadowBytes = null;

  @SerializedName("size")
  private Integer size = null;

  /**
   * Snapshot state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("active"),
    
    DELETING("deleting");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("target_id")
  private Integer targetId = null;

  @SerializedName("target_name")
  private String targetName = null;

  public SnapshotSnapshotExtended alias(String alias) {
    this.alias = alias;
    return this;
  }

   /**
   * Alias name to create for this snapshot. If null, remove any alias.
   * @return alias
  **/
  @ApiModelProperty(value = "Alias name to create for this snapshot. If null, remove any alias.")
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public SnapshotSnapshotExtended expires(Integer expires) {
    this.expires = expires;
    return this;
  }

   /**
   * The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.
   * maximum: 4294967295
   * @return expires
  **/
  @ApiModelProperty(value = "The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.")
  public Integer getExpires() {
    return expires;
  }

  public void setExpires(Integer expires) {
    this.expires = expires;
  }

  public SnapshotSnapshotExtended name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The user or system supplied snapshot name. This will be null for snapshots pending delete.
   * @return name
  **/
  @ApiModelProperty(value = "The user or system supplied snapshot name. This will be null for snapshots pending delete.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SnapshotSnapshotExtended created(Integer created) {
    this.created = created;
    return this;
  }

   /**
   * The Unix Epoch time the snapshot was created.
   * maximum: 4294967295
   * @return created
  **/
  @ApiModelProperty(required = true, value = "The Unix Epoch time the snapshot was created.")
  public Integer getCreated() {
    return created;
  }

  public void setCreated(Integer created) {
    this.created = created;
  }

  public SnapshotSnapshotExtended hasLocks(Boolean hasLocks) {
    this.hasLocks = hasLocks;
    return this;
  }

   /**
   * True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.
   * @return hasLocks
  **/
  @ApiModelProperty(required = true, value = "True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of locks.")
  public Boolean isHasLocks() {
    return hasLocks;
  }

  public void setHasLocks(Boolean hasLocks) {
    this.hasLocks = hasLocks;
  }

  public SnapshotSnapshotExtended id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.
   * maximum: 4294967295
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The system ID given to the snapshot. This is useful for tracking the status of delete pending snapshots.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public SnapshotSnapshotExtended path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The /ifs path snapshotted.
   * @return path
  **/
  @ApiModelProperty(value = "The /ifs path snapshotted.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public SnapshotSnapshotExtended pctFilesystem(BigDecimal pctFilesystem) {
    this.pctFilesystem = pctFilesystem;
    return this;
  }

   /**
   * Percentage of /ifs used for storing this snapshot.
   * @return pctFilesystem
  **/
  @ApiModelProperty(required = true, value = "Percentage of /ifs used for storing this snapshot.")
  public BigDecimal getPctFilesystem() {
    return pctFilesystem;
  }

  public void setPctFilesystem(BigDecimal pctFilesystem) {
    this.pctFilesystem = pctFilesystem;
  }

  public SnapshotSnapshotExtended pctReserve(BigDecimal pctReserve) {
    this.pctReserve = pctReserve;
    return this;
  }

   /**
   * Percentage of configured snapshot reserved used for storing this snapshot.
   * @return pctReserve
  **/
  @ApiModelProperty(required = true, value = "Percentage of configured snapshot reserved used for storing this snapshot.")
  public BigDecimal getPctReserve() {
    return pctReserve;
  }

  public void setPctReserve(BigDecimal pctReserve) {
    this.pctReserve = pctReserve;
  }

  public SnapshotSnapshotExtended schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * The name of the schedule used to create this snapshot, if applicable.
   * @return schedule
  **/
  @ApiModelProperty(value = "The name of the schedule used to create this snapshot, if applicable.")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }

  public SnapshotSnapshotExtended shadowBytes(Integer shadowBytes) {
    this.shadowBytes = shadowBytes;
    return this;
  }

   /**
   * The amount of shadow bytes referred to by this snapshot.
   * maximum: 4294967295
   * @return shadowBytes
  **/
  @ApiModelProperty(required = true, value = "The amount of shadow bytes referred to by this snapshot.")
  public Integer getShadowBytes() {
    return shadowBytes;
  }

  public void setShadowBytes(Integer shadowBytes) {
    this.shadowBytes = shadowBytes;
  }

  public SnapshotSnapshotExtended size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * The amount of storage in bytes used to store this snapshot.
   * maximum: 4294967295
   * @return size
  **/
  @ApiModelProperty(required = true, value = "The amount of storage in bytes used to store this snapshot.")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public SnapshotSnapshotExtended state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Snapshot state.
   * @return state
  **/
  @ApiModelProperty(required = true, value = "Snapshot state.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public SnapshotSnapshotExtended targetId(Integer targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * The ID of the snapshot pointed to if this is an alias.
   * maximum: 4294967295
   * @return targetId
  **/
  @ApiModelProperty(value = "The ID of the snapshot pointed to if this is an alias.")
  public Integer getTargetId() {
    return targetId;
  }

  public void setTargetId(Integer targetId) {
    this.targetId = targetId;
  }

  public SnapshotSnapshotExtended targetName(String targetName) {
    this.targetName = targetName;
    return this;
  }

   /**
   * The name of the snapshot pointed to if this is an alias.
   * @return targetName
  **/
  @ApiModelProperty(value = "The name of the snapshot pointed to if this is an alias.")
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(String targetName) {
    this.targetName = targetName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotSnapshotExtended snapshotSnapshotExtended = (SnapshotSnapshotExtended) o;
    return Objects.equals(this.alias, snapshotSnapshotExtended.alias) &&
        Objects.equals(this.expires, snapshotSnapshotExtended.expires) &&
        Objects.equals(this.name, snapshotSnapshotExtended.name) &&
        Objects.equals(this.created, snapshotSnapshotExtended.created) &&
        Objects.equals(this.hasLocks, snapshotSnapshotExtended.hasLocks) &&
        Objects.equals(this.id, snapshotSnapshotExtended.id) &&
        Objects.equals(this.path, snapshotSnapshotExtended.path) &&
        Objects.equals(this.pctFilesystem, snapshotSnapshotExtended.pctFilesystem) &&
        Objects.equals(this.pctReserve, snapshotSnapshotExtended.pctReserve) &&
        Objects.equals(this.schedule, snapshotSnapshotExtended.schedule) &&
        Objects.equals(this.shadowBytes, snapshotSnapshotExtended.shadowBytes) &&
        Objects.equals(this.size, snapshotSnapshotExtended.size) &&
        Objects.equals(this.state, snapshotSnapshotExtended.state) &&
        Objects.equals(this.targetId, snapshotSnapshotExtended.targetId) &&
        Objects.equals(this.targetName, snapshotSnapshotExtended.targetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, expires, name, created, hasLocks, id, path, pctFilesystem, pctReserve, schedule, shadowBytes, size, state, targetId, targetName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotSnapshotExtended {\n");
    
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    hasLocks: ").append(toIndentedString(hasLocks)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pctFilesystem: ").append(toIndentedString(pctFilesystem)).append("\n");
    sb.append("    pctReserve: ").append(toIndentedString(pctReserve)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    shadowBytes: ").append(toIndentedString(shadowBytes)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

