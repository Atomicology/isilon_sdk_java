/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * StoragepoolTierUsage
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T09:38:03.973-07:00")
public class StoragepoolTierUsage {
  @SerializedName("avail_bytes")
  private String availBytes = null;

  @SerializedName("avail_hdd_bytes")
  private String availHddBytes = null;

  @SerializedName("avail_ssd_bytes")
  private String availSsdBytes = null;

  @SerializedName("balanced")
  private Boolean balanced = null;

  @SerializedName("free_bytes")
  private String freeBytes = null;

  @SerializedName("free_hdd_bytes")
  private String freeHddBytes = null;

  @SerializedName("free_ssd_bytes")
  private String freeSsdBytes = null;

  @SerializedName("pct_used")
  private String pctUsed = null;

  @SerializedName("pct_used_hdd")
  private String pctUsedHdd = null;

  @SerializedName("pct_used_ssd")
  private String pctUsedSsd = null;

  @SerializedName("total_bytes")
  private String totalBytes = null;

  @SerializedName("total_hdd_bytes")
  private String totalHddBytes = null;

  @SerializedName("total_ssd_bytes")
  private String totalSsdBytes = null;

  @SerializedName("usable_bytes")
  private String usableBytes = null;

  @SerializedName("usable_hdd_bytes")
  private String usableHddBytes = null;

  @SerializedName("usable_ssd_bytes")
  private String usableSsdBytes = null;

  @SerializedName("used_bytes")
  private String usedBytes = null;

  @SerializedName("used_hdd_bytes")
  private String usedHddBytes = null;

  @SerializedName("used_ssd_bytes")
  private String usedSsdBytes = null;

  @SerializedName("virtual_hot_spare_bytes")
  private String virtualHotSpareBytes = null;

  public StoragepoolTierUsage availBytes(String availBytes) {
    this.availBytes = availBytes;
    return this;
  }

   /**
   * Available free bytes remaining in the pool when virtual hot spare is taken into account.
   * @return availBytes
  **/
  @ApiModelProperty(required = true, value = "Available free bytes remaining in the pool when virtual hot spare is taken into account.")
  public String getAvailBytes() {
    return availBytes;
  }

  public void setAvailBytes(String availBytes) {
    this.availBytes = availBytes;
  }

  public StoragepoolTierUsage availHddBytes(String availHddBytes) {
    this.availHddBytes = availHddBytes;
    return this;
  }

   /**
   * Available free bytes remaining in the pool on HDD drives when virtual hot spare is taken into account.
   * @return availHddBytes
  **/
  @ApiModelProperty(required = true, value = "Available free bytes remaining in the pool on HDD drives when virtual hot spare is taken into account.")
  public String getAvailHddBytes() {
    return availHddBytes;
  }

  public void setAvailHddBytes(String availHddBytes) {
    this.availHddBytes = availHddBytes;
  }

  public StoragepoolTierUsage availSsdBytes(String availSsdBytes) {
    this.availSsdBytes = availSsdBytes;
    return this;
  }

   /**
   * Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.
   * @return availSsdBytes
  **/
  @ApiModelProperty(required = true, value = "Available free bytes remaining in the pool on SSD drives when virtual hot spare is taken into account.")
  public String getAvailSsdBytes() {
    return availSsdBytes;
  }

  public void setAvailSsdBytes(String availSsdBytes) {
    this.availSsdBytes = availSsdBytes;
  }

  public StoragepoolTierUsage balanced(Boolean balanced) {
    this.balanced = balanced;
    return this;
  }

   /**
   * Whether or not the pool usage is currently balanced.
   * @return balanced
  **/
  @ApiModelProperty(required = true, value = "Whether or not the pool usage is currently balanced.")
  public Boolean isBalanced() {
    return balanced;
  }

  public void setBalanced(Boolean balanced) {
    this.balanced = balanced;
  }

  public StoragepoolTierUsage freeBytes(String freeBytes) {
    this.freeBytes = freeBytes;
    return this;
  }

   /**
   * Free bytes remaining in the pool.
   * @return freeBytes
  **/
  @ApiModelProperty(required = true, value = "Free bytes remaining in the pool.")
  public String getFreeBytes() {
    return freeBytes;
  }

  public void setFreeBytes(String freeBytes) {
    this.freeBytes = freeBytes;
  }

  public StoragepoolTierUsage freeHddBytes(String freeHddBytes) {
    this.freeHddBytes = freeHddBytes;
    return this;
  }

   /**
   * Free bytes remaining in the pool on HDD drives.
   * @return freeHddBytes
  **/
  @ApiModelProperty(required = true, value = "Free bytes remaining in the pool on HDD drives.")
  public String getFreeHddBytes() {
    return freeHddBytes;
  }

  public void setFreeHddBytes(String freeHddBytes) {
    this.freeHddBytes = freeHddBytes;
  }

  public StoragepoolTierUsage freeSsdBytes(String freeSsdBytes) {
    this.freeSsdBytes = freeSsdBytes;
    return this;
  }

   /**
   * Free bytes remaining in the pool on SSD drives.
   * @return freeSsdBytes
  **/
  @ApiModelProperty(required = true, value = "Free bytes remaining in the pool on SSD drives.")
  public String getFreeSsdBytes() {
    return freeSsdBytes;
  }

  public void setFreeSsdBytes(String freeSsdBytes) {
    this.freeSsdBytes = freeSsdBytes;
  }

  public StoragepoolTierUsage pctUsed(String pctUsed) {
    this.pctUsed = pctUsed;
    return this;
  }

   /**
   * Percentage of usable space in the pool which is used.
   * @return pctUsed
  **/
  @ApiModelProperty(required = true, value = "Percentage of usable space in the pool which is used.")
  public String getPctUsed() {
    return pctUsed;
  }

  public void setPctUsed(String pctUsed) {
    this.pctUsed = pctUsed;
  }

  public StoragepoolTierUsage pctUsedHdd(String pctUsedHdd) {
    this.pctUsedHdd = pctUsedHdd;
    return this;
  }

   /**
   * Percentage of usable space on HDD drives in the pool which is used.
   * @return pctUsedHdd
  **/
  @ApiModelProperty(required = true, value = "Percentage of usable space on HDD drives in the pool which is used.")
  public String getPctUsedHdd() {
    return pctUsedHdd;
  }

  public void setPctUsedHdd(String pctUsedHdd) {
    this.pctUsedHdd = pctUsedHdd;
  }

  public StoragepoolTierUsage pctUsedSsd(String pctUsedSsd) {
    this.pctUsedSsd = pctUsedSsd;
    return this;
  }

   /**
   * Percentage of usable space on SSD drives in the pool which is used.
   * @return pctUsedSsd
  **/
  @ApiModelProperty(required = true, value = "Percentage of usable space on SSD drives in the pool which is used.")
  public String getPctUsedSsd() {
    return pctUsedSsd;
  }

  public void setPctUsedSsd(String pctUsedSsd) {
    this.pctUsedSsd = pctUsedSsd;
  }

  public StoragepoolTierUsage totalBytes(String totalBytes) {
    this.totalBytes = totalBytes;
    return this;
  }

   /**
   * Total bytes in the pool.
   * @return totalBytes
  **/
  @ApiModelProperty(required = true, value = "Total bytes in the pool.")
  public String getTotalBytes() {
    return totalBytes;
  }

  public void setTotalBytes(String totalBytes) {
    this.totalBytes = totalBytes;
  }

  public StoragepoolTierUsage totalHddBytes(String totalHddBytes) {
    this.totalHddBytes = totalHddBytes;
    return this;
  }

   /**
   * Total bytes in the pool on HDD drives.
   * @return totalHddBytes
  **/
  @ApiModelProperty(required = true, value = "Total bytes in the pool on HDD drives.")
  public String getTotalHddBytes() {
    return totalHddBytes;
  }

  public void setTotalHddBytes(String totalHddBytes) {
    this.totalHddBytes = totalHddBytes;
  }

  public StoragepoolTierUsage totalSsdBytes(String totalSsdBytes) {
    this.totalSsdBytes = totalSsdBytes;
    return this;
  }

   /**
   * Total bytes in the pool on SSD drives.
   * @return totalSsdBytes
  **/
  @ApiModelProperty(required = true, value = "Total bytes in the pool on SSD drives.")
  public String getTotalSsdBytes() {
    return totalSsdBytes;
  }

  public void setTotalSsdBytes(String totalSsdBytes) {
    this.totalSsdBytes = totalSsdBytes;
  }

  public StoragepoolTierUsage usableBytes(String usableBytes) {
    this.usableBytes = usableBytes;
    return this;
  }

   /**
   * Total bytes in the pool drives when virtual hot spare is taken into account.
   * @return usableBytes
  **/
  @ApiModelProperty(required = true, value = "Total bytes in the pool drives when virtual hot spare is taken into account.")
  public String getUsableBytes() {
    return usableBytes;
  }

  public void setUsableBytes(String usableBytes) {
    this.usableBytes = usableBytes;
  }

  public StoragepoolTierUsage usableHddBytes(String usableHddBytes) {
    this.usableHddBytes = usableHddBytes;
    return this;
  }

   /**
   * Total bytes in the pool on HDD drives when virtual hot spare is taken into account.
   * @return usableHddBytes
  **/
  @ApiModelProperty(required = true, value = "Total bytes in the pool on HDD drives when virtual hot spare is taken into account.")
  public String getUsableHddBytes() {
    return usableHddBytes;
  }

  public void setUsableHddBytes(String usableHddBytes) {
    this.usableHddBytes = usableHddBytes;
  }

  public StoragepoolTierUsage usableSsdBytes(String usableSsdBytes) {
    this.usableSsdBytes = usableSsdBytes;
    return this;
  }

   /**
   * Total bytes in the pool on SSD drives when virtual hot spare is taken into account.
   * @return usableSsdBytes
  **/
  @ApiModelProperty(required = true, value = "Total bytes in the pool on SSD drives when virtual hot spare is taken into account.")
  public String getUsableSsdBytes() {
    return usableSsdBytes;
  }

  public void setUsableSsdBytes(String usableSsdBytes) {
    this.usableSsdBytes = usableSsdBytes;
  }

  public StoragepoolTierUsage usedBytes(String usedBytes) {
    this.usedBytes = usedBytes;
    return this;
  }

   /**
   * Used bytes in the pool.
   * @return usedBytes
  **/
  @ApiModelProperty(value = "Used bytes in the pool.")
  public String getUsedBytes() {
    return usedBytes;
  }

  public void setUsedBytes(String usedBytes) {
    this.usedBytes = usedBytes;
  }

  public StoragepoolTierUsage usedHddBytes(String usedHddBytes) {
    this.usedHddBytes = usedHddBytes;
    return this;
  }

   /**
   * Used bytes in the pool on HDD drives.
   * @return usedHddBytes
  **/
  @ApiModelProperty(required = true, value = "Used bytes in the pool on HDD drives.")
  public String getUsedHddBytes() {
    return usedHddBytes;
  }

  public void setUsedHddBytes(String usedHddBytes) {
    this.usedHddBytes = usedHddBytes;
  }

  public StoragepoolTierUsage usedSsdBytes(String usedSsdBytes) {
    this.usedSsdBytes = usedSsdBytes;
    return this;
  }

   /**
   * Used bytes in the pool on SSD drives.
   * @return usedSsdBytes
  **/
  @ApiModelProperty(required = true, value = "Used bytes in the pool on SSD drives.")
  public String getUsedSsdBytes() {
    return usedSsdBytes;
  }

  public void setUsedSsdBytes(String usedSsdBytes) {
    this.usedSsdBytes = usedSsdBytes;
  }

  public StoragepoolTierUsage virtualHotSpareBytes(String virtualHotSpareBytes) {
    this.virtualHotSpareBytes = virtualHotSpareBytes;
    return this;
  }

   /**
   * Get virtualHotSpareBytes
   * @return virtualHotSpareBytes
  **/
  @ApiModelProperty(value = "")
  public String getVirtualHotSpareBytes() {
    return virtualHotSpareBytes;
  }

  public void setVirtualHotSpareBytes(String virtualHotSpareBytes) {
    this.virtualHotSpareBytes = virtualHotSpareBytes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoragepoolTierUsage storagepoolTierUsage = (StoragepoolTierUsage) o;
    return Objects.equals(this.availBytes, storagepoolTierUsage.availBytes) &&
        Objects.equals(this.availHddBytes, storagepoolTierUsage.availHddBytes) &&
        Objects.equals(this.availSsdBytes, storagepoolTierUsage.availSsdBytes) &&
        Objects.equals(this.balanced, storagepoolTierUsage.balanced) &&
        Objects.equals(this.freeBytes, storagepoolTierUsage.freeBytes) &&
        Objects.equals(this.freeHddBytes, storagepoolTierUsage.freeHddBytes) &&
        Objects.equals(this.freeSsdBytes, storagepoolTierUsage.freeSsdBytes) &&
        Objects.equals(this.pctUsed, storagepoolTierUsage.pctUsed) &&
        Objects.equals(this.pctUsedHdd, storagepoolTierUsage.pctUsedHdd) &&
        Objects.equals(this.pctUsedSsd, storagepoolTierUsage.pctUsedSsd) &&
        Objects.equals(this.totalBytes, storagepoolTierUsage.totalBytes) &&
        Objects.equals(this.totalHddBytes, storagepoolTierUsage.totalHddBytes) &&
        Objects.equals(this.totalSsdBytes, storagepoolTierUsage.totalSsdBytes) &&
        Objects.equals(this.usableBytes, storagepoolTierUsage.usableBytes) &&
        Objects.equals(this.usableHddBytes, storagepoolTierUsage.usableHddBytes) &&
        Objects.equals(this.usableSsdBytes, storagepoolTierUsage.usableSsdBytes) &&
        Objects.equals(this.usedBytes, storagepoolTierUsage.usedBytes) &&
        Objects.equals(this.usedHddBytes, storagepoolTierUsage.usedHddBytes) &&
        Objects.equals(this.usedSsdBytes, storagepoolTierUsage.usedSsdBytes) &&
        Objects.equals(this.virtualHotSpareBytes, storagepoolTierUsage.virtualHotSpareBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availBytes, availHddBytes, availSsdBytes, balanced, freeBytes, freeHddBytes, freeSsdBytes, pctUsed, pctUsedHdd, pctUsedSsd, totalBytes, totalHddBytes, totalSsdBytes, usableBytes, usableHddBytes, usableSsdBytes, usedBytes, usedHddBytes, usedSsdBytes, virtualHotSpareBytes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoragepoolTierUsage {\n");
    
    sb.append("    availBytes: ").append(toIndentedString(availBytes)).append("\n");
    sb.append("    availHddBytes: ").append(toIndentedString(availHddBytes)).append("\n");
    sb.append("    availSsdBytes: ").append(toIndentedString(availSsdBytes)).append("\n");
    sb.append("    balanced: ").append(toIndentedString(balanced)).append("\n");
    sb.append("    freeBytes: ").append(toIndentedString(freeBytes)).append("\n");
    sb.append("    freeHddBytes: ").append(toIndentedString(freeHddBytes)).append("\n");
    sb.append("    freeSsdBytes: ").append(toIndentedString(freeSsdBytes)).append("\n");
    sb.append("    pctUsed: ").append(toIndentedString(pctUsed)).append("\n");
    sb.append("    pctUsedHdd: ").append(toIndentedString(pctUsedHdd)).append("\n");
    sb.append("    pctUsedSsd: ").append(toIndentedString(pctUsedSsd)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    totalHddBytes: ").append(toIndentedString(totalHddBytes)).append("\n");
    sb.append("    totalSsdBytes: ").append(toIndentedString(totalSsdBytes)).append("\n");
    sb.append("    usableBytes: ").append(toIndentedString(usableBytes)).append("\n");
    sb.append("    usableHddBytes: ").append(toIndentedString(usableHddBytes)).append("\n");
    sb.append("    usableSsdBytes: ").append(toIndentedString(usableSsdBytes)).append("\n");
    sb.append("    usedBytes: ").append(toIndentedString(usedBytes)).append("\n");
    sb.append("    usedHddBytes: ").append(toIndentedString(usedHddBytes)).append("\n");
    sb.append("    usedSsdBytes: ").append(toIndentedString(usedSsdBytes)).append("\n");
    sb.append("    virtualHotSpareBytes: ").append(toIndentedString(virtualHotSpareBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

