/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ResultDirectoriesTotalUsage;
import io.swagger.client.model.ResultDirectoriesUsageDataItem;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ResultDirectories
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class ResultDirectories {
  @SerializedName("attribute_count")
  private Integer attributeCount = null;

  @SerializedName("dir_depth")
  private Integer dirDepth = null;

  @SerializedName("dir_usage")
  private ResultDirectoriesTotalUsage dirUsage = null;

  @SerializedName("path_parts")
  private List<String> pathParts = new ArrayList<String>();

  @SerializedName("total_usage")
  private ResultDirectoriesTotalUsage totalUsage = null;

  @SerializedName("usage_data")
  private List<ResultDirectoriesUsageDataItem> usageData = new ArrayList<ResultDirectoriesUsageDataItem>();

  public ResultDirectories attributeCount(Integer attributeCount) {
    this.attributeCount = attributeCount;
    return this;
  }

   /**
   * User attribute count.
   * @return attributeCount
  **/
  @ApiModelProperty(required = true, value = "User attribute count.")
  public Integer getAttributeCount() {
    return attributeCount;
  }

  public void setAttributeCount(Integer attributeCount) {
    this.attributeCount = attributeCount;
  }

  public ResultDirectories dirDepth(Integer dirDepth) {
    this.dirDepth = dirDepth;
    return this;
  }

   /**
   * Directory depth.
   * @return dirDepth
  **/
  @ApiModelProperty(required = true, value = "Directory depth.")
  public Integer getDirDepth() {
    return dirDepth;
  }

  public void setDirDepth(Integer dirDepth) {
    this.dirDepth = dirDepth;
  }

  public ResultDirectories dirUsage(ResultDirectoriesTotalUsage dirUsage) {
    this.dirUsage = dirUsage;
    return this;
  }

   /**
   * Disk usage for current directory.
   * @return dirUsage
  **/
  @ApiModelProperty(required = true, value = "Disk usage for current directory.")
  public ResultDirectoriesTotalUsage getDirUsage() {
    return dirUsage;
  }

  public void setDirUsage(ResultDirectoriesTotalUsage dirUsage) {
    this.dirUsage = dirUsage;
  }

  public ResultDirectories pathParts(List<String> pathParts) {
    this.pathParts = pathParts;
    return this;
  }

  public ResultDirectories addPathPartsItem(String pathPartsItem) {
    this.pathParts.add(pathPartsItem);
    return this;
  }

   /**
   * Directory path information from root to current directory.
   * @return pathParts
  **/
  @ApiModelProperty(required = true, value = "Directory path information from root to current directory.")
  public List<String> getPathParts() {
    return pathParts;
  }

  public void setPathParts(List<String> pathParts) {
    this.pathParts = pathParts;
  }

  public ResultDirectories totalUsage(ResultDirectoriesTotalUsage totalUsage) {
    this.totalUsage = totalUsage;
    return this;
  }

   /**
   * Disk usage from root.
   * @return totalUsage
  **/
  @ApiModelProperty(required = true, value = "Disk usage from root.")
  public ResultDirectoriesTotalUsage getTotalUsage() {
    return totalUsage;
  }

  public void setTotalUsage(ResultDirectoriesTotalUsage totalUsage) {
    this.totalUsage = totalUsage;
  }

  public ResultDirectories usageData(List<ResultDirectoriesUsageDataItem> usageData) {
    this.usageData = usageData;
    return this;
  }

  public ResultDirectories addUsageDataItem(ResultDirectoriesUsageDataItem usageDataItem) {
    this.usageData.add(usageDataItem);
    return this;
  }

   /**
   * Disk usage for all of immediate children of the current directory.
   * @return usageData
  **/
  @ApiModelProperty(required = true, value = "Disk usage for all of immediate children of the current directory.")
  public List<ResultDirectoriesUsageDataItem> getUsageData() {
    return usageData;
  }

  public void setUsageData(List<ResultDirectoriesUsageDataItem> usageData) {
    this.usageData = usageData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultDirectories resultDirectories = (ResultDirectories) o;
    return Objects.equals(this.attributeCount, resultDirectories.attributeCount) &&
        Objects.equals(this.dirDepth, resultDirectories.dirDepth) &&
        Objects.equals(this.dirUsage, resultDirectories.dirUsage) &&
        Objects.equals(this.pathParts, resultDirectories.pathParts) &&
        Objects.equals(this.totalUsage, resultDirectories.totalUsage) &&
        Objects.equals(this.usageData, resultDirectories.usageData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeCount, dirDepth, dirUsage, pathParts, totalUsage, usageData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultDirectories {\n");
    
    sb.append("    attributeCount: ").append(toIndentedString(attributeCount)).append("\n");
    sb.append("    dirDepth: ").append(toIndentedString(dirDepth)).append("\n");
    sb.append("    dirUsage: ").append(toIndentedString(dirUsage)).append("\n");
    sb.append("    pathParts: ").append(toIndentedString(pathParts)).append("\n");
    sb.append("    totalUsage: ").append(toIndentedString(totalUsage)).append("\n");
    sb.append("    usageData: ").append(toIndentedString(usageData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

