/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SmbSettingsGlobalSettingsAuditGlobalSaclItem;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SmbSettingsGlobalSettings
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T09:38:03.973-07:00")
public class SmbSettingsGlobalSettings {
  @SerializedName("access_based_share_enum")
  private Boolean accessBasedShareEnum = null;

  /**
   * Specify level of file share audit events to log.
   */
  @JsonAdapter(AuditFileshareEnum.Adapter.class)
  public enum AuditFileshareEnum {
    ALL("all"),
    
    SUCCESS("success"),
    
    FAILURE("failure"),
    
    NONE("none");

    private String value;

    AuditFileshareEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuditFileshareEnum fromValue(String text) {
      for (AuditFileshareEnum b : AuditFileshareEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuditFileshareEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuditFileshareEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuditFileshareEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuditFileshareEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("audit_fileshare")
  private AuditFileshareEnum auditFileshare = null;

  @SerializedName("audit_global_sacl")
  private List<SmbSettingsGlobalSettingsAuditGlobalSaclItem> auditGlobalSacl = null;

  /**
   * Specify the level of logon audit events to log.
   */
  @JsonAdapter(AuditLogonEnum.Adapter.class)
  public enum AuditLogonEnum {
    ALL("all"),
    
    SUCCESS("success"),
    
    FAILURE("failure"),
    
    NONE("none");

    private String value;

    AuditLogonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuditLogonEnum fromValue(String text) {
      for (AuditLogonEnum b : AuditLogonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuditLogonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuditLogonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuditLogonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuditLogonEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("audit_logon")
  private AuditLogonEnum auditLogon = null;

  @SerializedName("dot_snap_accessible_child")
  private Boolean dotSnapAccessibleChild = null;

  @SerializedName("dot_snap_accessible_root")
  private Boolean dotSnapAccessibleRoot = null;

  @SerializedName("dot_snap_visible_child")
  private Boolean dotSnapVisibleChild = null;

  @SerializedName("dot_snap_visible_root")
  private Boolean dotSnapVisibleRoot = null;

  @SerializedName("enable_security_signatures")
  private Boolean enableSecuritySignatures = null;

  @SerializedName("guest_user")
  private String guestUser = null;

  @SerializedName("ignore_eas")
  private Boolean ignoreEas = null;

  @SerializedName("onefs_cpu_multiplier")
  private Integer onefsCpuMultiplier = null;

  @SerializedName("onefs_num_workers")
  private Integer onefsNumWorkers = null;

  @SerializedName("require_security_signatures")
  private Boolean requireSecuritySignatures = null;

  @SerializedName("server_side_copy")
  private Boolean serverSideCopy = null;

  @SerializedName("server_string")
  private String serverString = null;

  @SerializedName("service")
  private Boolean service = null;

  @SerializedName("srv_cpu_multiplier")
  private Integer srvCpuMultiplier = null;

  @SerializedName("srv_num_workers")
  private Integer srvNumWorkers = null;

  @SerializedName("support_multichannel")
  private Boolean supportMultichannel = null;

  @SerializedName("support_netbios")
  private Boolean supportNetbios = null;

  @SerializedName("support_smb2")
  private Boolean supportSmb2 = null;

  public SmbSettingsGlobalSettings accessBasedShareEnum(Boolean accessBasedShareEnum) {
    this.accessBasedShareEnum = accessBasedShareEnum;
    return this;
  }

   /**
   * Only enumerate files and folders the requesting user has access to.
   * @return accessBasedShareEnum
  **/
  @ApiModelProperty(value = "Only enumerate files and folders the requesting user has access to.")
  public Boolean isAccessBasedShareEnum() {
    return accessBasedShareEnum;
  }

  public void setAccessBasedShareEnum(Boolean accessBasedShareEnum) {
    this.accessBasedShareEnum = accessBasedShareEnum;
  }

  public SmbSettingsGlobalSettings auditFileshare(AuditFileshareEnum auditFileshare) {
    this.auditFileshare = auditFileshare;
    return this;
  }

   /**
   * Specify level of file share audit events to log.
   * @return auditFileshare
  **/
  @ApiModelProperty(value = "Specify level of file share audit events to log.")
  public AuditFileshareEnum getAuditFileshare() {
    return auditFileshare;
  }

  public void setAuditFileshare(AuditFileshareEnum auditFileshare) {
    this.auditFileshare = auditFileshare;
  }

  public SmbSettingsGlobalSettings auditGlobalSacl(List<SmbSettingsGlobalSettingsAuditGlobalSaclItem> auditGlobalSacl) {
    this.auditGlobalSacl = auditGlobalSacl;
    return this;
  }

  public SmbSettingsGlobalSettings addAuditGlobalSaclItem(SmbSettingsGlobalSettingsAuditGlobalSaclItem auditGlobalSaclItem) {
    if (this.auditGlobalSacl == null) {
      this.auditGlobalSacl = new ArrayList<SmbSettingsGlobalSettingsAuditGlobalSaclItem>();
    }
    this.auditGlobalSacl.add(auditGlobalSaclItem);
    return this;
  }

   /**
   * Specifies a list of permissions to audit.
   * @return auditGlobalSacl
  **/
  @ApiModelProperty(value = "Specifies a list of permissions to audit.")
  public List<SmbSettingsGlobalSettingsAuditGlobalSaclItem> getAuditGlobalSacl() {
    return auditGlobalSacl;
  }

  public void setAuditGlobalSacl(List<SmbSettingsGlobalSettingsAuditGlobalSaclItem> auditGlobalSacl) {
    this.auditGlobalSacl = auditGlobalSacl;
  }

  public SmbSettingsGlobalSettings auditLogon(AuditLogonEnum auditLogon) {
    this.auditLogon = auditLogon;
    return this;
  }

   /**
   * Specify the level of logon audit events to log.
   * @return auditLogon
  **/
  @ApiModelProperty(value = "Specify the level of logon audit events to log.")
  public AuditLogonEnum getAuditLogon() {
    return auditLogon;
  }

  public void setAuditLogon(AuditLogonEnum auditLogon) {
    this.auditLogon = auditLogon;
  }

  public SmbSettingsGlobalSettings dotSnapAccessibleChild(Boolean dotSnapAccessibleChild) {
    this.dotSnapAccessibleChild = dotSnapAccessibleChild;
    return this;
  }

   /**
   * Allow access to .snapshot directories in share subdirectories.
   * @return dotSnapAccessibleChild
  **/
  @ApiModelProperty(value = "Allow access to .snapshot directories in share subdirectories.")
  public Boolean isDotSnapAccessibleChild() {
    return dotSnapAccessibleChild;
  }

  public void setDotSnapAccessibleChild(Boolean dotSnapAccessibleChild) {
    this.dotSnapAccessibleChild = dotSnapAccessibleChild;
  }

  public SmbSettingsGlobalSettings dotSnapAccessibleRoot(Boolean dotSnapAccessibleRoot) {
    this.dotSnapAccessibleRoot = dotSnapAccessibleRoot;
    return this;
  }

   /**
   * Allow access to the .snapshot directory in the root of the share.
   * @return dotSnapAccessibleRoot
  **/
  @ApiModelProperty(value = "Allow access to the .snapshot directory in the root of the share.")
  public Boolean isDotSnapAccessibleRoot() {
    return dotSnapAccessibleRoot;
  }

  public void setDotSnapAccessibleRoot(Boolean dotSnapAccessibleRoot) {
    this.dotSnapAccessibleRoot = dotSnapAccessibleRoot;
  }

  public SmbSettingsGlobalSettings dotSnapVisibleChild(Boolean dotSnapVisibleChild) {
    this.dotSnapVisibleChild = dotSnapVisibleChild;
    return this;
  }

   /**
   * Show .snapshot directories in share subdirectories.
   * @return dotSnapVisibleChild
  **/
  @ApiModelProperty(value = "Show .snapshot directories in share subdirectories.")
  public Boolean isDotSnapVisibleChild() {
    return dotSnapVisibleChild;
  }

  public void setDotSnapVisibleChild(Boolean dotSnapVisibleChild) {
    this.dotSnapVisibleChild = dotSnapVisibleChild;
  }

  public SmbSettingsGlobalSettings dotSnapVisibleRoot(Boolean dotSnapVisibleRoot) {
    this.dotSnapVisibleRoot = dotSnapVisibleRoot;
    return this;
  }

   /**
   * Show the .snapshot directory in the root of a share.
   * @return dotSnapVisibleRoot
  **/
  @ApiModelProperty(value = "Show the .snapshot directory in the root of a share.")
  public Boolean isDotSnapVisibleRoot() {
    return dotSnapVisibleRoot;
  }

  public void setDotSnapVisibleRoot(Boolean dotSnapVisibleRoot) {
    this.dotSnapVisibleRoot = dotSnapVisibleRoot;
  }

  public SmbSettingsGlobalSettings enableSecuritySignatures(Boolean enableSecuritySignatures) {
    this.enableSecuritySignatures = enableSecuritySignatures;
    return this;
  }

   /**
   * Indicates whether the server supports signed SMB packets.
   * @return enableSecuritySignatures
  **/
  @ApiModelProperty(value = "Indicates whether the server supports signed SMB packets.")
  public Boolean isEnableSecuritySignatures() {
    return enableSecuritySignatures;
  }

  public void setEnableSecuritySignatures(Boolean enableSecuritySignatures) {
    this.enableSecuritySignatures = enableSecuritySignatures;
  }

  public SmbSettingsGlobalSettings guestUser(String guestUser) {
    this.guestUser = guestUser;
    return this;
  }

   /**
   * Specifies the fully-qualified user to use for guest access.
   * @return guestUser
  **/
  @ApiModelProperty(value = "Specifies the fully-qualified user to use for guest access.")
  public String getGuestUser() {
    return guestUser;
  }

  public void setGuestUser(String guestUser) {
    this.guestUser = guestUser;
  }

  public SmbSettingsGlobalSettings ignoreEas(Boolean ignoreEas) {
    this.ignoreEas = ignoreEas;
    return this;
  }

   /**
   * Specify whether to ignore EAs on files.
   * @return ignoreEas
  **/
  @ApiModelProperty(value = "Specify whether to ignore EAs on files.")
  public Boolean isIgnoreEas() {
    return ignoreEas;
  }

  public void setIgnoreEas(Boolean ignoreEas) {
    this.ignoreEas = ignoreEas;
  }

  public SmbSettingsGlobalSettings onefsCpuMultiplier(Integer onefsCpuMultiplier) {
    this.onefsCpuMultiplier = onefsCpuMultiplier;
    return this;
  }

   /**
   * Specify the number of OneFS driver worker threads per CPU.
   * minimum: 1
   * maximum: 4
   * @return onefsCpuMultiplier
  **/
  @ApiModelProperty(value = "Specify the number of OneFS driver worker threads per CPU.")
  public Integer getOnefsCpuMultiplier() {
    return onefsCpuMultiplier;
  }

  public void setOnefsCpuMultiplier(Integer onefsCpuMultiplier) {
    this.onefsCpuMultiplier = onefsCpuMultiplier;
  }

  public SmbSettingsGlobalSettings onefsNumWorkers(Integer onefsNumWorkers) {
    this.onefsNumWorkers = onefsNumWorkers;
    return this;
  }

   /**
   * Set the maximum number of OneFS driver worker threads.
   * minimum: 0
   * maximum: 1024
   * @return onefsNumWorkers
  **/
  @ApiModelProperty(value = "Set the maximum number of OneFS driver worker threads.")
  public Integer getOnefsNumWorkers() {
    return onefsNumWorkers;
  }

  public void setOnefsNumWorkers(Integer onefsNumWorkers) {
    this.onefsNumWorkers = onefsNumWorkers;
  }

  public SmbSettingsGlobalSettings requireSecuritySignatures(Boolean requireSecuritySignatures) {
    this.requireSecuritySignatures = requireSecuritySignatures;
    return this;
  }

   /**
   * Indicates whether the server requires signed SMB packets.
   * @return requireSecuritySignatures
  **/
  @ApiModelProperty(value = "Indicates whether the server requires signed SMB packets.")
  public Boolean isRequireSecuritySignatures() {
    return requireSecuritySignatures;
  }

  public void setRequireSecuritySignatures(Boolean requireSecuritySignatures) {
    this.requireSecuritySignatures = requireSecuritySignatures;
  }

  public SmbSettingsGlobalSettings serverSideCopy(Boolean serverSideCopy) {
    this.serverSideCopy = serverSideCopy;
    return this;
  }

   /**
   * Enable Server Side Copy.
   * @return serverSideCopy
  **/
  @ApiModelProperty(value = "Enable Server Side Copy.")
  public Boolean isServerSideCopy() {
    return serverSideCopy;
  }

  public void setServerSideCopy(Boolean serverSideCopy) {
    this.serverSideCopy = serverSideCopy;
  }

  public SmbSettingsGlobalSettings serverString(String serverString) {
    this.serverString = serverString;
    return this;
  }

   /**
   * Provides a description of the server.
   * @return serverString
  **/
  @ApiModelProperty(value = "Provides a description of the server.")
  public String getServerString() {
    return serverString;
  }

  public void setServerString(String serverString) {
    this.serverString = serverString;
  }

  public SmbSettingsGlobalSettings service(Boolean service) {
    this.service = service;
    return this;
  }

   /**
   * Specify whether service is enabled.
   * @return service
  **/
  @ApiModelProperty(value = "Specify whether service is enabled.")
  public Boolean isService() {
    return service;
  }

  public void setService(Boolean service) {
    this.service = service;
  }

  public SmbSettingsGlobalSettings srvCpuMultiplier(Integer srvCpuMultiplier) {
    this.srvCpuMultiplier = srvCpuMultiplier;
    return this;
  }

   /**
   * Specify the number of SRV service worker threads per CPU.
   * minimum: 1
   * maximum: 8
   * @return srvCpuMultiplier
  **/
  @ApiModelProperty(value = "Specify the number of SRV service worker threads per CPU.")
  public Integer getSrvCpuMultiplier() {
    return srvCpuMultiplier;
  }

  public void setSrvCpuMultiplier(Integer srvCpuMultiplier) {
    this.srvCpuMultiplier = srvCpuMultiplier;
  }

  public SmbSettingsGlobalSettings srvNumWorkers(Integer srvNumWorkers) {
    this.srvNumWorkers = srvNumWorkers;
    return this;
  }

   /**
   * Set the maximum number of SRV service worker threads.
   * minimum: 0
   * maximum: 1024
   * @return srvNumWorkers
  **/
  @ApiModelProperty(value = "Set the maximum number of SRV service worker threads.")
  public Integer getSrvNumWorkers() {
    return srvNumWorkers;
  }

  public void setSrvNumWorkers(Integer srvNumWorkers) {
    this.srvNumWorkers = srvNumWorkers;
  }

  public SmbSettingsGlobalSettings supportMultichannel(Boolean supportMultichannel) {
    this.supportMultichannel = supportMultichannel;
    return this;
  }

   /**
   * Support multichannel.
   * @return supportMultichannel
  **/
  @ApiModelProperty(value = "Support multichannel.")
  public Boolean isSupportMultichannel() {
    return supportMultichannel;
  }

  public void setSupportMultichannel(Boolean supportMultichannel) {
    this.supportMultichannel = supportMultichannel;
  }

  public SmbSettingsGlobalSettings supportNetbios(Boolean supportNetbios) {
    this.supportNetbios = supportNetbios;
    return this;
  }

   /**
   * Support NetBIOS.
   * @return supportNetbios
  **/
  @ApiModelProperty(value = "Support NetBIOS.")
  public Boolean isSupportNetbios() {
    return supportNetbios;
  }

  public void setSupportNetbios(Boolean supportNetbios) {
    this.supportNetbios = supportNetbios;
  }

  public SmbSettingsGlobalSettings supportSmb2(Boolean supportSmb2) {
    this.supportSmb2 = supportSmb2;
    return this;
  }

   /**
   * Support the SMB2 protocol on the server.
   * @return supportSmb2
  **/
  @ApiModelProperty(value = "Support the SMB2 protocol on the server.")
  public Boolean isSupportSmb2() {
    return supportSmb2;
  }

  public void setSupportSmb2(Boolean supportSmb2) {
    this.supportSmb2 = supportSmb2;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmbSettingsGlobalSettings smbSettingsGlobalSettings = (SmbSettingsGlobalSettings) o;
    return Objects.equals(this.accessBasedShareEnum, smbSettingsGlobalSettings.accessBasedShareEnum) &&
        Objects.equals(this.auditFileshare, smbSettingsGlobalSettings.auditFileshare) &&
        Objects.equals(this.auditGlobalSacl, smbSettingsGlobalSettings.auditGlobalSacl) &&
        Objects.equals(this.auditLogon, smbSettingsGlobalSettings.auditLogon) &&
        Objects.equals(this.dotSnapAccessibleChild, smbSettingsGlobalSettings.dotSnapAccessibleChild) &&
        Objects.equals(this.dotSnapAccessibleRoot, smbSettingsGlobalSettings.dotSnapAccessibleRoot) &&
        Objects.equals(this.dotSnapVisibleChild, smbSettingsGlobalSettings.dotSnapVisibleChild) &&
        Objects.equals(this.dotSnapVisibleRoot, smbSettingsGlobalSettings.dotSnapVisibleRoot) &&
        Objects.equals(this.enableSecuritySignatures, smbSettingsGlobalSettings.enableSecuritySignatures) &&
        Objects.equals(this.guestUser, smbSettingsGlobalSettings.guestUser) &&
        Objects.equals(this.ignoreEas, smbSettingsGlobalSettings.ignoreEas) &&
        Objects.equals(this.onefsCpuMultiplier, smbSettingsGlobalSettings.onefsCpuMultiplier) &&
        Objects.equals(this.onefsNumWorkers, smbSettingsGlobalSettings.onefsNumWorkers) &&
        Objects.equals(this.requireSecuritySignatures, smbSettingsGlobalSettings.requireSecuritySignatures) &&
        Objects.equals(this.serverSideCopy, smbSettingsGlobalSettings.serverSideCopy) &&
        Objects.equals(this.serverString, smbSettingsGlobalSettings.serverString) &&
        Objects.equals(this.service, smbSettingsGlobalSettings.service) &&
        Objects.equals(this.srvCpuMultiplier, smbSettingsGlobalSettings.srvCpuMultiplier) &&
        Objects.equals(this.srvNumWorkers, smbSettingsGlobalSettings.srvNumWorkers) &&
        Objects.equals(this.supportMultichannel, smbSettingsGlobalSettings.supportMultichannel) &&
        Objects.equals(this.supportNetbios, smbSettingsGlobalSettings.supportNetbios) &&
        Objects.equals(this.supportSmb2, smbSettingsGlobalSettings.supportSmb2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessBasedShareEnum, auditFileshare, auditGlobalSacl, auditLogon, dotSnapAccessibleChild, dotSnapAccessibleRoot, dotSnapVisibleChild, dotSnapVisibleRoot, enableSecuritySignatures, guestUser, ignoreEas, onefsCpuMultiplier, onefsNumWorkers, requireSecuritySignatures, serverSideCopy, serverString, service, srvCpuMultiplier, srvNumWorkers, supportMultichannel, supportNetbios, supportSmb2);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmbSettingsGlobalSettings {\n");
    
    sb.append("    accessBasedShareEnum: ").append(toIndentedString(accessBasedShareEnum)).append("\n");
    sb.append("    auditFileshare: ").append(toIndentedString(auditFileshare)).append("\n");
    sb.append("    auditGlobalSacl: ").append(toIndentedString(auditGlobalSacl)).append("\n");
    sb.append("    auditLogon: ").append(toIndentedString(auditLogon)).append("\n");
    sb.append("    dotSnapAccessibleChild: ").append(toIndentedString(dotSnapAccessibleChild)).append("\n");
    sb.append("    dotSnapAccessibleRoot: ").append(toIndentedString(dotSnapAccessibleRoot)).append("\n");
    sb.append("    dotSnapVisibleChild: ").append(toIndentedString(dotSnapVisibleChild)).append("\n");
    sb.append("    dotSnapVisibleRoot: ").append(toIndentedString(dotSnapVisibleRoot)).append("\n");
    sb.append("    enableSecuritySignatures: ").append(toIndentedString(enableSecuritySignatures)).append("\n");
    sb.append("    guestUser: ").append(toIndentedString(guestUser)).append("\n");
    sb.append("    ignoreEas: ").append(toIndentedString(ignoreEas)).append("\n");
    sb.append("    onefsCpuMultiplier: ").append(toIndentedString(onefsCpuMultiplier)).append("\n");
    sb.append("    onefsNumWorkers: ").append(toIndentedString(onefsNumWorkers)).append("\n");
    sb.append("    requireSecuritySignatures: ").append(toIndentedString(requireSecuritySignatures)).append("\n");
    sb.append("    serverSideCopy: ").append(toIndentedString(serverSideCopy)).append("\n");
    sb.append("    serverString: ").append(toIndentedString(serverString)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    srvCpuMultiplier: ").append(toIndentedString(srvCpuMultiplier)).append("\n");
    sb.append("    srvNumWorkers: ").append(toIndentedString(srvNumWorkers)).append("\n");
    sb.append("    supportMultichannel: ").append(toIndentedString(supportMultichannel)).append("\n");
    sb.append("    supportNetbios: ").append(toIndentedString(supportNetbios)).append("\n");
    sb.append("    supportSmb2: ").append(toIndentedString(supportSmb2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

