/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * EventChannelParameters
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class EventChannelParameters {
  @SerializedName("address")
  private List<String> address = null;

  /**
   * Batching criterion.
   */
  @JsonAdapter(BatchEnum.Adapter.class)
  public enum BatchEnum {
    NONE("NONE"),
    
    ALL("ALL"),
    
    CATEGORY("CATEGORY"),
    
    SEVERITY("SEVERITY");

    private String value;

    BatchEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BatchEnum fromValue(String text) {
      for (BatchEnum b : BatchEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BatchEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BatchEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BatchEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BatchEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("batch")
  private BatchEnum batch = null;

  @SerializedName("batch_period")
  private Integer batchPeriod = null;

  @SerializedName("custom_template")
  private String customTemplate = null;

  @SerializedName("send_as")
  private String sendAs = null;

  @SerializedName("smtp_host")
  private String smtpHost = null;

  @SerializedName("smtp_password")
  private String smtpPassword = null;

  @SerializedName("smtp_port")
  private Integer smtpPort = null;

  /**
   * Encryption protocol to use for SMTP.
   */
  @JsonAdapter(SmtpSecurityEnum.Adapter.class)
  public enum SmtpSecurityEnum {
    NONE("NONE"),
    
    STARTTLS("STARTTLS");

    private String value;

    SmtpSecurityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmtpSecurityEnum fromValue(String text) {
      for (SmtpSecurityEnum b : SmtpSecurityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SmtpSecurityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmtpSecurityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmtpSecurityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SmtpSecurityEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("smtp_security")
  private SmtpSecurityEnum smtpSecurity = null;

  @SerializedName("smtp_use_auth")
  private Boolean smtpUseAuth = null;

  @SerializedName("smtp_username")
  private String smtpUsername = null;

  @SerializedName("subject")
  private String subject = null;

  public EventChannelParameters address(List<String> address) {
    this.address = address;
    return this;
  }

  public EventChannelParameters addAddressItem(String addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<String>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Email addresses to send to.
   * @return address
  **/
  @ApiModelProperty(value = "Email addresses to send to.")
  public List<String> getAddress() {
    return address;
  }

  public void setAddress(List<String> address) {
    this.address = address;
  }

  public EventChannelParameters batch(BatchEnum batch) {
    this.batch = batch;
    return this;
  }

   /**
   * Batching criterion.
   * @return batch
  **/
  @ApiModelProperty(value = "Batching criterion.")
  public BatchEnum getBatch() {
    return batch;
  }

  public void setBatch(BatchEnum batch) {
    this.batch = batch;
  }

  public EventChannelParameters batchPeriod(Integer batchPeriod) {
    this.batchPeriod = batchPeriod;
    return this;
  }

   /**
   * Period over which batching is to be performed.
   * @return batchPeriod
  **/
  @ApiModelProperty(value = "Period over which batching is to be performed.")
  public Integer getBatchPeriod() {
    return batchPeriod;
  }

  public void setBatchPeriod(Integer batchPeriod) {
    this.batchPeriod = batchPeriod;
  }

  public EventChannelParameters customTemplate(String customTemplate) {
    this.customTemplate = customTemplate;
    return this;
  }

   /**
   * Path to custom notification template.
   * @return customTemplate
  **/
  @ApiModelProperty(value = "Path to custom notification template.")
  public String getCustomTemplate() {
    return customTemplate;
  }

  public void setCustomTemplate(String customTemplate) {
    this.customTemplate = customTemplate;
  }

  public EventChannelParameters sendAs(String sendAs) {
    this.sendAs = sendAs;
    return this;
  }

   /**
   * Email address to use as from.
   * @return sendAs
  **/
  @ApiModelProperty(value = "Email address to use as from.")
  public String getSendAs() {
    return sendAs;
  }

  public void setSendAs(String sendAs) {
    this.sendAs = sendAs;
  }

  public EventChannelParameters smtpHost(String smtpHost) {
    this.smtpHost = smtpHost;
    return this;
  }

   /**
   * SMTP relay host.
   * @return smtpHost
  **/
  @ApiModelProperty(value = "SMTP relay host.")
  public String getSmtpHost() {
    return smtpHost;
  }

  public void setSmtpHost(String smtpHost) {
    this.smtpHost = smtpHost;
  }

  public EventChannelParameters smtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * Password for SMTP authentication - only if smtp_use_auth true.
   * @return smtpPassword
  **/
  @ApiModelProperty(value = "Password for SMTP authentication - only if smtp_use_auth true.")
  public String getSmtpPassword() {
    return smtpPassword;
  }

  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }

  public EventChannelParameters smtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * SMTP relay port - optional defaults to 25.
   * @return smtpPort
  **/
  @ApiModelProperty(value = "SMTP relay port - optional defaults to 25.")
  public Integer getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
  }

  public EventChannelParameters smtpSecurity(SmtpSecurityEnum smtpSecurity) {
    this.smtpSecurity = smtpSecurity;
    return this;
  }

   /**
   * Encryption protocol to use for SMTP.
   * @return smtpSecurity
  **/
  @ApiModelProperty(value = "Encryption protocol to use for SMTP.")
  public SmtpSecurityEnum getSmtpSecurity() {
    return smtpSecurity;
  }

  public void setSmtpSecurity(SmtpSecurityEnum smtpSecurity) {
    this.smtpSecurity = smtpSecurity;
  }

  public EventChannelParameters smtpUseAuth(Boolean smtpUseAuth) {
    this.smtpUseAuth = smtpUseAuth;
    return this;
  }

   /**
   * Use SMTP authentication - optional defaulst to false.
   * @return smtpUseAuth
  **/
  @ApiModelProperty(value = "Use SMTP authentication - optional defaulst to false.")
  public Boolean isSmtpUseAuth() {
    return smtpUseAuth;
  }

  public void setSmtpUseAuth(Boolean smtpUseAuth) {
    this.smtpUseAuth = smtpUseAuth;
  }

  public EventChannelParameters smtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * Username for SMTP authentication - only if smtp_use_auth true.
   * @return smtpUsername
  **/
  @ApiModelProperty(value = "Username for SMTP authentication - only if smtp_use_auth true.")
  public String getSmtpUsername() {
    return smtpUsername;
  }

  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }

  public EventChannelParameters subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Subject for emails.
   * @return subject
  **/
  @ApiModelProperty(value = "Subject for emails.")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventChannelParameters eventChannelParameters = (EventChannelParameters) o;
    return Objects.equals(this.address, eventChannelParameters.address) &&
        Objects.equals(this.batch, eventChannelParameters.batch) &&
        Objects.equals(this.batchPeriod, eventChannelParameters.batchPeriod) &&
        Objects.equals(this.customTemplate, eventChannelParameters.customTemplate) &&
        Objects.equals(this.sendAs, eventChannelParameters.sendAs) &&
        Objects.equals(this.smtpHost, eventChannelParameters.smtpHost) &&
        Objects.equals(this.smtpPassword, eventChannelParameters.smtpPassword) &&
        Objects.equals(this.smtpPort, eventChannelParameters.smtpPort) &&
        Objects.equals(this.smtpSecurity, eventChannelParameters.smtpSecurity) &&
        Objects.equals(this.smtpUseAuth, eventChannelParameters.smtpUseAuth) &&
        Objects.equals(this.smtpUsername, eventChannelParameters.smtpUsername) &&
        Objects.equals(this.subject, eventChannelParameters.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, batch, batchPeriod, customTemplate, sendAs, smtpHost, smtpPassword, smtpPort, smtpSecurity, smtpUseAuth, smtpUsername, subject);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventChannelParameters {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    batch: ").append(toIndentedString(batch)).append("\n");
    sb.append("    batchPeriod: ").append(toIndentedString(batchPeriod)).append("\n");
    sb.append("    customTemplate: ").append(toIndentedString(customTemplate)).append("\n");
    sb.append("    sendAs: ").append(toIndentedString(sendAs)).append("\n");
    sb.append("    smtpHost: ").append(toIndentedString(smtpHost)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpSecurity: ").append(toIndentedString(smtpSecurity)).append("\n");
    sb.append("    smtpUseAuth: ").append(toIndentedString(smtpUseAuth)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

