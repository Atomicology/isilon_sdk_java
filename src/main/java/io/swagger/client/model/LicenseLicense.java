/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LicenseLicenseTier;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LicenseLicense
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class LicenseLicense {
  @SerializedName("days_since_expiry")
  private Integer daysSinceExpiry = null;

  @SerializedName("days_to_expiry")
  private Integer daysToExpiry = null;

  @SerializedName("expiration")
  private String expiration = null;

  @SerializedName("expired_alert")
  private Boolean expiredAlert = null;

  @SerializedName("expiring_alert")
  private Boolean expiringAlert = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Current status of the license.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNLICENSED("Unlicensed"),
    
    LICENSED("Licensed"),
    
    EXPIRED("Expired"),
    
    EVALUATION("Evaluation"),
    
    EVALUATION_EXPIRED("Evaluation Expired");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("tiers")
  private List<LicenseLicenseTier> tiers = new ArrayList<LicenseLicenseTier>();

  public LicenseLicense daysSinceExpiry(Integer daysSinceExpiry) {
    this.daysSinceExpiry = daysSinceExpiry;
    return this;
  }

   /**
   * Number of days since a license expired.
   * minimum: 0
   * maximum: 4294967295
   * @return daysSinceExpiry
  **/
  @ApiModelProperty(value = "Number of days since a license expired.")
  public Integer getDaysSinceExpiry() {
    return daysSinceExpiry;
  }

  public void setDaysSinceExpiry(Integer daysSinceExpiry) {
    this.daysSinceExpiry = daysSinceExpiry;
  }

  public LicenseLicense daysToExpiry(Integer daysToExpiry) {
    this.daysToExpiry = daysToExpiry;
    return this;
  }

   /**
   * Number of days before a license expires.
   * minimum: 0
   * maximum: 4294967295
   * @return daysToExpiry
  **/
  @ApiModelProperty(value = "Number of days before a license expires.")
  public Integer getDaysToExpiry() {
    return daysToExpiry;
  }

  public void setDaysToExpiry(Integer daysToExpiry) {
    this.daysToExpiry = daysToExpiry;
  }

  public LicenseLicense expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Date of license expiry. Format is YYYY-MM-DD. It is not included if there is no expiration. Feature is considered expired at end of this day. The cluster time is used to determine expiry.
   * @return expiration
  **/
  @ApiModelProperty(value = "Date of license expiry. Format is YYYY-MM-DD. It is not included if there is no expiration. Feature is considered expired at end of this day. The cluster time is used to determine expiry.")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public LicenseLicense expiredAlert(Boolean expiredAlert) {
    this.expiredAlert = expiredAlert;
    return this;
  }

   /**
   * True when we are generating an alert that this feature has expired.
   * @return expiredAlert
  **/
  @ApiModelProperty(required = true, value = "True when we are generating an alert that this feature has expired.")
  public Boolean isExpiredAlert() {
    return expiredAlert;
  }

  public void setExpiredAlert(Boolean expiredAlert) {
    this.expiredAlert = expiredAlert;
  }

  public LicenseLicense expiringAlert(Boolean expiringAlert) {
    this.expiringAlert = expiringAlert;
    return this;
  }

   /**
   * True when we are generating an alert that this feature is expiring.
   * @return expiringAlert
  **/
  @ApiModelProperty(required = true, value = "True when we are generating an alert that this feature is expiring.")
  public Boolean isExpiringAlert() {
    return expiringAlert;
  }

  public void setExpiringAlert(Boolean expiringAlert) {
    this.expiringAlert = expiringAlert;
  }

  public LicenseLicense id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Name of the licensed feature.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Name of the licensed feature.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public LicenseLicense name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the licensed feature.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the licensed feature.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public LicenseLicense status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Current status of the license.
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Current status of the license.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public LicenseLicense tiers(List<LicenseLicenseTier> tiers) {
    this.tiers = tiers;
    return this;
  }

  public LicenseLicense addTiersItem(LicenseLicenseTier tiersItem) {
    this.tiers.add(tiersItem);
    return this;
  }

   /**
   * Tiered License details.
   * @return tiers
  **/
  @ApiModelProperty(required = true, value = "Tiered License details.")
  public List<LicenseLicenseTier> getTiers() {
    return tiers;
  }

  public void setTiers(List<LicenseLicenseTier> tiers) {
    this.tiers = tiers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseLicense licenseLicense = (LicenseLicense) o;
    return Objects.equals(this.daysSinceExpiry, licenseLicense.daysSinceExpiry) &&
        Objects.equals(this.daysToExpiry, licenseLicense.daysToExpiry) &&
        Objects.equals(this.expiration, licenseLicense.expiration) &&
        Objects.equals(this.expiredAlert, licenseLicense.expiredAlert) &&
        Objects.equals(this.expiringAlert, licenseLicense.expiringAlert) &&
        Objects.equals(this.id, licenseLicense.id) &&
        Objects.equals(this.name, licenseLicense.name) &&
        Objects.equals(this.status, licenseLicense.status) &&
        Objects.equals(this.tiers, licenseLicense.tiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysSinceExpiry, daysToExpiry, expiration, expiredAlert, expiringAlert, id, name, status, tiers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseLicense {\n");
    
    sb.append("    daysSinceExpiry: ").append(toIndentedString(daysSinceExpiry)).append("\n");
    sb.append("    daysToExpiry: ").append(toIndentedString(daysToExpiry)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    expiredAlert: ").append(toIndentedString(expiredAlert)).append("\n");
    sb.append("    expiringAlert: ").append(toIndentedString(expiringAlert)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

