/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.QuotaNotification;
import java.io.IOException;

/**
 * QuotaNotificationExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class QuotaNotificationExtended {
  @SerializedName("action_alert")
  private Boolean actionAlert = null;

  @SerializedName("action_email_address")
  private String actionEmailAddress = null;

  @SerializedName("action_email_owner")
  private Boolean actionEmailOwner = null;

  @SerializedName("email_template")
  private String emailTemplate = null;

  @SerializedName("holdoff")
  private Integer holdoff = null;

  @SerializedName("schedule")
  private String schedule = null;

  /**
   * The condition detected.
   */
  @JsonAdapter(ConditionEnum.Adapter.class)
  public enum ConditionEnum {
    EXCEEDED("exceeded"),
    
    DENIED("denied"),
    
    VIOLATED("violated"),
    
    EXPIRED("expired");

    private String value;

    ConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionEnum fromValue(String text) {
      for (ConditionEnum b : ConditionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ConditionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("condition")
  private ConditionEnum condition = null;

  @SerializedName("id")
  private String id = null;

  /**
   * The quota threshold detected.
   */
  @JsonAdapter(ThresholdEnum.Adapter.class)
  public enum ThresholdEnum {
    HARD("hard"),
    
    SOFT("soft"),
    
    ADVISORY("advisory");

    private String value;

    ThresholdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThresholdEnum fromValue(String text) {
      for (ThresholdEnum b : ThresholdEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ThresholdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThresholdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThresholdEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ThresholdEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("threshold")
  private ThresholdEnum threshold = null;

  public QuotaNotificationExtended actionAlert(Boolean actionAlert) {
    this.actionAlert = actionAlert;
    return this;
  }

   /**
   * Send alert when rule matches.
   * @return actionAlert
  **/
  @ApiModelProperty(required = true, value = "Send alert when rule matches.")
  public Boolean isActionAlert() {
    return actionAlert;
  }

  public void setActionAlert(Boolean actionAlert) {
    this.actionAlert = actionAlert;
  }

  public QuotaNotificationExtended actionEmailAddress(String actionEmailAddress) {
    this.actionEmailAddress = actionEmailAddress;
    return this;
  }

   /**
   * Email a specific email address when rule matches.
   * @return actionEmailAddress
  **/
  @ApiModelProperty(value = "Email a specific email address when rule matches.")
  public String getActionEmailAddress() {
    return actionEmailAddress;
  }

  public void setActionEmailAddress(String actionEmailAddress) {
    this.actionEmailAddress = actionEmailAddress;
  }

  public QuotaNotificationExtended actionEmailOwner(Boolean actionEmailOwner) {
    this.actionEmailOwner = actionEmailOwner;
    return this;
  }

   /**
   * Email quota domain owner when rule matches.
   * @return actionEmailOwner
  **/
  @ApiModelProperty(required = true, value = "Email quota domain owner when rule matches.")
  public Boolean isActionEmailOwner() {
    return actionEmailOwner;
  }

  public void setActionEmailOwner(Boolean actionEmailOwner) {
    this.actionEmailOwner = actionEmailOwner;
  }

  public QuotaNotificationExtended emailTemplate(String emailTemplate) {
    this.emailTemplate = emailTemplate;
    return this;
  }

   /**
   * Path of optional /ifs template file used for email actions.
   * @return emailTemplate
  **/
  @ApiModelProperty(value = "Path of optional /ifs template file used for email actions.")
  public String getEmailTemplate() {
    return emailTemplate;
  }

  public void setEmailTemplate(String emailTemplate) {
    this.emailTemplate = emailTemplate;
  }

  public QuotaNotificationExtended holdoff(Integer holdoff) {
    this.holdoff = holdoff;
    return this;
  }

   /**
   * Time to wait between detections for rules triggered by user actions.
   * @return holdoff
  **/
  @ApiModelProperty(value = "Time to wait between detections for rules triggered by user actions.")
  public Integer getHoldoff() {
    return holdoff;
  }

  public void setHoldoff(Integer holdoff) {
    this.holdoff = holdoff;
  }

  public QuotaNotificationExtended schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Schedule for rules that repeatedly notify.
   * @return schedule
  **/
  @ApiModelProperty(value = "Schedule for rules that repeatedly notify.")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }

  public QuotaNotificationExtended condition(ConditionEnum condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The condition detected.
   * @return condition
  **/
  @ApiModelProperty(required = true, value = "The condition detected.")
  public ConditionEnum getCondition() {
    return condition;
  }

  public void setCondition(ConditionEnum condition) {
    this.condition = condition;
  }

  public QuotaNotificationExtended id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The system ID given to the rule.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "The system ID given to the rule.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public QuotaNotificationExtended threshold(ThresholdEnum threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * The quota threshold detected.
   * @return threshold
  **/
  @ApiModelProperty(required = true, value = "The quota threshold detected.")
  public ThresholdEnum getThreshold() {
    return threshold;
  }

  public void setThreshold(ThresholdEnum threshold) {
    this.threshold = threshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuotaNotificationExtended quotaNotificationExtended = (QuotaNotificationExtended) o;
    return Objects.equals(this.actionAlert, quotaNotificationExtended.actionAlert) &&
        Objects.equals(this.actionEmailAddress, quotaNotificationExtended.actionEmailAddress) &&
        Objects.equals(this.actionEmailOwner, quotaNotificationExtended.actionEmailOwner) &&
        Objects.equals(this.emailTemplate, quotaNotificationExtended.emailTemplate) &&
        Objects.equals(this.holdoff, quotaNotificationExtended.holdoff) &&
        Objects.equals(this.schedule, quotaNotificationExtended.schedule) &&
        Objects.equals(this.condition, quotaNotificationExtended.condition) &&
        Objects.equals(this.id, quotaNotificationExtended.id) &&
        Objects.equals(this.threshold, quotaNotificationExtended.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionAlert, actionEmailAddress, actionEmailOwner, emailTemplate, holdoff, schedule, condition, id, threshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuotaNotificationExtended {\n");
    
    sb.append("    actionAlert: ").append(toIndentedString(actionAlert)).append("\n");
    sb.append("    actionEmailAddress: ").append(toIndentedString(actionEmailAddress)).append("\n");
    sb.append("    actionEmailOwner: ").append(toIndentedString(actionEmailOwner)).append("\n");
    sb.append("    emailTemplate: ").append(toIndentedString(emailTemplate)).append("\n");
    sb.append("    holdoff: ").append(toIndentedString(holdoff)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

