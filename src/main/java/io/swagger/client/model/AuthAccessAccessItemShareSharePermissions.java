/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AuthAccessAccessItemShareSharePermissionsShareRelevantAce;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AuthAccessAccessItemShareSharePermissions
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class AuthAccessAccessItemShareSharePermissions {
  @SerializedName("expected_permissions")
  private String expectedPermissions = null;

  @SerializedName("impersonate_guest")
  private Boolean impersonateGuest = null;

  @SerializedName("impersonate_user")
  private Boolean impersonateUser = null;

  @SerializedName("run_as_root")
  private Boolean runAsRoot = null;

  @SerializedName("share_relevant_aces")
  private List<AuthAccessAccessItemShareSharePermissionsShareRelevantAce> shareRelevantAces = null;

  public AuthAccessAccessItemShareSharePermissions expectedPermissions(String expectedPermissions) {
    this.expectedPermissions = expectedPermissions;
    return this;
  }

   /**
   * Returns Share level permissions for the user.{ &#39;read&#39; , &#39;write&#39; , &#39;full&#39; or &#39;none&#39; will be the values}
   * @return expectedPermissions
  **/
  @ApiModelProperty(value = "Returns Share level permissions for the user.{ 'read' , 'write' , 'full' or 'none' will be the values}")
  public String getExpectedPermissions() {
    return expectedPermissions;
  }

  public void setExpectedPermissions(String expectedPermissions) {
    this.expectedPermissions = expectedPermissions;
  }

  public AuthAccessAccessItemShareSharePermissions impersonateGuest(Boolean impersonateGuest) {
    this.impersonateGuest = impersonateGuest;
    return this;
  }

   /**
   * Returns whether impersonate guest setting is enabled for the user on the share.
   * @return impersonateGuest
  **/
  @ApiModelProperty(value = "Returns whether impersonate guest setting is enabled for the user on the share.")
  public Boolean isImpersonateGuest() {
    return impersonateGuest;
  }

  public void setImpersonateGuest(Boolean impersonateGuest) {
    this.impersonateGuest = impersonateGuest;
  }

  public AuthAccessAccessItemShareSharePermissions impersonateUser(Boolean impersonateUser) {
    this.impersonateUser = impersonateUser;
    return this;
  }

   /**
   * Returns whether impersonate user setting is enabled on the share
   * @return impersonateUser
  **/
  @ApiModelProperty(value = "Returns whether impersonate user setting is enabled on the share")
  public Boolean isImpersonateUser() {
    return impersonateUser;
  }

  public void setImpersonateUser(Boolean impersonateUser) {
    this.impersonateUser = impersonateUser;
  }

  public AuthAccessAccessItemShareSharePermissions runAsRoot(Boolean runAsRoot) {
    this.runAsRoot = runAsRoot;
    return this;
  }

   /**
   * Returns whether run as root is enabled for the user on the share
   * @return runAsRoot
  **/
  @ApiModelProperty(value = "Returns whether run as root is enabled for the user on the share")
  public Boolean isRunAsRoot() {
    return runAsRoot;
  }

  public void setRunAsRoot(Boolean runAsRoot) {
    this.runAsRoot = runAsRoot;
  }

  public AuthAccessAccessItemShareSharePermissions shareRelevantAces(List<AuthAccessAccessItemShareSharePermissionsShareRelevantAce> shareRelevantAces) {
    this.shareRelevantAces = shareRelevantAces;
    return this;
  }

  public AuthAccessAccessItemShareSharePermissions addShareRelevantAcesItem(AuthAccessAccessItemShareSharePermissionsShareRelevantAce shareRelevantAcesItem) {
    if (this.shareRelevantAces == null) {
      this.shareRelevantAces = new ArrayList<AuthAccessAccessItemShareSharePermissionsShareRelevantAce>();
    }
    this.shareRelevantAces.add(shareRelevantAcesItem);
    return this;
  }

   /**
   * Specifies a list of the relevant Access Control Entries withrespect to the user in the share.
   * @return shareRelevantAces
  **/
  @ApiModelProperty(value = "Specifies a list of the relevant Access Control Entries withrespect to the user in the share.")
  public List<AuthAccessAccessItemShareSharePermissionsShareRelevantAce> getShareRelevantAces() {
    return shareRelevantAces;
  }

  public void setShareRelevantAces(List<AuthAccessAccessItemShareSharePermissionsShareRelevantAce> shareRelevantAces) {
    this.shareRelevantAces = shareRelevantAces;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthAccessAccessItemShareSharePermissions authAccessAccessItemShareSharePermissions = (AuthAccessAccessItemShareSharePermissions) o;
    return Objects.equals(this.expectedPermissions, authAccessAccessItemShareSharePermissions.expectedPermissions) &&
        Objects.equals(this.impersonateGuest, authAccessAccessItemShareSharePermissions.impersonateGuest) &&
        Objects.equals(this.impersonateUser, authAccessAccessItemShareSharePermissions.impersonateUser) &&
        Objects.equals(this.runAsRoot, authAccessAccessItemShareSharePermissions.runAsRoot) &&
        Objects.equals(this.shareRelevantAces, authAccessAccessItemShareSharePermissions.shareRelevantAces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedPermissions, impersonateGuest, impersonateUser, runAsRoot, shareRelevantAces);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthAccessAccessItemShareSharePermissions {\n");
    
    sb.append("    expectedPermissions: ").append(toIndentedString(expectedPermissions)).append("\n");
    sb.append("    impersonateGuest: ").append(toIndentedString(impersonateGuest)).append("\n");
    sb.append("    impersonateUser: ").append(toIndentedString(impersonateUser)).append("\n");
    sb.append("    runAsRoot: ").append(toIndentedString(runAsRoot)).append("\n");
    sb.append("    shareRelevantAces: ").append(toIndentedString(shareRelevantAces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

