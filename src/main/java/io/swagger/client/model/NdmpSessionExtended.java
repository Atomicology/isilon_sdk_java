/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NdmpSessionExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class NdmpSessionExtended {
  @SerializedName("data_bytes_transferred")
  private Integer dataBytesTransferred = null;

  /**
   * State of the NDMP Data Service
   */
  @JsonAdapter(DataStateEnum.Adapter.class)
  public enum DataStateEnum {
    IDLE("IDLE"),
    
    LISTEN("LISTEN"),
    
    ACTIVE("ACTIVE"),
    
    CONNECTED("CONNECTED"),
    
    HALTED("HALTED"),
    
    INVALID("INVALID");

    private String value;

    DataStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataStateEnum fromValue(String text) {
      for (DataStateEnum b : DataStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DataStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DataStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("data_state")
  private DataStateEnum dataState = null;

  @SerializedName("dest_path")
  private String destPath = null;

  @SerializedName("dma_ip_addr")
  private String dmaIpAddr = null;

  @SerializedName("elapsed_time")
  private Integer elapsedTime = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("mover_bytes_transferred")
  private Integer moverBytesTransferred = null;

  /**
   * State of the NDMP Mover Service
   */
  @JsonAdapter(MoverStateEnum.Adapter.class)
  public enum MoverStateEnum {
    IDLE("IDLE"),
    
    LISTEN("LISTEN"),
    
    ACTIVE("ACTIVE"),
    
    PAUSED("PAUSED"),
    
    HALTED("HALTED"),
    
    INVALID("INVALID");

    private String value;

    MoverStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MoverStateEnum fromValue(String text) {
      for (MoverStateEnum b : MoverStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MoverStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MoverStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MoverStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MoverStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mover_state")
  private MoverStateEnum moverState = null;

  /**
   * The type of backup session
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    NONE("None"),
    
    BACKUP("Backup"),
    
    RECOVER("Recover"),
    
    RECOVER_FILE_HISTORY("Recover file history");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String text) {
      for (OperationEnum b : OperationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operation")
  private OperationEnum operation = null;

  @SerializedName("remote_ip_addr")
  private String remoteIpAddr = null;

  @SerializedName("scsi_device")
  private String scsiDevice = null;

  @SerializedName("session")
  private String session = null;

  @SerializedName("source_path")
  private String sourcePath = null;

  @SerializedName("start_time")
  private Integer startTime = null;

  @SerializedName("tape_device")
  private String tapeDevice = null;

  /**
   * Describes the mode in which the tape is opened
   */
  @JsonAdapter(TapeOpenModeEnum.Adapter.class)
  public enum TapeOpenModeEnum {
    READ("Read"),
    
    READ_WRITE("Read/Write"),
    
    RAW("Raw"),
    
    INVALID("Invalid");

    private String value;

    TapeOpenModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TapeOpenModeEnum fromValue(String text) {
      for (TapeOpenModeEnum b : TapeOpenModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TapeOpenModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TapeOpenModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TapeOpenModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TapeOpenModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("tape_open_mode")
  private TapeOpenModeEnum tapeOpenMode = null;

  @SerializedName("throughput")
  private Integer throughput = null;

  public NdmpSessionExtended dataBytesTransferred(Integer dataBytesTransferred) {
    this.dataBytesTransferred = dataBytesTransferred;
    return this;
  }

   /**
   * Bytes transferred to/from the filesystem
   * @return dataBytesTransferred
  **/
  @ApiModelProperty(required = true, value = "Bytes transferred to/from the filesystem")
  public Integer getDataBytesTransferred() {
    return dataBytesTransferred;
  }

  public void setDataBytesTransferred(Integer dataBytesTransferred) {
    this.dataBytesTransferred = dataBytesTransferred;
  }

  public NdmpSessionExtended dataState(DataStateEnum dataState) {
    this.dataState = dataState;
    return this;
  }

   /**
   * State of the NDMP Data Service
   * @return dataState
  **/
  @ApiModelProperty(required = true, value = "State of the NDMP Data Service")
  public DataStateEnum getDataState() {
    return dataState;
  }

  public void setDataState(DataStateEnum dataState) {
    this.dataState = dataState;
  }

  public NdmpSessionExtended destPath(String destPath) {
    this.destPath = destPath;
    return this;
  }

   /**
   * The path being recovered to
   * @return destPath
  **/
  @ApiModelProperty(required = true, value = "The path being recovered to")
  public String getDestPath() {
    return destPath;
  }

  public void setDestPath(String destPath) {
    this.destPath = destPath;
  }

  public NdmpSessionExtended dmaIpAddr(String dmaIpAddr) {
    this.dmaIpAddr = dmaIpAddr;
    return this;
  }

   /**
   * IP address of the DMA
   * @return dmaIpAddr
  **/
  @ApiModelProperty(required = true, value = "IP address of the DMA")
  public String getDmaIpAddr() {
    return dmaIpAddr;
  }

  public void setDmaIpAddr(String dmaIpAddr) {
    this.dmaIpAddr = dmaIpAddr;
  }

  public NdmpSessionExtended elapsedTime(Integer elapsedTime) {
    this.elapsedTime = elapsedTime;
    return this;
  }

   /**
   * Number of seconds elapsed since the backup was started
   * @return elapsedTime
  **/
  @ApiModelProperty(required = true, value = "Number of seconds elapsed since the backup was started")
  public Integer getElapsedTime() {
    return elapsedTime;
  }

  public void setElapsedTime(Integer elapsedTime) {
    this.elapsedTime = elapsedTime;
  }

  public NdmpSessionExtended id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique display ID.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique display ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public NdmpSessionExtended moverBytesTransferred(Integer moverBytesTransferred) {
    this.moverBytesTransferred = moverBytesTransferred;
    return this;
  }

   /**
   * Bytes transferred to/from tape or remote writer
   * @return moverBytesTransferred
  **/
  @ApiModelProperty(required = true, value = "Bytes transferred to/from tape or remote writer")
  public Integer getMoverBytesTransferred() {
    return moverBytesTransferred;
  }

  public void setMoverBytesTransferred(Integer moverBytesTransferred) {
    this.moverBytesTransferred = moverBytesTransferred;
  }

  public NdmpSessionExtended moverState(MoverStateEnum moverState) {
    this.moverState = moverState;
    return this;
  }

   /**
   * State of the NDMP Mover Service
   * @return moverState
  **/
  @ApiModelProperty(required = true, value = "State of the NDMP Mover Service")
  public MoverStateEnum getMoverState() {
    return moverState;
  }

  public void setMoverState(MoverStateEnum moverState) {
    this.moverState = moverState;
  }

  public NdmpSessionExtended operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * The type of backup session
   * @return operation
  **/
  @ApiModelProperty(required = true, value = "The type of backup session")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

  public NdmpSessionExtended remoteIpAddr(String remoteIpAddr) {
    this.remoteIpAddr = remoteIpAddr;
    return this;
  }

   /**
   * IP address of the remote NDMP participant
   * @return remoteIpAddr
  **/
  @ApiModelProperty(required = true, value = "IP address of the remote NDMP participant")
  public String getRemoteIpAddr() {
    return remoteIpAddr;
  }

  public void setRemoteIpAddr(String remoteIpAddr) {
    this.remoteIpAddr = remoteIpAddr;
  }

  public NdmpSessionExtended scsiDevice(String scsiDevice) {
    this.scsiDevice = scsiDevice;
    return this;
  }

   /**
   * Name of the media changer device used if any
   * @return scsiDevice
  **/
  @ApiModelProperty(required = true, value = "Name of the media changer device used if any")
  public String getScsiDevice() {
    return scsiDevice;
  }

  public void setScsiDevice(String scsiDevice) {
    this.scsiDevice = scsiDevice;
  }

  public NdmpSessionExtended session(String session) {
    this.session = session;
    return this;
  }

   /**
   * Session ID in form &lt;lnn&gt;.&lt;pid&gt;.
   * @return session
  **/
  @ApiModelProperty(required = true, value = "Session ID in form <lnn>.<pid>.")
  public String getSession() {
    return session;
  }

  public void setSession(String session) {
    this.session = session;
  }

  public NdmpSessionExtended sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

   /**
   * The path being backed up
   * @return sourcePath
  **/
  @ApiModelProperty(required = true, value = "The path being backed up")
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }

  public NdmpSessionExtended startTime(Integer startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Time backup was started in seconds since epoch
   * @return startTime
  **/
  @ApiModelProperty(required = true, value = "Time backup was started in seconds since epoch")
  public Integer getStartTime() {
    return startTime;
  }

  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }

  public NdmpSessionExtended tapeDevice(String tapeDevice) {
    this.tapeDevice = tapeDevice;
    return this;
  }

   /**
   * Name of the tape device used if any
   * @return tapeDevice
  **/
  @ApiModelProperty(required = true, value = "Name of the tape device used if any")
  public String getTapeDevice() {
    return tapeDevice;
  }

  public void setTapeDevice(String tapeDevice) {
    this.tapeDevice = tapeDevice;
  }

  public NdmpSessionExtended tapeOpenMode(TapeOpenModeEnum tapeOpenMode) {
    this.tapeOpenMode = tapeOpenMode;
    return this;
  }

   /**
   * Describes the mode in which the tape is opened
   * @return tapeOpenMode
  **/
  @ApiModelProperty(required = true, value = "Describes the mode in which the tape is opened")
  public TapeOpenModeEnum getTapeOpenMode() {
    return tapeOpenMode;
  }

  public void setTapeOpenMode(TapeOpenModeEnum tapeOpenMode) {
    this.tapeOpenMode = tapeOpenMode;
  }

  public NdmpSessionExtended throughput(Integer throughput) {
    this.throughput = throughput;
    return this;
  }

   /**
   * The throughput in MB/s
   * @return throughput
  **/
  @ApiModelProperty(required = true, value = "The throughput in MB/s")
  public Integer getThroughput() {
    return throughput;
  }

  public void setThroughput(Integer throughput) {
    this.throughput = throughput;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NdmpSessionExtended ndmpSessionExtended = (NdmpSessionExtended) o;
    return Objects.equals(this.dataBytesTransferred, ndmpSessionExtended.dataBytesTransferred) &&
        Objects.equals(this.dataState, ndmpSessionExtended.dataState) &&
        Objects.equals(this.destPath, ndmpSessionExtended.destPath) &&
        Objects.equals(this.dmaIpAddr, ndmpSessionExtended.dmaIpAddr) &&
        Objects.equals(this.elapsedTime, ndmpSessionExtended.elapsedTime) &&
        Objects.equals(this.id, ndmpSessionExtended.id) &&
        Objects.equals(this.moverBytesTransferred, ndmpSessionExtended.moverBytesTransferred) &&
        Objects.equals(this.moverState, ndmpSessionExtended.moverState) &&
        Objects.equals(this.operation, ndmpSessionExtended.operation) &&
        Objects.equals(this.remoteIpAddr, ndmpSessionExtended.remoteIpAddr) &&
        Objects.equals(this.scsiDevice, ndmpSessionExtended.scsiDevice) &&
        Objects.equals(this.session, ndmpSessionExtended.session) &&
        Objects.equals(this.sourcePath, ndmpSessionExtended.sourcePath) &&
        Objects.equals(this.startTime, ndmpSessionExtended.startTime) &&
        Objects.equals(this.tapeDevice, ndmpSessionExtended.tapeDevice) &&
        Objects.equals(this.tapeOpenMode, ndmpSessionExtended.tapeOpenMode) &&
        Objects.equals(this.throughput, ndmpSessionExtended.throughput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataBytesTransferred, dataState, destPath, dmaIpAddr, elapsedTime, id, moverBytesTransferred, moverState, operation, remoteIpAddr, scsiDevice, session, sourcePath, startTime, tapeDevice, tapeOpenMode, throughput);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NdmpSessionExtended {\n");
    
    sb.append("    dataBytesTransferred: ").append(toIndentedString(dataBytesTransferred)).append("\n");
    sb.append("    dataState: ").append(toIndentedString(dataState)).append("\n");
    sb.append("    destPath: ").append(toIndentedString(destPath)).append("\n");
    sb.append("    dmaIpAddr: ").append(toIndentedString(dmaIpAddr)).append("\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    moverBytesTransferred: ").append(toIndentedString(moverBytesTransferred)).append("\n");
    sb.append("    moverState: ").append(toIndentedString(moverState)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    remoteIpAddr: ").append(toIndentedString(remoteIpAddr)).append("\n");
    sb.append("    scsiDevice: ").append(toIndentedString(scsiDevice)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    tapeDevice: ").append(toIndentedString(tapeDevice)).append("\n");
    sb.append("    tapeOpenMode: ").append(toIndentedString(tapeOpenMode)).append("\n");
    sb.append("    throughput: ").append(toIndentedString(throughput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

