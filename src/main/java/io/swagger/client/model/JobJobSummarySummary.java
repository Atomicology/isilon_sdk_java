/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * JobJobSummarySummary
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class JobJobSummarySummary {
  @SerializedName("cluster_is_degraded")
  private Boolean clusterIsDegraded = null;

  @SerializedName("connected")
  private Boolean connected = null;

  @SerializedName("coordinator")
  private Integer coordinator = null;

  @SerializedName("disconnected_nodes")
  private List<Integer> disconnectedNodes = new ArrayList<Integer>();

  @SerializedName("down_or_read_only_nodes")
  private Boolean downOrReadOnlyNodes = null;

  @SerializedName("next_jid")
  private Integer nextJid = null;

  @SerializedName("run_degraded")
  private Boolean runDegraded = null;

  @SerializedName("stats_ready")
  private Boolean statsReady = null;

  public JobJobSummarySummary clusterIsDegraded(Boolean clusterIsDegraded) {
    this.clusterIsDegraded = clusterIsDegraded;
    return this;
  }

   /**
   * Whether the cluster is in a degraded state.  Note this is from the perspective of the node handling the query, which might be different from another node.
   * @return clusterIsDegraded
  **/
  @ApiModelProperty(required = true, value = "Whether the cluster is in a degraded state.  Note this is from the perspective of the node handling the query, which might be different from another node.")
  public Boolean isClusterIsDegraded() {
    return clusterIsDegraded;
  }

  public void setClusterIsDegraded(Boolean clusterIsDegraded) {
    this.clusterIsDegraded = clusterIsDegraded;
  }

  public JobJobSummarySummary connected(Boolean connected) {
    this.connected = connected;
    return this;
  }

   /**
   * Whether isi_job_d instances on all up nodes in the cluster are connected to the coordinator.
   * @return connected
  **/
  @ApiModelProperty(required = true, value = "Whether isi_job_d instances on all up nodes in the cluster are connected to the coordinator.")
  public Boolean isConnected() {
    return connected;
  }

  public void setConnected(Boolean connected) {
    this.connected = connected;
  }

  public JobJobSummarySummary coordinator(Integer coordinator) {
    this.coordinator = coordinator;
    return this;
  }

   /**
   * The devid of the job engine coordinator.
   * @return coordinator
  **/
  @ApiModelProperty(required = true, value = "The devid of the job engine coordinator.")
  public Integer getCoordinator() {
    return coordinator;
  }

  public void setCoordinator(Integer coordinator) {
    this.coordinator = coordinator;
  }

  public JobJobSummarySummary disconnectedNodes(List<Integer> disconnectedNodes) {
    this.disconnectedNodes = disconnectedNodes;
    return this;
  }

  public JobJobSummarySummary addDisconnectedNodesItem(Integer disconnectedNodesItem) {
    this.disconnectedNodes.add(disconnectedNodesItem);
    return this;
  }

   /**
   * If connected&#x3D;false, this is the set of devids that are not connected to the coordinator.
   * @return disconnectedNodes
  **/
  @ApiModelProperty(required = true, value = "If connected=false, this is the set of devids that are not connected to the coordinator.")
  public List<Integer> getDisconnectedNodes() {
    return disconnectedNodes;
  }

  public void setDisconnectedNodes(List<Integer> disconnectedNodes) {
    this.disconnectedNodes = disconnectedNodes;
  }

  public JobJobSummarySummary downOrReadOnlyNodes(Boolean downOrReadOnlyNodes) {
    this.downOrReadOnlyNodes = downOrReadOnlyNodes;
    return this;
  }

   /**
   * Whether the cluster has any down or read-only nodes.  These nodes are not considered in the connected property.
   * @return downOrReadOnlyNodes
  **/
  @ApiModelProperty(required = true, value = "Whether the cluster has any down or read-only nodes.  These nodes are not considered in the connected property.")
  public Boolean isDownOrReadOnlyNodes() {
    return downOrReadOnlyNodes;
  }

  public void setDownOrReadOnlyNodes(Boolean downOrReadOnlyNodes) {
    this.downOrReadOnlyNodes = downOrReadOnlyNodes;
  }

  public JobJobSummarySummary nextJid(Integer nextJid) {
    this.nextJid = nextJid;
    return this;
  }

   /**
   * The job ID to be assigned to the next job.
   * @return nextJid
  **/
  @ApiModelProperty(required = true, value = "The job ID to be assigned to the next job.")
  public Integer getNextJid() {
    return nextJid;
  }

  public void setNextJid(Integer nextJid) {
    this.nextJid = nextJid;
  }

  public JobJobSummarySummary runDegraded(Boolean runDegraded) {
    this.runDegraded = runDegraded;
    return this;
  }

   /**
   * Whether the job engine would allow most jobs to run even when the cluster is in a degraded state.
   * @return runDegraded
  **/
  @ApiModelProperty(required = true, value = "Whether the job engine would allow most jobs to run even when the cluster is in a degraded state.")
  public Boolean isRunDegraded() {
    return runDegraded;
  }

  public void setRunDegraded(Boolean runDegraded) {
    this.runDegraded = runDegraded;
  }

  public JobJobSummarySummary statsReady(Boolean statsReady) {
    this.statsReady = statsReady;
    return this;
  }

   /**
   * Whether the coordinator has recently gathered statistics for all nodes in the cluster.
   * @return statsReady
  **/
  @ApiModelProperty(required = true, value = "Whether the coordinator has recently gathered statistics for all nodes in the cluster.")
  public Boolean isStatsReady() {
    return statsReady;
  }

  public void setStatsReady(Boolean statsReady) {
    this.statsReady = statsReady;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobJobSummarySummary jobJobSummarySummary = (JobJobSummarySummary) o;
    return Objects.equals(this.clusterIsDegraded, jobJobSummarySummary.clusterIsDegraded) &&
        Objects.equals(this.connected, jobJobSummarySummary.connected) &&
        Objects.equals(this.coordinator, jobJobSummarySummary.coordinator) &&
        Objects.equals(this.disconnectedNodes, jobJobSummarySummary.disconnectedNodes) &&
        Objects.equals(this.downOrReadOnlyNodes, jobJobSummarySummary.downOrReadOnlyNodes) &&
        Objects.equals(this.nextJid, jobJobSummarySummary.nextJid) &&
        Objects.equals(this.runDegraded, jobJobSummarySummary.runDegraded) &&
        Objects.equals(this.statsReady, jobJobSummarySummary.statsReady);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIsDegraded, connected, coordinator, disconnectedNodes, downOrReadOnlyNodes, nextJid, runDegraded, statsReady);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobJobSummarySummary {\n");
    
    sb.append("    clusterIsDegraded: ").append(toIndentedString(clusterIsDegraded)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    coordinator: ").append(toIndentedString(coordinator)).append("\n");
    sb.append("    disconnectedNodes: ").append(toIndentedString(disconnectedNodes)).append("\n");
    sb.append("    downOrReadOnlyNodes: ").append(toIndentedString(downOrReadOnlyNodes)).append("\n");
    sb.append("    nextJid: ").append(toIndentedString(nextJid)).append("\n");
    sb.append("    runDegraded: ").append(toIndentedString(runDegraded)).append("\n");
    sb.append("    statsReady: ").append(toIndentedString(statsReady)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

