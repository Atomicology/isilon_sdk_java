/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SettingsAclsAclPolicySettings
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class SettingsAclsAclPolicySettings {
  @SerializedName("access")
  private String access = null;

  @SerializedName("calcmode")
  private String calcmode = null;

  @SerializedName("calcmode_group")
  private String calcmodeGroup = null;

  @SerializedName("calcmode_owner")
  private String calcmodeOwner = null;

  @SerializedName("chmod")
  private String chmod = null;

  @SerializedName("chmod_007")
  private String chmod007 = null;

  @SerializedName("chmod_inheritable")
  private String chmodInheritable = null;

  @SerializedName("chown")
  private String chown = null;

  @SerializedName("create_over_smb")
  private String createOverSmb = null;

  @SerializedName("dos_attr")
  private String dosAttr = null;

  @SerializedName("group_owner_inheritance")
  private String groupOwnerInheritance = null;

  @SerializedName("rwx")
  private String rwx = null;

  @SerializedName("synthetic_denies")
  private String syntheticDenies = null;

  @SerializedName("utimes")
  private String utimes = null;

  public SettingsAclsAclPolicySettings access(String access) {
    this.access = access;
    return this;
  }

   /**
   * Access checks (chmod, chown).
   * @return access
  **/
  @ApiModelProperty(value = "Access checks (chmod, chown).")
  public String getAccess() {
    return access;
  }

  public void setAccess(String access) {
    this.access = access;
  }

  public SettingsAclsAclPolicySettings calcmode(String calcmode) {
    this.calcmode = calcmode;
    return this;
  }

   /**
   * Displayed mode bits.
   * @return calcmode
  **/
  @ApiModelProperty(value = "Displayed mode bits.")
  public String getCalcmode() {
    return calcmode;
  }

  public void setCalcmode(String calcmode) {
    this.calcmode = calcmode;
  }

  public SettingsAclsAclPolicySettings calcmodeGroup(String calcmodeGroup) {
    this.calcmodeGroup = calcmodeGroup;
    return this;
  }

   /**
   * Approximate group mode bits when ACL exists.
   * @return calcmodeGroup
  **/
  @ApiModelProperty(value = "Approximate group mode bits when ACL exists.")
  public String getCalcmodeGroup() {
    return calcmodeGroup;
  }

  public void setCalcmodeGroup(String calcmodeGroup) {
    this.calcmodeGroup = calcmodeGroup;
  }

  public SettingsAclsAclPolicySettings calcmodeOwner(String calcmodeOwner) {
    this.calcmodeOwner = calcmodeOwner;
    return this;
  }

   /**
   * Approximate owner mode bits when ACL exists.
   * @return calcmodeOwner
  **/
  @ApiModelProperty(value = "Approximate owner mode bits when ACL exists.")
  public String getCalcmodeOwner() {
    return calcmodeOwner;
  }

  public void setCalcmodeOwner(String calcmodeOwner) {
    this.calcmodeOwner = calcmodeOwner;
  }

  public SettingsAclsAclPolicySettings chmod(String chmod) {
    this.chmod = chmod;
    return this;
  }

   /**
   * chmod on files with existing ACLs.
   * @return chmod
  **/
  @ApiModelProperty(value = "chmod on files with existing ACLs.")
  public String getChmod() {
    return chmod;
  }

  public void setChmod(String chmod) {
    this.chmod = chmod;
  }

  public SettingsAclsAclPolicySettings chmod007(String chmod007) {
    this.chmod007 = chmod007;
    return this;
  }

   /**
   * chmod (007) on files with existing ACLs.
   * @return chmod007
  **/
  @ApiModelProperty(value = "chmod (007) on files with existing ACLs.")
  public String getChmod007() {
    return chmod007;
  }

  public void setChmod007(String chmod007) {
    this.chmod007 = chmod007;
  }

  public SettingsAclsAclPolicySettings chmodInheritable(String chmodInheritable) {
    this.chmodInheritable = chmodInheritable;
    return this;
  }

   /**
   * ACLs created on directories by UNIX chmod.
   * @return chmodInheritable
  **/
  @ApiModelProperty(value = "ACLs created on directories by UNIX chmod.")
  public String getChmodInheritable() {
    return chmodInheritable;
  }

  public void setChmodInheritable(String chmodInheritable) {
    this.chmodInheritable = chmodInheritable;
  }

  public SettingsAclsAclPolicySettings chown(String chown) {
    this.chown = chown;
    return this;
  }

   /**
   * chown/chgrp on files with existing ACLs.
   * @return chown
  **/
  @ApiModelProperty(value = "chown/chgrp on files with existing ACLs.")
  public String getChown() {
    return chown;
  }

  public void setChown(String chown) {
    this.chown = chown;
  }

  public SettingsAclsAclPolicySettings createOverSmb(String createOverSmb) {
    this.createOverSmb = createOverSmb;
    return this;
  }

   /**
   * ACL creation over SMB.
   * @return createOverSmb
  **/
  @ApiModelProperty(value = "ACL creation over SMB.")
  public String getCreateOverSmb() {
    return createOverSmb;
  }

  public void setCreateOverSmb(String createOverSmb) {
    this.createOverSmb = createOverSmb;
  }

  public SettingsAclsAclPolicySettings dosAttr(String dosAttr) {
    this.dosAttr = dosAttr;
    return this;
  }

   /**
   *  Read only DOS attribute.
   * @return dosAttr
  **/
  @ApiModelProperty(value = " Read only DOS attribute.")
  public String getDosAttr() {
    return dosAttr;
  }

  public void setDosAttr(String dosAttr) {
    this.dosAttr = dosAttr;
  }

  public SettingsAclsAclPolicySettings groupOwnerInheritance(String groupOwnerInheritance) {
    this.groupOwnerInheritance = groupOwnerInheritance;
    return this;
  }

   /**
   * Group owner inheritance.
   * @return groupOwnerInheritance
  **/
  @ApiModelProperty(value = "Group owner inheritance.")
  public String getGroupOwnerInheritance() {
    return groupOwnerInheritance;
  }

  public void setGroupOwnerInheritance(String groupOwnerInheritance) {
    this.groupOwnerInheritance = groupOwnerInheritance;
  }

  public SettingsAclsAclPolicySettings rwx(String rwx) {
    this.rwx = rwx;
    return this;
  }

   /**
   * Treatment of &#39;rwx&#39; permissions.
   * @return rwx
  **/
  @ApiModelProperty(value = "Treatment of 'rwx' permissions.")
  public String getRwx() {
    return rwx;
  }

  public void setRwx(String rwx) {
    this.rwx = rwx;
  }

  public SettingsAclsAclPolicySettings syntheticDenies(String syntheticDenies) {
    this.syntheticDenies = syntheticDenies;
    return this;
  }

   /**
   * Synthetic &#39;deny&#39; ACEs.
   * @return syntheticDenies
  **/
  @ApiModelProperty(value = "Synthetic 'deny' ACEs.")
  public String getSyntheticDenies() {
    return syntheticDenies;
  }

  public void setSyntheticDenies(String syntheticDenies) {
    this.syntheticDenies = syntheticDenies;
  }

  public SettingsAclsAclPolicySettings utimes(String utimes) {
    this.utimes = utimes;
    return this;
  }

   /**
   * Access check (utimes)
   * @return utimes
  **/
  @ApiModelProperty(value = "Access check (utimes)")
  public String getUtimes() {
    return utimes;
  }

  public void setUtimes(String utimes) {
    this.utimes = utimes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsAclsAclPolicySettings settingsAclsAclPolicySettings = (SettingsAclsAclPolicySettings) o;
    return Objects.equals(this.access, settingsAclsAclPolicySettings.access) &&
        Objects.equals(this.calcmode, settingsAclsAclPolicySettings.calcmode) &&
        Objects.equals(this.calcmodeGroup, settingsAclsAclPolicySettings.calcmodeGroup) &&
        Objects.equals(this.calcmodeOwner, settingsAclsAclPolicySettings.calcmodeOwner) &&
        Objects.equals(this.chmod, settingsAclsAclPolicySettings.chmod) &&
        Objects.equals(this.chmod007, settingsAclsAclPolicySettings.chmod007) &&
        Objects.equals(this.chmodInheritable, settingsAclsAclPolicySettings.chmodInheritable) &&
        Objects.equals(this.chown, settingsAclsAclPolicySettings.chown) &&
        Objects.equals(this.createOverSmb, settingsAclsAclPolicySettings.createOverSmb) &&
        Objects.equals(this.dosAttr, settingsAclsAclPolicySettings.dosAttr) &&
        Objects.equals(this.groupOwnerInheritance, settingsAclsAclPolicySettings.groupOwnerInheritance) &&
        Objects.equals(this.rwx, settingsAclsAclPolicySettings.rwx) &&
        Objects.equals(this.syntheticDenies, settingsAclsAclPolicySettings.syntheticDenies) &&
        Objects.equals(this.utimes, settingsAclsAclPolicySettings.utimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, calcmode, calcmodeGroup, calcmodeOwner, chmod, chmod007, chmodInheritable, chown, createOverSmb, dosAttr, groupOwnerInheritance, rwx, syntheticDenies, utimes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsAclsAclPolicySettings {\n");
    
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    calcmode: ").append(toIndentedString(calcmode)).append("\n");
    sb.append("    calcmodeGroup: ").append(toIndentedString(calcmodeGroup)).append("\n");
    sb.append("    calcmodeOwner: ").append(toIndentedString(calcmodeOwner)).append("\n");
    sb.append("    chmod: ").append(toIndentedString(chmod)).append("\n");
    sb.append("    chmod007: ").append(toIndentedString(chmod007)).append("\n");
    sb.append("    chmodInheritable: ").append(toIndentedString(chmodInheritable)).append("\n");
    sb.append("    chown: ").append(toIndentedString(chown)).append("\n");
    sb.append("    createOverSmb: ").append(toIndentedString(createOverSmb)).append("\n");
    sb.append("    dosAttr: ").append(toIndentedString(dosAttr)).append("\n");
    sb.append("    groupOwnerInheritance: ").append(toIndentedString(groupOwnerInheritance)).append("\n");
    sb.append("    rwx: ").append(toIndentedString(rwx)).append("\n");
    sb.append("    syntheticDenies: ").append(toIndentedString(syntheticDenies)).append("\n");
    sb.append("    utimes: ").append(toIndentedString(utimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

