/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.NetworkGroupnet;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * NetworkGroupnetExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class NetworkGroupnetExtended {
  @SerializedName("description")
  private String description = null;

  @SerializedName("dns_cache_enabled")
  private Boolean dnsCacheEnabled = null;

  /**
   * Gets or Sets dnsOptions
   */
  @JsonAdapter(DnsOptionsEnum.Adapter.class)
  public enum DnsOptionsEnum {
    ROTATE("rotate");

    private String value;

    DnsOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DnsOptionsEnum fromValue(String text) {
      for (DnsOptionsEnum b : DnsOptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DnsOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DnsOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DnsOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DnsOptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dns_options")
  private List<DnsOptionsEnum> dnsOptions = null;

  @SerializedName("dns_search")
  private List<String> dnsSearch = null;

  @SerializedName("dns_servers")
  private List<String> dnsServers = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("server_side_dns_search")
  private Boolean serverSideDnsSearch = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("subnets")
  private List<String> subnets = null;

  public NetworkGroupnetExtended description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the groupnet.
   * @return description
  **/
  @ApiModelProperty(value = "A description of the groupnet.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public NetworkGroupnetExtended dnsCacheEnabled(Boolean dnsCacheEnabled) {
    this.dnsCacheEnabled = dnsCacheEnabled;
    return this;
  }

   /**
   * DNS caching is enabled or disabled.
   * @return dnsCacheEnabled
  **/
  @ApiModelProperty(value = "DNS caching is enabled or disabled.")
  public Boolean isDnsCacheEnabled() {
    return dnsCacheEnabled;
  }

  public void setDnsCacheEnabled(Boolean dnsCacheEnabled) {
    this.dnsCacheEnabled = dnsCacheEnabled;
  }

  public NetworkGroupnetExtended dnsOptions(List<DnsOptionsEnum> dnsOptions) {
    this.dnsOptions = dnsOptions;
    return this;
  }

  public NetworkGroupnetExtended addDnsOptionsItem(DnsOptionsEnum dnsOptionsItem) {
    if (this.dnsOptions == null) {
      this.dnsOptions = new ArrayList<DnsOptionsEnum>();
    }
    this.dnsOptions.add(dnsOptionsItem);
    return this;
  }

   /**
   * List of DNS resolver options.
   * @return dnsOptions
  **/
  @ApiModelProperty(value = "List of DNS resolver options.")
  public List<DnsOptionsEnum> getDnsOptions() {
    return dnsOptions;
  }

  public void setDnsOptions(List<DnsOptionsEnum> dnsOptions) {
    this.dnsOptions = dnsOptions;
  }

  public NetworkGroupnetExtended dnsSearch(List<String> dnsSearch) {
    this.dnsSearch = dnsSearch;
    return this;
  }

  public NetworkGroupnetExtended addDnsSearchItem(String dnsSearchItem) {
    if (this.dnsSearch == null) {
      this.dnsSearch = new ArrayList<String>();
    }
    this.dnsSearch.add(dnsSearchItem);
    return this;
  }

   /**
   * List of DNS search suffixes.
   * @return dnsSearch
  **/
  @ApiModelProperty(value = "List of DNS search suffixes.")
  public List<String> getDnsSearch() {
    return dnsSearch;
  }

  public void setDnsSearch(List<String> dnsSearch) {
    this.dnsSearch = dnsSearch;
  }

  public NetworkGroupnetExtended dnsServers(List<String> dnsServers) {
    this.dnsServers = dnsServers;
    return this;
  }

  public NetworkGroupnetExtended addDnsServersItem(String dnsServersItem) {
    if (this.dnsServers == null) {
      this.dnsServers = new ArrayList<String>();
    }
    this.dnsServers.add(dnsServersItem);
    return this;
  }

   /**
   * List of Domain Name Server IP addresses.
   * @return dnsServers
  **/
  @ApiModelProperty(value = "List of Domain Name Server IP addresses.")
  public List<String> getDnsServers() {
    return dnsServers;
  }

  public void setDnsServers(List<String> dnsServers) {
    this.dnsServers = dnsServers;
  }

  public NetworkGroupnetExtended name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the groupnet.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the groupnet.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public NetworkGroupnetExtended serverSideDnsSearch(Boolean serverSideDnsSearch) {
    this.serverSideDnsSearch = serverSideDnsSearch;
    return this;
  }

   /**
   * Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.
   * @return serverSideDnsSearch
  **/
  @ApiModelProperty(value = "Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.")
  public Boolean isServerSideDnsSearch() {
    return serverSideDnsSearch;
  }

  public void setServerSideDnsSearch(Boolean serverSideDnsSearch) {
    this.serverSideDnsSearch = serverSideDnsSearch;
  }

  public NetworkGroupnetExtended id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique Interface ID.
   * @return id
  **/
  @ApiModelProperty(value = "Unique Interface ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public NetworkGroupnetExtended subnets(List<String> subnets) {
    this.subnets = subnets;
    return this;
  }

  public NetworkGroupnetExtended addSubnetsItem(String subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<String>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

   /**
   * Name of the subnets in the groupnet.
   * @return subnets
  **/
  @ApiModelProperty(value = "Name of the subnets in the groupnet.")
  public List<String> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<String> subnets) {
    this.subnets = subnets;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkGroupnetExtended networkGroupnetExtended = (NetworkGroupnetExtended) o;
    return Objects.equals(this.description, networkGroupnetExtended.description) &&
        Objects.equals(this.dnsCacheEnabled, networkGroupnetExtended.dnsCacheEnabled) &&
        Objects.equals(this.dnsOptions, networkGroupnetExtended.dnsOptions) &&
        Objects.equals(this.dnsSearch, networkGroupnetExtended.dnsSearch) &&
        Objects.equals(this.dnsServers, networkGroupnetExtended.dnsServers) &&
        Objects.equals(this.name, networkGroupnetExtended.name) &&
        Objects.equals(this.serverSideDnsSearch, networkGroupnetExtended.serverSideDnsSearch) &&
        Objects.equals(this.id, networkGroupnetExtended.id) &&
        Objects.equals(this.subnets, networkGroupnetExtended.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, dnsCacheEnabled, dnsOptions, dnsSearch, dnsServers, name, serverSideDnsSearch, id, subnets);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkGroupnetExtended {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dnsCacheEnabled: ").append(toIndentedString(dnsCacheEnabled)).append("\n");
    sb.append("    dnsOptions: ").append(toIndentedString(dnsOptions)).append("\n");
    sb.append("    dnsSearch: ").append(toIndentedString(dnsSearch)).append("\n");
    sb.append("    dnsServers: ").append(toIndentedString(dnsServers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serverSideDnsSearch: ").append(toIndentedString(serverSideDnsSearch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

