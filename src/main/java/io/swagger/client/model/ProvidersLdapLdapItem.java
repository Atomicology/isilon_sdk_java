/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ProvidersLdapLdapItem
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class ProvidersLdapLdapItem {
  @SerializedName("alternate_security_identities_attribute")
  private String alternateSecurityIdentitiesAttribute = null;

  @SerializedName("authentication")
  private Boolean authentication = null;

  @SerializedName("balance_servers")
  private Boolean balanceServers = null;

  @SerializedName("base_dn")
  private String baseDn = null;

  @SerializedName("bind_dn")
  private String bindDn = null;

  /**
   * Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the &#39;simple&#39; value.
   */
  @JsonAdapter(BindMechanismEnum.Adapter.class)
  public enum BindMechanismEnum {
    SIMPLE("simple"),
    
    GSSAPI("gssapi"),
    
    DIGEST_MD5("digest-md5");

    private String value;

    BindMechanismEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BindMechanismEnum fromValue(String text) {
      for (BindMechanismEnum b : BindMechanismEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BindMechanismEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BindMechanismEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BindMechanismEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BindMechanismEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("bind_mechanism")
  private BindMechanismEnum bindMechanism = null;

  @SerializedName("bind_timeout")
  private Integer bindTimeout = null;

  @SerializedName("certificate_authority_file")
  private String certificateAuthorityFile = null;

  @SerializedName("check_online_interval")
  private Integer checkOnlineInterval = null;

  @SerializedName("cn_attribute")
  private String cnAttribute = null;

  @SerializedName("create_home_directory")
  private Boolean createHomeDirectory = null;

  @SerializedName("crypt_password_attribute")
  private String cryptPasswordAttribute = null;

  @SerializedName("email_attribute")
  private String emailAttribute = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("enumerate_groups")
  private Boolean enumerateGroups = null;

  @SerializedName("enumerate_users")
  private Boolean enumerateUsers = null;

  @SerializedName("findable_groups")
  private List<String> findableGroups = null;

  @SerializedName("findable_users")
  private List<String> findableUsers = null;

  @SerializedName("gecos_attribute")
  private String gecosAttribute = null;

  @SerializedName("gid_attribute")
  private String gidAttribute = null;

  @SerializedName("group_base_dn")
  private String groupBaseDn = null;

  @SerializedName("group_domain")
  private String groupDomain = null;

  @SerializedName("group_filter")
  private String groupFilter = null;

  @SerializedName("group_members_attribute")
  private String groupMembersAttribute = null;

  /**
   * Specifies the depth from the base DN to perform LDAP searches.
   */
  @JsonAdapter(GroupSearchScopeEnum.Adapter.class)
  public enum GroupSearchScopeEnum {
    DEFAULT("default"),
    
    BASE("base"),
    
    ONELEVEL("onelevel"),
    
    SUBTREE("subtree"),
    
    CHILDREN("children");

    private String value;

    GroupSearchScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupSearchScopeEnum fromValue(String text) {
      for (GroupSearchScopeEnum b : GroupSearchScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GroupSearchScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupSearchScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupSearchScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupSearchScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("group_search_scope")
  private GroupSearchScopeEnum groupSearchScope = null;

  @SerializedName("groupnet")
  private String groupnet = null;

  @SerializedName("home_directory_template")
  private String homeDirectoryTemplate = null;

  @SerializedName("homedir_attribute")
  private String homedirAttribute = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("ignore_tls_errors")
  private Boolean ignoreTlsErrors = null;

  @SerializedName("listable_groups")
  private List<String> listableGroups = null;

  @SerializedName("listable_users")
  private List<String> listableUsers = null;

  @SerializedName("login_shell")
  private String loginShell = null;

  @SerializedName("member_of_attribute")
  private String memberOfAttribute = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("name_attribute")
  private String nameAttribute = null;

  @SerializedName("netgroup_base_dn")
  private String netgroupBaseDn = null;

  @SerializedName("netgroup_filter")
  private String netgroupFilter = null;

  @SerializedName("netgroup_members_attribute")
  private String netgroupMembersAttribute = null;

  /**
   * Specifies the depth from the base DN to perform LDAP searches.
   */
  @JsonAdapter(NetgroupSearchScopeEnum.Adapter.class)
  public enum NetgroupSearchScopeEnum {
    DEFAULT("default"),
    
    BASE("base"),
    
    ONELEVEL("onelevel"),
    
    SUBTREE("subtree"),
    
    CHILDREN("children");

    private String value;

    NetgroupSearchScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetgroupSearchScopeEnum fromValue(String text) {
      for (NetgroupSearchScopeEnum b : NetgroupSearchScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NetgroupSearchScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetgroupSearchScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetgroupSearchScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NetgroupSearchScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("netgroup_search_scope")
  private NetgroupSearchScopeEnum netgroupSearchScope = null;

  @SerializedName("netgroup_triple_attribute")
  private String netgroupTripleAttribute = null;

  @SerializedName("normalize_groups")
  private Boolean normalizeGroups = null;

  @SerializedName("normalize_users")
  private Boolean normalizeUsers = null;

  @SerializedName("nt_password_attribute")
  private String ntPasswordAttribute = null;

  /**
   * Specifies which NTLM versions to support for users with NTLM-compatible credentials.
   */
  @JsonAdapter(NtlmSupportEnum.Adapter.class)
  public enum NtlmSupportEnum {
    ALL("all"),
    
    V2ONLY("v2only"),
    
    NONE("none");

    private String value;

    NtlmSupportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NtlmSupportEnum fromValue(String text) {
      for (NtlmSupportEnum b : NtlmSupportEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NtlmSupportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NtlmSupportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NtlmSupportEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NtlmSupportEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ntlm_support")
  private NtlmSupportEnum ntlmSupport = null;

  @SerializedName("provider_domain")
  private String providerDomain = null;

  @SerializedName("require_secure_connection")
  private Boolean requireSecureConnection = null;

  @SerializedName("restrict_findable")
  private Boolean restrictFindable = null;

  @SerializedName("restrict_listable")
  private Boolean restrictListable = null;

  /**
   * Specifies the default depth from the base DN to perform LDAP searches.
   */
  @JsonAdapter(SearchScopeEnum.Adapter.class)
  public enum SearchScopeEnum {
    BASE("base"),
    
    ONELEVEL("onelevel"),
    
    SUBTREE("subtree"),
    
    CHILDREN("children");

    private String value;

    SearchScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchScopeEnum fromValue(String text) {
      for (SearchScopeEnum b : SearchScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SearchScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SearchScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("search_scope")
  private SearchScopeEnum searchScope = null;

  @SerializedName("search_timeout")
  private Integer searchTimeout = null;

  @SerializedName("server_uris")
  private List<String> serverUris = null;

  @SerializedName("shadow_expire_attribute")
  private String shadowExpireAttribute = null;

  @SerializedName("shadow_flag_attribute")
  private String shadowFlagAttribute = null;

  @SerializedName("shadow_inactive_attribute")
  private String shadowInactiveAttribute = null;

  @SerializedName("shadow_last_change_attribute")
  private String shadowLastChangeAttribute = null;

  @SerializedName("shadow_max_attribute")
  private String shadowMaxAttribute = null;

  @SerializedName("shadow_min_attribute")
  private String shadowMinAttribute = null;

  @SerializedName("shadow_user_filter")
  private String shadowUserFilter = null;

  @SerializedName("shadow_warning_attribute")
  private String shadowWarningAttribute = null;

  @SerializedName("shell_attribute")
  private String shellAttribute = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("system")
  private Boolean system = null;

  @SerializedName("template")
  private String template = null;

  @SerializedName("uid_attribute")
  private String uidAttribute = null;

  @SerializedName("unfindable_groups")
  private List<String> unfindableGroups = null;

  @SerializedName("unfindable_users")
  private List<String> unfindableUsers = null;

  @SerializedName("unique_group_members_attribute")
  private String uniqueGroupMembersAttribute = null;

  @SerializedName("unlistable_groups")
  private List<String> unlistableGroups = null;

  @SerializedName("unlistable_users")
  private List<String> unlistableUsers = null;

  @SerializedName("user_base_dn")
  private String userBaseDn = null;

  @SerializedName("user_domain")
  private String userDomain = null;

  @SerializedName("user_filter")
  private String userFilter = null;

  /**
   * Specifies the depth from the base DN to perform LDAP searches.
   */
  @JsonAdapter(UserSearchScopeEnum.Adapter.class)
  public enum UserSearchScopeEnum {
    DEFAULT("default"),
    
    BASE("base"),
    
    ONELEVEL("onelevel"),
    
    SUBTREE("subtree"),
    
    CHILDREN("children");

    private String value;

    UserSearchScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserSearchScopeEnum fromValue(String text) {
      for (UserSearchScopeEnum b : UserSearchScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UserSearchScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserSearchScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserSearchScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UserSearchScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("user_search_scope")
  private UserSearchScopeEnum userSearchScope = null;

  public ProvidersLdapLdapItem alternateSecurityIdentitiesAttribute(String alternateSecurityIdentitiesAttribute) {
    this.alternateSecurityIdentitiesAttribute = alternateSecurityIdentitiesAttribute;
    return this;
  }

   /**
   * Specifies the attribute name used when searching for alternate security identities.
   * @return alternateSecurityIdentitiesAttribute
  **/
  @ApiModelProperty(value = "Specifies the attribute name used when searching for alternate security identities.")
  public String getAlternateSecurityIdentitiesAttribute() {
    return alternateSecurityIdentitiesAttribute;
  }

  public void setAlternateSecurityIdentitiesAttribute(String alternateSecurityIdentitiesAttribute) {
    this.alternateSecurityIdentitiesAttribute = alternateSecurityIdentitiesAttribute;
  }

  public ProvidersLdapLdapItem authentication(Boolean authentication) {
    this.authentication = authentication;
    return this;
  }

   /**
   * If true, enables authentication and identity management through the authentication provider.
   * @return authentication
  **/
  @ApiModelProperty(value = "If true, enables authentication and identity management through the authentication provider.")
  public Boolean isAuthentication() {
    return authentication;
  }

  public void setAuthentication(Boolean authentication) {
    this.authentication = authentication;
  }

  public ProvidersLdapLdapItem balanceServers(Boolean balanceServers) {
    this.balanceServers = balanceServers;
    return this;
  }

   /**
   * If true, connects the provider to a random server.
   * @return balanceServers
  **/
  @ApiModelProperty(value = "If true, connects the provider to a random server.")
  public Boolean isBalanceServers() {
    return balanceServers;
  }

  public void setBalanceServers(Boolean balanceServers) {
    this.balanceServers = balanceServers;
  }

  public ProvidersLdapLdapItem baseDn(String baseDn) {
    this.baseDn = baseDn;
    return this;
  }

   /**
   * Specifies the root of the tree in which to search identities.
   * @return baseDn
  **/
  @ApiModelProperty(value = "Specifies the root of the tree in which to search identities.")
  public String getBaseDn() {
    return baseDn;
  }

  public void setBaseDn(String baseDn) {
    this.baseDn = baseDn;
  }

  public ProvidersLdapLdapItem bindDn(String bindDn) {
    this.bindDn = bindDn;
    return this;
  }

   /**
   * Specifies the distinguished name for binding to the LDAP server.
   * @return bindDn
  **/
  @ApiModelProperty(value = "Specifies the distinguished name for binding to the LDAP server.")
  public String getBindDn() {
    return bindDn;
  }

  public void setBindDn(String bindDn) {
    this.bindDn = bindDn;
  }

  public ProvidersLdapLdapItem bindMechanism(BindMechanismEnum bindMechanism) {
    this.bindMechanism = bindMechanism;
    return this;
  }

   /**
   * Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the &#39;simple&#39; value.
   * @return bindMechanism
  **/
  @ApiModelProperty(value = "Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.")
  public BindMechanismEnum getBindMechanism() {
    return bindMechanism;
  }

  public void setBindMechanism(BindMechanismEnum bindMechanism) {
    this.bindMechanism = bindMechanism;
  }

  public ProvidersLdapLdapItem bindTimeout(Integer bindTimeout) {
    this.bindTimeout = bindTimeout;
    return this;
  }

   /**
   * Specifies the timeout in seconds when binding to an LDAP server.
   * minimum: 1
   * maximum: 3600
   * @return bindTimeout
  **/
  @ApiModelProperty(value = "Specifies the timeout in seconds when binding to an LDAP server.")
  public Integer getBindTimeout() {
    return bindTimeout;
  }

  public void setBindTimeout(Integer bindTimeout) {
    this.bindTimeout = bindTimeout;
  }

  public ProvidersLdapLdapItem certificateAuthorityFile(String certificateAuthorityFile) {
    this.certificateAuthorityFile = certificateAuthorityFile;
    return this;
  }

   /**
   * Specifies the path to the root certificates file.
   * @return certificateAuthorityFile
  **/
  @ApiModelProperty(value = "Specifies the path to the root certificates file.")
  public String getCertificateAuthorityFile() {
    return certificateAuthorityFile;
  }

  public void setCertificateAuthorityFile(String certificateAuthorityFile) {
    this.certificateAuthorityFile = certificateAuthorityFile;
  }

  public ProvidersLdapLdapItem checkOnlineInterval(Integer checkOnlineInterval) {
    this.checkOnlineInterval = checkOnlineInterval;
    return this;
  }

   /**
   * Specifies the time in seconds between provider online checks.
   * minimum: 0
   * maximum: 3600
   * @return checkOnlineInterval
  **/
  @ApiModelProperty(value = "Specifies the time in seconds between provider online checks.")
  public Integer getCheckOnlineInterval() {
    return checkOnlineInterval;
  }

  public void setCheckOnlineInterval(Integer checkOnlineInterval) {
    this.checkOnlineInterval = checkOnlineInterval;
  }

  public ProvidersLdapLdapItem cnAttribute(String cnAttribute) {
    this.cnAttribute = cnAttribute;
    return this;
  }

   /**
   * Specifies the canonical name.
   * @return cnAttribute
  **/
  @ApiModelProperty(value = "Specifies the canonical name.")
  public String getCnAttribute() {
    return cnAttribute;
  }

  public void setCnAttribute(String cnAttribute) {
    this.cnAttribute = cnAttribute;
  }

  public ProvidersLdapLdapItem createHomeDirectory(Boolean createHomeDirectory) {
    this.createHomeDirectory = createHomeDirectory;
    return this;
  }

   /**
   * Automatically create the home directory on the first login.
   * @return createHomeDirectory
  **/
  @ApiModelProperty(value = "Automatically create the home directory on the first login.")
  public Boolean isCreateHomeDirectory() {
    return createHomeDirectory;
  }

  public void setCreateHomeDirectory(Boolean createHomeDirectory) {
    this.createHomeDirectory = createHomeDirectory;
  }

  public ProvidersLdapLdapItem cryptPasswordAttribute(String cryptPasswordAttribute) {
    this.cryptPasswordAttribute = cryptPasswordAttribute;
    return this;
  }

   /**
   * Specifies the hashed password value.
   * @return cryptPasswordAttribute
  **/
  @ApiModelProperty(value = "Specifies the hashed password value.")
  public String getCryptPasswordAttribute() {
    return cryptPasswordAttribute;
  }

  public void setCryptPasswordAttribute(String cryptPasswordAttribute) {
    this.cryptPasswordAttribute = cryptPasswordAttribute;
  }

  public ProvidersLdapLdapItem emailAttribute(String emailAttribute) {
    this.emailAttribute = emailAttribute;
    return this;
  }

   /**
   * Specifies the LDAP Email attribute.
   * @return emailAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP Email attribute.")
  public String getEmailAttribute() {
    return emailAttribute;
  }

  public void setEmailAttribute(String emailAttribute) {
    this.emailAttribute = emailAttribute;
  }

  public ProvidersLdapLdapItem enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * If true, enables the LDAP provider.
   * @return enabled
  **/
  @ApiModelProperty(value = "If true, enables the LDAP provider.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ProvidersLdapLdapItem enumerateGroups(Boolean enumerateGroups) {
    this.enumerateGroups = enumerateGroups;
    return this;
  }

   /**
   * If true, allows the provider to enumerate groups.
   * @return enumerateGroups
  **/
  @ApiModelProperty(value = "If true, allows the provider to enumerate groups.")
  public Boolean isEnumerateGroups() {
    return enumerateGroups;
  }

  public void setEnumerateGroups(Boolean enumerateGroups) {
    this.enumerateGroups = enumerateGroups;
  }

  public ProvidersLdapLdapItem enumerateUsers(Boolean enumerateUsers) {
    this.enumerateUsers = enumerateUsers;
    return this;
  }

   /**
   * If true, allows the provider to enumerate users.
   * @return enumerateUsers
  **/
  @ApiModelProperty(value = "If true, allows the provider to enumerate users.")
  public Boolean isEnumerateUsers() {
    return enumerateUsers;
  }

  public void setEnumerateUsers(Boolean enumerateUsers) {
    this.enumerateUsers = enumerateUsers;
  }

  public ProvidersLdapLdapItem findableGroups(List<String> findableGroups) {
    this.findableGroups = findableGroups;
    return this;
  }

  public ProvidersLdapLdapItem addFindableGroupsItem(String findableGroupsItem) {
    if (this.findableGroups == null) {
      this.findableGroups = new ArrayList<String>();
    }
    this.findableGroups.add(findableGroupsItem);
    return this;
  }

   /**
   * Specifies the list of groups that can be resolved.
   * @return findableGroups
  **/
  @ApiModelProperty(value = "Specifies the list of groups that can be resolved.")
  public List<String> getFindableGroups() {
    return findableGroups;
  }

  public void setFindableGroups(List<String> findableGroups) {
    this.findableGroups = findableGroups;
  }

  public ProvidersLdapLdapItem findableUsers(List<String> findableUsers) {
    this.findableUsers = findableUsers;
    return this;
  }

  public ProvidersLdapLdapItem addFindableUsersItem(String findableUsersItem) {
    if (this.findableUsers == null) {
      this.findableUsers = new ArrayList<String>();
    }
    this.findableUsers.add(findableUsersItem);
    return this;
  }

   /**
   * Specifies the list of users that can be resolved.
   * @return findableUsers
  **/
  @ApiModelProperty(value = "Specifies the list of users that can be resolved.")
  public List<String> getFindableUsers() {
    return findableUsers;
  }

  public void setFindableUsers(List<String> findableUsers) {
    this.findableUsers = findableUsers;
  }

  public ProvidersLdapLdapItem gecosAttribute(String gecosAttribute) {
    this.gecosAttribute = gecosAttribute;
    return this;
  }

   /**
   * Specifies the LDAP GECOS attribute.
   * @return gecosAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP GECOS attribute.")
  public String getGecosAttribute() {
    return gecosAttribute;
  }

  public void setGecosAttribute(String gecosAttribute) {
    this.gecosAttribute = gecosAttribute;
  }

  public ProvidersLdapLdapItem gidAttribute(String gidAttribute) {
    this.gidAttribute = gidAttribute;
    return this;
  }

   /**
   * Specifies the LDAP GID attribute.
   * @return gidAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP GID attribute.")
  public String getGidAttribute() {
    return gidAttribute;
  }

  public void setGidAttribute(String gidAttribute) {
    this.gidAttribute = gidAttribute;
  }

  public ProvidersLdapLdapItem groupBaseDn(String groupBaseDn) {
    this.groupBaseDn = groupBaseDn;
    return this;
  }

   /**
   * Specifies the distinguished name of the entry where LDAP searches for groups are started.
   * @return groupBaseDn
  **/
  @ApiModelProperty(value = "Specifies the distinguished name of the entry where LDAP searches for groups are started.")
  public String getGroupBaseDn() {
    return groupBaseDn;
  }

  public void setGroupBaseDn(String groupBaseDn) {
    this.groupBaseDn = groupBaseDn;
  }

  public ProvidersLdapLdapItem groupDomain(String groupDomain) {
    this.groupDomain = groupDomain;
    return this;
  }

   /**
   * Specifies the domain for this provider through which groups are qualified.
   * @return groupDomain
  **/
  @ApiModelProperty(value = "Specifies the domain for this provider through which groups are qualified.")
  public String getGroupDomain() {
    return groupDomain;
  }

  public void setGroupDomain(String groupDomain) {
    this.groupDomain = groupDomain;
  }

  public ProvidersLdapLdapItem groupFilter(String groupFilter) {
    this.groupFilter = groupFilter;
    return this;
  }

   /**
   * Specifies the LDAP filter for group objects.
   * @return groupFilter
  **/
  @ApiModelProperty(value = "Specifies the LDAP filter for group objects.")
  public String getGroupFilter() {
    return groupFilter;
  }

  public void setGroupFilter(String groupFilter) {
    this.groupFilter = groupFilter;
  }

  public ProvidersLdapLdapItem groupMembersAttribute(String groupMembersAttribute) {
    this.groupMembersAttribute = groupMembersAttribute;
    return this;
  }

   /**
   * Specifies the LDAP Group Members attribute.
   * @return groupMembersAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP Group Members attribute.")
  public String getGroupMembersAttribute() {
    return groupMembersAttribute;
  }

  public void setGroupMembersAttribute(String groupMembersAttribute) {
    this.groupMembersAttribute = groupMembersAttribute;
  }

  public ProvidersLdapLdapItem groupSearchScope(GroupSearchScopeEnum groupSearchScope) {
    this.groupSearchScope = groupSearchScope;
    return this;
  }

   /**
   * Specifies the depth from the base DN to perform LDAP searches.
   * @return groupSearchScope
  **/
  @ApiModelProperty(value = "Specifies the depth from the base DN to perform LDAP searches.")
  public GroupSearchScopeEnum getGroupSearchScope() {
    return groupSearchScope;
  }

  public void setGroupSearchScope(GroupSearchScopeEnum groupSearchScope) {
    this.groupSearchScope = groupSearchScope;
  }

  public ProvidersLdapLdapItem groupnet(String groupnet) {
    this.groupnet = groupnet;
    return this;
  }

   /**
   * Groupnet identifier.
   * @return groupnet
  **/
  @ApiModelProperty(value = "Groupnet identifier.")
  public String getGroupnet() {
    return groupnet;
  }

  public void setGroupnet(String groupnet) {
    this.groupnet = groupnet;
  }

  public ProvidersLdapLdapItem homeDirectoryTemplate(String homeDirectoryTemplate) {
    this.homeDirectoryTemplate = homeDirectoryTemplate;
    return this;
  }

   /**
   * Specifies the path to the home directory template.
   * @return homeDirectoryTemplate
  **/
  @ApiModelProperty(value = "Specifies the path to the home directory template.")
  public String getHomeDirectoryTemplate() {
    return homeDirectoryTemplate;
  }

  public void setHomeDirectoryTemplate(String homeDirectoryTemplate) {
    this.homeDirectoryTemplate = homeDirectoryTemplate;
  }

  public ProvidersLdapLdapItem homedirAttribute(String homedirAttribute) {
    this.homedirAttribute = homedirAttribute;
    return this;
  }

   /**
   * Specifies the LDAP Homedir attribute.
   * @return homedirAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP Homedir attribute.")
  public String getHomedirAttribute() {
    return homedirAttribute;
  }

  public void setHomedirAttribute(String homedirAttribute) {
    this.homedirAttribute = homedirAttribute;
  }

  public ProvidersLdapLdapItem id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Specifies the ID of the LDAP provider.
   * @return id
  **/
  @ApiModelProperty(value = "Specifies the ID of the LDAP provider.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ProvidersLdapLdapItem ignoreTlsErrors(Boolean ignoreTlsErrors) {
    this.ignoreTlsErrors = ignoreTlsErrors;
    return this;
  }

   /**
   * If true, continues over secure connections even if identity checks fail.
   * @return ignoreTlsErrors
  **/
  @ApiModelProperty(value = "If true, continues over secure connections even if identity checks fail.")
  public Boolean isIgnoreTlsErrors() {
    return ignoreTlsErrors;
  }

  public void setIgnoreTlsErrors(Boolean ignoreTlsErrors) {
    this.ignoreTlsErrors = ignoreTlsErrors;
  }

  public ProvidersLdapLdapItem listableGroups(List<String> listableGroups) {
    this.listableGroups = listableGroups;
    return this;
  }

  public ProvidersLdapLdapItem addListableGroupsItem(String listableGroupsItem) {
    if (this.listableGroups == null) {
      this.listableGroups = new ArrayList<String>();
    }
    this.listableGroups.add(listableGroupsItem);
    return this;
  }

   /**
   * Specifies the groups that can be viewed in the provider.
   * @return listableGroups
  **/
  @ApiModelProperty(value = "Specifies the groups that can be viewed in the provider.")
  public List<String> getListableGroups() {
    return listableGroups;
  }

  public void setListableGroups(List<String> listableGroups) {
    this.listableGroups = listableGroups;
  }

  public ProvidersLdapLdapItem listableUsers(List<String> listableUsers) {
    this.listableUsers = listableUsers;
    return this;
  }

  public ProvidersLdapLdapItem addListableUsersItem(String listableUsersItem) {
    if (this.listableUsers == null) {
      this.listableUsers = new ArrayList<String>();
    }
    this.listableUsers.add(listableUsersItem);
    return this;
  }

   /**
   * Specifies the users that can be viewed in the provider.
   * @return listableUsers
  **/
  @ApiModelProperty(value = "Specifies the users that can be viewed in the provider.")
  public List<String> getListableUsers() {
    return listableUsers;
  }

  public void setListableUsers(List<String> listableUsers) {
    this.listableUsers = listableUsers;
  }

  public ProvidersLdapLdapItem loginShell(String loginShell) {
    this.loginShell = loginShell;
    return this;
  }

   /**
   * Specifies the login shell path.
   * @return loginShell
  **/
  @ApiModelProperty(value = "Specifies the login shell path.")
  public String getLoginShell() {
    return loginShell;
  }

  public void setLoginShell(String loginShell) {
    this.loginShell = loginShell;
  }

  public ProvidersLdapLdapItem memberOfAttribute(String memberOfAttribute) {
    this.memberOfAttribute = memberOfAttribute;
    return this;
  }

   /**
   * Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.
   * @return memberOfAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.")
  public String getMemberOfAttribute() {
    return memberOfAttribute;
  }

  public void setMemberOfAttribute(String memberOfAttribute) {
    this.memberOfAttribute = memberOfAttribute;
  }

  public ProvidersLdapLdapItem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Specifies the name of the LDAP provider.
   * @return name
  **/
  @ApiModelProperty(value = "Specifies the name of the LDAP provider.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProvidersLdapLdapItem nameAttribute(String nameAttribute) {
    this.nameAttribute = nameAttribute;
    return this;
  }

   /**
   * Specifies the LDAP UID attribute, which is used as the login name.
   * @return nameAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP UID attribute, which is used as the login name.")
  public String getNameAttribute() {
    return nameAttribute;
  }

  public void setNameAttribute(String nameAttribute) {
    this.nameAttribute = nameAttribute;
  }

  public ProvidersLdapLdapItem netgroupBaseDn(String netgroupBaseDn) {
    this.netgroupBaseDn = netgroupBaseDn;
    return this;
  }

   /**
   * Specifies the distinguished name of the entry where LDAP searches for netgroups are started.
   * @return netgroupBaseDn
  **/
  @ApiModelProperty(value = "Specifies the distinguished name of the entry where LDAP searches for netgroups are started.")
  public String getNetgroupBaseDn() {
    return netgroupBaseDn;
  }

  public void setNetgroupBaseDn(String netgroupBaseDn) {
    this.netgroupBaseDn = netgroupBaseDn;
  }

  public ProvidersLdapLdapItem netgroupFilter(String netgroupFilter) {
    this.netgroupFilter = netgroupFilter;
    return this;
  }

   /**
   * Specifies the LDAP filter for netgroup objects.
   * @return netgroupFilter
  **/
  @ApiModelProperty(value = "Specifies the LDAP filter for netgroup objects.")
  public String getNetgroupFilter() {
    return netgroupFilter;
  }

  public void setNetgroupFilter(String netgroupFilter) {
    this.netgroupFilter = netgroupFilter;
  }

  public ProvidersLdapLdapItem netgroupMembersAttribute(String netgroupMembersAttribute) {
    this.netgroupMembersAttribute = netgroupMembersAttribute;
    return this;
  }

   /**
   * Specifies the LDAP Netgroup Members attribute.
   * @return netgroupMembersAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP Netgroup Members attribute.")
  public String getNetgroupMembersAttribute() {
    return netgroupMembersAttribute;
  }

  public void setNetgroupMembersAttribute(String netgroupMembersAttribute) {
    this.netgroupMembersAttribute = netgroupMembersAttribute;
  }

  public ProvidersLdapLdapItem netgroupSearchScope(NetgroupSearchScopeEnum netgroupSearchScope) {
    this.netgroupSearchScope = netgroupSearchScope;
    return this;
  }

   /**
   * Specifies the depth from the base DN to perform LDAP searches.
   * @return netgroupSearchScope
  **/
  @ApiModelProperty(value = "Specifies the depth from the base DN to perform LDAP searches.")
  public NetgroupSearchScopeEnum getNetgroupSearchScope() {
    return netgroupSearchScope;
  }

  public void setNetgroupSearchScope(NetgroupSearchScopeEnum netgroupSearchScope) {
    this.netgroupSearchScope = netgroupSearchScope;
  }

  public ProvidersLdapLdapItem netgroupTripleAttribute(String netgroupTripleAttribute) {
    this.netgroupTripleAttribute = netgroupTripleAttribute;
    return this;
  }

   /**
   * Specifies the LDAP Netgroup Triple attribute.
   * @return netgroupTripleAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP Netgroup Triple attribute.")
  public String getNetgroupTripleAttribute() {
    return netgroupTripleAttribute;
  }

  public void setNetgroupTripleAttribute(String netgroupTripleAttribute) {
    this.netgroupTripleAttribute = netgroupTripleAttribute;
  }

  public ProvidersLdapLdapItem normalizeGroups(Boolean normalizeGroups) {
    this.normalizeGroups = normalizeGroups;
    return this;
  }

   /**
   * Normalizes group names to lowercase before look up.
   * @return normalizeGroups
  **/
  @ApiModelProperty(value = "Normalizes group names to lowercase before look up.")
  public Boolean isNormalizeGroups() {
    return normalizeGroups;
  }

  public void setNormalizeGroups(Boolean normalizeGroups) {
    this.normalizeGroups = normalizeGroups;
  }

  public ProvidersLdapLdapItem normalizeUsers(Boolean normalizeUsers) {
    this.normalizeUsers = normalizeUsers;
    return this;
  }

   /**
   * Normalizes user names to lowercase before look up.
   * @return normalizeUsers
  **/
  @ApiModelProperty(value = "Normalizes user names to lowercase before look up.")
  public Boolean isNormalizeUsers() {
    return normalizeUsers;
  }

  public void setNormalizeUsers(Boolean normalizeUsers) {
    this.normalizeUsers = normalizeUsers;
  }

  public ProvidersLdapLdapItem ntPasswordAttribute(String ntPasswordAttribute) {
    this.ntPasswordAttribute = ntPasswordAttribute;
    return this;
  }

   /**
   * Specifies the LDAP NT Password attribute.
   * @return ntPasswordAttribute
  **/
  @ApiModelProperty(value = "Specifies the LDAP NT Password attribute.")
  public String getNtPasswordAttribute() {
    return ntPasswordAttribute;
  }

  public void setNtPasswordAttribute(String ntPasswordAttribute) {
    this.ntPasswordAttribute = ntPasswordAttribute;
  }

  public ProvidersLdapLdapItem ntlmSupport(NtlmSupportEnum ntlmSupport) {
    this.ntlmSupport = ntlmSupport;
    return this;
  }

   /**
   * Specifies which NTLM versions to support for users with NTLM-compatible credentials.
   * @return ntlmSupport
  **/
  @ApiModelProperty(value = "Specifies which NTLM versions to support for users with NTLM-compatible credentials.")
  public NtlmSupportEnum getNtlmSupport() {
    return ntlmSupport;
  }

  public void setNtlmSupport(NtlmSupportEnum ntlmSupport) {
    this.ntlmSupport = ntlmSupport;
  }

  public ProvidersLdapLdapItem providerDomain(String providerDomain) {
    this.providerDomain = providerDomain;
    return this;
  }

   /**
   * Specifies the provider domain.
   * @return providerDomain
  **/
  @ApiModelProperty(value = "Specifies the provider domain.")
  public String getProviderDomain() {
    return providerDomain;
  }

  public void setProviderDomain(String providerDomain) {
    this.providerDomain = providerDomain;
  }

  public ProvidersLdapLdapItem requireSecureConnection(Boolean requireSecureConnection) {
    this.requireSecureConnection = requireSecureConnection;
    return this;
  }

   /**
   * Determines whether to continue over a non-TLS connection.
   * @return requireSecureConnection
  **/
  @ApiModelProperty(value = "Determines whether to continue over a non-TLS connection.")
  public Boolean isRequireSecureConnection() {
    return requireSecureConnection;
  }

  public void setRequireSecureConnection(Boolean requireSecureConnection) {
    this.requireSecureConnection = requireSecureConnection;
  }

  public ProvidersLdapLdapItem restrictFindable(Boolean restrictFindable) {
    this.restrictFindable = restrictFindable;
    return this;
  }

   /**
   * If true, checks the provider for filtered lists of findable and unfindable users and groups.
   * @return restrictFindable
  **/
  @ApiModelProperty(value = "If true, checks the provider for filtered lists of findable and unfindable users and groups.")
  public Boolean isRestrictFindable() {
    return restrictFindable;
  }

  public void setRestrictFindable(Boolean restrictFindable) {
    this.restrictFindable = restrictFindable;
  }

  public ProvidersLdapLdapItem restrictListable(Boolean restrictListable) {
    this.restrictListable = restrictListable;
    return this;
  }

   /**
   * If true, checks the provider for filtered lists of listable and unlistable users and groups.
   * @return restrictListable
  **/
  @ApiModelProperty(value = "If true, checks the provider for filtered lists of listable and unlistable users and groups.")
  public Boolean isRestrictListable() {
    return restrictListable;
  }

  public void setRestrictListable(Boolean restrictListable) {
    this.restrictListable = restrictListable;
  }

  public ProvidersLdapLdapItem searchScope(SearchScopeEnum searchScope) {
    this.searchScope = searchScope;
    return this;
  }

   /**
   * Specifies the default depth from the base DN to perform LDAP searches.
   * @return searchScope
  **/
  @ApiModelProperty(value = "Specifies the default depth from the base DN to perform LDAP searches.")
  public SearchScopeEnum getSearchScope() {
    return searchScope;
  }

  public void setSearchScope(SearchScopeEnum searchScope) {
    this.searchScope = searchScope;
  }

  public ProvidersLdapLdapItem searchTimeout(Integer searchTimeout) {
    this.searchTimeout = searchTimeout;
    return this;
  }

   /**
   * Specifies the search timeout period in seconds.
   * minimum: 10
   * maximum: 3600
   * @return searchTimeout
  **/
  @ApiModelProperty(value = "Specifies the search timeout period in seconds.")
  public Integer getSearchTimeout() {
    return searchTimeout;
  }

  public void setSearchTimeout(Integer searchTimeout) {
    this.searchTimeout = searchTimeout;
  }

  public ProvidersLdapLdapItem serverUris(List<String> serverUris) {
    this.serverUris = serverUris;
    return this;
  }

  public ProvidersLdapLdapItem addServerUrisItem(String serverUrisItem) {
    if (this.serverUris == null) {
      this.serverUris = new ArrayList<String>();
    }
    this.serverUris.add(serverUrisItem);
    return this;
  }

   /**
   * Specifies the server URIs.
   * @return serverUris
  **/
  @ApiModelProperty(value = "Specifies the server URIs.")
  public List<String> getServerUris() {
    return serverUris;
  }

  public void setServerUris(List<String> serverUris) {
    this.serverUris = serverUris;
  }

  public ProvidersLdapLdapItem shadowExpireAttribute(String shadowExpireAttribute) {
    this.shadowExpireAttribute = shadowExpireAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the absolute date to expire the account.
   * @return shadowExpireAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the absolute date to expire the account.")
  public String getShadowExpireAttribute() {
    return shadowExpireAttribute;
  }

  public void setShadowExpireAttribute(String shadowExpireAttribute) {
    this.shadowExpireAttribute = shadowExpireAttribute;
  }

  public ProvidersLdapLdapItem shadowFlagAttribute(String shadowFlagAttribute) {
    this.shadowFlagAttribute = shadowFlagAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the section of the shadow map that is used to store the flag value.
   * @return shadowFlagAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the section of the shadow map that is used to store the flag value.")
  public String getShadowFlagAttribute() {
    return shadowFlagAttribute;
  }

  public void setShadowFlagAttribute(String shadowFlagAttribute) {
    this.shadowFlagAttribute = shadowFlagAttribute;
  }

  public ProvidersLdapLdapItem shadowInactiveAttribute(String shadowInactiveAttribute) {
    this.shadowInactiveAttribute = shadowInactiveAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the number of days of inactivity that is allowed for the user.
   * @return shadowInactiveAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the number of days of inactivity that is allowed for the user.")
  public String getShadowInactiveAttribute() {
    return shadowInactiveAttribute;
  }

  public void setShadowInactiveAttribute(String shadowInactiveAttribute) {
    this.shadowInactiveAttribute = shadowInactiveAttribute;
  }

  public ProvidersLdapLdapItem shadowLastChangeAttribute(String shadowLastChangeAttribute) {
    this.shadowLastChangeAttribute = shadowLastChangeAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the last change of the shadow information.
   * @return shadowLastChangeAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the last change of the shadow information.")
  public String getShadowLastChangeAttribute() {
    return shadowLastChangeAttribute;
  }

  public void setShadowLastChangeAttribute(String shadowLastChangeAttribute) {
    this.shadowLastChangeAttribute = shadowLastChangeAttribute;
  }

  public ProvidersLdapLdapItem shadowMaxAttribute(String shadowMaxAttribute) {
    this.shadowMaxAttribute = shadowMaxAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the maximum number of days a password can be valid.
   * @return shadowMaxAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the maximum number of days a password can be valid.")
  public String getShadowMaxAttribute() {
    return shadowMaxAttribute;
  }

  public void setShadowMaxAttribute(String shadowMaxAttribute) {
    this.shadowMaxAttribute = shadowMaxAttribute;
  }

  public ProvidersLdapLdapItem shadowMinAttribute(String shadowMinAttribute) {
    this.shadowMinAttribute = shadowMinAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the minimum number of days between shadow changes.
   * @return shadowMinAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the minimum number of days between shadow changes.")
  public String getShadowMinAttribute() {
    return shadowMinAttribute;
  }

  public void setShadowMinAttribute(String shadowMinAttribute) {
    this.shadowMinAttribute = shadowMinAttribute;
  }

  public ProvidersLdapLdapItem shadowUserFilter(String shadowUserFilter) {
    this.shadowUserFilter = shadowUserFilter;
    return this;
  }

   /**
   * Sets LDAP filter for shadow user objects.
   * @return shadowUserFilter
  **/
  @ApiModelProperty(value = "Sets LDAP filter for shadow user objects.")
  public String getShadowUserFilter() {
    return shadowUserFilter;
  }

  public void setShadowUserFilter(String shadowUserFilter) {
    this.shadowUserFilter = shadowUserFilter;
  }

  public ProvidersLdapLdapItem shadowWarningAttribute(String shadowWarningAttribute) {
    this.shadowWarningAttribute = shadowWarningAttribute;
    return this;
  }

   /**
   * Sets the attribute name that indicates the number of days before the password expires to warn the user.
   * @return shadowWarningAttribute
  **/
  @ApiModelProperty(value = "Sets the attribute name that indicates the number of days before the password expires to warn the user.")
  public String getShadowWarningAttribute() {
    return shadowWarningAttribute;
  }

  public void setShadowWarningAttribute(String shadowWarningAttribute) {
    this.shadowWarningAttribute = shadowWarningAttribute;
  }

  public ProvidersLdapLdapItem shellAttribute(String shellAttribute) {
    this.shellAttribute = shellAttribute;
    return this;
  }

   /**
   * Specifies the the LDAP Shell attribute.
   * @return shellAttribute
  **/
  @ApiModelProperty(value = "Specifies the the LDAP Shell attribute.")
  public String getShellAttribute() {
    return shellAttribute;
  }

  public void setShellAttribute(String shellAttribute) {
    this.shellAttribute = shellAttribute;
  }

  public ProvidersLdapLdapItem status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Specifies the status of the provider.
   * @return status
  **/
  @ApiModelProperty(value = "Specifies the status of the provider.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ProvidersLdapLdapItem system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * If true, indicates that this provider instance was created by OneFS and cannot be removed.
   * @return system
  **/
  @ApiModelProperty(value = "If true, indicates that this provider instance was created by OneFS and cannot be removed.")
  public Boolean isSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }

  public ProvidersLdapLdapItem template(String template) {
    this.template = template;
    return this;
  }

   /**
   * Specifies template to be used to create the LDAP provider. The list of templates can be found at /auth/providers/ldap-templates.  Any fields directly defined in your request will override the template values.
   * @return template
  **/
  @ApiModelProperty(value = "Specifies template to be used to create the LDAP provider. The list of templates can be found at /auth/providers/ldap-templates.  Any fields directly defined in your request will override the template values.")
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }

  public ProvidersLdapLdapItem uidAttribute(String uidAttribute) {
    this.uidAttribute = uidAttribute;
    return this;
  }

   /**
   * Specifies the the LDAP UID Number attribute.
   * @return uidAttribute
  **/
  @ApiModelProperty(value = "Specifies the the LDAP UID Number attribute.")
  public String getUidAttribute() {
    return uidAttribute;
  }

  public void setUidAttribute(String uidAttribute) {
    this.uidAttribute = uidAttribute;
  }

  public ProvidersLdapLdapItem unfindableGroups(List<String> unfindableGroups) {
    this.unfindableGroups = unfindableGroups;
    return this;
  }

  public ProvidersLdapLdapItem addUnfindableGroupsItem(String unfindableGroupsItem) {
    if (this.unfindableGroups == null) {
      this.unfindableGroups = new ArrayList<String>();
    }
    this.unfindableGroups.add(unfindableGroupsItem);
    return this;
  }

   /**
   * Specifies the groups that cannot be resolved by the provider.
   * @return unfindableGroups
  **/
  @ApiModelProperty(value = "Specifies the groups that cannot be resolved by the provider.")
  public List<String> getUnfindableGroups() {
    return unfindableGroups;
  }

  public void setUnfindableGroups(List<String> unfindableGroups) {
    this.unfindableGroups = unfindableGroups;
  }

  public ProvidersLdapLdapItem unfindableUsers(List<String> unfindableUsers) {
    this.unfindableUsers = unfindableUsers;
    return this;
  }

  public ProvidersLdapLdapItem addUnfindableUsersItem(String unfindableUsersItem) {
    if (this.unfindableUsers == null) {
      this.unfindableUsers = new ArrayList<String>();
    }
    this.unfindableUsers.add(unfindableUsersItem);
    return this;
  }

   /**
   * Specifies users that cannot be resolved by the provider.
   * @return unfindableUsers
  **/
  @ApiModelProperty(value = "Specifies users that cannot be resolved by the provider.")
  public List<String> getUnfindableUsers() {
    return unfindableUsers;
  }

  public void setUnfindableUsers(List<String> unfindableUsers) {
    this.unfindableUsers = unfindableUsers;
  }

  public ProvidersLdapLdapItem uniqueGroupMembersAttribute(String uniqueGroupMembersAttribute) {
    this.uniqueGroupMembersAttribute = uniqueGroupMembersAttribute;
    return this;
  }

   /**
   * Sets the LDAP Unique Group Members attribute.
   * @return uniqueGroupMembersAttribute
  **/
  @ApiModelProperty(value = "Sets the LDAP Unique Group Members attribute.")
  public String getUniqueGroupMembersAttribute() {
    return uniqueGroupMembersAttribute;
  }

  public void setUniqueGroupMembersAttribute(String uniqueGroupMembersAttribute) {
    this.uniqueGroupMembersAttribute = uniqueGroupMembersAttribute;
  }

  public ProvidersLdapLdapItem unlistableGroups(List<String> unlistableGroups) {
    this.unlistableGroups = unlistableGroups;
    return this;
  }

  public ProvidersLdapLdapItem addUnlistableGroupsItem(String unlistableGroupsItem) {
    if (this.unlistableGroups == null) {
      this.unlistableGroups = new ArrayList<String>();
    }
    this.unlistableGroups.add(unlistableGroupsItem);
    return this;
  }

   /**
   * Specifies a group that cannot be listed by the provider.
   * @return unlistableGroups
  **/
  @ApiModelProperty(value = "Specifies a group that cannot be listed by the provider.")
  public List<String> getUnlistableGroups() {
    return unlistableGroups;
  }

  public void setUnlistableGroups(List<String> unlistableGroups) {
    this.unlistableGroups = unlistableGroups;
  }

  public ProvidersLdapLdapItem unlistableUsers(List<String> unlistableUsers) {
    this.unlistableUsers = unlistableUsers;
    return this;
  }

  public ProvidersLdapLdapItem addUnlistableUsersItem(String unlistableUsersItem) {
    if (this.unlistableUsers == null) {
      this.unlistableUsers = new ArrayList<String>();
    }
    this.unlistableUsers.add(unlistableUsersItem);
    return this;
  }

   /**
   * Specifies a user that cannot be listed by the provider.
   * @return unlistableUsers
  **/
  @ApiModelProperty(value = "Specifies a user that cannot be listed by the provider.")
  public List<String> getUnlistableUsers() {
    return unlistableUsers;
  }

  public void setUnlistableUsers(List<String> unlistableUsers) {
    this.unlistableUsers = unlistableUsers;
  }

  public ProvidersLdapLdapItem userBaseDn(String userBaseDn) {
    this.userBaseDn = userBaseDn;
    return this;
  }

   /**
   * Specifies the distinguished name of the entry at which to start LDAP searches for users.
   * @return userBaseDn
  **/
  @ApiModelProperty(value = "Specifies the distinguished name of the entry at which to start LDAP searches for users.")
  public String getUserBaseDn() {
    return userBaseDn;
  }

  public void setUserBaseDn(String userBaseDn) {
    this.userBaseDn = userBaseDn;
  }

  public ProvidersLdapLdapItem userDomain(String userDomain) {
    this.userDomain = userDomain;
    return this;
  }

   /**
   * Specifies the domain for this provider through which users are qualified.
   * @return userDomain
  **/
  @ApiModelProperty(value = "Specifies the domain for this provider through which users are qualified.")
  public String getUserDomain() {
    return userDomain;
  }

  public void setUserDomain(String userDomain) {
    this.userDomain = userDomain;
  }

  public ProvidersLdapLdapItem userFilter(String userFilter) {
    this.userFilter = userFilter;
    return this;
  }

   /**
   * Specifies the LDAP filter for user objects.
   * @return userFilter
  **/
  @ApiModelProperty(value = "Specifies the LDAP filter for user objects.")
  public String getUserFilter() {
    return userFilter;
  }

  public void setUserFilter(String userFilter) {
    this.userFilter = userFilter;
  }

  public ProvidersLdapLdapItem userSearchScope(UserSearchScopeEnum userSearchScope) {
    this.userSearchScope = userSearchScope;
    return this;
  }

   /**
   * Specifies the depth from the base DN to perform LDAP searches.
   * @return userSearchScope
  **/
  @ApiModelProperty(value = "Specifies the depth from the base DN to perform LDAP searches.")
  public UserSearchScopeEnum getUserSearchScope() {
    return userSearchScope;
  }

  public void setUserSearchScope(UserSearchScopeEnum userSearchScope) {
    this.userSearchScope = userSearchScope;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvidersLdapLdapItem providersLdapLdapItem = (ProvidersLdapLdapItem) o;
    return Objects.equals(this.alternateSecurityIdentitiesAttribute, providersLdapLdapItem.alternateSecurityIdentitiesAttribute) &&
        Objects.equals(this.authentication, providersLdapLdapItem.authentication) &&
        Objects.equals(this.balanceServers, providersLdapLdapItem.balanceServers) &&
        Objects.equals(this.baseDn, providersLdapLdapItem.baseDn) &&
        Objects.equals(this.bindDn, providersLdapLdapItem.bindDn) &&
        Objects.equals(this.bindMechanism, providersLdapLdapItem.bindMechanism) &&
        Objects.equals(this.bindTimeout, providersLdapLdapItem.bindTimeout) &&
        Objects.equals(this.certificateAuthorityFile, providersLdapLdapItem.certificateAuthorityFile) &&
        Objects.equals(this.checkOnlineInterval, providersLdapLdapItem.checkOnlineInterval) &&
        Objects.equals(this.cnAttribute, providersLdapLdapItem.cnAttribute) &&
        Objects.equals(this.createHomeDirectory, providersLdapLdapItem.createHomeDirectory) &&
        Objects.equals(this.cryptPasswordAttribute, providersLdapLdapItem.cryptPasswordAttribute) &&
        Objects.equals(this.emailAttribute, providersLdapLdapItem.emailAttribute) &&
        Objects.equals(this.enabled, providersLdapLdapItem.enabled) &&
        Objects.equals(this.enumerateGroups, providersLdapLdapItem.enumerateGroups) &&
        Objects.equals(this.enumerateUsers, providersLdapLdapItem.enumerateUsers) &&
        Objects.equals(this.findableGroups, providersLdapLdapItem.findableGroups) &&
        Objects.equals(this.findableUsers, providersLdapLdapItem.findableUsers) &&
        Objects.equals(this.gecosAttribute, providersLdapLdapItem.gecosAttribute) &&
        Objects.equals(this.gidAttribute, providersLdapLdapItem.gidAttribute) &&
        Objects.equals(this.groupBaseDn, providersLdapLdapItem.groupBaseDn) &&
        Objects.equals(this.groupDomain, providersLdapLdapItem.groupDomain) &&
        Objects.equals(this.groupFilter, providersLdapLdapItem.groupFilter) &&
        Objects.equals(this.groupMembersAttribute, providersLdapLdapItem.groupMembersAttribute) &&
        Objects.equals(this.groupSearchScope, providersLdapLdapItem.groupSearchScope) &&
        Objects.equals(this.groupnet, providersLdapLdapItem.groupnet) &&
        Objects.equals(this.homeDirectoryTemplate, providersLdapLdapItem.homeDirectoryTemplate) &&
        Objects.equals(this.homedirAttribute, providersLdapLdapItem.homedirAttribute) &&
        Objects.equals(this.id, providersLdapLdapItem.id) &&
        Objects.equals(this.ignoreTlsErrors, providersLdapLdapItem.ignoreTlsErrors) &&
        Objects.equals(this.listableGroups, providersLdapLdapItem.listableGroups) &&
        Objects.equals(this.listableUsers, providersLdapLdapItem.listableUsers) &&
        Objects.equals(this.loginShell, providersLdapLdapItem.loginShell) &&
        Objects.equals(this.memberOfAttribute, providersLdapLdapItem.memberOfAttribute) &&
        Objects.equals(this.name, providersLdapLdapItem.name) &&
        Objects.equals(this.nameAttribute, providersLdapLdapItem.nameAttribute) &&
        Objects.equals(this.netgroupBaseDn, providersLdapLdapItem.netgroupBaseDn) &&
        Objects.equals(this.netgroupFilter, providersLdapLdapItem.netgroupFilter) &&
        Objects.equals(this.netgroupMembersAttribute, providersLdapLdapItem.netgroupMembersAttribute) &&
        Objects.equals(this.netgroupSearchScope, providersLdapLdapItem.netgroupSearchScope) &&
        Objects.equals(this.netgroupTripleAttribute, providersLdapLdapItem.netgroupTripleAttribute) &&
        Objects.equals(this.normalizeGroups, providersLdapLdapItem.normalizeGroups) &&
        Objects.equals(this.normalizeUsers, providersLdapLdapItem.normalizeUsers) &&
        Objects.equals(this.ntPasswordAttribute, providersLdapLdapItem.ntPasswordAttribute) &&
        Objects.equals(this.ntlmSupport, providersLdapLdapItem.ntlmSupport) &&
        Objects.equals(this.providerDomain, providersLdapLdapItem.providerDomain) &&
        Objects.equals(this.requireSecureConnection, providersLdapLdapItem.requireSecureConnection) &&
        Objects.equals(this.restrictFindable, providersLdapLdapItem.restrictFindable) &&
        Objects.equals(this.restrictListable, providersLdapLdapItem.restrictListable) &&
        Objects.equals(this.searchScope, providersLdapLdapItem.searchScope) &&
        Objects.equals(this.searchTimeout, providersLdapLdapItem.searchTimeout) &&
        Objects.equals(this.serverUris, providersLdapLdapItem.serverUris) &&
        Objects.equals(this.shadowExpireAttribute, providersLdapLdapItem.shadowExpireAttribute) &&
        Objects.equals(this.shadowFlagAttribute, providersLdapLdapItem.shadowFlagAttribute) &&
        Objects.equals(this.shadowInactiveAttribute, providersLdapLdapItem.shadowInactiveAttribute) &&
        Objects.equals(this.shadowLastChangeAttribute, providersLdapLdapItem.shadowLastChangeAttribute) &&
        Objects.equals(this.shadowMaxAttribute, providersLdapLdapItem.shadowMaxAttribute) &&
        Objects.equals(this.shadowMinAttribute, providersLdapLdapItem.shadowMinAttribute) &&
        Objects.equals(this.shadowUserFilter, providersLdapLdapItem.shadowUserFilter) &&
        Objects.equals(this.shadowWarningAttribute, providersLdapLdapItem.shadowWarningAttribute) &&
        Objects.equals(this.shellAttribute, providersLdapLdapItem.shellAttribute) &&
        Objects.equals(this.status, providersLdapLdapItem.status) &&
        Objects.equals(this.system, providersLdapLdapItem.system) &&
        Objects.equals(this.template, providersLdapLdapItem.template) &&
        Objects.equals(this.uidAttribute, providersLdapLdapItem.uidAttribute) &&
        Objects.equals(this.unfindableGroups, providersLdapLdapItem.unfindableGroups) &&
        Objects.equals(this.unfindableUsers, providersLdapLdapItem.unfindableUsers) &&
        Objects.equals(this.uniqueGroupMembersAttribute, providersLdapLdapItem.uniqueGroupMembersAttribute) &&
        Objects.equals(this.unlistableGroups, providersLdapLdapItem.unlistableGroups) &&
        Objects.equals(this.unlistableUsers, providersLdapLdapItem.unlistableUsers) &&
        Objects.equals(this.userBaseDn, providersLdapLdapItem.userBaseDn) &&
        Objects.equals(this.userDomain, providersLdapLdapItem.userDomain) &&
        Objects.equals(this.userFilter, providersLdapLdapItem.userFilter) &&
        Objects.equals(this.userSearchScope, providersLdapLdapItem.userSearchScope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateSecurityIdentitiesAttribute, authentication, balanceServers, baseDn, bindDn, bindMechanism, bindTimeout, certificateAuthorityFile, checkOnlineInterval, cnAttribute, createHomeDirectory, cryptPasswordAttribute, emailAttribute, enabled, enumerateGroups, enumerateUsers, findableGroups, findableUsers, gecosAttribute, gidAttribute, groupBaseDn, groupDomain, groupFilter, groupMembersAttribute, groupSearchScope, groupnet, homeDirectoryTemplate, homedirAttribute, id, ignoreTlsErrors, listableGroups, listableUsers, loginShell, memberOfAttribute, name, nameAttribute, netgroupBaseDn, netgroupFilter, netgroupMembersAttribute, netgroupSearchScope, netgroupTripleAttribute, normalizeGroups, normalizeUsers, ntPasswordAttribute, ntlmSupport, providerDomain, requireSecureConnection, restrictFindable, restrictListable, searchScope, searchTimeout, serverUris, shadowExpireAttribute, shadowFlagAttribute, shadowInactiveAttribute, shadowLastChangeAttribute, shadowMaxAttribute, shadowMinAttribute, shadowUserFilter, shadowWarningAttribute, shellAttribute, status, system, template, uidAttribute, unfindableGroups, unfindableUsers, uniqueGroupMembersAttribute, unlistableGroups, unlistableUsers, userBaseDn, userDomain, userFilter, userSearchScope);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvidersLdapLdapItem {\n");
    
    sb.append("    alternateSecurityIdentitiesAttribute: ").append(toIndentedString(alternateSecurityIdentitiesAttribute)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    balanceServers: ").append(toIndentedString(balanceServers)).append("\n");
    sb.append("    baseDn: ").append(toIndentedString(baseDn)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    bindMechanism: ").append(toIndentedString(bindMechanism)).append("\n");
    sb.append("    bindTimeout: ").append(toIndentedString(bindTimeout)).append("\n");
    sb.append("    certificateAuthorityFile: ").append(toIndentedString(certificateAuthorityFile)).append("\n");
    sb.append("    checkOnlineInterval: ").append(toIndentedString(checkOnlineInterval)).append("\n");
    sb.append("    cnAttribute: ").append(toIndentedString(cnAttribute)).append("\n");
    sb.append("    createHomeDirectory: ").append(toIndentedString(createHomeDirectory)).append("\n");
    sb.append("    cryptPasswordAttribute: ").append(toIndentedString(cryptPasswordAttribute)).append("\n");
    sb.append("    emailAttribute: ").append(toIndentedString(emailAttribute)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enumerateGroups: ").append(toIndentedString(enumerateGroups)).append("\n");
    sb.append("    enumerateUsers: ").append(toIndentedString(enumerateUsers)).append("\n");
    sb.append("    findableGroups: ").append(toIndentedString(findableGroups)).append("\n");
    sb.append("    findableUsers: ").append(toIndentedString(findableUsers)).append("\n");
    sb.append("    gecosAttribute: ").append(toIndentedString(gecosAttribute)).append("\n");
    sb.append("    gidAttribute: ").append(toIndentedString(gidAttribute)).append("\n");
    sb.append("    groupBaseDn: ").append(toIndentedString(groupBaseDn)).append("\n");
    sb.append("    groupDomain: ").append(toIndentedString(groupDomain)).append("\n");
    sb.append("    groupFilter: ").append(toIndentedString(groupFilter)).append("\n");
    sb.append("    groupMembersAttribute: ").append(toIndentedString(groupMembersAttribute)).append("\n");
    sb.append("    groupSearchScope: ").append(toIndentedString(groupSearchScope)).append("\n");
    sb.append("    groupnet: ").append(toIndentedString(groupnet)).append("\n");
    sb.append("    homeDirectoryTemplate: ").append(toIndentedString(homeDirectoryTemplate)).append("\n");
    sb.append("    homedirAttribute: ").append(toIndentedString(homedirAttribute)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoreTlsErrors: ").append(toIndentedString(ignoreTlsErrors)).append("\n");
    sb.append("    listableGroups: ").append(toIndentedString(listableGroups)).append("\n");
    sb.append("    listableUsers: ").append(toIndentedString(listableUsers)).append("\n");
    sb.append("    loginShell: ").append(toIndentedString(loginShell)).append("\n");
    sb.append("    memberOfAttribute: ").append(toIndentedString(memberOfAttribute)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameAttribute: ").append(toIndentedString(nameAttribute)).append("\n");
    sb.append("    netgroupBaseDn: ").append(toIndentedString(netgroupBaseDn)).append("\n");
    sb.append("    netgroupFilter: ").append(toIndentedString(netgroupFilter)).append("\n");
    sb.append("    netgroupMembersAttribute: ").append(toIndentedString(netgroupMembersAttribute)).append("\n");
    sb.append("    netgroupSearchScope: ").append(toIndentedString(netgroupSearchScope)).append("\n");
    sb.append("    netgroupTripleAttribute: ").append(toIndentedString(netgroupTripleAttribute)).append("\n");
    sb.append("    normalizeGroups: ").append(toIndentedString(normalizeGroups)).append("\n");
    sb.append("    normalizeUsers: ").append(toIndentedString(normalizeUsers)).append("\n");
    sb.append("    ntPasswordAttribute: ").append(toIndentedString(ntPasswordAttribute)).append("\n");
    sb.append("    ntlmSupport: ").append(toIndentedString(ntlmSupport)).append("\n");
    sb.append("    providerDomain: ").append(toIndentedString(providerDomain)).append("\n");
    sb.append("    requireSecureConnection: ").append(toIndentedString(requireSecureConnection)).append("\n");
    sb.append("    restrictFindable: ").append(toIndentedString(restrictFindable)).append("\n");
    sb.append("    restrictListable: ").append(toIndentedString(restrictListable)).append("\n");
    sb.append("    searchScope: ").append(toIndentedString(searchScope)).append("\n");
    sb.append("    searchTimeout: ").append(toIndentedString(searchTimeout)).append("\n");
    sb.append("    serverUris: ").append(toIndentedString(serverUris)).append("\n");
    sb.append("    shadowExpireAttribute: ").append(toIndentedString(shadowExpireAttribute)).append("\n");
    sb.append("    shadowFlagAttribute: ").append(toIndentedString(shadowFlagAttribute)).append("\n");
    sb.append("    shadowInactiveAttribute: ").append(toIndentedString(shadowInactiveAttribute)).append("\n");
    sb.append("    shadowLastChangeAttribute: ").append(toIndentedString(shadowLastChangeAttribute)).append("\n");
    sb.append("    shadowMaxAttribute: ").append(toIndentedString(shadowMaxAttribute)).append("\n");
    sb.append("    shadowMinAttribute: ").append(toIndentedString(shadowMinAttribute)).append("\n");
    sb.append("    shadowUserFilter: ").append(toIndentedString(shadowUserFilter)).append("\n");
    sb.append("    shadowWarningAttribute: ").append(toIndentedString(shadowWarningAttribute)).append("\n");
    sb.append("    shellAttribute: ").append(toIndentedString(shellAttribute)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    uidAttribute: ").append(toIndentedString(uidAttribute)).append("\n");
    sb.append("    unfindableGroups: ").append(toIndentedString(unfindableGroups)).append("\n");
    sb.append("    unfindableUsers: ").append(toIndentedString(unfindableUsers)).append("\n");
    sb.append("    uniqueGroupMembersAttribute: ").append(toIndentedString(uniqueGroupMembersAttribute)).append("\n");
    sb.append("    unlistableGroups: ").append(toIndentedString(unlistableGroups)).append("\n");
    sb.append("    unlistableUsers: ").append(toIndentedString(unlistableUsers)).append("\n");
    sb.append("    userBaseDn: ").append(toIndentedString(userBaseDn)).append("\n");
    sb.append("    userDomain: ").append(toIndentedString(userDomain)).append("\n");
    sb.append("    userFilter: ").append(toIndentedString(userFilter)).append("\n");
    sb.append("    userSearchScope: ").append(toIndentedString(userSearchScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

