/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.PoolsPoolInterfacesInterfaceOwner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PoolsPoolInterfacesInterface
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class PoolsPoolInterfacesInterface {
  @SerializedName("id")
  private String id = null;

  @SerializedName("ip_addrs")
  private List<String> ipAddrs = new ArrayList<String>();

  @SerializedName("lnn")
  private Integer lnn = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("nic_name")
  private String nicName = null;

  @SerializedName("owners")
  private List<PoolsPoolInterfacesInterfaceOwner> owners = new ArrayList<PoolsPoolInterfacesInterfaceOwner>();

  @SerializedName("status")
  private String status = null;

  /**
   * Interface type.  The &#39;*gige&#39; types stand for &#39;gigabit ethernet&#39;.  &#39;gige&#39; itself is occasionally also referred to in other places as &#39;ext&#39; for &#39;external&#39;.  &#39;ib&#39; and &#39;ib_qdr&#39; are internal Infiniband interface types.  &#39;vlan&#39; and &#39;vmxnet3&#39; are virtual interface types that appear on virtual nodes.  &#39;loopback&#39; is an interface for failover addresses and should only appear if failover is configured.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ANY("any"),
    
    GIGE("gige"),
    
    FASTGIGE("fastgige"),
    
    _10GIGE("10gige"),
    
    _40GIGE("40gige"),
    
    MGMT("mgmt"),
    
    IB("ib"),
    
    IB_QDR("ib_qdr"),
    
    IB_FDR("ib_fdr"),
    
    AGGREGATED("aggregated"),
    
    VLAN("vlan"),
    
    VMXNET3("vmxnet3"),
    
    LOOPBACK("loopback");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public PoolsPoolInterfacesInterface id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique interface ID.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique interface ID.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PoolsPoolInterfacesInterface ipAddrs(List<String> ipAddrs) {
    this.ipAddrs = ipAddrs;
    return this;
  }

  public PoolsPoolInterfacesInterface addIpAddrsItem(String ipAddrsItem) {
    this.ipAddrs.add(ipAddrsItem);
    return this;
  }

   /**
   * List of IP addresses
   * @return ipAddrs
  **/
  @ApiModelProperty(required = true, value = "List of IP addresses")
  public List<String> getIpAddrs() {
    return ipAddrs;
  }

  public void setIpAddrs(List<String> ipAddrs) {
    this.ipAddrs = ipAddrs;
  }

  public PoolsPoolInterfacesInterface lnn(Integer lnn) {
    this.lnn = lnn;
    return this;
  }

   /**
   * Logical Node Number
   * minimum: 1
   * @return lnn
  **/
  @ApiModelProperty(required = true, value = "Logical Node Number")
  public Integer getLnn() {
    return lnn;
  }

  public void setLnn(Integer lnn) {
    this.lnn = lnn;
  }

  public PoolsPoolInterfacesInterface name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the interface.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The name of the interface.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PoolsPoolInterfacesInterface nicName(String nicName) {
    this.nicName = nicName;
    return this;
  }

   /**
   * NIC name
   * @return nicName
  **/
  @ApiModelProperty(required = true, value = "NIC name")
  public String getNicName() {
    return nicName;
  }

  public void setNicName(String nicName) {
    this.nicName = nicName;
  }

  public PoolsPoolInterfacesInterface owners(List<PoolsPoolInterfacesInterfaceOwner> owners) {
    this.owners = owners;
    return this;
  }

  public PoolsPoolInterfacesInterface addOwnersItem(PoolsPoolInterfacesInterfaceOwner ownersItem) {
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * List of owners (membership)
   * @return owners
  **/
  @ApiModelProperty(required = true, value = "List of owners (membership)")
  public List<PoolsPoolInterfacesInterfaceOwner> getOwners() {
    return owners;
  }

  public void setOwners(List<PoolsPoolInterfacesInterfaceOwner> owners) {
    this.owners = owners;
  }

  public PoolsPoolInterfacesInterface status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the interface
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Status of the interface")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public PoolsPoolInterfacesInterface type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Interface type.  The &#39;*gige&#39; types stand for &#39;gigabit ethernet&#39;.  &#39;gige&#39; itself is occasionally also referred to in other places as &#39;ext&#39; for &#39;external&#39;.  &#39;ib&#39; and &#39;ib_qdr&#39; are internal Infiniband interface types.  &#39;vlan&#39; and &#39;vmxnet3&#39; are virtual interface types that appear on virtual nodes.  &#39;loopback&#39; is an interface for failover addresses and should only appear if failover is configured.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Interface type.  The '*gige' types stand for 'gigabit ethernet'.  'gige' itself is occasionally also referred to in other places as 'ext' for 'external'.  'ib' and 'ib_qdr' are internal Infiniband interface types.  'vlan' and 'vmxnet3' are virtual interface types that appear on virtual nodes.  'loopback' is an interface for failover addresses and should only appear if failover is configured.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolsPoolInterfacesInterface poolsPoolInterfacesInterface = (PoolsPoolInterfacesInterface) o;
    return Objects.equals(this.id, poolsPoolInterfacesInterface.id) &&
        Objects.equals(this.ipAddrs, poolsPoolInterfacesInterface.ipAddrs) &&
        Objects.equals(this.lnn, poolsPoolInterfacesInterface.lnn) &&
        Objects.equals(this.name, poolsPoolInterfacesInterface.name) &&
        Objects.equals(this.nicName, poolsPoolInterfacesInterface.nicName) &&
        Objects.equals(this.owners, poolsPoolInterfacesInterface.owners) &&
        Objects.equals(this.status, poolsPoolInterfacesInterface.status) &&
        Objects.equals(this.type, poolsPoolInterfacesInterface.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ipAddrs, lnn, name, nicName, owners, status, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolsPoolInterfacesInterface {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddrs: ").append(toIndentedString(ipAddrs)).append("\n");
    sb.append("    lnn: ").append(toIndentedString(lnn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nicName: ").append(toIndentedString(nicName)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

