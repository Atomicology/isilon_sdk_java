/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ACL policies settings.
 */
@ApiModel(description = "ACL policies settings.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T09:38:03.973-07:00")
public class SettingsAclsExtended {
  /**
   * Access checks (chmod, chown).
   */
  @JsonAdapter(AccessEnum.Adapter.class)
  public enum AccessEnum {
    UNIX("unix"),
    
    WINDOWS("windows");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String text) {
      for (AccessEnum b : AccessEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AccessEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("access")
  private AccessEnum access = null;

  /**
   * Displayed mode bits.
   */
  @JsonAdapter(CalcmodeEnum.Adapter.class)
  public enum CalcmodeEnum {
    APPROX("approx"),
    
    _777("777");

    private String value;

    CalcmodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalcmodeEnum fromValue(String text) {
      for (CalcmodeEnum b : CalcmodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CalcmodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalcmodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalcmodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CalcmodeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("calcmode")
  private CalcmodeEnum calcmode = null;

  /**
   * Approximate group mode bits when ACL exists.
   */
  @JsonAdapter(CalcmodeGroupEnum.Adapter.class)
  public enum CalcmodeGroupEnum {
    ACES("group_aces"),
    
    ONLY("group_only");

    private String value;

    CalcmodeGroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalcmodeGroupEnum fromValue(String text) {
      for (CalcmodeGroupEnum b : CalcmodeGroupEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CalcmodeGroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalcmodeGroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalcmodeGroupEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CalcmodeGroupEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("calcmode_group")
  private CalcmodeGroupEnum calcmodeGroup = null;

  /**
   * Approximate owner mode bits when ACL exists.
   */
  @JsonAdapter(CalcmodeOwnerEnum.Adapter.class)
  public enum CalcmodeOwnerEnum {
    ACES("owner_aces"),
    
    ONLY("owner_only");

    private String value;

    CalcmodeOwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalcmodeOwnerEnum fromValue(String text) {
      for (CalcmodeOwnerEnum b : CalcmodeOwnerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CalcmodeOwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalcmodeOwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalcmodeOwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CalcmodeOwnerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("calcmode_owner")
  private CalcmodeOwnerEnum calcmodeOwner = null;

  /**
   * chmod on files with existing ACLs.
   */
  @JsonAdapter(ChmodEnum.Adapter.class)
  public enum ChmodEnum {
    REMOVE("remove"),
    
    REPLACE("replace"),
    
    REPLACE_USERS_AND_GROUPS("replace_users_and_groups"),
    
    MERGE("merge"),
    
    DENY("deny"),
    
    IGNORE("ignore");

    private String value;

    ChmodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChmodEnum fromValue(String text) {
      for (ChmodEnum b : ChmodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChmodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChmodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChmodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChmodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chmod")
  private ChmodEnum chmod = null;

  /**
   * chmod (007) on files with existing ACLs.
   */
  @JsonAdapter(Chmod007Enum.Adapter.class)
  public enum Chmod007Enum {
    DEFAULT("default"),
    
    REMOVE("remove");

    private String value;

    Chmod007Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Chmod007Enum fromValue(String text) {
      for (Chmod007Enum b : Chmod007Enum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Chmod007Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Chmod007Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Chmod007Enum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Chmod007Enum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chmod_007")
  private Chmod007Enum chmod007 = null;

  /**
   * ACLs created on directories by UNIX chmod.
   */
  @JsonAdapter(ChmodInheritableEnum.Adapter.class)
  public enum ChmodInheritableEnum {
    YES("yes"),
    
    NO("no");

    private String value;

    ChmodInheritableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChmodInheritableEnum fromValue(String text) {
      for (ChmodInheritableEnum b : ChmodInheritableEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChmodInheritableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChmodInheritableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChmodInheritableEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChmodInheritableEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chmod_inheritable")
  private ChmodInheritableEnum chmodInheritable = null;

  /**
   * chown/chgrp on files with existing ACLs.
   */
  @JsonAdapter(ChownEnum.Adapter.class)
  public enum ChownEnum {
    OWNER_GROUP_AND_ACL("owner_group_and_acl"),
    
    OWNER_GROUP_ONLY("owner_group_only"),
    
    IGNORE("ignore");

    private String value;

    ChownEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChownEnum fromValue(String text) {
      for (ChownEnum b : ChownEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChownEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChownEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChownEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChownEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chown")
  private ChownEnum chown = null;

  /**
   * ACL creation over SMB.
   */
  @JsonAdapter(CreateOverSmbEnum.Adapter.class)
  public enum CreateOverSmbEnum {
    ALLOW("allow"),
    
    DISALLOW("disallow");

    private String value;

    CreateOverSmbEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateOverSmbEnum fromValue(String text) {
      for (CreateOverSmbEnum b : CreateOverSmbEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CreateOverSmbEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateOverSmbEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateOverSmbEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CreateOverSmbEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("create_over_smb")
  private CreateOverSmbEnum createOverSmb = null;

  /**
   *  Read only DOS attribute.
   */
  @JsonAdapter(DosAttrEnum.Adapter.class)
  public enum DosAttrEnum {
    SMB("deny_smb"),
    
    SMB_AND_NFS("deny_smb_and_nfs");

    private String value;

    DosAttrEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DosAttrEnum fromValue(String text) {
      for (DosAttrEnum b : DosAttrEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DosAttrEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DosAttrEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DosAttrEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DosAttrEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dos_attr")
  private DosAttrEnum dosAttr = null;

  /**
   * Group owner inheritance.
   */
  @JsonAdapter(GroupOwnerInheritanceEnum.Adapter.class)
  public enum GroupOwnerInheritanceEnum {
    NATIVE("native"),
    
    PARENT("parent"),
    
    CREATOR("creator");

    private String value;

    GroupOwnerInheritanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupOwnerInheritanceEnum fromValue(String text) {
      for (GroupOwnerInheritanceEnum b : GroupOwnerInheritanceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GroupOwnerInheritanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupOwnerInheritanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupOwnerInheritanceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupOwnerInheritanceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("group_owner_inheritance")
  private GroupOwnerInheritanceEnum groupOwnerInheritance = null;

  /**
   * Treatment of &#39;rwx&#39; permissions.
   */
  @JsonAdapter(RwxEnum.Adapter.class)
  public enum RwxEnum {
    RETAIN("retain"),
    
    FULL_CONTROL("full_control");

    private String value;

    RwxEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RwxEnum fromValue(String text) {
      for (RwxEnum b : RwxEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RwxEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RwxEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RwxEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RwxEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("rwx")
  private RwxEnum rwx = null;

  /**
   * Synthetic &#39;deny&#39; ACEs.
   */
  @JsonAdapter(SyntheticDeniesEnum.Adapter.class)
  public enum SyntheticDeniesEnum {
    NONE("none"),
    
    REMOVE("remove");

    private String value;

    SyntheticDeniesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyntheticDeniesEnum fromValue(String text) {
      for (SyntheticDeniesEnum b : SyntheticDeniesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SyntheticDeniesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyntheticDeniesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyntheticDeniesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SyntheticDeniesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("synthetic_denies")
  private SyntheticDeniesEnum syntheticDenies = null;

  /**
   * Access check (utimes)
   */
  @JsonAdapter(UtimesEnum.Adapter.class)
  public enum UtimesEnum {
    ONLY_OWNER("only_owner"),
    
    OWNER_AND_WRITE("owner_and_write");

    private String value;

    UtimesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UtimesEnum fromValue(String text) {
      for (UtimesEnum b : UtimesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UtimesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UtimesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UtimesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UtimesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("utimes")
  private UtimesEnum utimes = null;

  public SettingsAclsExtended access(AccessEnum access) {
    this.access = access;
    return this;
  }

   /**
   * Access checks (chmod, chown).
   * @return access
  **/
  @ApiModelProperty(value = "Access checks (chmod, chown).")
  public AccessEnum getAccess() {
    return access;
  }

  public void setAccess(AccessEnum access) {
    this.access = access;
  }

  public SettingsAclsExtended calcmode(CalcmodeEnum calcmode) {
    this.calcmode = calcmode;
    return this;
  }

   /**
   * Displayed mode bits.
   * @return calcmode
  **/
  @ApiModelProperty(value = "Displayed mode bits.")
  public CalcmodeEnum getCalcmode() {
    return calcmode;
  }

  public void setCalcmode(CalcmodeEnum calcmode) {
    this.calcmode = calcmode;
  }

  public SettingsAclsExtended calcmodeGroup(CalcmodeGroupEnum calcmodeGroup) {
    this.calcmodeGroup = calcmodeGroup;
    return this;
  }

   /**
   * Approximate group mode bits when ACL exists.
   * @return calcmodeGroup
  **/
  @ApiModelProperty(value = "Approximate group mode bits when ACL exists.")
  public CalcmodeGroupEnum getCalcmodeGroup() {
    return calcmodeGroup;
  }

  public void setCalcmodeGroup(CalcmodeGroupEnum calcmodeGroup) {
    this.calcmodeGroup = calcmodeGroup;
  }

  public SettingsAclsExtended calcmodeOwner(CalcmodeOwnerEnum calcmodeOwner) {
    this.calcmodeOwner = calcmodeOwner;
    return this;
  }

   /**
   * Approximate owner mode bits when ACL exists.
   * @return calcmodeOwner
  **/
  @ApiModelProperty(value = "Approximate owner mode bits when ACL exists.")
  public CalcmodeOwnerEnum getCalcmodeOwner() {
    return calcmodeOwner;
  }

  public void setCalcmodeOwner(CalcmodeOwnerEnum calcmodeOwner) {
    this.calcmodeOwner = calcmodeOwner;
  }

  public SettingsAclsExtended chmod(ChmodEnum chmod) {
    this.chmod = chmod;
    return this;
  }

   /**
   * chmod on files with existing ACLs.
   * @return chmod
  **/
  @ApiModelProperty(value = "chmod on files with existing ACLs.")
  public ChmodEnum getChmod() {
    return chmod;
  }

  public void setChmod(ChmodEnum chmod) {
    this.chmod = chmod;
  }

  public SettingsAclsExtended chmod007(Chmod007Enum chmod007) {
    this.chmod007 = chmod007;
    return this;
  }

   /**
   * chmod (007) on files with existing ACLs.
   * @return chmod007
  **/
  @ApiModelProperty(value = "chmod (007) on files with existing ACLs.")
  public Chmod007Enum getChmod007() {
    return chmod007;
  }

  public void setChmod007(Chmod007Enum chmod007) {
    this.chmod007 = chmod007;
  }

  public SettingsAclsExtended chmodInheritable(ChmodInheritableEnum chmodInheritable) {
    this.chmodInheritable = chmodInheritable;
    return this;
  }

   /**
   * ACLs created on directories by UNIX chmod.
   * @return chmodInheritable
  **/
  @ApiModelProperty(value = "ACLs created on directories by UNIX chmod.")
  public ChmodInheritableEnum getChmodInheritable() {
    return chmodInheritable;
  }

  public void setChmodInheritable(ChmodInheritableEnum chmodInheritable) {
    this.chmodInheritable = chmodInheritable;
  }

  public SettingsAclsExtended chown(ChownEnum chown) {
    this.chown = chown;
    return this;
  }

   /**
   * chown/chgrp on files with existing ACLs.
   * @return chown
  **/
  @ApiModelProperty(value = "chown/chgrp on files with existing ACLs.")
  public ChownEnum getChown() {
    return chown;
  }

  public void setChown(ChownEnum chown) {
    this.chown = chown;
  }

  public SettingsAclsExtended createOverSmb(CreateOverSmbEnum createOverSmb) {
    this.createOverSmb = createOverSmb;
    return this;
  }

   /**
   * ACL creation over SMB.
   * @return createOverSmb
  **/
  @ApiModelProperty(value = "ACL creation over SMB.")
  public CreateOverSmbEnum getCreateOverSmb() {
    return createOverSmb;
  }

  public void setCreateOverSmb(CreateOverSmbEnum createOverSmb) {
    this.createOverSmb = createOverSmb;
  }

  public SettingsAclsExtended dosAttr(DosAttrEnum dosAttr) {
    this.dosAttr = dosAttr;
    return this;
  }

   /**
   *  Read only DOS attribute.
   * @return dosAttr
  **/
  @ApiModelProperty(value = " Read only DOS attribute.")
  public DosAttrEnum getDosAttr() {
    return dosAttr;
  }

  public void setDosAttr(DosAttrEnum dosAttr) {
    this.dosAttr = dosAttr;
  }

  public SettingsAclsExtended groupOwnerInheritance(GroupOwnerInheritanceEnum groupOwnerInheritance) {
    this.groupOwnerInheritance = groupOwnerInheritance;
    return this;
  }

   /**
   * Group owner inheritance.
   * @return groupOwnerInheritance
  **/
  @ApiModelProperty(value = "Group owner inheritance.")
  public GroupOwnerInheritanceEnum getGroupOwnerInheritance() {
    return groupOwnerInheritance;
  }

  public void setGroupOwnerInheritance(GroupOwnerInheritanceEnum groupOwnerInheritance) {
    this.groupOwnerInheritance = groupOwnerInheritance;
  }

  public SettingsAclsExtended rwx(RwxEnum rwx) {
    this.rwx = rwx;
    return this;
  }

   /**
   * Treatment of &#39;rwx&#39; permissions.
   * @return rwx
  **/
  @ApiModelProperty(value = "Treatment of 'rwx' permissions.")
  public RwxEnum getRwx() {
    return rwx;
  }

  public void setRwx(RwxEnum rwx) {
    this.rwx = rwx;
  }

  public SettingsAclsExtended syntheticDenies(SyntheticDeniesEnum syntheticDenies) {
    this.syntheticDenies = syntheticDenies;
    return this;
  }

   /**
   * Synthetic &#39;deny&#39; ACEs.
   * @return syntheticDenies
  **/
  @ApiModelProperty(value = "Synthetic 'deny' ACEs.")
  public SyntheticDeniesEnum getSyntheticDenies() {
    return syntheticDenies;
  }

  public void setSyntheticDenies(SyntheticDeniesEnum syntheticDenies) {
    this.syntheticDenies = syntheticDenies;
  }

  public SettingsAclsExtended utimes(UtimesEnum utimes) {
    this.utimes = utimes;
    return this;
  }

   /**
   * Access check (utimes)
   * @return utimes
  **/
  @ApiModelProperty(value = "Access check (utimes)")
  public UtimesEnum getUtimes() {
    return utimes;
  }

  public void setUtimes(UtimesEnum utimes) {
    this.utimes = utimes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsAclsExtended settingsAclsExtended = (SettingsAclsExtended) o;
    return Objects.equals(this.access, settingsAclsExtended.access) &&
        Objects.equals(this.calcmode, settingsAclsExtended.calcmode) &&
        Objects.equals(this.calcmodeGroup, settingsAclsExtended.calcmodeGroup) &&
        Objects.equals(this.calcmodeOwner, settingsAclsExtended.calcmodeOwner) &&
        Objects.equals(this.chmod, settingsAclsExtended.chmod) &&
        Objects.equals(this.chmod007, settingsAclsExtended.chmod007) &&
        Objects.equals(this.chmodInheritable, settingsAclsExtended.chmodInheritable) &&
        Objects.equals(this.chown, settingsAclsExtended.chown) &&
        Objects.equals(this.createOverSmb, settingsAclsExtended.createOverSmb) &&
        Objects.equals(this.dosAttr, settingsAclsExtended.dosAttr) &&
        Objects.equals(this.groupOwnerInheritance, settingsAclsExtended.groupOwnerInheritance) &&
        Objects.equals(this.rwx, settingsAclsExtended.rwx) &&
        Objects.equals(this.syntheticDenies, settingsAclsExtended.syntheticDenies) &&
        Objects.equals(this.utimes, settingsAclsExtended.utimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(access, calcmode, calcmodeGroup, calcmodeOwner, chmod, chmod007, chmodInheritable, chown, createOverSmb, dosAttr, groupOwnerInheritance, rwx, syntheticDenies, utimes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsAclsExtended {\n");
    
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    calcmode: ").append(toIndentedString(calcmode)).append("\n");
    sb.append("    calcmodeGroup: ").append(toIndentedString(calcmodeGroup)).append("\n");
    sb.append("    calcmodeOwner: ").append(toIndentedString(calcmodeOwner)).append("\n");
    sb.append("    chmod: ").append(toIndentedString(chmod)).append("\n");
    sb.append("    chmod007: ").append(toIndentedString(chmod007)).append("\n");
    sb.append("    chmodInheritable: ").append(toIndentedString(chmodInheritable)).append("\n");
    sb.append("    chown: ").append(toIndentedString(chown)).append("\n");
    sb.append("    createOverSmb: ").append(toIndentedString(createOverSmb)).append("\n");
    sb.append("    dosAttr: ").append(toIndentedString(dosAttr)).append("\n");
    sb.append("    groupOwnerInheritance: ").append(toIndentedString(groupOwnerInheritance)).append("\n");
    sb.append("    rwx: ").append(toIndentedString(rwx)).append("\n");
    sb.append("    syntheticDenies: ").append(toIndentedString(syntheticDenies)).append("\n");
    sb.append("    utimes: ").append(toIndentedString(utimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

