/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SettingsGlobalGlobalSettings
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class SettingsGlobalGlobalSettings {
  @SerializedName("alloc_retries")
  private Integer allocRetries = null;

  @SerializedName("gid_range_enabled")
  private Boolean gidRangeEnabled = null;

  @SerializedName("gid_range_max")
  private Integer gidRangeMax = null;

  @SerializedName("gid_range_min")
  private Integer gidRangeMin = null;

  @SerializedName("gid_range_next")
  private Integer gidRangeNext = null;

  @SerializedName("group_uid")
  private Integer groupUid = null;

  /**
   * Gets or Sets loadProviders
   */
  @JsonAdapter(LoadProvidersEnum.Adapter.class)
  public enum LoadProvidersEnum {
    ACTIVEDIRECTORY("ActiveDirectory"),
    
    LOCAL("Local"),
    
    NSS("Nss"),
    
    FILE("File"),
    
    NIS("Nis"),
    
    LDAP("Ldap"),
    
    KRB5("Krb5");

    private String value;

    LoadProvidersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoadProvidersEnum fromValue(String text) {
      for (LoadProvidersEnum b : LoadProvidersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LoadProvidersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoadProvidersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoadProvidersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LoadProvidersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("load_providers")
  private List<LoadProvidersEnum> loadProviders = null;

  @SerializedName("min_mapped_rid")
  private Integer minMappedRid = null;

  @SerializedName("null_gid")
  private Integer nullGid = null;

  @SerializedName("null_uid")
  private Integer nullUid = null;

  @SerializedName("on_disk_identity")
  private String onDiskIdentity = null;

  @SerializedName("rpc_block_time")
  private Integer rpcBlockTime = null;

  @SerializedName("rpc_max_requests")
  private Integer rpcMaxRequests = null;

  @SerializedName("rpc_timeout")
  private Integer rpcTimeout = null;

  @SerializedName("send_ntlmv2")
  private Boolean sendNtlmv2 = null;

  @SerializedName("space_replacement")
  private String spaceReplacement = null;

  @SerializedName("system_gid_threshold")
  private Integer systemGidThreshold = null;

  @SerializedName("system_uid_threshold")
  private Integer systemUidThreshold = null;

  @SerializedName("uid_range_enabled")
  private Boolean uidRangeEnabled = null;

  @SerializedName("uid_range_max")
  private Integer uidRangeMax = null;

  @SerializedName("uid_range_min")
  private Integer uidRangeMin = null;

  @SerializedName("uid_range_next")
  private Integer uidRangeNext = null;

  @SerializedName("unknown_gid")
  private Integer unknownGid = null;

  @SerializedName("unknown_uid")
  private Integer unknownUid = null;

  @SerializedName("user_object_cache_size")
  private Integer userObjectCacheSize = null;

  @SerializedName("workgroup")
  private String workgroup = null;

  public SettingsGlobalGlobalSettings allocRetries(Integer allocRetries) {
    this.allocRetries = allocRetries;
    return this;
  }

   /**
   * Specifies the number of times to retry an ID allocation before failing.
   * minimum: 0
   * maximum: 4294967295
   * @return allocRetries
  **/
  @ApiModelProperty(value = "Specifies the number of times to retry an ID allocation before failing.")
  public Integer getAllocRetries() {
    return allocRetries;
  }

  public void setAllocRetries(Integer allocRetries) {
    this.allocRetries = allocRetries;
  }

  public SettingsGlobalGlobalSettings gidRangeEnabled(Boolean gidRangeEnabled) {
    this.gidRangeEnabled = gidRangeEnabled;
    return this;
  }

   /**
   * If true, allocates GIDs from a fixed range.
   * @return gidRangeEnabled
  **/
  @ApiModelProperty(value = "If true, allocates GIDs from a fixed range.")
  public Boolean isGidRangeEnabled() {
    return gidRangeEnabled;
  }

  public void setGidRangeEnabled(Boolean gidRangeEnabled) {
    this.gidRangeEnabled = gidRangeEnabled;
  }

  public SettingsGlobalGlobalSettings gidRangeMax(Integer gidRangeMax) {
    this.gidRangeMax = gidRangeMax;
    return this;
  }

   /**
   * Specifies the ending number for a fixed range from which GIDs are allocated.
   * minimum: 0
   * maximum: 4294967295
   * @return gidRangeMax
  **/
  @ApiModelProperty(value = "Specifies the ending number for a fixed range from which GIDs are allocated.")
  public Integer getGidRangeMax() {
    return gidRangeMax;
  }

  public void setGidRangeMax(Integer gidRangeMax) {
    this.gidRangeMax = gidRangeMax;
  }

  public SettingsGlobalGlobalSettings gidRangeMin(Integer gidRangeMin) {
    this.gidRangeMin = gidRangeMin;
    return this;
  }

   /**
   * Specifies the starting number for a fixed range from which GIDs are allocated.
   * minimum: 0
   * maximum: 4294967295
   * @return gidRangeMin
  **/
  @ApiModelProperty(value = "Specifies the starting number for a fixed range from which GIDs are allocated.")
  public Integer getGidRangeMin() {
    return gidRangeMin;
  }

  public void setGidRangeMin(Integer gidRangeMin) {
    this.gidRangeMin = gidRangeMin;
  }

  public SettingsGlobalGlobalSettings gidRangeNext(Integer gidRangeNext) {
    this.gidRangeNext = gidRangeNext;
    return this;
  }

   /**
   * Specifies the next GID to allocate.
   * minimum: 0
   * maximum: 4294967295
   * @return gidRangeNext
  **/
  @ApiModelProperty(value = "Specifies the next GID to allocate.")
  public Integer getGidRangeNext() {
    return gidRangeNext;
  }

  public void setGidRangeNext(Integer gidRangeNext) {
    this.gidRangeNext = gidRangeNext;
  }

  public SettingsGlobalGlobalSettings groupUid(Integer groupUid) {
    this.groupUid = groupUid;
    return this;
  }

   /**
   * Specifies the user iD for a group when requested by the kernel.
   * minimum: 0
   * maximum: 4294967295
   * @return groupUid
  **/
  @ApiModelProperty(value = "Specifies the user iD for a group when requested by the kernel.")
  public Integer getGroupUid() {
    return groupUid;
  }

  public void setGroupUid(Integer groupUid) {
    this.groupUid = groupUid;
  }

  public SettingsGlobalGlobalSettings loadProviders(List<LoadProvidersEnum> loadProviders) {
    this.loadProviders = loadProviders;
    return this;
  }

  public SettingsGlobalGlobalSettings addLoadProvidersItem(LoadProvidersEnum loadProvidersItem) {
    if (this.loadProviders == null) {
      this.loadProviders = new ArrayList<LoadProvidersEnum>();
    }
    this.loadProviders.add(loadProvidersItem);
    return this;
  }

   /**
   * Specifies which providers are loaded by the authentication daemon (lsassd).
   * @return loadProviders
  **/
  @ApiModelProperty(value = "Specifies which providers are loaded by the authentication daemon (lsassd).")
  public List<LoadProvidersEnum> getLoadProviders() {
    return loadProviders;
  }

  public void setLoadProviders(List<LoadProvidersEnum> loadProviders) {
    this.loadProviders = loadProviders;
  }

  public SettingsGlobalGlobalSettings minMappedRid(Integer minMappedRid) {
    this.minMappedRid = minMappedRid;
    return this;
  }

   /**
   * Starts the RID in the local domain to map a UID and a GID.
   * minimum: 0
   * maximum: 4294967295
   * @return minMappedRid
  **/
  @ApiModelProperty(value = "Starts the RID in the local domain to map a UID and a GID.")
  public Integer getMinMappedRid() {
    return minMappedRid;
  }

  public void setMinMappedRid(Integer minMappedRid) {
    this.minMappedRid = minMappedRid;
  }

  public SettingsGlobalGlobalSettings nullGid(Integer nullGid) {
    this.nullGid = nullGid;
    return this;
  }

   /**
   * Specifies an alternative GID when the kernel is unable to retrieve a GID for a persona.
   * minimum: 0
   * maximum: 4294967295
   * @return nullGid
  **/
  @ApiModelProperty(value = "Specifies an alternative GID when the kernel is unable to retrieve a GID for a persona.")
  public Integer getNullGid() {
    return nullGid;
  }

  public void setNullGid(Integer nullGid) {
    this.nullGid = nullGid;
  }

  public SettingsGlobalGlobalSettings nullUid(Integer nullUid) {
    this.nullUid = nullUid;
    return this;
  }

   /**
   * Specifies an alternative UID when the kernel is unable to retrieve a UID for a persona.
   * minimum: 0
   * maximum: 4294967295
   * @return nullUid
  **/
  @ApiModelProperty(value = "Specifies an alternative UID when the kernel is unable to retrieve a UID for a persona.")
  public Integer getNullUid() {
    return nullUid;
  }

  public void setNullUid(Integer nullUid) {
    this.nullUid = nullUid;
  }

  public SettingsGlobalGlobalSettings onDiskIdentity(String onDiskIdentity) {
    this.onDiskIdentity = onDiskIdentity;
    return this;
  }

   /**
   * Specifies the type of identity that is stored on disk.
   * @return onDiskIdentity
  **/
  @ApiModelProperty(value = "Specifies the type of identity that is stored on disk.")
  public String getOnDiskIdentity() {
    return onDiskIdentity;
  }

  public void setOnDiskIdentity(String onDiskIdentity) {
    this.onDiskIdentity = onDiskIdentity;
  }

  public SettingsGlobalGlobalSettings rpcBlockTime(Integer rpcBlockTime) {
    this.rpcBlockTime = rpcBlockTime;
    return this;
  }

   /**
   * Specifies the minimum amount of time in milliseconds to wait before performing an oprestart.
   * minimum: 0
   * maximum: 4294967295
   * @return rpcBlockTime
  **/
  @ApiModelProperty(value = "Specifies the minimum amount of time in milliseconds to wait before performing an oprestart.")
  public Integer getRpcBlockTime() {
    return rpcBlockTime;
  }

  public void setRpcBlockTime(Integer rpcBlockTime) {
    this.rpcBlockTime = rpcBlockTime;
  }

  public SettingsGlobalGlobalSettings rpcMaxRequests(Integer rpcMaxRequests) {
    this.rpcMaxRequests = rpcMaxRequests;
    return this;
  }

   /**
   * Specifies the maximum number of outstanding RPC requests.
   * minimum: 0
   * maximum: 4294967295
   * @return rpcMaxRequests
  **/
  @ApiModelProperty(value = "Specifies the maximum number of outstanding RPC requests.")
  public Integer getRpcMaxRequests() {
    return rpcMaxRequests;
  }

  public void setRpcMaxRequests(Integer rpcMaxRequests) {
    this.rpcMaxRequests = rpcMaxRequests;
  }

  public SettingsGlobalGlobalSettings rpcTimeout(Integer rpcTimeout) {
    this.rpcTimeout = rpcTimeout;
    return this;
  }

   /**
   * Specifies the maximum amount of time in seconds to wait for an idmap response.
   * minimum: 10
   * maximum: 3600
   * @return rpcTimeout
  **/
  @ApiModelProperty(value = "Specifies the maximum amount of time in seconds to wait for an idmap response.")
  public Integer getRpcTimeout() {
    return rpcTimeout;
  }

  public void setRpcTimeout(Integer rpcTimeout) {
    this.rpcTimeout = rpcTimeout;
  }

  public SettingsGlobalGlobalSettings sendNtlmv2(Boolean sendNtlmv2) {
    this.sendNtlmv2 = sendNtlmv2;
    return this;
  }

   /**
   * If true, sends NTLMv2 responses.
   * @return sendNtlmv2
  **/
  @ApiModelProperty(value = "If true, sends NTLMv2 responses.")
  public Boolean isSendNtlmv2() {
    return sendNtlmv2;
  }

  public void setSendNtlmv2(Boolean sendNtlmv2) {
    this.sendNtlmv2 = sendNtlmv2;
  }

  public SettingsGlobalGlobalSettings spaceReplacement(String spaceReplacement) {
    this.spaceReplacement = spaceReplacement;
    return this;
  }

   /**
   * Specifies the space replacement character.
   * @return spaceReplacement
  **/
  @ApiModelProperty(value = "Specifies the space replacement character.")
  public String getSpaceReplacement() {
    return spaceReplacement;
  }

  public void setSpaceReplacement(String spaceReplacement) {
    this.spaceReplacement = spaceReplacement;
  }

  public SettingsGlobalGlobalSettings systemGidThreshold(Integer systemGidThreshold) {
    this.systemGidThreshold = systemGidThreshold;
    return this;
  }

   /**
   * Specifies the minimum GID to attempt to look up in the idmap database.
   * minimum: 0
   * maximum: 4294967295
   * @return systemGidThreshold
  **/
  @ApiModelProperty(value = "Specifies the minimum GID to attempt to look up in the idmap database.")
  public Integer getSystemGidThreshold() {
    return systemGidThreshold;
  }

  public void setSystemGidThreshold(Integer systemGidThreshold) {
    this.systemGidThreshold = systemGidThreshold;
  }

  public SettingsGlobalGlobalSettings systemUidThreshold(Integer systemUidThreshold) {
    this.systemUidThreshold = systemUidThreshold;
    return this;
  }

   /**
   * Specifies the minimum UID to attempt to look up in the idmap database.
   * minimum: 0
   * maximum: 4294967295
   * @return systemUidThreshold
  **/
  @ApiModelProperty(value = "Specifies the minimum UID to attempt to look up in the idmap database.")
  public Integer getSystemUidThreshold() {
    return systemUidThreshold;
  }

  public void setSystemUidThreshold(Integer systemUidThreshold) {
    this.systemUidThreshold = systemUidThreshold;
  }

  public SettingsGlobalGlobalSettings uidRangeEnabled(Boolean uidRangeEnabled) {
    this.uidRangeEnabled = uidRangeEnabled;
    return this;
  }

   /**
   * If true, allocates UIDs from a fixed range.
   * @return uidRangeEnabled
  **/
  @ApiModelProperty(value = "If true, allocates UIDs from a fixed range.")
  public Boolean isUidRangeEnabled() {
    return uidRangeEnabled;
  }

  public void setUidRangeEnabled(Boolean uidRangeEnabled) {
    this.uidRangeEnabled = uidRangeEnabled;
  }

  public SettingsGlobalGlobalSettings uidRangeMax(Integer uidRangeMax) {
    this.uidRangeMax = uidRangeMax;
    return this;
  }

   /**
   * Specifies the ending number for a fixed range from which UIDs are allocated.
   * minimum: 0
   * maximum: 4294967295
   * @return uidRangeMax
  **/
  @ApiModelProperty(value = "Specifies the ending number for a fixed range from which UIDs are allocated.")
  public Integer getUidRangeMax() {
    return uidRangeMax;
  }

  public void setUidRangeMax(Integer uidRangeMax) {
    this.uidRangeMax = uidRangeMax;
  }

  public SettingsGlobalGlobalSettings uidRangeMin(Integer uidRangeMin) {
    this.uidRangeMin = uidRangeMin;
    return this;
  }

   /**
   * Specifies the starting number for a fixed range from which UIDs are allocated.
   * minimum: 0
   * maximum: 4294967295
   * @return uidRangeMin
  **/
  @ApiModelProperty(value = "Specifies the starting number for a fixed range from which UIDs are allocated.")
  public Integer getUidRangeMin() {
    return uidRangeMin;
  }

  public void setUidRangeMin(Integer uidRangeMin) {
    this.uidRangeMin = uidRangeMin;
  }

  public SettingsGlobalGlobalSettings uidRangeNext(Integer uidRangeNext) {
    this.uidRangeNext = uidRangeNext;
    return this;
  }

   /**
   * Specifies the next UID to allocate.
   * minimum: 0
   * maximum: 4294967295
   * @return uidRangeNext
  **/
  @ApiModelProperty(value = "Specifies the next UID to allocate.")
  public Integer getUidRangeNext() {
    return uidRangeNext;
  }

  public void setUidRangeNext(Integer uidRangeNext) {
    this.uidRangeNext = uidRangeNext;
  }

  public SettingsGlobalGlobalSettings unknownGid(Integer unknownGid) {
    this.unknownGid = unknownGid;
    return this;
  }

   /**
   * Specifies the GID for the unknown (anonymous) group.
   * minimum: 0
   * maximum: 4294967295
   * @return unknownGid
  **/
  @ApiModelProperty(value = "Specifies the GID for the unknown (anonymous) group.")
  public Integer getUnknownGid() {
    return unknownGid;
  }

  public void setUnknownGid(Integer unknownGid) {
    this.unknownGid = unknownGid;
  }

  public SettingsGlobalGlobalSettings unknownUid(Integer unknownUid) {
    this.unknownUid = unknownUid;
    return this;
  }

   /**
   * Specifies the UID for the unknown (anonymous) user.
   * minimum: 0
   * maximum: 4294967295
   * @return unknownUid
  **/
  @ApiModelProperty(value = "Specifies the UID for the unknown (anonymous) user.")
  public Integer getUnknownUid() {
    return unknownUid;
  }

  public void setUnknownUid(Integer unknownUid) {
    this.unknownUid = unknownUid;
  }

  public SettingsGlobalGlobalSettings userObjectCacheSize(Integer userObjectCacheSize) {
    this.userObjectCacheSize = userObjectCacheSize;
    return this;
  }

   /**
   * Specifies the maximum size (in bytes) of the security object cache in the authentication daemon.
   * minimum: 0
   * maximum: 4294967295
   * @return userObjectCacheSize
  **/
  @ApiModelProperty(value = "Specifies the maximum size (in bytes) of the security object cache in the authentication daemon.")
  public Integer getUserObjectCacheSize() {
    return userObjectCacheSize;
  }

  public void setUserObjectCacheSize(Integer userObjectCacheSize) {
    this.userObjectCacheSize = userObjectCacheSize;
  }

  public SettingsGlobalGlobalSettings workgroup(String workgroup) {
    this.workgroup = workgroup;
    return this;
  }

   /**
   * Specifies the NetBIOS workgroup or domain.
   * @return workgroup
  **/
  @ApiModelProperty(value = "Specifies the NetBIOS workgroup or domain.")
  public String getWorkgroup() {
    return workgroup;
  }

  public void setWorkgroup(String workgroup) {
    this.workgroup = workgroup;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsGlobalGlobalSettings settingsGlobalGlobalSettings = (SettingsGlobalGlobalSettings) o;
    return Objects.equals(this.allocRetries, settingsGlobalGlobalSettings.allocRetries) &&
        Objects.equals(this.gidRangeEnabled, settingsGlobalGlobalSettings.gidRangeEnabled) &&
        Objects.equals(this.gidRangeMax, settingsGlobalGlobalSettings.gidRangeMax) &&
        Objects.equals(this.gidRangeMin, settingsGlobalGlobalSettings.gidRangeMin) &&
        Objects.equals(this.gidRangeNext, settingsGlobalGlobalSettings.gidRangeNext) &&
        Objects.equals(this.groupUid, settingsGlobalGlobalSettings.groupUid) &&
        Objects.equals(this.loadProviders, settingsGlobalGlobalSettings.loadProviders) &&
        Objects.equals(this.minMappedRid, settingsGlobalGlobalSettings.minMappedRid) &&
        Objects.equals(this.nullGid, settingsGlobalGlobalSettings.nullGid) &&
        Objects.equals(this.nullUid, settingsGlobalGlobalSettings.nullUid) &&
        Objects.equals(this.onDiskIdentity, settingsGlobalGlobalSettings.onDiskIdentity) &&
        Objects.equals(this.rpcBlockTime, settingsGlobalGlobalSettings.rpcBlockTime) &&
        Objects.equals(this.rpcMaxRequests, settingsGlobalGlobalSettings.rpcMaxRequests) &&
        Objects.equals(this.rpcTimeout, settingsGlobalGlobalSettings.rpcTimeout) &&
        Objects.equals(this.sendNtlmv2, settingsGlobalGlobalSettings.sendNtlmv2) &&
        Objects.equals(this.spaceReplacement, settingsGlobalGlobalSettings.spaceReplacement) &&
        Objects.equals(this.systemGidThreshold, settingsGlobalGlobalSettings.systemGidThreshold) &&
        Objects.equals(this.systemUidThreshold, settingsGlobalGlobalSettings.systemUidThreshold) &&
        Objects.equals(this.uidRangeEnabled, settingsGlobalGlobalSettings.uidRangeEnabled) &&
        Objects.equals(this.uidRangeMax, settingsGlobalGlobalSettings.uidRangeMax) &&
        Objects.equals(this.uidRangeMin, settingsGlobalGlobalSettings.uidRangeMin) &&
        Objects.equals(this.uidRangeNext, settingsGlobalGlobalSettings.uidRangeNext) &&
        Objects.equals(this.unknownGid, settingsGlobalGlobalSettings.unknownGid) &&
        Objects.equals(this.unknownUid, settingsGlobalGlobalSettings.unknownUid) &&
        Objects.equals(this.userObjectCacheSize, settingsGlobalGlobalSettings.userObjectCacheSize) &&
        Objects.equals(this.workgroup, settingsGlobalGlobalSettings.workgroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocRetries, gidRangeEnabled, gidRangeMax, gidRangeMin, gidRangeNext, groupUid, loadProviders, minMappedRid, nullGid, nullUid, onDiskIdentity, rpcBlockTime, rpcMaxRequests, rpcTimeout, sendNtlmv2, spaceReplacement, systemGidThreshold, systemUidThreshold, uidRangeEnabled, uidRangeMax, uidRangeMin, uidRangeNext, unknownGid, unknownUid, userObjectCacheSize, workgroup);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsGlobalGlobalSettings {\n");
    
    sb.append("    allocRetries: ").append(toIndentedString(allocRetries)).append("\n");
    sb.append("    gidRangeEnabled: ").append(toIndentedString(gidRangeEnabled)).append("\n");
    sb.append("    gidRangeMax: ").append(toIndentedString(gidRangeMax)).append("\n");
    sb.append("    gidRangeMin: ").append(toIndentedString(gidRangeMin)).append("\n");
    sb.append("    gidRangeNext: ").append(toIndentedString(gidRangeNext)).append("\n");
    sb.append("    groupUid: ").append(toIndentedString(groupUid)).append("\n");
    sb.append("    loadProviders: ").append(toIndentedString(loadProviders)).append("\n");
    sb.append("    minMappedRid: ").append(toIndentedString(minMappedRid)).append("\n");
    sb.append("    nullGid: ").append(toIndentedString(nullGid)).append("\n");
    sb.append("    nullUid: ").append(toIndentedString(nullUid)).append("\n");
    sb.append("    onDiskIdentity: ").append(toIndentedString(onDiskIdentity)).append("\n");
    sb.append("    rpcBlockTime: ").append(toIndentedString(rpcBlockTime)).append("\n");
    sb.append("    rpcMaxRequests: ").append(toIndentedString(rpcMaxRequests)).append("\n");
    sb.append("    rpcTimeout: ").append(toIndentedString(rpcTimeout)).append("\n");
    sb.append("    sendNtlmv2: ").append(toIndentedString(sendNtlmv2)).append("\n");
    sb.append("    spaceReplacement: ").append(toIndentedString(spaceReplacement)).append("\n");
    sb.append("    systemGidThreshold: ").append(toIndentedString(systemGidThreshold)).append("\n");
    sb.append("    systemUidThreshold: ").append(toIndentedString(systemUidThreshold)).append("\n");
    sb.append("    uidRangeEnabled: ").append(toIndentedString(uidRangeEnabled)).append("\n");
    sb.append("    uidRangeMax: ").append(toIndentedString(uidRangeMax)).append("\n");
    sb.append("    uidRangeMin: ").append(toIndentedString(uidRangeMin)).append("\n");
    sb.append("    uidRangeNext: ").append(toIndentedString(uidRangeNext)).append("\n");
    sb.append("    unknownGid: ").append(toIndentedString(unknownGid)).append("\n");
    sb.append("    unknownUid: ").append(toIndentedString(unknownUid)).append("\n");
    sb.append("    userObjectCacheSize: ").append(toIndentedString(userObjectCacheSize)).append("\n");
    sb.append("    workgroup: ").append(toIndentedString(workgroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

