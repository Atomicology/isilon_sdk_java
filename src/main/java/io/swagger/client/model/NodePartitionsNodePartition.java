/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.NodePartitionsNodePartitionStatfs;
import java.io.IOException;

/**
 * NodePartitionsNodePartition
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class NodePartitionsNodePartition {
  @SerializedName("block_size")
  private Integer blockSize = null;

  @SerializedName("capacity")
  private Integer capacity = null;

  @SerializedName("component_devices")
  private String componentDevices = null;

  @SerializedName("mount_point")
  private String mountPoint = null;

  @SerializedName("percent_used")
  private String percentUsed = null;

  @SerializedName("statfs")
  private NodePartitionsNodePartitionStatfs statfs = null;

  @SerializedName("used")
  private Integer used = null;

  public NodePartitionsNodePartition blockSize(Integer blockSize) {
    this.blockSize = blockSize;
    return this;
  }

   /**
   * The block size used for the reported partition information.
   * @return blockSize
  **/
  @ApiModelProperty(value = "The block size used for the reported partition information.")
  public Integer getBlockSize() {
    return blockSize;
  }

  public void setBlockSize(Integer blockSize) {
    this.blockSize = blockSize;
  }

  public NodePartitionsNodePartition capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

   /**
   * Total blocks on this file system partition.
   * @return capacity
  **/
  @ApiModelProperty(value = "Total blocks on this file system partition.")
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }

  public NodePartitionsNodePartition componentDevices(String componentDevices) {
    this.componentDevices = componentDevices;
    return this;
  }

   /**
   * Comma separated list of devices used for this file system partition.
   * @return componentDevices
  **/
  @ApiModelProperty(value = "Comma separated list of devices used for this file system partition.")
  public String getComponentDevices() {
    return componentDevices;
  }

  public void setComponentDevices(String componentDevices) {
    this.componentDevices = componentDevices;
  }

  public NodePartitionsNodePartition mountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
    return this;
  }

   /**
   * Directory on which this partition is mounted.
   * @return mountPoint
  **/
  @ApiModelProperty(value = "Directory on which this partition is mounted.")
  public String getMountPoint() {
    return mountPoint;
  }

  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }

  public NodePartitionsNodePartition percentUsed(String percentUsed) {
    this.percentUsed = percentUsed;
    return this;
  }

   /**
   * Used blocks on this file system partition, expressed as a percentage.
   * @return percentUsed
  **/
  @ApiModelProperty(value = "Used blocks on this file system partition, expressed as a percentage.")
  public String getPercentUsed() {
    return percentUsed;
  }

  public void setPercentUsed(String percentUsed) {
    this.percentUsed = percentUsed;
  }

  public NodePartitionsNodePartition statfs(NodePartitionsNodePartitionStatfs statfs) {
    this.statfs = statfs;
    return this;
  }

   /**
   * System partition details as provided by statfs(2).
   * @return statfs
  **/
  @ApiModelProperty(value = "System partition details as provided by statfs(2).")
  public NodePartitionsNodePartitionStatfs getStatfs() {
    return statfs;
  }

  public void setStatfs(NodePartitionsNodePartitionStatfs statfs) {
    this.statfs = statfs;
  }

  public NodePartitionsNodePartition used(Integer used) {
    this.used = used;
    return this;
  }

   /**
   * Used blocks on this file system partition.
   * @return used
  **/
  @ApiModelProperty(value = "Used blocks on this file system partition.")
  public Integer getUsed() {
    return used;
  }

  public void setUsed(Integer used) {
    this.used = used;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodePartitionsNodePartition nodePartitionsNodePartition = (NodePartitionsNodePartition) o;
    return Objects.equals(this.blockSize, nodePartitionsNodePartition.blockSize) &&
        Objects.equals(this.capacity, nodePartitionsNodePartition.capacity) &&
        Objects.equals(this.componentDevices, nodePartitionsNodePartition.componentDevices) &&
        Objects.equals(this.mountPoint, nodePartitionsNodePartition.mountPoint) &&
        Objects.equals(this.percentUsed, nodePartitionsNodePartition.percentUsed) &&
        Objects.equals(this.statfs, nodePartitionsNodePartition.statfs) &&
        Objects.equals(this.used, nodePartitionsNodePartition.used);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockSize, capacity, componentDevices, mountPoint, percentUsed, statfs, used);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodePartitionsNodePartition {\n");
    
    sb.append("    blockSize: ").append(toIndentedString(blockSize)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    componentDevices: ").append(toIndentedString(componentDevices)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    percentUsed: ").append(toIndentedString(percentUsed)).append("\n");
    sb.append("    statfs: ").append(toIndentedString(statfs)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

