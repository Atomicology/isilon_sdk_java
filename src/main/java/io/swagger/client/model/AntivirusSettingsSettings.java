/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * AntivirusSettingsSettings
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class AntivirusSettingsSettings {
  @SerializedName("fail_open")
  private Boolean failOpen = null;

  @SerializedName("glob_filters")
  private List<String> globFilters = null;

  @SerializedName("glob_filters_enabled")
  private Boolean globFiltersEnabled = null;

  @SerializedName("glob_filters_include")
  private Boolean globFiltersInclude = null;

  @SerializedName("path_prefixes")
  private List<String> pathPrefixes = null;

  @SerializedName("quarantine")
  private Boolean quarantine = null;

  @SerializedName("repair")
  private Boolean repair = null;

  @SerializedName("report_expiry")
  private Integer reportExpiry = null;

  @SerializedName("scan_on_close")
  private Boolean scanOnClose = null;

  @SerializedName("scan_on_open")
  private Boolean scanOnOpen = null;

  @SerializedName("scan_size_maximum")
  private Integer scanSizeMaximum = null;

  @SerializedName("service")
  private Boolean service = null;

  @SerializedName("truncate")
  private Boolean truncate = null;

  public AntivirusSettingsSettings failOpen(Boolean failOpen) {
    this.failOpen = failOpen;
    return this;
  }

   /**
   * Allow access when scanning fails.
   * @return failOpen
  **/
  @ApiModelProperty(value = "Allow access when scanning fails.")
  public Boolean isFailOpen() {
    return failOpen;
  }

  public void setFailOpen(Boolean failOpen) {
    this.failOpen = failOpen;
  }

  public AntivirusSettingsSettings globFilters(List<String> globFilters) {
    this.globFilters = globFilters;
    return this;
  }

  public AntivirusSettingsSettings addGlobFiltersItem(String globFiltersItem) {
    if (this.globFilters == null) {
      this.globFilters = new ArrayList<String>();
    }
    this.globFilters.add(globFiltersItem);
    return this;
  }

   /**
   * Glob patterns for leaf filenames.
   * @return globFilters
  **/
  @ApiModelProperty(value = "Glob patterns for leaf filenames.")
  public List<String> getGlobFilters() {
    return globFilters;
  }

  public void setGlobFilters(List<String> globFilters) {
    this.globFilters = globFilters;
  }

  public AntivirusSettingsSettings globFiltersEnabled(Boolean globFiltersEnabled) {
    this.globFiltersEnabled = globFiltersEnabled;
    return this;
  }

   /**
   * Enable glob filters.
   * @return globFiltersEnabled
  **/
  @ApiModelProperty(value = "Enable glob filters.")
  public Boolean isGlobFiltersEnabled() {
    return globFiltersEnabled;
  }

  public void setGlobFiltersEnabled(Boolean globFiltersEnabled) {
    this.globFiltersEnabled = globFiltersEnabled;
  }

  public AntivirusSettingsSettings globFiltersInclude(Boolean globFiltersInclude) {
    this.globFiltersInclude = globFiltersInclude;
    return this;
  }

   /**
   * If true, only scan files matching a glob filter. If false, only scan files that don&#39;t match a glob filter.
   * @return globFiltersInclude
  **/
  @ApiModelProperty(value = "If true, only scan files matching a glob filter. If false, only scan files that don't match a glob filter.")
  public Boolean isGlobFiltersInclude() {
    return globFiltersInclude;
  }

  public void setGlobFiltersInclude(Boolean globFiltersInclude) {
    this.globFiltersInclude = globFiltersInclude;
  }

  public AntivirusSettingsSettings pathPrefixes(List<String> pathPrefixes) {
    this.pathPrefixes = pathPrefixes;
    return this;
  }

  public AntivirusSettingsSettings addPathPrefixesItem(String pathPrefixesItem) {
    if (this.pathPrefixes == null) {
      this.pathPrefixes = new ArrayList<String>();
    }
    this.pathPrefixes.add(pathPrefixesItem);
    return this;
  }

   /**
   * Paths to include in realtime scans.
   * @return pathPrefixes
  **/
  @ApiModelProperty(value = "Paths to include in realtime scans.")
  public List<String> getPathPrefixes() {
    return pathPrefixes;
  }

  public void setPathPrefixes(List<String> pathPrefixes) {
    this.pathPrefixes = pathPrefixes;
  }

  public AntivirusSettingsSettings quarantine(Boolean quarantine) {
    this.quarantine = quarantine;
    return this;
  }

   /**
   * Try to quarantine files when threats are found.
   * @return quarantine
  **/
  @ApiModelProperty(value = "Try to quarantine files when threats are found.")
  public Boolean isQuarantine() {
    return quarantine;
  }

  public void setQuarantine(Boolean quarantine) {
    this.quarantine = quarantine;
  }

  public AntivirusSettingsSettings repair(Boolean repair) {
    this.repair = repair;
    return this;
  }

   /**
   * Try to repair files when threats are found.
   * @return repair
  **/
  @ApiModelProperty(value = "Try to repair files when threats are found.")
  public Boolean isRepair() {
    return repair;
  }

  public void setRepair(Boolean repair) {
    this.repair = repair;
  }

  public AntivirusSettingsSettings reportExpiry(Integer reportExpiry) {
    this.reportExpiry = reportExpiry;
    return this;
  }

   /**
   * Amount of time in seconds until old reporting data is purged.
   * minimum: 0
   * maximum: 4294967295
   * @return reportExpiry
  **/
  @ApiModelProperty(value = "Amount of time in seconds until old reporting data is purged.")
  public Integer getReportExpiry() {
    return reportExpiry;
  }

  public void setReportExpiry(Integer reportExpiry) {
    this.reportExpiry = reportExpiry;
  }

  public AntivirusSettingsSettings scanOnClose(Boolean scanOnClose) {
    this.scanOnClose = scanOnClose;
    return this;
  }

   /**
   * Scan files when apps close them.
   * @return scanOnClose
  **/
  @ApiModelProperty(value = "Scan files when apps close them.")
  public Boolean isScanOnClose() {
    return scanOnClose;
  }

  public void setScanOnClose(Boolean scanOnClose) {
    this.scanOnClose = scanOnClose;
  }

  public AntivirusSettingsSettings scanOnOpen(Boolean scanOnOpen) {
    this.scanOnOpen = scanOnOpen;
    return this;
  }

   /**
   * Scan files on access.
   * @return scanOnOpen
  **/
  @ApiModelProperty(value = "Scan files on access.")
  public Boolean isScanOnOpen() {
    return scanOnOpen;
  }

  public void setScanOnOpen(Boolean scanOnOpen) {
    this.scanOnOpen = scanOnOpen;
  }

  public AntivirusSettingsSettings scanSizeMaximum(Integer scanSizeMaximum) {
    this.scanSizeMaximum = scanSizeMaximum;
    return this;
  }

   /**
   * Skip scanning files larger than this.
   * minimum: 0
   * maximum: 4294967295
   * @return scanSizeMaximum
  **/
  @ApiModelProperty(value = "Skip scanning files larger than this.")
  public Integer getScanSizeMaximum() {
    return scanSizeMaximum;
  }

  public void setScanSizeMaximum(Integer scanSizeMaximum) {
    this.scanSizeMaximum = scanSizeMaximum;
  }

  public AntivirusSettingsSettings service(Boolean service) {
    this.service = service;
    return this;
  }

   /**
   * Whether the antivirus service is enabled.
   * @return service
  **/
  @ApiModelProperty(value = "Whether the antivirus service is enabled.")
  public Boolean isService() {
    return service;
  }

  public void setService(Boolean service) {
    this.service = service;
  }

  public AntivirusSettingsSettings truncate(Boolean truncate) {
    this.truncate = truncate;
    return this;
  }

   /**
   * Try to truncate files when threats are found.
   * @return truncate
  **/
  @ApiModelProperty(value = "Try to truncate files when threats are found.")
  public Boolean isTruncate() {
    return truncate;
  }

  public void setTruncate(Boolean truncate) {
    this.truncate = truncate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AntivirusSettingsSettings antivirusSettingsSettings = (AntivirusSettingsSettings) o;
    return Objects.equals(this.failOpen, antivirusSettingsSettings.failOpen) &&
        Objects.equals(this.globFilters, antivirusSettingsSettings.globFilters) &&
        Objects.equals(this.globFiltersEnabled, antivirusSettingsSettings.globFiltersEnabled) &&
        Objects.equals(this.globFiltersInclude, antivirusSettingsSettings.globFiltersInclude) &&
        Objects.equals(this.pathPrefixes, antivirusSettingsSettings.pathPrefixes) &&
        Objects.equals(this.quarantine, antivirusSettingsSettings.quarantine) &&
        Objects.equals(this.repair, antivirusSettingsSettings.repair) &&
        Objects.equals(this.reportExpiry, antivirusSettingsSettings.reportExpiry) &&
        Objects.equals(this.scanOnClose, antivirusSettingsSettings.scanOnClose) &&
        Objects.equals(this.scanOnOpen, antivirusSettingsSettings.scanOnOpen) &&
        Objects.equals(this.scanSizeMaximum, antivirusSettingsSettings.scanSizeMaximum) &&
        Objects.equals(this.service, antivirusSettingsSettings.service) &&
        Objects.equals(this.truncate, antivirusSettingsSettings.truncate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failOpen, globFilters, globFiltersEnabled, globFiltersInclude, pathPrefixes, quarantine, repair, reportExpiry, scanOnClose, scanOnOpen, scanSizeMaximum, service, truncate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AntivirusSettingsSettings {\n");
    
    sb.append("    failOpen: ").append(toIndentedString(failOpen)).append("\n");
    sb.append("    globFilters: ").append(toIndentedString(globFilters)).append("\n");
    sb.append("    globFiltersEnabled: ").append(toIndentedString(globFiltersEnabled)).append("\n");
    sb.append("    globFiltersInclude: ").append(toIndentedString(globFiltersInclude)).append("\n");
    sb.append("    pathPrefixes: ").append(toIndentedString(pathPrefixes)).append("\n");
    sb.append("    quarantine: ").append(toIndentedString(quarantine)).append("\n");
    sb.append("    repair: ").append(toIndentedString(repair)).append("\n");
    sb.append("    reportExpiry: ").append(toIndentedString(reportExpiry)).append("\n");
    sb.append("    scanOnClose: ").append(toIndentedString(scanOnClose)).append("\n");
    sb.append("    scanOnOpen: ").append(toIndentedString(scanOnOpen)).append("\n");
    sb.append("    scanSizeMaximum: ").append(toIndentedString(scanSizeMaximum)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    truncate: ").append(toIndentedString(truncate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

