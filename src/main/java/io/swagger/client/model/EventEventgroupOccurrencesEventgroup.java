/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Empty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * EventEventgroupOccurrencesEventgroup
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class EventEventgroupOccurrencesEventgroup {
  @SerializedName("causes")
  private List<List<String>> causes = null;

  @SerializedName("channels")
  private List<String> channels = null;

  @SerializedName("event_count")
  private Integer eventCount = null;

  @SerializedName("eventgroup_instance")
  private String eventgroupInstance = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("ignore")
  private Boolean ignore = null;

  @SerializedName("ignore_time")
  private Integer ignoreTime = null;

  @SerializedName("last_event")
  private Integer lastEvent = null;

  @SerializedName("resolve_time")
  private Integer resolveTime = null;

  @SerializedName("resolved")
  private Boolean resolved = null;

  @SerializedName("resolver")
  private String resolver = null;

  @SerializedName("sequence")
  private Integer sequence = null;

  @SerializedName("severity")
  private String severity = null;

  @SerializedName("specifier")
  private Empty specifier = null;

  @SerializedName("time_noticed")
  private Integer timeNoticed = null;

  public EventEventgroupOccurrencesEventgroup causes(List<List<String>> causes) {
    this.causes = causes;
    return this;
  }

  public EventEventgroupOccurrencesEventgroup addCausesItem(List<String> causesItem) {
    if (this.causes == null) {
      this.causes = new ArrayList<List<String>>();
    }
    this.causes.add(causesItem);
    return this;
  }

   /**
   * List of eventgroup IDs that may be causes of this occurrence.
   * @return causes
  **/
  @ApiModelProperty(value = "List of eventgroup IDs that may be causes of this occurrence.")
  public List<List<String>> getCauses() {
    return causes;
  }

  public void setCauses(List<List<String>> causes) {
    this.causes = causes;
  }

  public EventEventgroupOccurrencesEventgroup channels(List<String> channels) {
    this.channels = channels;
    return this;
  }

  public EventEventgroupOccurrencesEventgroup addChannelsItem(String channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<String>();
    }
    this.channels.add(channelsItem);
    return this;
  }

   /**
   * List of channels to which alerts are configured for this eventgroup
   * @return channels
  **/
  @ApiModelProperty(value = "List of channels to which alerts are configured for this eventgroup")
  public List<String> getChannels() {
    return channels;
  }

  public void setChannels(List<String> channels) {
    this.channels = channels;
  }

  public EventEventgroupOccurrencesEventgroup eventCount(Integer eventCount) {
    this.eventCount = eventCount;
    return this;
  }

   /**
   * Number of events linked to this eventgroup.
   * @return eventCount
  **/
  @ApiModelProperty(value = "Number of events linked to this eventgroup.")
  public Integer getEventCount() {
    return eventCount;
  }

  public void setEventCount(Integer eventCount) {
    this.eventCount = eventCount;
  }

  public EventEventgroupOccurrencesEventgroup eventgroupInstance(String eventgroupInstance) {
    this.eventgroupInstance = eventgroupInstance;
    return this;
  }

   /**
   * Unique identifier of eventgroup instance.
   * @return eventgroupInstance
  **/
  @ApiModelProperty(value = "Unique identifier of eventgroup instance.")
  public String getEventgroupInstance() {
    return eventgroupInstance;
  }

  public void setEventgroupInstance(String eventgroupInstance) {
    this.eventgroupInstance = eventgroupInstance;
  }

  public EventEventgroupOccurrencesEventgroup id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Same as eventgroup_instance.
   * @return id
  **/
  @ApiModelProperty(value = "Same as eventgroup_instance.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public EventEventgroupOccurrencesEventgroup ignore(Boolean ignore) {
    this.ignore = ignore;
    return this;
  }

   /**
   * True if eventgroup is marked as &#39;ignore&#39;.
   * @return ignore
  **/
  @ApiModelProperty(value = "True if eventgroup is marked as 'ignore'.")
  public Boolean isIgnore() {
    return ignore;
  }

  public void setIgnore(Boolean ignore) {
    this.ignore = ignore;
  }

  public EventEventgroupOccurrencesEventgroup ignoreTime(Integer ignoreTime) {
    this.ignoreTime = ignoreTime;
    return this;
  }

   /**
   * Time eventgroup was marked as &#39;ignore&#39;.
   * @return ignoreTime
  **/
  @ApiModelProperty(value = "Time eventgroup was marked as 'ignore'.")
  public Integer getIgnoreTime() {
    return ignoreTime;
  }

  public void setIgnoreTime(Integer ignoreTime) {
    this.ignoreTime = ignoreTime;
  }

  public EventEventgroupOccurrencesEventgroup lastEvent(Integer lastEvent) {
    this.lastEvent = lastEvent;
    return this;
  }

   /**
   * Time the most recent event was added to this eventgroup.
   * @return lastEvent
  **/
  @ApiModelProperty(value = "Time the most recent event was added to this eventgroup.")
  public Integer getLastEvent() {
    return lastEvent;
  }

  public void setLastEvent(Integer lastEvent) {
    this.lastEvent = lastEvent;
  }

  public EventEventgroupOccurrencesEventgroup resolveTime(Integer resolveTime) {
    this.resolveTime = resolveTime;
    return this;
  }

   /**
   * When the eventgroup became resolved.
   * @return resolveTime
  **/
  @ApiModelProperty(value = "When the eventgroup became resolved.")
  public Integer getResolveTime() {
    return resolveTime;
  }

  public void setResolveTime(Integer resolveTime) {
    this.resolveTime = resolveTime;
  }

  public EventEventgroupOccurrencesEventgroup resolved(Boolean resolved) {
    this.resolved = resolved;
    return this;
  }

   /**
   * True if eventgroup is resolved.
   * @return resolved
  **/
  @ApiModelProperty(value = "True if eventgroup is resolved.")
  public Boolean isResolved() {
    return resolved;
  }

  public void setResolved(Boolean resolved) {
    this.resolved = resolved;
  }

  public EventEventgroupOccurrencesEventgroup resolver(String resolver) {
    this.resolver = resolver;
    return this;
  }

   /**
   * &#39;USER&#39; if the eventgroup was marked resolved via PAPI &lt;event_instance&gt; if eventgroup was marked resolved as a result of an event.
   * @return resolver
  **/
  @ApiModelProperty(value = "'USER' if the eventgroup was marked resolved via PAPI <event_instance> if eventgroup was marked resolved as a result of an event.")
  public String getResolver() {
    return resolver;
  }

  public void setResolver(String resolver) {
    this.resolver = resolver;
  }

  public EventEventgroupOccurrencesEventgroup sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * XXX description needed.
   * @return sequence
  **/
  @ApiModelProperty(value = "XXX description needed.")
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }

  public EventEventgroupOccurrencesEventgroup severity(String severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Event Group severity.
   * @return severity
  **/
  @ApiModelProperty(value = "Event Group severity.")
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }

  public EventEventgroupOccurrencesEventgroup specifier(Empty specifier) {
    this.specifier = specifier;
    return this;
  }

   /**
   * A collection of parameters defined per eventgroup_id.
   * @return specifier
  **/
  @ApiModelProperty(value = "A collection of parameters defined per eventgroup_id.")
  public Empty getSpecifier() {
    return specifier;
  }

  public void setSpecifier(Empty specifier) {
    this.specifier = specifier;
  }

  public EventEventgroupOccurrencesEventgroup timeNoticed(Integer timeNoticed) {
    this.timeNoticed = timeNoticed;
    return this;
  }

   /**
   * Time of first event linked to this eventgroup.
   * @return timeNoticed
  **/
  @ApiModelProperty(value = "Time of first event linked to this eventgroup.")
  public Integer getTimeNoticed() {
    return timeNoticed;
  }

  public void setTimeNoticed(Integer timeNoticed) {
    this.timeNoticed = timeNoticed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventEventgroupOccurrencesEventgroup eventEventgroupOccurrencesEventgroup = (EventEventgroupOccurrencesEventgroup) o;
    return Objects.equals(this.causes, eventEventgroupOccurrencesEventgroup.causes) &&
        Objects.equals(this.channels, eventEventgroupOccurrencesEventgroup.channels) &&
        Objects.equals(this.eventCount, eventEventgroupOccurrencesEventgroup.eventCount) &&
        Objects.equals(this.eventgroupInstance, eventEventgroupOccurrencesEventgroup.eventgroupInstance) &&
        Objects.equals(this.id, eventEventgroupOccurrencesEventgroup.id) &&
        Objects.equals(this.ignore, eventEventgroupOccurrencesEventgroup.ignore) &&
        Objects.equals(this.ignoreTime, eventEventgroupOccurrencesEventgroup.ignoreTime) &&
        Objects.equals(this.lastEvent, eventEventgroupOccurrencesEventgroup.lastEvent) &&
        Objects.equals(this.resolveTime, eventEventgroupOccurrencesEventgroup.resolveTime) &&
        Objects.equals(this.resolved, eventEventgroupOccurrencesEventgroup.resolved) &&
        Objects.equals(this.resolver, eventEventgroupOccurrencesEventgroup.resolver) &&
        Objects.equals(this.sequence, eventEventgroupOccurrencesEventgroup.sequence) &&
        Objects.equals(this.severity, eventEventgroupOccurrencesEventgroup.severity) &&
        Objects.equals(this.specifier, eventEventgroupOccurrencesEventgroup.specifier) &&
        Objects.equals(this.timeNoticed, eventEventgroupOccurrencesEventgroup.timeNoticed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(causes, channels, eventCount, eventgroupInstance, id, ignore, ignoreTime, lastEvent, resolveTime, resolved, resolver, sequence, severity, specifier, timeNoticed);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventEventgroupOccurrencesEventgroup {\n");
    
    sb.append("    causes: ").append(toIndentedString(causes)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    eventCount: ").append(toIndentedString(eventCount)).append("\n");
    sb.append("    eventgroupInstance: ").append(toIndentedString(eventgroupInstance)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignore: ").append(toIndentedString(ignore)).append("\n");
    sb.append("    ignoreTime: ").append(toIndentedString(ignoreTime)).append("\n");
    sb.append("    lastEvent: ").append(toIndentedString(lastEvent)).append("\n");
    sb.append("    resolveTime: ").append(toIndentedString(resolveTime)).append("\n");
    sb.append("    resolved: ").append(toIndentedString(resolved)).append("\n");
    sb.append("    resolver: ").append(toIndentedString(resolver)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    specifier: ").append(toIndentedString(specifier)).append("\n");
    sb.append("    timeNoticed: ").append(toIndentedString(timeNoticed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

