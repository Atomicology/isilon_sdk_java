/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.CloudJobFiles;
import io.swagger.client.model.CloudJobJobEngineJob;
import java.io.IOException;

/**
 * CloudJobExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T09:38:03.973-07:00")
public class CloudJobExtended {
  @SerializedName("completion_time")
  private Integer completionTime = null;

  @SerializedName("create_time")
  private Integer createTime = null;

  @SerializedName("description")
  private String description = null;

  /**
   * The effective state of the job (e.g,. the combination of operation_state and job_state)
   */
  @JsonAdapter(EffectiveStateEnum.Adapter.class)
  public enum EffectiveStateEnum {
    RUNNING("running"),
    
    PAUSED("paused"),
    
    CANCELED("canceled"),
    
    COMPLETED("completed"),
    
    FAILED("failed");

    private String value;

    EffectiveStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveStateEnum fromValue(String text) {
      for (EffectiveStateEnum b : EffectiveStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EffectiveStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EffectiveStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("effective_state")
  private EffectiveStateEnum effectiveState = null;

  @SerializedName("files")
  private CloudJobFiles files = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("job_engine_job")
  private CloudJobJobEngineJob jobEngineJob = null;

  /**
   * The current state of the job
   */
  @JsonAdapter(JobStateEnum.Adapter.class)
  public enum JobStateEnum {
    RUNNING("running"),
    
    PAUSED("paused"),
    
    CANCELED("canceled"),
    
    COMPLETED("completed"),
    
    FAILED("failed");

    private String value;

    JobStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobStateEnum fromValue(String text) {
      for (JobStateEnum b : JobStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<JobStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return JobStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("job_state")
  private JobStateEnum jobState = null;

  /**
   * The current state of the operation associated with the job
   */
  @JsonAdapter(OperationStateEnum.Adapter.class)
  public enum OperationStateEnum {
    RUNNING("running"),
    
    PAUSED("paused");

    private String value;

    OperationStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationStateEnum fromValue(String text) {
      for (OperationStateEnum b : OperationStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperationStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperationStateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operation_state")
  private OperationStateEnum operationState = null;

  @SerializedName("state_change_time")
  private Integer stateChangeTime = null;

  /**
   * The type of cloud action to be performed by this job.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ARCHIVE("archive"),
    
    RECALL("recall"),
    
    LOCAL_GARBAGE_COLLECTION("local-garbage-collection"),
    
    CLOUD_GARBAGE_COLLECTION("cloud-garbage-collection"),
    
    CACHE_WRITEBACK("cache-writeback"),
    
    CACHE_ON_ACCESS("cache-on-access"),
    
    CACHE_INVALIDATION("cache-invalidation"),
    
    RESTORE_COI("restore-coi");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  public CloudJobExtended completionTime(Integer completionTime) {
    this.completionTime = completionTime;
    return this;
  }

   /**
   * The time at which the job was completed (if applicable)
   * @return completionTime
  **/
  @ApiModelProperty(value = "The time at which the job was completed (if applicable)")
  public Integer getCompletionTime() {
    return completionTime;
  }

  public void setCompletionTime(Integer completionTime) {
    this.completionTime = completionTime;
  }

  public CloudJobExtended createTime(Integer createTime) {
    this.createTime = createTime;
    return this;
  }

   /**
   * The time at which the job was created
   * @return createTime
  **/
  @ApiModelProperty(value = "The time at which the job was created")
  public Integer getCreateTime() {
    return createTime;
  }

  public void setCreateTime(Integer createTime) {
    this.createTime = createTime;
  }

  public CloudJobExtended description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A brief description of the job contents
   * @return description
  **/
  @ApiModelProperty(value = "A brief description of the job contents")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CloudJobExtended effectiveState(EffectiveStateEnum effectiveState) {
    this.effectiveState = effectiveState;
    return this;
  }

   /**
   * The effective state of the job (e.g,. the combination of operation_state and job_state)
   * @return effectiveState
  **/
  @ApiModelProperty(value = "The effective state of the job (e.g,. the combination of operation_state and job_state)")
  public EffectiveStateEnum getEffectiveState() {
    return effectiveState;
  }

  public void setEffectiveState(EffectiveStateEnum effectiveState) {
    this.effectiveState = effectiveState;
  }

  public CloudJobExtended files(CloudJobFiles files) {
    this.files = files;
    return this;
  }

   /**
   * The files and filters addressed by this job
   * @return files
  **/
  @ApiModelProperty(value = "The files and filters addressed by this job")
  public CloudJobFiles getFiles() {
    return files;
  }

  public void setFiles(CloudJobFiles files) {
    this.files = files;
  }

  public CloudJobExtended id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The job&#39;s ID
   * @return id
  **/
  @ApiModelProperty(value = "The job's ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public CloudJobExtended jobEngineJob(CloudJobJobEngineJob jobEngineJob) {
    this.jobEngineJob = jobEngineJob;
    return this;
  }

   /**
   * Information about the related job engine job if there is one
   * @return jobEngineJob
  **/
  @ApiModelProperty(value = "Information about the related job engine job if there is one")
  public CloudJobJobEngineJob getJobEngineJob() {
    return jobEngineJob;
  }

  public void setJobEngineJob(CloudJobJobEngineJob jobEngineJob) {
    this.jobEngineJob = jobEngineJob;
  }

  public CloudJobExtended jobState(JobStateEnum jobState) {
    this.jobState = jobState;
    return this;
  }

   /**
   * The current state of the job
   * @return jobState
  **/
  @ApiModelProperty(value = "The current state of the job")
  public JobStateEnum getJobState() {
    return jobState;
  }

  public void setJobState(JobStateEnum jobState) {
    this.jobState = jobState;
  }

  public CloudJobExtended operationState(OperationStateEnum operationState) {
    this.operationState = operationState;
    return this;
  }

   /**
   * The current state of the operation associated with the job
   * @return operationState
  **/
  @ApiModelProperty(value = "The current state of the operation associated with the job")
  public OperationStateEnum getOperationState() {
    return operationState;
  }

  public void setOperationState(OperationStateEnum operationState) {
    this.operationState = operationState;
  }

  public CloudJobExtended stateChangeTime(Integer stateChangeTime) {
    this.stateChangeTime = stateChangeTime;
    return this;
  }

   /**
   * The last time at which the job state changed
   * @return stateChangeTime
  **/
  @ApiModelProperty(value = "The last time at which the job state changed")
  public Integer getStateChangeTime() {
    return stateChangeTime;
  }

  public void setStateChangeTime(Integer stateChangeTime) {
    this.stateChangeTime = stateChangeTime;
  }

  public CloudJobExtended type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of cloud action to be performed by this job.
   * @return type
  **/
  @ApiModelProperty(value = "The type of cloud action to be performed by this job.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudJobExtended cloudJobExtended = (CloudJobExtended) o;
    return Objects.equals(this.completionTime, cloudJobExtended.completionTime) &&
        Objects.equals(this.createTime, cloudJobExtended.createTime) &&
        Objects.equals(this.description, cloudJobExtended.description) &&
        Objects.equals(this.effectiveState, cloudJobExtended.effectiveState) &&
        Objects.equals(this.files, cloudJobExtended.files) &&
        Objects.equals(this.id, cloudJobExtended.id) &&
        Objects.equals(this.jobEngineJob, cloudJobExtended.jobEngineJob) &&
        Objects.equals(this.jobState, cloudJobExtended.jobState) &&
        Objects.equals(this.operationState, cloudJobExtended.operationState) &&
        Objects.equals(this.stateChangeTime, cloudJobExtended.stateChangeTime) &&
        Objects.equals(this.type, cloudJobExtended.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTime, createTime, description, effectiveState, files, id, jobEngineJob, jobState, operationState, stateChangeTime, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudJobExtended {\n");
    
    sb.append("    completionTime: ").append(toIndentedString(completionTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    effectiveState: ").append(toIndentedString(effectiveState)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobEngineJob: ").append(toIndentedString(jobEngineJob)).append("\n");
    sb.append("    jobState: ").append(toIndentedString(jobState)).append("\n");
    sb.append("    operationState: ").append(toIndentedString(operationState)).append("\n");
    sb.append("    stateChangeTime: ").append(toIndentedString(stateChangeTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

