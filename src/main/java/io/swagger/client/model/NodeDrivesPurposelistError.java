/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NodeDrivesPurposelistError
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class NodeDrivesPurposelistError {
  @SerializedName("code")
  private String code = null;

  @SerializedName("lnn")
  private Integer lnn = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("status")
  private Integer status = null;

  public NodeDrivesPurposelistError code(String code) {
    this.code = code;
    return this;
  }

   /**
   * The general meaning of the status code.
   * @return code
  **/
  @ApiModelProperty(value = "The general meaning of the status code.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public NodeDrivesPurposelistError lnn(Integer lnn) {
    this.lnn = lnn;
    return this;
  }

   /**
   * Logical node number of the node reporting this error.
   * minimum: 0
   * maximum: 4294967295
   * @return lnn
  **/
  @ApiModelProperty(value = "Logical node number of the node reporting this error.")
  public Integer getLnn() {
    return lnn;
  }

  public void setLnn(Integer lnn) {
    this.lnn = lnn;
  }

  public NodeDrivesPurposelistError message(String message) {
    this.message = message;
    return this;
  }

   /**
   * More detailed description of the error.
   * @return message
  **/
  @ApiModelProperty(value = "More detailed description of the error.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public NodeDrivesPurposelistError status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * HTTP Status code returned by this node.
   * minimum: 0
   * maximum: 4294967295
   * @return status
  **/
  @ApiModelProperty(value = "HTTP Status code returned by this node.")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDrivesPurposelistError nodeDrivesPurposelistError = (NodeDrivesPurposelistError) o;
    return Objects.equals(this.code, nodeDrivesPurposelistError.code) &&
        Objects.equals(this.lnn, nodeDrivesPurposelistError.lnn) &&
        Objects.equals(this.message, nodeDrivesPurposelistError.message) &&
        Objects.equals(this.status, nodeDrivesPurposelistError.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, lnn, message, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDrivesPurposelistError {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    lnn: ").append(toIndentedString(lnn)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

