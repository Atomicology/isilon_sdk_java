/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * JobJobSmartpoolstreeParams
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class JobJobSmartpoolstreeParams {
  @SerializedName("directory_only")
  private Boolean directoryOnly = null;

  @SerializedName("nop")
  private Boolean nop = null;

  @SerializedName("policy_only")
  private Boolean policyOnly = null;

  @SerializedName("recurse")
  private Boolean recurse = null;

  public JobJobSmartpoolstreeParams directoryOnly(Boolean directoryOnly) {
    this.directoryOnly = directoryOnly;
    return this;
  }

   /**
   * Skip processing of regular files.
   * @return directoryOnly
  **/
  @ApiModelProperty(value = "Skip processing of regular files.")
  public Boolean isDirectoryOnly() {
    return directoryOnly;
  }

  public void setDirectoryOnly(Boolean directoryOnly) {
    this.directoryOnly = directoryOnly;
  }

  public JobJobSmartpoolstreeParams nop(Boolean nop) {
    this.nop = nop;
    return this;
  }

   /**
   * Calculate what would be done (dry run).
   * @return nop
  **/
  @ApiModelProperty(value = "Calculate what would be done (dry run).")
  public Boolean isNop() {
    return nop;
  }

  public void setNop(Boolean nop) {
    this.nop = nop;
  }

  public JobJobSmartpoolstreeParams policyOnly(Boolean policyOnly) {
    this.policyOnly = policyOnly;
    return this;
  }

   /**
   * Apply policies but skip restriping.
   * @return policyOnly
  **/
  @ApiModelProperty(value = "Apply policies but skip restriping.")
  public Boolean isPolicyOnly() {
    return policyOnly;
  }

  public void setPolicyOnly(Boolean policyOnly) {
    this.policyOnly = policyOnly;
  }

  public JobJobSmartpoolstreeParams recurse(Boolean recurse) {
    this.recurse = recurse;
    return this;
  }

   /**
   * Process children, recursively.
   * @return recurse
  **/
  @ApiModelProperty(value = "Process children, recursively.")
  public Boolean isRecurse() {
    return recurse;
  }

  public void setRecurse(Boolean recurse) {
    this.recurse = recurse;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobJobSmartpoolstreeParams jobJobSmartpoolstreeParams = (JobJobSmartpoolstreeParams) o;
    return Objects.equals(this.directoryOnly, jobJobSmartpoolstreeParams.directoryOnly) &&
        Objects.equals(this.nop, jobJobSmartpoolstreeParams.nop) &&
        Objects.equals(this.policyOnly, jobJobSmartpoolstreeParams.policyOnly) &&
        Objects.equals(this.recurse, jobJobSmartpoolstreeParams.recurse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directoryOnly, nop, policyOnly, recurse);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobJobSmartpoolstreeParams {\n");
    
    sb.append("    directoryOnly: ").append(toIndentedString(directoryOnly)).append("\n");
    sb.append("    nop: ").append(toIndentedString(nop)).append("\n");
    sb.append("    policyOnly: ").append(toIndentedString(policyOnly)).append("\n");
    sb.append("    recurse: ").append(toIndentedString(recurse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

