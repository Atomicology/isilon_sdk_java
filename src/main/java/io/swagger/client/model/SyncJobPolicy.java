/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SyncJobPolicyFileMatchingPattern;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SyncJobPolicy
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class SyncJobPolicy {
  /**
   * If &#39;copy&#39;, source files will be copied to the target cluster.  If &#39;sync&#39;, the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    COPY("copy"),
    
    SYNC("sync");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("file_matching_pattern")
  private SyncJobPolicyFileMatchingPattern fileMatchingPattern = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("source_exclude_directories")
  private List<String> sourceExcludeDirectories = null;

  @SerializedName("source_include_directories")
  private List<String> sourceIncludeDirectories = null;

  @SerializedName("source_root_path")
  private String sourceRootPath = null;

  @SerializedName("target_host")
  private String targetHost = null;

  @SerializedName("target_path")
  private String targetPath = null;

  public SyncJobPolicy action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * If &#39;copy&#39;, source files will be copied to the target cluster.  If &#39;sync&#39;, the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.
   * @return action
  **/
  @ApiModelProperty(value = "If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public SyncJobPolicy fileMatchingPattern(SyncJobPolicyFileMatchingPattern fileMatchingPattern) {
    this.fileMatchingPattern = fileMatchingPattern;
    return this;
  }

   /**
   * A file matching pattern, organized as an OR&#39;ed set of AND&#39;ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type &#39;sync&#39; cannot use &#39;path&#39; or time criteria in their matching patterns, but policies of type &#39;copy&#39; can use all listed criteria.
   * @return fileMatchingPattern
  **/
  @ApiModelProperty(value = "A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.")
  public SyncJobPolicyFileMatchingPattern getFileMatchingPattern() {
    return fileMatchingPattern;
  }

  public void setFileMatchingPattern(SyncJobPolicyFileMatchingPattern fileMatchingPattern) {
    this.fileMatchingPattern = fileMatchingPattern;
  }

  public SyncJobPolicy name(String name) {
    this.name = name;
    return this;
  }

   /**
   * User-assigned name of this sync policy.
   * @return name
  **/
  @ApiModelProperty(value = "User-assigned name of this sync policy.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SyncJobPolicy sourceExcludeDirectories(List<String> sourceExcludeDirectories) {
    this.sourceExcludeDirectories = sourceExcludeDirectories;
    return this;
  }

  public SyncJobPolicy addSourceExcludeDirectoriesItem(String sourceExcludeDirectoriesItem) {
    if (this.sourceExcludeDirectories == null) {
      this.sourceExcludeDirectories = new ArrayList<String>();
    }
    this.sourceExcludeDirectories.add(sourceExcludeDirectoriesItem);
    return this;
  }

   /**
   * Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.
   * @return sourceExcludeDirectories
  **/
  @ApiModelProperty(value = "Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.")
  public List<String> getSourceExcludeDirectories() {
    return sourceExcludeDirectories;
  }

  public void setSourceExcludeDirectories(List<String> sourceExcludeDirectories) {
    this.sourceExcludeDirectories = sourceExcludeDirectories;
  }

  public SyncJobPolicy sourceIncludeDirectories(List<String> sourceIncludeDirectories) {
    this.sourceIncludeDirectories = sourceIncludeDirectories;
    return this;
  }

  public SyncJobPolicy addSourceIncludeDirectoriesItem(String sourceIncludeDirectoriesItem) {
    if (this.sourceIncludeDirectories == null) {
      this.sourceIncludeDirectories = new ArrayList<String>();
    }
    this.sourceIncludeDirectories.add(sourceIncludeDirectoriesItem);
    return this;
  }

   /**
   * Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.
   * @return sourceIncludeDirectories
  **/
  @ApiModelProperty(value = "Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.")
  public List<String> getSourceIncludeDirectories() {
    return sourceIncludeDirectories;
  }

  public void setSourceIncludeDirectories(List<String> sourceIncludeDirectories) {
    this.sourceIncludeDirectories = sourceIncludeDirectories;
  }

  public SyncJobPolicy sourceRootPath(String sourceRootPath) {
    this.sourceRootPath = sourceRootPath;
    return this;
  }

   /**
   * The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.
   * @return sourceRootPath
  **/
  @ApiModelProperty(value = "The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.")
  public String getSourceRootPath() {
    return sourceRootPath;
  }

  public void setSourceRootPath(String sourceRootPath) {
    this.sourceRootPath = sourceRootPath;
  }

  public SyncJobPolicy targetHost(String targetHost) {
    this.targetHost = targetHost;
    return this;
  }

   /**
   * Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.
   * @return targetHost
  **/
  @ApiModelProperty(value = "Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.")
  public String getTargetHost() {
    return targetHost;
  }

  public void setTargetHost(String targetHost) {
    this.targetHost = targetHost;
  }

  public SyncJobPolicy targetPath(String targetPath) {
    this.targetPath = targetPath;
    return this;
  }

   /**
   * Absolute filesystem path on the target cluster for the sync destination.
   * @return targetPath
  **/
  @ApiModelProperty(value = "Absolute filesystem path on the target cluster for the sync destination.")
  public String getTargetPath() {
    return targetPath;
  }

  public void setTargetPath(String targetPath) {
    this.targetPath = targetPath;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncJobPolicy syncJobPolicy = (SyncJobPolicy) o;
    return Objects.equals(this.action, syncJobPolicy.action) &&
        Objects.equals(this.fileMatchingPattern, syncJobPolicy.fileMatchingPattern) &&
        Objects.equals(this.name, syncJobPolicy.name) &&
        Objects.equals(this.sourceExcludeDirectories, syncJobPolicy.sourceExcludeDirectories) &&
        Objects.equals(this.sourceIncludeDirectories, syncJobPolicy.sourceIncludeDirectories) &&
        Objects.equals(this.sourceRootPath, syncJobPolicy.sourceRootPath) &&
        Objects.equals(this.targetHost, syncJobPolicy.targetHost) &&
        Objects.equals(this.targetPath, syncJobPolicy.targetPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, fileMatchingPattern, name, sourceExcludeDirectories, sourceIncludeDirectories, sourceRootPath, targetHost, targetPath);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncJobPolicy {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    fileMatchingPattern: ").append(toIndentedString(fileMatchingPattern)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceExcludeDirectories: ").append(toIndentedString(sourceExcludeDirectories)).append("\n");
    sb.append("    sourceIncludeDirectories: ").append(toIndentedString(sourceIncludeDirectories)).append("\n");
    sb.append("    sourceRootPath: ").append(toIndentedString(sourceRootPath)).append("\n");
    sb.append("    targetHost: ").append(toIndentedString(targetHost)).append("\n");
    sb.append("    targetPath: ").append(toIndentedString(targetPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

