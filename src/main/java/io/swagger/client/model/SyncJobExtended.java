/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.SyncJobPhase;
import io.swagger.client.model.SyncJobPolicy;
import io.swagger.client.model.SyncJobWorker;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SyncJobExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-18T15:45:33.897-07:00")
public class SyncJobExtended {
  /**
   * The action to be taken by this job.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    RESYNC_PREP("resync_prep"),
    
    ALLOW_WRITE("allow_write"),
    
    ALLOW_WRITE_REVERT("allow_write_revert"),
    
    TEST("test"),
    
    RUN("run"),
    
    NONE("none");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String text) {
      for (ActionEnum b : ActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("action")
  private ActionEnum action = null;

  @SerializedName("ads_streams_replicated")
  private Integer adsStreamsReplicated = null;

  @SerializedName("block_specs_replicated")
  private Integer blockSpecsReplicated = null;

  @SerializedName("bytes_recoverable")
  private Integer bytesRecoverable = null;

  @SerializedName("bytes_transferred")
  private Integer bytesTransferred = null;

  @SerializedName("char_specs_replicated")
  private Integer charSpecsReplicated = null;

  @SerializedName("corrected_lins")
  private Integer correctedLins = null;

  @SerializedName("dead_node")
  private Boolean deadNode = null;

  @SerializedName("directories_replicated")
  private Integer directoriesReplicated = null;

  @SerializedName("dirs_changed")
  private Integer dirsChanged = null;

  @SerializedName("dirs_deleted")
  private Integer dirsDeleted = null;

  @SerializedName("dirs_moved")
  private Integer dirsMoved = null;

  @SerializedName("dirs_new")
  private Integer dirsNew = null;

  @SerializedName("duration")
  private Integer duration = null;

  @SerializedName("end_time")
  private Integer endTime = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("error_checksum_files_skipped")
  private Integer errorChecksumFilesSkipped = null;

  @SerializedName("error_io_files_skipped")
  private Integer errorIoFilesSkipped = null;

  @SerializedName("error_net_files_skipped")
  private Integer errorNetFilesSkipped = null;

  @SerializedName("errors")
  private List<String> errors = new ArrayList<String>();

  @SerializedName("failed_chunks")
  private Integer failedChunks = null;

  @SerializedName("fifos_replicated")
  private Integer fifosReplicated = null;

  @SerializedName("file_data_bytes")
  private Integer fileDataBytes = null;

  @SerializedName("files_changed")
  private Integer filesChanged = null;

  @SerializedName("files_linked")
  private Integer filesLinked = null;

  @SerializedName("files_new")
  private Integer filesNew = null;

  @SerializedName("files_selected")
  private Integer filesSelected = null;

  @SerializedName("files_transferred")
  private Integer filesTransferred = null;

  @SerializedName("files_unlinked")
  private Integer filesUnlinked = null;

  @SerializedName("files_with_ads_replicated")
  private Integer filesWithAdsReplicated = null;

  @SerializedName("flipped_lins")
  private Integer flippedLins = null;

  @SerializedName("hard_links_replicated")
  private Integer hardLinksReplicated = null;

  @SerializedName("hash_exceptions_fixed")
  private Integer hashExceptionsFixed = null;

  @SerializedName("hash_exceptions_found")
  private Integer hashExceptionsFound = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("job_id")
  private Integer jobId = null;

  @SerializedName("lins_total")
  private Integer linsTotal = null;

  @SerializedName("network_bytes_to_source")
  private Integer networkBytesToSource = null;

  @SerializedName("network_bytes_to_target")
  private Integer networkBytesToTarget = null;

  @SerializedName("new_files_replicated")
  private Integer newFilesReplicated = null;

  @SerializedName("num_retransmitted_files")
  private Integer numRetransmittedFiles = null;

  @SerializedName("phases")
  private List<SyncJobPhase> phases = new ArrayList<SyncJobPhase>();

  @SerializedName("policy")
  private SyncJobPolicy policy = null;

  /**
   * This is the action the policy is configured to perform.
   */
  @JsonAdapter(PolicyActionEnum.Adapter.class)
  public enum PolicyActionEnum {
    COPY("copy"),
    
    SYNC("sync");

    private String value;

    PolicyActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyActionEnum fromValue(String text) {
      for (PolicyActionEnum b : PolicyActionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PolicyActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PolicyActionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("policy_action")
  private PolicyActionEnum policyAction = null;

  @SerializedName("policy_id")
  private String policyId = null;

  @SerializedName("policy_name")
  private String policyName = null;

  @SerializedName("regular_files_replicated")
  private Integer regularFilesReplicated = null;

  @SerializedName("resynced_lins")
  private Integer resyncedLins = null;

  @SerializedName("retransmitted_files")
  private List<String> retransmittedFiles = new ArrayList<String>();

  @SerializedName("retry")
  private Integer retry = null;

  @SerializedName("running_chunks")
  private Integer runningChunks = null;

  @SerializedName("sockets_replicated")
  private Integer socketsReplicated = null;

  @SerializedName("source_bytes_recovered")
  private Integer sourceBytesRecovered = null;

  @SerializedName("source_directories_created")
  private Integer sourceDirectoriesCreated = null;

  @SerializedName("source_directories_deleted")
  private Integer sourceDirectoriesDeleted = null;

  @SerializedName("source_directories_linked")
  private Integer sourceDirectoriesLinked = null;

  @SerializedName("source_directories_unlinked")
  private Integer sourceDirectoriesUnlinked = null;

  @SerializedName("source_directories_visited")
  private Integer sourceDirectoriesVisited = null;

  @SerializedName("source_files_deleted")
  private Integer sourceFilesDeleted = null;

  @SerializedName("source_files_linked")
  private Integer sourceFilesLinked = null;

  @SerializedName("source_files_unlinked")
  private Integer sourceFilesUnlinked = null;

  @SerializedName("sparse_data_bytes")
  private Integer sparseDataBytes = null;

  @SerializedName("start_time")
  private Integer startTime = null;

  /**
   * The state of the job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SCHEDULED("scheduled"),
    
    RUNNING("running"),
    
    PAUSED("paused"),
    
    FINISHED("finished"),
    
    FAILED("failed"),
    
    CANCELED("canceled"),
    
    NEEDS_ATTENTION("needs_attention"),
    
    SKIPPED("skipped"),
    
    PENDING("pending"),
    
    UNKNOWN("unknown");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("succeeded_chunks")
  private Integer succeededChunks = null;

  @SerializedName("symlinks_replicated")
  private Integer symlinksReplicated = null;

  /**
   * The type of sync being performed by this job.
   */
  @JsonAdapter(SyncTypeEnum.Adapter.class)
  public enum SyncTypeEnum {
    INVALID("invalid"),
    
    LEGACY("legacy"),
    
    INITIAL("initial"),
    
    INCREMENTAL("incremental"),
    
    UPGRADE("upgrade"),
    
    FOFB("fofb"),
    
    DOMAINMARK("domainmark");

    private String value;

    SyncTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncTypeEnum fromValue(String text) {
      for (SyncTypeEnum b : SyncTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SyncTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SyncTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("sync_type")
  private SyncTypeEnum syncType = null;

  @SerializedName("target_bytes_recovered")
  private Integer targetBytesRecovered = null;

  @SerializedName("target_directories_created")
  private Integer targetDirectoriesCreated = null;

  @SerializedName("target_directories_deleted")
  private Integer targetDirectoriesDeleted = null;

  @SerializedName("target_directories_linked")
  private Integer targetDirectoriesLinked = null;

  @SerializedName("target_directories_unlinked")
  private Integer targetDirectoriesUnlinked = null;

  @SerializedName("target_files_deleted")
  private Integer targetFilesDeleted = null;

  @SerializedName("target_files_linked")
  private Integer targetFilesLinked = null;

  @SerializedName("target_files_unlinked")
  private Integer targetFilesUnlinked = null;

  @SerializedName("target_snapshots")
  private List<String> targetSnapshots = new ArrayList<String>();

  @SerializedName("total_chunks")
  private Integer totalChunks = null;

  @SerializedName("total_data_bytes")
  private Integer totalDataBytes = null;

  @SerializedName("total_files")
  private Integer totalFiles = null;

  @SerializedName("total_network_bytes")
  private Integer totalNetworkBytes = null;

  @SerializedName("total_phases")
  private Integer totalPhases = null;

  @SerializedName("unchanged_data_bytes")
  private Integer unchangedDataBytes = null;

  @SerializedName("up_to_date_files_skipped")
  private Integer upToDateFilesSkipped = null;

  @SerializedName("updated_files_replicated")
  private Integer updatedFilesReplicated = null;

  @SerializedName("user_conflict_files_skipped")
  private Integer userConflictFilesSkipped = null;

  @SerializedName("warnings")
  private List<String> warnings = new ArrayList<String>();

  @SerializedName("workers")
  private List<SyncJobWorker> workers = new ArrayList<SyncJobWorker>();

  public SyncJobExtended action(ActionEnum action) {
    this.action = action;
    return this;
  }

   /**
   * The action to be taken by this job.
   * @return action
  **/
  @ApiModelProperty(required = true, value = "The action to be taken by this job.")
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }

  public SyncJobExtended adsStreamsReplicated(Integer adsStreamsReplicated) {
    this.adsStreamsReplicated = adsStreamsReplicated;
    return this;
  }

   /**
   * The number of ads streams replicated by this job.
   * @return adsStreamsReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of ads streams replicated by this job.")
  public Integer getAdsStreamsReplicated() {
    return adsStreamsReplicated;
  }

  public void setAdsStreamsReplicated(Integer adsStreamsReplicated) {
    this.adsStreamsReplicated = adsStreamsReplicated;
  }

  public SyncJobExtended blockSpecsReplicated(Integer blockSpecsReplicated) {
    this.blockSpecsReplicated = blockSpecsReplicated;
    return this;
  }

   /**
   * The number of block specs replicated by this job.
   * @return blockSpecsReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of block specs replicated by this job.")
  public Integer getBlockSpecsReplicated() {
    return blockSpecsReplicated;
  }

  public void setBlockSpecsReplicated(Integer blockSpecsReplicated) {
    this.blockSpecsReplicated = blockSpecsReplicated;
  }

  public SyncJobExtended bytesRecoverable(Integer bytesRecoverable) {
    this.bytesRecoverable = bytesRecoverable;
    return this;
  }

   /**
   * The number of bytes recoverable by this job.
   * @return bytesRecoverable
  **/
  @ApiModelProperty(required = true, value = "The number of bytes recoverable by this job.")
  public Integer getBytesRecoverable() {
    return bytesRecoverable;
  }

  public void setBytesRecoverable(Integer bytesRecoverable) {
    this.bytesRecoverable = bytesRecoverable;
  }

  public SyncJobExtended bytesTransferred(Integer bytesTransferred) {
    this.bytesTransferred = bytesTransferred;
    return this;
  }

   /**
   * The number of bytes that have been transferred by this job.
   * @return bytesTransferred
  **/
  @ApiModelProperty(required = true, value = "The number of bytes that have been transferred by this job.")
  public Integer getBytesTransferred() {
    return bytesTransferred;
  }

  public void setBytesTransferred(Integer bytesTransferred) {
    this.bytesTransferred = bytesTransferred;
  }

  public SyncJobExtended charSpecsReplicated(Integer charSpecsReplicated) {
    this.charSpecsReplicated = charSpecsReplicated;
    return this;
  }

   /**
   * The number of char specs replicated by this job.
   * @return charSpecsReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of char specs replicated by this job.")
  public Integer getCharSpecsReplicated() {
    return charSpecsReplicated;
  }

  public void setCharSpecsReplicated(Integer charSpecsReplicated) {
    this.charSpecsReplicated = charSpecsReplicated;
  }

  public SyncJobExtended correctedLins(Integer correctedLins) {
    this.correctedLins = correctedLins;
    return this;
  }

   /**
   * The number of LINs corrected by this job.
   * @return correctedLins
  **/
  @ApiModelProperty(required = true, value = "The number of LINs corrected by this job.")
  public Integer getCorrectedLins() {
    return correctedLins;
  }

  public void setCorrectedLins(Integer correctedLins) {
    this.correctedLins = correctedLins;
  }

  public SyncJobExtended deadNode(Boolean deadNode) {
    this.deadNode = deadNode;
    return this;
  }

   /**
   * This field is true if the node running this job is dead.
   * @return deadNode
  **/
  @ApiModelProperty(required = true, value = "This field is true if the node running this job is dead.")
  public Boolean isDeadNode() {
    return deadNode;
  }

  public void setDeadNode(Boolean deadNode) {
    this.deadNode = deadNode;
  }

  public SyncJobExtended directoriesReplicated(Integer directoriesReplicated) {
    this.directoriesReplicated = directoriesReplicated;
    return this;
  }

   /**
   * The number of directories replicated.
   * @return directoriesReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of directories replicated.")
  public Integer getDirectoriesReplicated() {
    return directoriesReplicated;
  }

  public void setDirectoriesReplicated(Integer directoriesReplicated) {
    this.directoriesReplicated = directoriesReplicated;
  }

  public SyncJobExtended dirsChanged(Integer dirsChanged) {
    this.dirsChanged = dirsChanged;
    return this;
  }

   /**
   * The number of directories changed by this job.
   * @return dirsChanged
  **/
  @ApiModelProperty(required = true, value = "The number of directories changed by this job.")
  public Integer getDirsChanged() {
    return dirsChanged;
  }

  public void setDirsChanged(Integer dirsChanged) {
    this.dirsChanged = dirsChanged;
  }

  public SyncJobExtended dirsDeleted(Integer dirsDeleted) {
    this.dirsDeleted = dirsDeleted;
    return this;
  }

   /**
   * The number of directories deleted by this job.
   * @return dirsDeleted
  **/
  @ApiModelProperty(required = true, value = "The number of directories deleted by this job.")
  public Integer getDirsDeleted() {
    return dirsDeleted;
  }

  public void setDirsDeleted(Integer dirsDeleted) {
    this.dirsDeleted = dirsDeleted;
  }

  public SyncJobExtended dirsMoved(Integer dirsMoved) {
    this.dirsMoved = dirsMoved;
    return this;
  }

   /**
   * The number of directories moved by this job.
   * @return dirsMoved
  **/
  @ApiModelProperty(required = true, value = "The number of directories moved by this job.")
  public Integer getDirsMoved() {
    return dirsMoved;
  }

  public void setDirsMoved(Integer dirsMoved) {
    this.dirsMoved = dirsMoved;
  }

  public SyncJobExtended dirsNew(Integer dirsNew) {
    this.dirsNew = dirsNew;
    return this;
  }

   /**
   * The number of directories created by this job.
   * @return dirsNew
  **/
  @ApiModelProperty(required = true, value = "The number of directories created by this job.")
  public Integer getDirsNew() {
    return dirsNew;
  }

  public void setDirsNew(Integer dirsNew) {
    this.dirsNew = dirsNew;
  }

  public SyncJobExtended duration(Integer duration) {
    this.duration = duration;
    return this;
  }

   /**
   * The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.
   * @return duration
  **/
  @ApiModelProperty(value = "The amount of time in seconds between when the job was started and when it ended.  If the job has not yet ended, this is the amount of time since the job started.  This field is null if the job has not yet started.")
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }

  public SyncJobExtended endTime(Integer endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The time the job ended in unix epoch seconds. The field is null if the job hasn&#39;t ended.
   * @return endTime
  **/
  @ApiModelProperty(value = "The time the job ended in unix epoch seconds. The field is null if the job hasn't ended.")
  public Integer getEndTime() {
    return endTime;
  }

  public void setEndTime(Integer endTime) {
    this.endTime = endTime;
  }

  public SyncJobExtended error(String error) {
    this.error = error;
    return this;
  }

   /**
   * The primary error message for this job.
   * @return error
  **/
  @ApiModelProperty(required = true, value = "The primary error message for this job.")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }

  public SyncJobExtended errorChecksumFilesSkipped(Integer errorChecksumFilesSkipped) {
    this.errorChecksumFilesSkipped = errorChecksumFilesSkipped;
    return this;
  }

   /**
   * The number of files with checksum errors skipped by this job.
   * @return errorChecksumFilesSkipped
  **/
  @ApiModelProperty(required = true, value = "The number of files with checksum errors skipped by this job.")
  public Integer getErrorChecksumFilesSkipped() {
    return errorChecksumFilesSkipped;
  }

  public void setErrorChecksumFilesSkipped(Integer errorChecksumFilesSkipped) {
    this.errorChecksumFilesSkipped = errorChecksumFilesSkipped;
  }

  public SyncJobExtended errorIoFilesSkipped(Integer errorIoFilesSkipped) {
    this.errorIoFilesSkipped = errorIoFilesSkipped;
    return this;
  }

   /**
   * The number of files with io errors skipped by this job.
   * @return errorIoFilesSkipped
  **/
  @ApiModelProperty(required = true, value = "The number of files with io errors skipped by this job.")
  public Integer getErrorIoFilesSkipped() {
    return errorIoFilesSkipped;
  }

  public void setErrorIoFilesSkipped(Integer errorIoFilesSkipped) {
    this.errorIoFilesSkipped = errorIoFilesSkipped;
  }

  public SyncJobExtended errorNetFilesSkipped(Integer errorNetFilesSkipped) {
    this.errorNetFilesSkipped = errorNetFilesSkipped;
    return this;
  }

   /**
   * The number of files with network errors skipped by this job.
   * @return errorNetFilesSkipped
  **/
  @ApiModelProperty(required = true, value = "The number of files with network errors skipped by this job.")
  public Integer getErrorNetFilesSkipped() {
    return errorNetFilesSkipped;
  }

  public void setErrorNetFilesSkipped(Integer errorNetFilesSkipped) {
    this.errorNetFilesSkipped = errorNetFilesSkipped;
  }

  public SyncJobExtended errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public SyncJobExtended addErrorsItem(String errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * A list of error messages for this job.
   * @return errors
  **/
  @ApiModelProperty(required = true, value = "A list of error messages for this job.")
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }

  public SyncJobExtended failedChunks(Integer failedChunks) {
    this.failedChunks = failedChunks;
    return this;
  }

   /**
   * Tyhe number of data chunks that failed transmission.
   * @return failedChunks
  **/
  @ApiModelProperty(required = true, value = "Tyhe number of data chunks that failed transmission.")
  public Integer getFailedChunks() {
    return failedChunks;
  }

  public void setFailedChunks(Integer failedChunks) {
    this.failedChunks = failedChunks;
  }

  public SyncJobExtended fifosReplicated(Integer fifosReplicated) {
    this.fifosReplicated = fifosReplicated;
    return this;
  }

   /**
   * The number of fifos replicated by this job.
   * @return fifosReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of fifos replicated by this job.")
  public Integer getFifosReplicated() {
    return fifosReplicated;
  }

  public void setFifosReplicated(Integer fifosReplicated) {
    this.fifosReplicated = fifosReplicated;
  }

  public SyncJobExtended fileDataBytes(Integer fileDataBytes) {
    this.fileDataBytes = fileDataBytes;
    return this;
  }

   /**
   * The number of bytes transferred that belong to files.
   * @return fileDataBytes
  **/
  @ApiModelProperty(required = true, value = "The number of bytes transferred that belong to files.")
  public Integer getFileDataBytes() {
    return fileDataBytes;
  }

  public void setFileDataBytes(Integer fileDataBytes) {
    this.fileDataBytes = fileDataBytes;
  }

  public SyncJobExtended filesChanged(Integer filesChanged) {
    this.filesChanged = filesChanged;
    return this;
  }

   /**
   * The number of files changed by this job.
   * @return filesChanged
  **/
  @ApiModelProperty(required = true, value = "The number of files changed by this job.")
  public Integer getFilesChanged() {
    return filesChanged;
  }

  public void setFilesChanged(Integer filesChanged) {
    this.filesChanged = filesChanged;
  }

  public SyncJobExtended filesLinked(Integer filesLinked) {
    this.filesLinked = filesLinked;
    return this;
  }

   /**
   * The number of files linked by this job.
   * @return filesLinked
  **/
  @ApiModelProperty(required = true, value = "The number of files linked by this job.")
  public Integer getFilesLinked() {
    return filesLinked;
  }

  public void setFilesLinked(Integer filesLinked) {
    this.filesLinked = filesLinked;
  }

  public SyncJobExtended filesNew(Integer filesNew) {
    this.filesNew = filesNew;
    return this;
  }

   /**
   * The number of files created by this job.
   * @return filesNew
  **/
  @ApiModelProperty(required = true, value = "The number of files created by this job.")
  public Integer getFilesNew() {
    return filesNew;
  }

  public void setFilesNew(Integer filesNew) {
    this.filesNew = filesNew;
  }

  public SyncJobExtended filesSelected(Integer filesSelected) {
    this.filesSelected = filesSelected;
    return this;
  }

   /**
   * The number of files selected by this job.
   * @return filesSelected
  **/
  @ApiModelProperty(required = true, value = "The number of files selected by this job.")
  public Integer getFilesSelected() {
    return filesSelected;
  }

  public void setFilesSelected(Integer filesSelected) {
    this.filesSelected = filesSelected;
  }

  public SyncJobExtended filesTransferred(Integer filesTransferred) {
    this.filesTransferred = filesTransferred;
    return this;
  }

   /**
   * The number of files transferred by this job.
   * @return filesTransferred
  **/
  @ApiModelProperty(required = true, value = "The number of files transferred by this job.")
  public Integer getFilesTransferred() {
    return filesTransferred;
  }

  public void setFilesTransferred(Integer filesTransferred) {
    this.filesTransferred = filesTransferred;
  }

  public SyncJobExtended filesUnlinked(Integer filesUnlinked) {
    this.filesUnlinked = filesUnlinked;
    return this;
  }

   /**
   * The number of files unlinked by this job.
   * @return filesUnlinked
  **/
  @ApiModelProperty(required = true, value = "The number of files unlinked by this job.")
  public Integer getFilesUnlinked() {
    return filesUnlinked;
  }

  public void setFilesUnlinked(Integer filesUnlinked) {
    this.filesUnlinked = filesUnlinked;
  }

  public SyncJobExtended filesWithAdsReplicated(Integer filesWithAdsReplicated) {
    this.filesWithAdsReplicated = filesWithAdsReplicated;
    return this;
  }

   /**
   * The number of files with ads replicated by this job.
   * @return filesWithAdsReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of files with ads replicated by this job.")
  public Integer getFilesWithAdsReplicated() {
    return filesWithAdsReplicated;
  }

  public void setFilesWithAdsReplicated(Integer filesWithAdsReplicated) {
    this.filesWithAdsReplicated = filesWithAdsReplicated;
  }

  public SyncJobExtended flippedLins(Integer flippedLins) {
    this.flippedLins = flippedLins;
    return this;
  }

   /**
   * The number of LINs flipped by this job.
   * @return flippedLins
  **/
  @ApiModelProperty(required = true, value = "The number of LINs flipped by this job.")
  public Integer getFlippedLins() {
    return flippedLins;
  }

  public void setFlippedLins(Integer flippedLins) {
    this.flippedLins = flippedLins;
  }

  public SyncJobExtended hardLinksReplicated(Integer hardLinksReplicated) {
    this.hardLinksReplicated = hardLinksReplicated;
    return this;
  }

   /**
   * The number of hard links replicated by this job.
   * @return hardLinksReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of hard links replicated by this job.")
  public Integer getHardLinksReplicated() {
    return hardLinksReplicated;
  }

  public void setHardLinksReplicated(Integer hardLinksReplicated) {
    this.hardLinksReplicated = hardLinksReplicated;
  }

  public SyncJobExtended hashExceptionsFixed(Integer hashExceptionsFixed) {
    this.hashExceptionsFixed = hashExceptionsFixed;
    return this;
  }

   /**
   * The number of hash exceptions fixed by this job.
   * @return hashExceptionsFixed
  **/
  @ApiModelProperty(required = true, value = "The number of hash exceptions fixed by this job.")
  public Integer getHashExceptionsFixed() {
    return hashExceptionsFixed;
  }

  public void setHashExceptionsFixed(Integer hashExceptionsFixed) {
    this.hashExceptionsFixed = hashExceptionsFixed;
  }

  public SyncJobExtended hashExceptionsFound(Integer hashExceptionsFound) {
    this.hashExceptionsFound = hashExceptionsFound;
    return this;
  }

   /**
   * The number of hash exceptions found by this job.
   * @return hashExceptionsFound
  **/
  @ApiModelProperty(required = true, value = "The number of hash exceptions found by this job.")
  public Integer getHashExceptionsFound() {
    return hashExceptionsFound;
  }

  public void setHashExceptionsFound(Integer hashExceptionsFound) {
    this.hashExceptionsFound = hashExceptionsFound;
  }

  public SyncJobExtended id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A unique identifier for this object.
   * @return id
  **/
  @ApiModelProperty(required = true, value = "A unique identifier for this object.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public SyncJobExtended jobId(Integer jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * The ID of the job.
   * @return jobId
  **/
  @ApiModelProperty(value = "The ID of the job.")
  public Integer getJobId() {
    return jobId;
  }

  public void setJobId(Integer jobId) {
    this.jobId = jobId;
  }

  public SyncJobExtended linsTotal(Integer linsTotal) {
    this.linsTotal = linsTotal;
    return this;
  }

   /**
   * The number of LINs transferred by this job.
   * @return linsTotal
  **/
  @ApiModelProperty(required = true, value = "The number of LINs transferred by this job.")
  public Integer getLinsTotal() {
    return linsTotal;
  }

  public void setLinsTotal(Integer linsTotal) {
    this.linsTotal = linsTotal;
  }

  public SyncJobExtended networkBytesToSource(Integer networkBytesToSource) {
    this.networkBytesToSource = networkBytesToSource;
    return this;
  }

   /**
   * The total number of bytes sent to the source by this job.
   * @return networkBytesToSource
  **/
  @ApiModelProperty(required = true, value = "The total number of bytes sent to the source by this job.")
  public Integer getNetworkBytesToSource() {
    return networkBytesToSource;
  }

  public void setNetworkBytesToSource(Integer networkBytesToSource) {
    this.networkBytesToSource = networkBytesToSource;
  }

  public SyncJobExtended networkBytesToTarget(Integer networkBytesToTarget) {
    this.networkBytesToTarget = networkBytesToTarget;
    return this;
  }

   /**
   * The total number of bytes sent to the target by this job.
   * @return networkBytesToTarget
  **/
  @ApiModelProperty(required = true, value = "The total number of bytes sent to the target by this job.")
  public Integer getNetworkBytesToTarget() {
    return networkBytesToTarget;
  }

  public void setNetworkBytesToTarget(Integer networkBytesToTarget) {
    this.networkBytesToTarget = networkBytesToTarget;
  }

  public SyncJobExtended newFilesReplicated(Integer newFilesReplicated) {
    this.newFilesReplicated = newFilesReplicated;
    return this;
  }

   /**
   * The number of new files replicated by this job.
   * @return newFilesReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of new files replicated by this job.")
  public Integer getNewFilesReplicated() {
    return newFilesReplicated;
  }

  public void setNewFilesReplicated(Integer newFilesReplicated) {
    this.newFilesReplicated = newFilesReplicated;
  }

  public SyncJobExtended numRetransmittedFiles(Integer numRetransmittedFiles) {
    this.numRetransmittedFiles = numRetransmittedFiles;
    return this;
  }

   /**
   * The number of files that have been retransmitted by this job.
   * @return numRetransmittedFiles
  **/
  @ApiModelProperty(required = true, value = "The number of files that have been retransmitted by this job.")
  public Integer getNumRetransmittedFiles() {
    return numRetransmittedFiles;
  }

  public void setNumRetransmittedFiles(Integer numRetransmittedFiles) {
    this.numRetransmittedFiles = numRetransmittedFiles;
  }

  public SyncJobExtended phases(List<SyncJobPhase> phases) {
    this.phases = phases;
    return this;
  }

  public SyncJobExtended addPhasesItem(SyncJobPhase phasesItem) {
    this.phases.add(phasesItem);
    return this;
  }

   /**
   * Data for each phase of this job.
   * @return phases
  **/
  @ApiModelProperty(required = true, value = "Data for each phase of this job.")
  public List<SyncJobPhase> getPhases() {
    return phases;
  }

  public void setPhases(List<SyncJobPhase> phases) {
    this.phases = phases;
  }

  public SyncJobExtended policy(SyncJobPolicy policy) {
    this.policy = policy;
    return this;
  }

   /**
   * The policy associated with this job, or null if there is currently no policy associated with this job (this can happen if the job is newly created and not yet fully populated in the underlying database).
   * @return policy
  **/
  @ApiModelProperty(value = "The policy associated with this job, or null if there is currently no policy associated with this job (this can happen if the job is newly created and not yet fully populated in the underlying database).")
  public SyncJobPolicy getPolicy() {
    return policy;
  }

  public void setPolicy(SyncJobPolicy policy) {
    this.policy = policy;
  }

  public SyncJobExtended policyAction(PolicyActionEnum policyAction) {
    this.policyAction = policyAction;
    return this;
  }

   /**
   * This is the action the policy is configured to perform.
   * @return policyAction
  **/
  @ApiModelProperty(required = true, value = "This is the action the policy is configured to perform.")
  public PolicyActionEnum getPolicyAction() {
    return policyAction;
  }

  public void setPolicyAction(PolicyActionEnum policyAction) {
    this.policyAction = policyAction;
  }

  public SyncJobExtended policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

   /**
   * The ID of the policy.
   * @return policyId
  **/
  @ApiModelProperty(required = true, value = "The ID of the policy.")
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }

  public SyncJobExtended policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

   /**
   * The name of the policy.
   * @return policyName
  **/
  @ApiModelProperty(required = true, value = "The name of the policy.")
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }

  public SyncJobExtended regularFilesReplicated(Integer regularFilesReplicated) {
    this.regularFilesReplicated = regularFilesReplicated;
    return this;
  }

   /**
   * The number of regular files replicated by this job.
   * @return regularFilesReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of regular files replicated by this job.")
  public Integer getRegularFilesReplicated() {
    return regularFilesReplicated;
  }

  public void setRegularFilesReplicated(Integer regularFilesReplicated) {
    this.regularFilesReplicated = regularFilesReplicated;
  }

  public SyncJobExtended resyncedLins(Integer resyncedLins) {
    this.resyncedLins = resyncedLins;
    return this;
  }

   /**
   * The number of LINs resynched by this job.
   * @return resyncedLins
  **/
  @ApiModelProperty(required = true, value = "The number of LINs resynched by this job.")
  public Integer getResyncedLins() {
    return resyncedLins;
  }

  public void setResyncedLins(Integer resyncedLins) {
    this.resyncedLins = resyncedLins;
  }

  public SyncJobExtended retransmittedFiles(List<String> retransmittedFiles) {
    this.retransmittedFiles = retransmittedFiles;
    return this;
  }

  public SyncJobExtended addRetransmittedFilesItem(String retransmittedFilesItem) {
    this.retransmittedFiles.add(retransmittedFilesItem);
    return this;
  }

   /**
   * The files that have been retransmitted by this job.
   * @return retransmittedFiles
  **/
  @ApiModelProperty(required = true, value = "The files that have been retransmitted by this job.")
  public List<String> getRetransmittedFiles() {
    return retransmittedFiles;
  }

  public void setRetransmittedFiles(List<String> retransmittedFiles) {
    this.retransmittedFiles = retransmittedFiles;
  }

  public SyncJobExtended retry(Integer retry) {
    this.retry = retry;
    return this;
  }

   /**
   * The number of times the job has been retried.
   * @return retry
  **/
  @ApiModelProperty(required = true, value = "The number of times the job has been retried.")
  public Integer getRetry() {
    return retry;
  }

  public void setRetry(Integer retry) {
    this.retry = retry;
  }

  public SyncJobExtended runningChunks(Integer runningChunks) {
    this.runningChunks = runningChunks;
    return this;
  }

   /**
   * The number of data chunks currently being transmitted.
   * @return runningChunks
  **/
  @ApiModelProperty(required = true, value = "The number of data chunks currently being transmitted.")
  public Integer getRunningChunks() {
    return runningChunks;
  }

  public void setRunningChunks(Integer runningChunks) {
    this.runningChunks = runningChunks;
  }

  public SyncJobExtended socketsReplicated(Integer socketsReplicated) {
    this.socketsReplicated = socketsReplicated;
    return this;
  }

   /**
   * The number of sockets replicated by this job.
   * @return socketsReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of sockets replicated by this job.")
  public Integer getSocketsReplicated() {
    return socketsReplicated;
  }

  public void setSocketsReplicated(Integer socketsReplicated) {
    this.socketsReplicated = socketsReplicated;
  }

  public SyncJobExtended sourceBytesRecovered(Integer sourceBytesRecovered) {
    this.sourceBytesRecovered = sourceBytesRecovered;
    return this;
  }

   /**
   * The number of bytes recovered on the source.
   * @return sourceBytesRecovered
  **/
  @ApiModelProperty(required = true, value = "The number of bytes recovered on the source.")
  public Integer getSourceBytesRecovered() {
    return sourceBytesRecovered;
  }

  public void setSourceBytesRecovered(Integer sourceBytesRecovered) {
    this.sourceBytesRecovered = sourceBytesRecovered;
  }

  public SyncJobExtended sourceDirectoriesCreated(Integer sourceDirectoriesCreated) {
    this.sourceDirectoriesCreated = sourceDirectoriesCreated;
    return this;
  }

   /**
   * The number of directories created on the source.
   * @return sourceDirectoriesCreated
  **/
  @ApiModelProperty(required = true, value = "The number of directories created on the source.")
  public Integer getSourceDirectoriesCreated() {
    return sourceDirectoriesCreated;
  }

  public void setSourceDirectoriesCreated(Integer sourceDirectoriesCreated) {
    this.sourceDirectoriesCreated = sourceDirectoriesCreated;
  }

  public SyncJobExtended sourceDirectoriesDeleted(Integer sourceDirectoriesDeleted) {
    this.sourceDirectoriesDeleted = sourceDirectoriesDeleted;
    return this;
  }

   /**
   * The number of directories deleted on the source.
   * @return sourceDirectoriesDeleted
  **/
  @ApiModelProperty(required = true, value = "The number of directories deleted on the source.")
  public Integer getSourceDirectoriesDeleted() {
    return sourceDirectoriesDeleted;
  }

  public void setSourceDirectoriesDeleted(Integer sourceDirectoriesDeleted) {
    this.sourceDirectoriesDeleted = sourceDirectoriesDeleted;
  }

  public SyncJobExtended sourceDirectoriesLinked(Integer sourceDirectoriesLinked) {
    this.sourceDirectoriesLinked = sourceDirectoriesLinked;
    return this;
  }

   /**
   * The number of directories linked on the source.
   * @return sourceDirectoriesLinked
  **/
  @ApiModelProperty(required = true, value = "The number of directories linked on the source.")
  public Integer getSourceDirectoriesLinked() {
    return sourceDirectoriesLinked;
  }

  public void setSourceDirectoriesLinked(Integer sourceDirectoriesLinked) {
    this.sourceDirectoriesLinked = sourceDirectoriesLinked;
  }

  public SyncJobExtended sourceDirectoriesUnlinked(Integer sourceDirectoriesUnlinked) {
    this.sourceDirectoriesUnlinked = sourceDirectoriesUnlinked;
    return this;
  }

   /**
   * The number of directories unlinked on the source.
   * @return sourceDirectoriesUnlinked
  **/
  @ApiModelProperty(required = true, value = "The number of directories unlinked on the source.")
  public Integer getSourceDirectoriesUnlinked() {
    return sourceDirectoriesUnlinked;
  }

  public void setSourceDirectoriesUnlinked(Integer sourceDirectoriesUnlinked) {
    this.sourceDirectoriesUnlinked = sourceDirectoriesUnlinked;
  }

  public SyncJobExtended sourceDirectoriesVisited(Integer sourceDirectoriesVisited) {
    this.sourceDirectoriesVisited = sourceDirectoriesVisited;
    return this;
  }

   /**
   * The number of directories visited on the source.
   * @return sourceDirectoriesVisited
  **/
  @ApiModelProperty(required = true, value = "The number of directories visited on the source.")
  public Integer getSourceDirectoriesVisited() {
    return sourceDirectoriesVisited;
  }

  public void setSourceDirectoriesVisited(Integer sourceDirectoriesVisited) {
    this.sourceDirectoriesVisited = sourceDirectoriesVisited;
  }

  public SyncJobExtended sourceFilesDeleted(Integer sourceFilesDeleted) {
    this.sourceFilesDeleted = sourceFilesDeleted;
    return this;
  }

   /**
   * The number of files deleted on the source.
   * @return sourceFilesDeleted
  **/
  @ApiModelProperty(required = true, value = "The number of files deleted on the source.")
  public Integer getSourceFilesDeleted() {
    return sourceFilesDeleted;
  }

  public void setSourceFilesDeleted(Integer sourceFilesDeleted) {
    this.sourceFilesDeleted = sourceFilesDeleted;
  }

  public SyncJobExtended sourceFilesLinked(Integer sourceFilesLinked) {
    this.sourceFilesLinked = sourceFilesLinked;
    return this;
  }

   /**
   * The number of files linked on the source.
   * @return sourceFilesLinked
  **/
  @ApiModelProperty(required = true, value = "The number of files linked on the source.")
  public Integer getSourceFilesLinked() {
    return sourceFilesLinked;
  }

  public void setSourceFilesLinked(Integer sourceFilesLinked) {
    this.sourceFilesLinked = sourceFilesLinked;
  }

  public SyncJobExtended sourceFilesUnlinked(Integer sourceFilesUnlinked) {
    this.sourceFilesUnlinked = sourceFilesUnlinked;
    return this;
  }

   /**
   * The number of files unlinked on the source.
   * @return sourceFilesUnlinked
  **/
  @ApiModelProperty(required = true, value = "The number of files unlinked on the source.")
  public Integer getSourceFilesUnlinked() {
    return sourceFilesUnlinked;
  }

  public void setSourceFilesUnlinked(Integer sourceFilesUnlinked) {
    this.sourceFilesUnlinked = sourceFilesUnlinked;
  }

  public SyncJobExtended sparseDataBytes(Integer sparseDataBytes) {
    this.sparseDataBytes = sparseDataBytes;
    return this;
  }

   /**
   * The number of sparse data bytes transferred by this job.
   * @return sparseDataBytes
  **/
  @ApiModelProperty(required = true, value = "The number of sparse data bytes transferred by this job.")
  public Integer getSparseDataBytes() {
    return sparseDataBytes;
  }

  public void setSparseDataBytes(Integer sparseDataBytes) {
    this.sparseDataBytes = sparseDataBytes;
  }

  public SyncJobExtended startTime(Integer startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The time the job started in unix epoch seconds. The field is null if the job hasn&#39;t started.
   * @return startTime
  **/
  @ApiModelProperty(value = "The time the job started in unix epoch seconds. The field is null if the job hasn't started.")
  public Integer getStartTime() {
    return startTime;
  }

  public void setStartTime(Integer startTime) {
    this.startTime = startTime;
  }

  public SyncJobExtended state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the job.
   * @return state
  **/
  @ApiModelProperty(required = true, value = "The state of the job.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public SyncJobExtended succeededChunks(Integer succeededChunks) {
    this.succeededChunks = succeededChunks;
    return this;
  }

   /**
   * The number of data chunks that have been transmitted successfully.
   * @return succeededChunks
  **/
  @ApiModelProperty(required = true, value = "The number of data chunks that have been transmitted successfully.")
  public Integer getSucceededChunks() {
    return succeededChunks;
  }

  public void setSucceededChunks(Integer succeededChunks) {
    this.succeededChunks = succeededChunks;
  }

  public SyncJobExtended symlinksReplicated(Integer symlinksReplicated) {
    this.symlinksReplicated = symlinksReplicated;
    return this;
  }

   /**
   * The number of symlinks replicated by this job.
   * @return symlinksReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of symlinks replicated by this job.")
  public Integer getSymlinksReplicated() {
    return symlinksReplicated;
  }

  public void setSymlinksReplicated(Integer symlinksReplicated) {
    this.symlinksReplicated = symlinksReplicated;
  }

  public SyncJobExtended syncType(SyncTypeEnum syncType) {
    this.syncType = syncType;
    return this;
  }

   /**
   * The type of sync being performed by this job.
   * @return syncType
  **/
  @ApiModelProperty(required = true, value = "The type of sync being performed by this job.")
  public SyncTypeEnum getSyncType() {
    return syncType;
  }

  public void setSyncType(SyncTypeEnum syncType) {
    this.syncType = syncType;
  }

  public SyncJobExtended targetBytesRecovered(Integer targetBytesRecovered) {
    this.targetBytesRecovered = targetBytesRecovered;
    return this;
  }

   /**
   * The number of bytes recovered on the target.
   * @return targetBytesRecovered
  **/
  @ApiModelProperty(required = true, value = "The number of bytes recovered on the target.")
  public Integer getTargetBytesRecovered() {
    return targetBytesRecovered;
  }

  public void setTargetBytesRecovered(Integer targetBytesRecovered) {
    this.targetBytesRecovered = targetBytesRecovered;
  }

  public SyncJobExtended targetDirectoriesCreated(Integer targetDirectoriesCreated) {
    this.targetDirectoriesCreated = targetDirectoriesCreated;
    return this;
  }

   /**
   * The number of directories created on the target.
   * @return targetDirectoriesCreated
  **/
  @ApiModelProperty(required = true, value = "The number of directories created on the target.")
  public Integer getTargetDirectoriesCreated() {
    return targetDirectoriesCreated;
  }

  public void setTargetDirectoriesCreated(Integer targetDirectoriesCreated) {
    this.targetDirectoriesCreated = targetDirectoriesCreated;
  }

  public SyncJobExtended targetDirectoriesDeleted(Integer targetDirectoriesDeleted) {
    this.targetDirectoriesDeleted = targetDirectoriesDeleted;
    return this;
  }

   /**
   * The number of directories deleted on the target.
   * @return targetDirectoriesDeleted
  **/
  @ApiModelProperty(required = true, value = "The number of directories deleted on the target.")
  public Integer getTargetDirectoriesDeleted() {
    return targetDirectoriesDeleted;
  }

  public void setTargetDirectoriesDeleted(Integer targetDirectoriesDeleted) {
    this.targetDirectoriesDeleted = targetDirectoriesDeleted;
  }

  public SyncJobExtended targetDirectoriesLinked(Integer targetDirectoriesLinked) {
    this.targetDirectoriesLinked = targetDirectoriesLinked;
    return this;
  }

   /**
   * The number of directories linked on the target.
   * @return targetDirectoriesLinked
  **/
  @ApiModelProperty(required = true, value = "The number of directories linked on the target.")
  public Integer getTargetDirectoriesLinked() {
    return targetDirectoriesLinked;
  }

  public void setTargetDirectoriesLinked(Integer targetDirectoriesLinked) {
    this.targetDirectoriesLinked = targetDirectoriesLinked;
  }

  public SyncJobExtended targetDirectoriesUnlinked(Integer targetDirectoriesUnlinked) {
    this.targetDirectoriesUnlinked = targetDirectoriesUnlinked;
    return this;
  }

   /**
   * The number of directories unlinked on the target.
   * @return targetDirectoriesUnlinked
  **/
  @ApiModelProperty(required = true, value = "The number of directories unlinked on the target.")
  public Integer getTargetDirectoriesUnlinked() {
    return targetDirectoriesUnlinked;
  }

  public void setTargetDirectoriesUnlinked(Integer targetDirectoriesUnlinked) {
    this.targetDirectoriesUnlinked = targetDirectoriesUnlinked;
  }

  public SyncJobExtended targetFilesDeleted(Integer targetFilesDeleted) {
    this.targetFilesDeleted = targetFilesDeleted;
    return this;
  }

   /**
   * The number of files deleted on the target.
   * @return targetFilesDeleted
  **/
  @ApiModelProperty(required = true, value = "The number of files deleted on the target.")
  public Integer getTargetFilesDeleted() {
    return targetFilesDeleted;
  }

  public void setTargetFilesDeleted(Integer targetFilesDeleted) {
    this.targetFilesDeleted = targetFilesDeleted;
  }

  public SyncJobExtended targetFilesLinked(Integer targetFilesLinked) {
    this.targetFilesLinked = targetFilesLinked;
    return this;
  }

   /**
   * The number of files linked on the target.
   * @return targetFilesLinked
  **/
  @ApiModelProperty(required = true, value = "The number of files linked on the target.")
  public Integer getTargetFilesLinked() {
    return targetFilesLinked;
  }

  public void setTargetFilesLinked(Integer targetFilesLinked) {
    this.targetFilesLinked = targetFilesLinked;
  }

  public SyncJobExtended targetFilesUnlinked(Integer targetFilesUnlinked) {
    this.targetFilesUnlinked = targetFilesUnlinked;
    return this;
  }

   /**
   * The number of files unlinked on the target.
   * @return targetFilesUnlinked
  **/
  @ApiModelProperty(required = true, value = "The number of files unlinked on the target.")
  public Integer getTargetFilesUnlinked() {
    return targetFilesUnlinked;
  }

  public void setTargetFilesUnlinked(Integer targetFilesUnlinked) {
    this.targetFilesUnlinked = targetFilesUnlinked;
  }

  public SyncJobExtended targetSnapshots(List<String> targetSnapshots) {
    this.targetSnapshots = targetSnapshots;
    return this;
  }

  public SyncJobExtended addTargetSnapshotsItem(String targetSnapshotsItem) {
    this.targetSnapshots.add(targetSnapshotsItem);
    return this;
  }

   /**
   * The target snapshots created by this job.
   * @return targetSnapshots
  **/
  @ApiModelProperty(required = true, value = "The target snapshots created by this job.")
  public List<String> getTargetSnapshots() {
    return targetSnapshots;
  }

  public void setTargetSnapshots(List<String> targetSnapshots) {
    this.targetSnapshots = targetSnapshots;
  }

  public SyncJobExtended totalChunks(Integer totalChunks) {
    this.totalChunks = totalChunks;
    return this;
  }

   /**
   * The total number of data chunks transmitted by this job.
   * @return totalChunks
  **/
  @ApiModelProperty(required = true, value = "The total number of data chunks transmitted by this job.")
  public Integer getTotalChunks() {
    return totalChunks;
  }

  public void setTotalChunks(Integer totalChunks) {
    this.totalChunks = totalChunks;
  }

  public SyncJobExtended totalDataBytes(Integer totalDataBytes) {
    this.totalDataBytes = totalDataBytes;
    return this;
  }

   /**
   * The total number of bytes transferred by this job.
   * @return totalDataBytes
  **/
  @ApiModelProperty(required = true, value = "The total number of bytes transferred by this job.")
  public Integer getTotalDataBytes() {
    return totalDataBytes;
  }

  public void setTotalDataBytes(Integer totalDataBytes) {
    this.totalDataBytes = totalDataBytes;
  }

  public SyncJobExtended totalFiles(Integer totalFiles) {
    this.totalFiles = totalFiles;
    return this;
  }

   /**
   * The number of files affected by this job.
   * @return totalFiles
  **/
  @ApiModelProperty(required = true, value = "The number of files affected by this job.")
  public Integer getTotalFiles() {
    return totalFiles;
  }

  public void setTotalFiles(Integer totalFiles) {
    this.totalFiles = totalFiles;
  }

  public SyncJobExtended totalNetworkBytes(Integer totalNetworkBytes) {
    this.totalNetworkBytes = totalNetworkBytes;
    return this;
  }

   /**
   * The total number of bytes sent over the network by this job.
   * @return totalNetworkBytes
  **/
  @ApiModelProperty(required = true, value = "The total number of bytes sent over the network by this job.")
  public Integer getTotalNetworkBytes() {
    return totalNetworkBytes;
  }

  public void setTotalNetworkBytes(Integer totalNetworkBytes) {
    this.totalNetworkBytes = totalNetworkBytes;
  }

  public SyncJobExtended totalPhases(Integer totalPhases) {
    this.totalPhases = totalPhases;
    return this;
  }

   /**
   * The total number of phases for this job.
   * @return totalPhases
  **/
  @ApiModelProperty(required = true, value = "The total number of phases for this job.")
  public Integer getTotalPhases() {
    return totalPhases;
  }

  public void setTotalPhases(Integer totalPhases) {
    this.totalPhases = totalPhases;
  }

  public SyncJobExtended unchangedDataBytes(Integer unchangedDataBytes) {
    this.unchangedDataBytes = unchangedDataBytes;
    return this;
  }

   /**
   * The number of bytes unchanged by this job.
   * @return unchangedDataBytes
  **/
  @ApiModelProperty(required = true, value = "The number of bytes unchanged by this job.")
  public Integer getUnchangedDataBytes() {
    return unchangedDataBytes;
  }

  public void setUnchangedDataBytes(Integer unchangedDataBytes) {
    this.unchangedDataBytes = unchangedDataBytes;
  }

  public SyncJobExtended upToDateFilesSkipped(Integer upToDateFilesSkipped) {
    this.upToDateFilesSkipped = upToDateFilesSkipped;
    return this;
  }

   /**
   * The number of up-to-date files skipped by this job.
   * @return upToDateFilesSkipped
  **/
  @ApiModelProperty(required = true, value = "The number of up-to-date files skipped by this job.")
  public Integer getUpToDateFilesSkipped() {
    return upToDateFilesSkipped;
  }

  public void setUpToDateFilesSkipped(Integer upToDateFilesSkipped) {
    this.upToDateFilesSkipped = upToDateFilesSkipped;
  }

  public SyncJobExtended updatedFilesReplicated(Integer updatedFilesReplicated) {
    this.updatedFilesReplicated = updatedFilesReplicated;
    return this;
  }

   /**
   * The number of updated files replicated by this job.
   * @return updatedFilesReplicated
  **/
  @ApiModelProperty(required = true, value = "The number of updated files replicated by this job.")
  public Integer getUpdatedFilesReplicated() {
    return updatedFilesReplicated;
  }

  public void setUpdatedFilesReplicated(Integer updatedFilesReplicated) {
    this.updatedFilesReplicated = updatedFilesReplicated;
  }

  public SyncJobExtended userConflictFilesSkipped(Integer userConflictFilesSkipped) {
    this.userConflictFilesSkipped = userConflictFilesSkipped;
    return this;
  }

   /**
   * The number of files with user conflicts skipped by this job.
   * @return userConflictFilesSkipped
  **/
  @ApiModelProperty(required = true, value = "The number of files with user conflicts skipped by this job.")
  public Integer getUserConflictFilesSkipped() {
    return userConflictFilesSkipped;
  }

  public void setUserConflictFilesSkipped(Integer userConflictFilesSkipped) {
    this.userConflictFilesSkipped = userConflictFilesSkipped;
  }

  public SyncJobExtended warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public SyncJobExtended addWarningsItem(String warningsItem) {
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * A list of warning messages for this job.
   * @return warnings
  **/
  @ApiModelProperty(required = true, value = "A list of warning messages for this job.")
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }

  public SyncJobExtended workers(List<SyncJobWorker> workers) {
    this.workers = workers;
    return this;
  }

  public SyncJobExtended addWorkersItem(SyncJobWorker workersItem) {
    this.workers.add(workersItem);
    return this;
  }

   /**
   * A list of workers for this job.
   * @return workers
  **/
  @ApiModelProperty(required = true, value = "A list of workers for this job.")
  public List<SyncJobWorker> getWorkers() {
    return workers;
  }

  public void setWorkers(List<SyncJobWorker> workers) {
    this.workers = workers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncJobExtended syncJobExtended = (SyncJobExtended) o;
    return Objects.equals(this.action, syncJobExtended.action) &&
        Objects.equals(this.adsStreamsReplicated, syncJobExtended.adsStreamsReplicated) &&
        Objects.equals(this.blockSpecsReplicated, syncJobExtended.blockSpecsReplicated) &&
        Objects.equals(this.bytesRecoverable, syncJobExtended.bytesRecoverable) &&
        Objects.equals(this.bytesTransferred, syncJobExtended.bytesTransferred) &&
        Objects.equals(this.charSpecsReplicated, syncJobExtended.charSpecsReplicated) &&
        Objects.equals(this.correctedLins, syncJobExtended.correctedLins) &&
        Objects.equals(this.deadNode, syncJobExtended.deadNode) &&
        Objects.equals(this.directoriesReplicated, syncJobExtended.directoriesReplicated) &&
        Objects.equals(this.dirsChanged, syncJobExtended.dirsChanged) &&
        Objects.equals(this.dirsDeleted, syncJobExtended.dirsDeleted) &&
        Objects.equals(this.dirsMoved, syncJobExtended.dirsMoved) &&
        Objects.equals(this.dirsNew, syncJobExtended.dirsNew) &&
        Objects.equals(this.duration, syncJobExtended.duration) &&
        Objects.equals(this.endTime, syncJobExtended.endTime) &&
        Objects.equals(this.error, syncJobExtended.error) &&
        Objects.equals(this.errorChecksumFilesSkipped, syncJobExtended.errorChecksumFilesSkipped) &&
        Objects.equals(this.errorIoFilesSkipped, syncJobExtended.errorIoFilesSkipped) &&
        Objects.equals(this.errorNetFilesSkipped, syncJobExtended.errorNetFilesSkipped) &&
        Objects.equals(this.errors, syncJobExtended.errors) &&
        Objects.equals(this.failedChunks, syncJobExtended.failedChunks) &&
        Objects.equals(this.fifosReplicated, syncJobExtended.fifosReplicated) &&
        Objects.equals(this.fileDataBytes, syncJobExtended.fileDataBytes) &&
        Objects.equals(this.filesChanged, syncJobExtended.filesChanged) &&
        Objects.equals(this.filesLinked, syncJobExtended.filesLinked) &&
        Objects.equals(this.filesNew, syncJobExtended.filesNew) &&
        Objects.equals(this.filesSelected, syncJobExtended.filesSelected) &&
        Objects.equals(this.filesTransferred, syncJobExtended.filesTransferred) &&
        Objects.equals(this.filesUnlinked, syncJobExtended.filesUnlinked) &&
        Objects.equals(this.filesWithAdsReplicated, syncJobExtended.filesWithAdsReplicated) &&
        Objects.equals(this.flippedLins, syncJobExtended.flippedLins) &&
        Objects.equals(this.hardLinksReplicated, syncJobExtended.hardLinksReplicated) &&
        Objects.equals(this.hashExceptionsFixed, syncJobExtended.hashExceptionsFixed) &&
        Objects.equals(this.hashExceptionsFound, syncJobExtended.hashExceptionsFound) &&
        Objects.equals(this.id, syncJobExtended.id) &&
        Objects.equals(this.jobId, syncJobExtended.jobId) &&
        Objects.equals(this.linsTotal, syncJobExtended.linsTotal) &&
        Objects.equals(this.networkBytesToSource, syncJobExtended.networkBytesToSource) &&
        Objects.equals(this.networkBytesToTarget, syncJobExtended.networkBytesToTarget) &&
        Objects.equals(this.newFilesReplicated, syncJobExtended.newFilesReplicated) &&
        Objects.equals(this.numRetransmittedFiles, syncJobExtended.numRetransmittedFiles) &&
        Objects.equals(this.phases, syncJobExtended.phases) &&
        Objects.equals(this.policy, syncJobExtended.policy) &&
        Objects.equals(this.policyAction, syncJobExtended.policyAction) &&
        Objects.equals(this.policyId, syncJobExtended.policyId) &&
        Objects.equals(this.policyName, syncJobExtended.policyName) &&
        Objects.equals(this.regularFilesReplicated, syncJobExtended.regularFilesReplicated) &&
        Objects.equals(this.resyncedLins, syncJobExtended.resyncedLins) &&
        Objects.equals(this.retransmittedFiles, syncJobExtended.retransmittedFiles) &&
        Objects.equals(this.retry, syncJobExtended.retry) &&
        Objects.equals(this.runningChunks, syncJobExtended.runningChunks) &&
        Objects.equals(this.socketsReplicated, syncJobExtended.socketsReplicated) &&
        Objects.equals(this.sourceBytesRecovered, syncJobExtended.sourceBytesRecovered) &&
        Objects.equals(this.sourceDirectoriesCreated, syncJobExtended.sourceDirectoriesCreated) &&
        Objects.equals(this.sourceDirectoriesDeleted, syncJobExtended.sourceDirectoriesDeleted) &&
        Objects.equals(this.sourceDirectoriesLinked, syncJobExtended.sourceDirectoriesLinked) &&
        Objects.equals(this.sourceDirectoriesUnlinked, syncJobExtended.sourceDirectoriesUnlinked) &&
        Objects.equals(this.sourceDirectoriesVisited, syncJobExtended.sourceDirectoriesVisited) &&
        Objects.equals(this.sourceFilesDeleted, syncJobExtended.sourceFilesDeleted) &&
        Objects.equals(this.sourceFilesLinked, syncJobExtended.sourceFilesLinked) &&
        Objects.equals(this.sourceFilesUnlinked, syncJobExtended.sourceFilesUnlinked) &&
        Objects.equals(this.sparseDataBytes, syncJobExtended.sparseDataBytes) &&
        Objects.equals(this.startTime, syncJobExtended.startTime) &&
        Objects.equals(this.state, syncJobExtended.state) &&
        Objects.equals(this.succeededChunks, syncJobExtended.succeededChunks) &&
        Objects.equals(this.symlinksReplicated, syncJobExtended.symlinksReplicated) &&
        Objects.equals(this.syncType, syncJobExtended.syncType) &&
        Objects.equals(this.targetBytesRecovered, syncJobExtended.targetBytesRecovered) &&
        Objects.equals(this.targetDirectoriesCreated, syncJobExtended.targetDirectoriesCreated) &&
        Objects.equals(this.targetDirectoriesDeleted, syncJobExtended.targetDirectoriesDeleted) &&
        Objects.equals(this.targetDirectoriesLinked, syncJobExtended.targetDirectoriesLinked) &&
        Objects.equals(this.targetDirectoriesUnlinked, syncJobExtended.targetDirectoriesUnlinked) &&
        Objects.equals(this.targetFilesDeleted, syncJobExtended.targetFilesDeleted) &&
        Objects.equals(this.targetFilesLinked, syncJobExtended.targetFilesLinked) &&
        Objects.equals(this.targetFilesUnlinked, syncJobExtended.targetFilesUnlinked) &&
        Objects.equals(this.targetSnapshots, syncJobExtended.targetSnapshots) &&
        Objects.equals(this.totalChunks, syncJobExtended.totalChunks) &&
        Objects.equals(this.totalDataBytes, syncJobExtended.totalDataBytes) &&
        Objects.equals(this.totalFiles, syncJobExtended.totalFiles) &&
        Objects.equals(this.totalNetworkBytes, syncJobExtended.totalNetworkBytes) &&
        Objects.equals(this.totalPhases, syncJobExtended.totalPhases) &&
        Objects.equals(this.unchangedDataBytes, syncJobExtended.unchangedDataBytes) &&
        Objects.equals(this.upToDateFilesSkipped, syncJobExtended.upToDateFilesSkipped) &&
        Objects.equals(this.updatedFilesReplicated, syncJobExtended.updatedFilesReplicated) &&
        Objects.equals(this.userConflictFilesSkipped, syncJobExtended.userConflictFilesSkipped) &&
        Objects.equals(this.warnings, syncJobExtended.warnings) &&
        Objects.equals(this.workers, syncJobExtended.workers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, adsStreamsReplicated, blockSpecsReplicated, bytesRecoverable, bytesTransferred, charSpecsReplicated, correctedLins, deadNode, directoriesReplicated, dirsChanged, dirsDeleted, dirsMoved, dirsNew, duration, endTime, error, errorChecksumFilesSkipped, errorIoFilesSkipped, errorNetFilesSkipped, errors, failedChunks, fifosReplicated, fileDataBytes, filesChanged, filesLinked, filesNew, filesSelected, filesTransferred, filesUnlinked, filesWithAdsReplicated, flippedLins, hardLinksReplicated, hashExceptionsFixed, hashExceptionsFound, id, jobId, linsTotal, networkBytesToSource, networkBytesToTarget, newFilesReplicated, numRetransmittedFiles, phases, policy, policyAction, policyId, policyName, regularFilesReplicated, resyncedLins, retransmittedFiles, retry, runningChunks, socketsReplicated, sourceBytesRecovered, sourceDirectoriesCreated, sourceDirectoriesDeleted, sourceDirectoriesLinked, sourceDirectoriesUnlinked, sourceDirectoriesVisited, sourceFilesDeleted, sourceFilesLinked, sourceFilesUnlinked, sparseDataBytes, startTime, state, succeededChunks, symlinksReplicated, syncType, targetBytesRecovered, targetDirectoriesCreated, targetDirectoriesDeleted, targetDirectoriesLinked, targetDirectoriesUnlinked, targetFilesDeleted, targetFilesLinked, targetFilesUnlinked, targetSnapshots, totalChunks, totalDataBytes, totalFiles, totalNetworkBytes, totalPhases, unchangedDataBytes, upToDateFilesSkipped, updatedFilesReplicated, userConflictFilesSkipped, warnings, workers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncJobExtended {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    adsStreamsReplicated: ").append(toIndentedString(adsStreamsReplicated)).append("\n");
    sb.append("    blockSpecsReplicated: ").append(toIndentedString(blockSpecsReplicated)).append("\n");
    sb.append("    bytesRecoverable: ").append(toIndentedString(bytesRecoverable)).append("\n");
    sb.append("    bytesTransferred: ").append(toIndentedString(bytesTransferred)).append("\n");
    sb.append("    charSpecsReplicated: ").append(toIndentedString(charSpecsReplicated)).append("\n");
    sb.append("    correctedLins: ").append(toIndentedString(correctedLins)).append("\n");
    sb.append("    deadNode: ").append(toIndentedString(deadNode)).append("\n");
    sb.append("    directoriesReplicated: ").append(toIndentedString(directoriesReplicated)).append("\n");
    sb.append("    dirsChanged: ").append(toIndentedString(dirsChanged)).append("\n");
    sb.append("    dirsDeleted: ").append(toIndentedString(dirsDeleted)).append("\n");
    sb.append("    dirsMoved: ").append(toIndentedString(dirsMoved)).append("\n");
    sb.append("    dirsNew: ").append(toIndentedString(dirsNew)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errorChecksumFilesSkipped: ").append(toIndentedString(errorChecksumFilesSkipped)).append("\n");
    sb.append("    errorIoFilesSkipped: ").append(toIndentedString(errorIoFilesSkipped)).append("\n");
    sb.append("    errorNetFilesSkipped: ").append(toIndentedString(errorNetFilesSkipped)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    failedChunks: ").append(toIndentedString(failedChunks)).append("\n");
    sb.append("    fifosReplicated: ").append(toIndentedString(fifosReplicated)).append("\n");
    sb.append("    fileDataBytes: ").append(toIndentedString(fileDataBytes)).append("\n");
    sb.append("    filesChanged: ").append(toIndentedString(filesChanged)).append("\n");
    sb.append("    filesLinked: ").append(toIndentedString(filesLinked)).append("\n");
    sb.append("    filesNew: ").append(toIndentedString(filesNew)).append("\n");
    sb.append("    filesSelected: ").append(toIndentedString(filesSelected)).append("\n");
    sb.append("    filesTransferred: ").append(toIndentedString(filesTransferred)).append("\n");
    sb.append("    filesUnlinked: ").append(toIndentedString(filesUnlinked)).append("\n");
    sb.append("    filesWithAdsReplicated: ").append(toIndentedString(filesWithAdsReplicated)).append("\n");
    sb.append("    flippedLins: ").append(toIndentedString(flippedLins)).append("\n");
    sb.append("    hardLinksReplicated: ").append(toIndentedString(hardLinksReplicated)).append("\n");
    sb.append("    hashExceptionsFixed: ").append(toIndentedString(hashExceptionsFixed)).append("\n");
    sb.append("    hashExceptionsFound: ").append(toIndentedString(hashExceptionsFound)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    linsTotal: ").append(toIndentedString(linsTotal)).append("\n");
    sb.append("    networkBytesToSource: ").append(toIndentedString(networkBytesToSource)).append("\n");
    sb.append("    networkBytesToTarget: ").append(toIndentedString(networkBytesToTarget)).append("\n");
    sb.append("    newFilesReplicated: ").append(toIndentedString(newFilesReplicated)).append("\n");
    sb.append("    numRetransmittedFiles: ").append(toIndentedString(numRetransmittedFiles)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    policyAction: ").append(toIndentedString(policyAction)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    regularFilesReplicated: ").append(toIndentedString(regularFilesReplicated)).append("\n");
    sb.append("    resyncedLins: ").append(toIndentedString(resyncedLins)).append("\n");
    sb.append("    retransmittedFiles: ").append(toIndentedString(retransmittedFiles)).append("\n");
    sb.append("    retry: ").append(toIndentedString(retry)).append("\n");
    sb.append("    runningChunks: ").append(toIndentedString(runningChunks)).append("\n");
    sb.append("    socketsReplicated: ").append(toIndentedString(socketsReplicated)).append("\n");
    sb.append("    sourceBytesRecovered: ").append(toIndentedString(sourceBytesRecovered)).append("\n");
    sb.append("    sourceDirectoriesCreated: ").append(toIndentedString(sourceDirectoriesCreated)).append("\n");
    sb.append("    sourceDirectoriesDeleted: ").append(toIndentedString(sourceDirectoriesDeleted)).append("\n");
    sb.append("    sourceDirectoriesLinked: ").append(toIndentedString(sourceDirectoriesLinked)).append("\n");
    sb.append("    sourceDirectoriesUnlinked: ").append(toIndentedString(sourceDirectoriesUnlinked)).append("\n");
    sb.append("    sourceDirectoriesVisited: ").append(toIndentedString(sourceDirectoriesVisited)).append("\n");
    sb.append("    sourceFilesDeleted: ").append(toIndentedString(sourceFilesDeleted)).append("\n");
    sb.append("    sourceFilesLinked: ").append(toIndentedString(sourceFilesLinked)).append("\n");
    sb.append("    sourceFilesUnlinked: ").append(toIndentedString(sourceFilesUnlinked)).append("\n");
    sb.append("    sparseDataBytes: ").append(toIndentedString(sparseDataBytes)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    succeededChunks: ").append(toIndentedString(succeededChunks)).append("\n");
    sb.append("    symlinksReplicated: ").append(toIndentedString(symlinksReplicated)).append("\n");
    sb.append("    syncType: ").append(toIndentedString(syncType)).append("\n");
    sb.append("    targetBytesRecovered: ").append(toIndentedString(targetBytesRecovered)).append("\n");
    sb.append("    targetDirectoriesCreated: ").append(toIndentedString(targetDirectoriesCreated)).append("\n");
    sb.append("    targetDirectoriesDeleted: ").append(toIndentedString(targetDirectoriesDeleted)).append("\n");
    sb.append("    targetDirectoriesLinked: ").append(toIndentedString(targetDirectoriesLinked)).append("\n");
    sb.append("    targetDirectoriesUnlinked: ").append(toIndentedString(targetDirectoriesUnlinked)).append("\n");
    sb.append("    targetFilesDeleted: ").append(toIndentedString(targetFilesDeleted)).append("\n");
    sb.append("    targetFilesLinked: ").append(toIndentedString(targetFilesLinked)).append("\n");
    sb.append("    targetFilesUnlinked: ").append(toIndentedString(targetFilesUnlinked)).append("\n");
    sb.append("    targetSnapshots: ").append(toIndentedString(targetSnapshots)).append("\n");
    sb.append("    totalChunks: ").append(toIndentedString(totalChunks)).append("\n");
    sb.append("    totalDataBytes: ").append(toIndentedString(totalDataBytes)).append("\n");
    sb.append("    totalFiles: ").append(toIndentedString(totalFiles)).append("\n");
    sb.append("    totalNetworkBytes: ").append(toIndentedString(totalNetworkBytes)).append("\n");
    sb.append("    totalPhases: ").append(toIndentedString(totalPhases)).append("\n");
    sb.append("    unchangedDataBytes: ").append(toIndentedString(unchangedDataBytes)).append("\n");
    sb.append("    upToDateFilesSkipped: ").append(toIndentedString(upToDateFilesSkipped)).append("\n");
    sb.append("    updatedFilesReplicated: ").append(toIndentedString(updatedFilesReplicated)).append("\n");
    sb.append("    userConflictFilesSkipped: ").append(toIndentedString(userConflictFilesSkipped)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("    workers: ").append(toIndentedString(workers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

