/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SmbSettingsShareExtended
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class SmbSettingsShareExtended {
  @SerializedName("access_based_enumeration")
  private Boolean accessBasedEnumeration = null;

  @SerializedName("access_based_enumeration_root_only")
  private Boolean accessBasedEnumerationRootOnly = null;

  @SerializedName("allow_delete_readonly")
  private Boolean allowDeleteReadonly = null;

  @SerializedName("allow_execute_always")
  private Boolean allowExecuteAlways = null;

  @SerializedName("ca_timeout")
  private Integer caTimeout = null;

  @SerializedName("ca_write_integrity")
  private String caWriteIntegrity = null;

  @SerializedName("change_notify")
  private String changeNotify = null;

  @SerializedName("create_permissions")
  private String createPermissions = null;

  @SerializedName("csc_policy")
  private String cscPolicy = null;

  @SerializedName("directory_create_mask")
  private Integer directoryCreateMask = null;

  @SerializedName("directory_create_mode")
  private Integer directoryCreateMode = null;

  @SerializedName("file_create_mask")
  private Integer fileCreateMask = null;

  @SerializedName("file_create_mode")
  private Integer fileCreateMode = null;

  @SerializedName("file_filter_extensions")
  private List<String> fileFilterExtensions = null;

  @SerializedName("file_filter_type")
  private String fileFilterType = null;

  @SerializedName("file_filtering_enabled")
  private Boolean fileFilteringEnabled = null;

  @SerializedName("hide_dot_files")
  private Boolean hideDotFiles = null;

  @SerializedName("host_acl")
  private List<String> hostAcl = null;

  @SerializedName("impersonate_guest")
  private String impersonateGuest = null;

  @SerializedName("impersonate_user")
  private String impersonateUser = null;

  @SerializedName("mangle_byte_start")
  private Integer mangleByteStart = null;

  @SerializedName("mangle_map")
  private List<String> mangleMap = null;

  @SerializedName("ntfs_acl_support")
  private Boolean ntfsAclSupport = null;

  @SerializedName("oplocks")
  private Boolean oplocks = null;

  @SerializedName("strict_ca_lockout")
  private Boolean strictCaLockout = null;

  @SerializedName("strict_flush")
  private Boolean strictFlush = null;

  @SerializedName("strict_locking")
  private Boolean strictLocking = null;

  @SerializedName("zone")
  private String zone = null;

  public SmbSettingsShareExtended accessBasedEnumeration(Boolean accessBasedEnumeration) {
    this.accessBasedEnumeration = accessBasedEnumeration;
    return this;
  }

   /**
   * Only enumerate files and folders the requesting user has access to.
   * @return accessBasedEnumeration
  **/
  @ApiModelProperty(value = "Only enumerate files and folders the requesting user has access to.")
  public Boolean isAccessBasedEnumeration() {
    return accessBasedEnumeration;
  }

  public void setAccessBasedEnumeration(Boolean accessBasedEnumeration) {
    this.accessBasedEnumeration = accessBasedEnumeration;
  }

  public SmbSettingsShareExtended accessBasedEnumerationRootOnly(Boolean accessBasedEnumerationRootOnly) {
    this.accessBasedEnumerationRootOnly = accessBasedEnumerationRootOnly;
    return this;
  }

   /**
   * Access-based enumeration on only the root directory of the share.
   * @return accessBasedEnumerationRootOnly
  **/
  @ApiModelProperty(value = "Access-based enumeration on only the root directory of the share.")
  public Boolean isAccessBasedEnumerationRootOnly() {
    return accessBasedEnumerationRootOnly;
  }

  public void setAccessBasedEnumerationRootOnly(Boolean accessBasedEnumerationRootOnly) {
    this.accessBasedEnumerationRootOnly = accessBasedEnumerationRootOnly;
  }

  public SmbSettingsShareExtended allowDeleteReadonly(Boolean allowDeleteReadonly) {
    this.allowDeleteReadonly = allowDeleteReadonly;
    return this;
  }

   /**
   * Allow deletion of read-only files in the share.
   * @return allowDeleteReadonly
  **/
  @ApiModelProperty(value = "Allow deletion of read-only files in the share.")
  public Boolean isAllowDeleteReadonly() {
    return allowDeleteReadonly;
  }

  public void setAllowDeleteReadonly(Boolean allowDeleteReadonly) {
    this.allowDeleteReadonly = allowDeleteReadonly;
  }

  public SmbSettingsShareExtended allowExecuteAlways(Boolean allowExecuteAlways) {
    this.allowExecuteAlways = allowExecuteAlways;
    return this;
  }

   /**
   * Allows users to execute files they have read rights for.
   * @return allowExecuteAlways
  **/
  @ApiModelProperty(value = "Allows users to execute files they have read rights for.")
  public Boolean isAllowExecuteAlways() {
    return allowExecuteAlways;
  }

  public void setAllowExecuteAlways(Boolean allowExecuteAlways) {
    this.allowExecuteAlways = allowExecuteAlways;
  }

  public SmbSettingsShareExtended caTimeout(Integer caTimeout) {
    this.caTimeout = caTimeout;
    return this;
  }

   /**
   * Persistent open timeout for the share.
   * minimum: 2
   * @return caTimeout
  **/
  @ApiModelProperty(value = "Persistent open timeout for the share.")
  public Integer getCaTimeout() {
    return caTimeout;
  }

  public void setCaTimeout(Integer caTimeout) {
    this.caTimeout = caTimeout;
  }

  public SmbSettingsShareExtended caWriteIntegrity(String caWriteIntegrity) {
    this.caWriteIntegrity = caWriteIntegrity;
    return this;
  }

   /**
   * Specify the level of write-integrity on continuously available shares.
   * @return caWriteIntegrity
  **/
  @ApiModelProperty(value = "Specify the level of write-integrity on continuously available shares.")
  public String getCaWriteIntegrity() {
    return caWriteIntegrity;
  }

  public void setCaWriteIntegrity(String caWriteIntegrity) {
    this.caWriteIntegrity = caWriteIntegrity;
  }

  public SmbSettingsShareExtended changeNotify(String changeNotify) {
    this.changeNotify = changeNotify;
    return this;
  }

   /**
   * Specify level of change notification alerts on the share.
   * @return changeNotify
  **/
  @ApiModelProperty(value = "Specify level of change notification alerts on the share.")
  public String getChangeNotify() {
    return changeNotify;
  }

  public void setChangeNotify(String changeNotify) {
    this.changeNotify = changeNotify;
  }

  public SmbSettingsShareExtended createPermissions(String createPermissions) {
    this.createPermissions = createPermissions;
    return this;
  }

   /**
   * Set the create permissions for new files and directories in share.
   * @return createPermissions
  **/
  @ApiModelProperty(value = "Set the create permissions for new files and directories in share.")
  public String getCreatePermissions() {
    return createPermissions;
  }

  public void setCreatePermissions(String createPermissions) {
    this.createPermissions = createPermissions;
  }

  public SmbSettingsShareExtended cscPolicy(String cscPolicy) {
    this.cscPolicy = cscPolicy;
    return this;
  }

   /**
   * Client-side caching policy for the shares.
   * @return cscPolicy
  **/
  @ApiModelProperty(value = "Client-side caching policy for the shares.")
  public String getCscPolicy() {
    return cscPolicy;
  }

  public void setCscPolicy(String cscPolicy) {
    this.cscPolicy = cscPolicy;
  }

  public SmbSettingsShareExtended directoryCreateMask(Integer directoryCreateMask) {
    this.directoryCreateMask = directoryCreateMask;
    return this;
  }

   /**
   * Unix umask or mode bits.
   * minimum: 0
   * maximum: 511
   * @return directoryCreateMask
  **/
  @ApiModelProperty(value = "Unix umask or mode bits.")
  public Integer getDirectoryCreateMask() {
    return directoryCreateMask;
  }

  public void setDirectoryCreateMask(Integer directoryCreateMask) {
    this.directoryCreateMask = directoryCreateMask;
  }

  public SmbSettingsShareExtended directoryCreateMode(Integer directoryCreateMode) {
    this.directoryCreateMode = directoryCreateMode;
    return this;
  }

   /**
   * Unix umask or mode bits.
   * minimum: 0
   * maximum: 511
   * @return directoryCreateMode
  **/
  @ApiModelProperty(value = "Unix umask or mode bits.")
  public Integer getDirectoryCreateMode() {
    return directoryCreateMode;
  }

  public void setDirectoryCreateMode(Integer directoryCreateMode) {
    this.directoryCreateMode = directoryCreateMode;
  }

  public SmbSettingsShareExtended fileCreateMask(Integer fileCreateMask) {
    this.fileCreateMask = fileCreateMask;
    return this;
  }

   /**
   * Unix umask or mode bits.
   * minimum: 0
   * maximum: 511
   * @return fileCreateMask
  **/
  @ApiModelProperty(value = "Unix umask or mode bits.")
  public Integer getFileCreateMask() {
    return fileCreateMask;
  }

  public void setFileCreateMask(Integer fileCreateMask) {
    this.fileCreateMask = fileCreateMask;
  }

  public SmbSettingsShareExtended fileCreateMode(Integer fileCreateMode) {
    this.fileCreateMode = fileCreateMode;
    return this;
  }

   /**
   * Unix umask or mode bits.
   * minimum: 0
   * maximum: 511
   * @return fileCreateMode
  **/
  @ApiModelProperty(value = "Unix umask or mode bits.")
  public Integer getFileCreateMode() {
    return fileCreateMode;
  }

  public void setFileCreateMode(Integer fileCreateMode) {
    this.fileCreateMode = fileCreateMode;
  }

  public SmbSettingsShareExtended fileFilterExtensions(List<String> fileFilterExtensions) {
    this.fileFilterExtensions = fileFilterExtensions;
    return this;
  }

  public SmbSettingsShareExtended addFileFilterExtensionsItem(String fileFilterExtensionsItem) {
    if (this.fileFilterExtensions == null) {
      this.fileFilterExtensions = new ArrayList<String>();
    }
    this.fileFilterExtensions.add(fileFilterExtensionsItem);
    return this;
  }

   /**
   * Specifies the list of file extensions.
   * @return fileFilterExtensions
  **/
  @ApiModelProperty(value = "Specifies the list of file extensions.")
  public List<String> getFileFilterExtensions() {
    return fileFilterExtensions;
  }

  public void setFileFilterExtensions(List<String> fileFilterExtensions) {
    this.fileFilterExtensions = fileFilterExtensions;
  }

  public SmbSettingsShareExtended fileFilterType(String fileFilterType) {
    this.fileFilterType = fileFilterType;
    return this;
  }

   /**
   * Specifies if filter list is for deny or allow. Default is deny.
   * @return fileFilterType
  **/
  @ApiModelProperty(value = "Specifies if filter list is for deny or allow. Default is deny.")
  public String getFileFilterType() {
    return fileFilterType;
  }

  public void setFileFilterType(String fileFilterType) {
    this.fileFilterType = fileFilterType;
  }

  public SmbSettingsShareExtended fileFilteringEnabled(Boolean fileFilteringEnabled) {
    this.fileFilteringEnabled = fileFilteringEnabled;
    return this;
  }

   /**
   * Enables file filtering on the share.
   * @return fileFilteringEnabled
  **/
  @ApiModelProperty(value = "Enables file filtering on the share.")
  public Boolean isFileFilteringEnabled() {
    return fileFilteringEnabled;
  }

  public void setFileFilteringEnabled(Boolean fileFilteringEnabled) {
    this.fileFilteringEnabled = fileFilteringEnabled;
  }

  public SmbSettingsShareExtended hideDotFiles(Boolean hideDotFiles) {
    this.hideDotFiles = hideDotFiles;
    return this;
  }

   /**
   * Hide files and directories that begin with a period &#39;.&#39;.
   * @return hideDotFiles
  **/
  @ApiModelProperty(value = "Hide files and directories that begin with a period '.'.")
  public Boolean isHideDotFiles() {
    return hideDotFiles;
  }

  public void setHideDotFiles(Boolean hideDotFiles) {
    this.hideDotFiles = hideDotFiles;
  }

  public SmbSettingsShareExtended hostAcl(List<String> hostAcl) {
    this.hostAcl = hostAcl;
    return this;
  }

  public SmbSettingsShareExtended addHostAclItem(String hostAclItem) {
    if (this.hostAcl == null) {
      this.hostAcl = new ArrayList<String>();
    }
    this.hostAcl.add(hostAclItem);
    return this;
  }

   /**
   * An ACL expressing which hosts are allowed access. A deny clause must be the final entry.
   * @return hostAcl
  **/
  @ApiModelProperty(value = "An ACL expressing which hosts are allowed access. A deny clause must be the final entry.")
  public List<String> getHostAcl() {
    return hostAcl;
  }

  public void setHostAcl(List<String> hostAcl) {
    this.hostAcl = hostAcl;
  }

  public SmbSettingsShareExtended impersonateGuest(String impersonateGuest) {
    this.impersonateGuest = impersonateGuest;
    return this;
  }

   /**
   * Specify the condition in which user access is done as the guest account.
   * @return impersonateGuest
  **/
  @ApiModelProperty(value = "Specify the condition in which user access is done as the guest account.")
  public String getImpersonateGuest() {
    return impersonateGuest;
  }

  public void setImpersonateGuest(String impersonateGuest) {
    this.impersonateGuest = impersonateGuest;
  }

  public SmbSettingsShareExtended impersonateUser(String impersonateUser) {
    this.impersonateUser = impersonateUser;
    return this;
  }

   /**
   * User account to be used as guest account.
   * @return impersonateUser
  **/
  @ApiModelProperty(value = "User account to be used as guest account.")
  public String getImpersonateUser() {
    return impersonateUser;
  }

  public void setImpersonateUser(String impersonateUser) {
    this.impersonateUser = impersonateUser;
  }

  public SmbSettingsShareExtended mangleByteStart(Integer mangleByteStart) {
    this.mangleByteStart = mangleByteStart;
    return this;
  }

   /**
   * Specifies the wchar_t starting point for automatic byte mangling.
   * minimum: 256
   * maximum: 65535
   * @return mangleByteStart
  **/
  @ApiModelProperty(value = "Specifies the wchar_t starting point for automatic byte mangling.")
  public Integer getMangleByteStart() {
    return mangleByteStart;
  }

  public void setMangleByteStart(Integer mangleByteStart) {
    this.mangleByteStart = mangleByteStart;
  }

  public SmbSettingsShareExtended mangleMap(List<String> mangleMap) {
    this.mangleMap = mangleMap;
    return this;
  }

  public SmbSettingsShareExtended addMangleMapItem(String mangleMapItem) {
    if (this.mangleMap == null) {
      this.mangleMap = new ArrayList<String>();
    }
    this.mangleMap.add(mangleMapItem);
    return this;
  }

   /**
   * Character mangle map.
   * @return mangleMap
  **/
  @ApiModelProperty(value = "Character mangle map.")
  public List<String> getMangleMap() {
    return mangleMap;
  }

  public void setMangleMap(List<String> mangleMap) {
    this.mangleMap = mangleMap;
  }

  public SmbSettingsShareExtended ntfsAclSupport(Boolean ntfsAclSupport) {
    this.ntfsAclSupport = ntfsAclSupport;
    return this;
  }

   /**
   * Support NTFS ACLs on files and directories.
   * @return ntfsAclSupport
  **/
  @ApiModelProperty(value = "Support NTFS ACLs on files and directories.")
  public Boolean isNtfsAclSupport() {
    return ntfsAclSupport;
  }

  public void setNtfsAclSupport(Boolean ntfsAclSupport) {
    this.ntfsAclSupport = ntfsAclSupport;
  }

  public SmbSettingsShareExtended oplocks(Boolean oplocks) {
    this.oplocks = oplocks;
    return this;
  }

   /**
   * Allow oplock requests.
   * @return oplocks
  **/
  @ApiModelProperty(value = "Allow oplock requests.")
  public Boolean isOplocks() {
    return oplocks;
  }

  public void setOplocks(Boolean oplocks) {
    this.oplocks = oplocks;
  }

  public SmbSettingsShareExtended strictCaLockout(Boolean strictCaLockout) {
    this.strictCaLockout = strictCaLockout;
    return this;
  }

   /**
   * Specifies if persistent opens would do strict lockout on the share.
   * @return strictCaLockout
  **/
  @ApiModelProperty(value = "Specifies if persistent opens would do strict lockout on the share.")
  public Boolean isStrictCaLockout() {
    return strictCaLockout;
  }

  public void setStrictCaLockout(Boolean strictCaLockout) {
    this.strictCaLockout = strictCaLockout;
  }

  public SmbSettingsShareExtended strictFlush(Boolean strictFlush) {
    this.strictFlush = strictFlush;
    return this;
  }

   /**
   * Handle SMB flush operations.
   * @return strictFlush
  **/
  @ApiModelProperty(value = "Handle SMB flush operations.")
  public Boolean isStrictFlush() {
    return strictFlush;
  }

  public void setStrictFlush(Boolean strictFlush) {
    this.strictFlush = strictFlush;
  }

  public SmbSettingsShareExtended strictLocking(Boolean strictLocking) {
    this.strictLocking = strictLocking;
    return this;
  }

   /**
   * Specifies whether byte range locks contend against SMB I/O.
   * @return strictLocking
  **/
  @ApiModelProperty(value = "Specifies whether byte range locks contend against SMB I/O.")
  public Boolean isStrictLocking() {
    return strictLocking;
  }

  public void setStrictLocking(Boolean strictLocking) {
    this.strictLocking = strictLocking;
  }

  public SmbSettingsShareExtended zone(String zone) {
    this.zone = zone;
    return this;
  }

   /**
   * Name of the access zone in which to update settings
   * @return zone
  **/
  @ApiModelProperty(value = "Name of the access zone in which to update settings")
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmbSettingsShareExtended smbSettingsShareExtended = (SmbSettingsShareExtended) o;
    return Objects.equals(this.accessBasedEnumeration, smbSettingsShareExtended.accessBasedEnumeration) &&
        Objects.equals(this.accessBasedEnumerationRootOnly, smbSettingsShareExtended.accessBasedEnumerationRootOnly) &&
        Objects.equals(this.allowDeleteReadonly, smbSettingsShareExtended.allowDeleteReadonly) &&
        Objects.equals(this.allowExecuteAlways, smbSettingsShareExtended.allowExecuteAlways) &&
        Objects.equals(this.caTimeout, smbSettingsShareExtended.caTimeout) &&
        Objects.equals(this.caWriteIntegrity, smbSettingsShareExtended.caWriteIntegrity) &&
        Objects.equals(this.changeNotify, smbSettingsShareExtended.changeNotify) &&
        Objects.equals(this.createPermissions, smbSettingsShareExtended.createPermissions) &&
        Objects.equals(this.cscPolicy, smbSettingsShareExtended.cscPolicy) &&
        Objects.equals(this.directoryCreateMask, smbSettingsShareExtended.directoryCreateMask) &&
        Objects.equals(this.directoryCreateMode, smbSettingsShareExtended.directoryCreateMode) &&
        Objects.equals(this.fileCreateMask, smbSettingsShareExtended.fileCreateMask) &&
        Objects.equals(this.fileCreateMode, smbSettingsShareExtended.fileCreateMode) &&
        Objects.equals(this.fileFilterExtensions, smbSettingsShareExtended.fileFilterExtensions) &&
        Objects.equals(this.fileFilterType, smbSettingsShareExtended.fileFilterType) &&
        Objects.equals(this.fileFilteringEnabled, smbSettingsShareExtended.fileFilteringEnabled) &&
        Objects.equals(this.hideDotFiles, smbSettingsShareExtended.hideDotFiles) &&
        Objects.equals(this.hostAcl, smbSettingsShareExtended.hostAcl) &&
        Objects.equals(this.impersonateGuest, smbSettingsShareExtended.impersonateGuest) &&
        Objects.equals(this.impersonateUser, smbSettingsShareExtended.impersonateUser) &&
        Objects.equals(this.mangleByteStart, smbSettingsShareExtended.mangleByteStart) &&
        Objects.equals(this.mangleMap, smbSettingsShareExtended.mangleMap) &&
        Objects.equals(this.ntfsAclSupport, smbSettingsShareExtended.ntfsAclSupport) &&
        Objects.equals(this.oplocks, smbSettingsShareExtended.oplocks) &&
        Objects.equals(this.strictCaLockout, smbSettingsShareExtended.strictCaLockout) &&
        Objects.equals(this.strictFlush, smbSettingsShareExtended.strictFlush) &&
        Objects.equals(this.strictLocking, smbSettingsShareExtended.strictLocking) &&
        Objects.equals(this.zone, smbSettingsShareExtended.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessBasedEnumeration, accessBasedEnumerationRootOnly, allowDeleteReadonly, allowExecuteAlways, caTimeout, caWriteIntegrity, changeNotify, createPermissions, cscPolicy, directoryCreateMask, directoryCreateMode, fileCreateMask, fileCreateMode, fileFilterExtensions, fileFilterType, fileFilteringEnabled, hideDotFiles, hostAcl, impersonateGuest, impersonateUser, mangleByteStart, mangleMap, ntfsAclSupport, oplocks, strictCaLockout, strictFlush, strictLocking, zone);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmbSettingsShareExtended {\n");
    
    sb.append("    accessBasedEnumeration: ").append(toIndentedString(accessBasedEnumeration)).append("\n");
    sb.append("    accessBasedEnumerationRootOnly: ").append(toIndentedString(accessBasedEnumerationRootOnly)).append("\n");
    sb.append("    allowDeleteReadonly: ").append(toIndentedString(allowDeleteReadonly)).append("\n");
    sb.append("    allowExecuteAlways: ").append(toIndentedString(allowExecuteAlways)).append("\n");
    sb.append("    caTimeout: ").append(toIndentedString(caTimeout)).append("\n");
    sb.append("    caWriteIntegrity: ").append(toIndentedString(caWriteIntegrity)).append("\n");
    sb.append("    changeNotify: ").append(toIndentedString(changeNotify)).append("\n");
    sb.append("    createPermissions: ").append(toIndentedString(createPermissions)).append("\n");
    sb.append("    cscPolicy: ").append(toIndentedString(cscPolicy)).append("\n");
    sb.append("    directoryCreateMask: ").append(toIndentedString(directoryCreateMask)).append("\n");
    sb.append("    directoryCreateMode: ").append(toIndentedString(directoryCreateMode)).append("\n");
    sb.append("    fileCreateMask: ").append(toIndentedString(fileCreateMask)).append("\n");
    sb.append("    fileCreateMode: ").append(toIndentedString(fileCreateMode)).append("\n");
    sb.append("    fileFilterExtensions: ").append(toIndentedString(fileFilterExtensions)).append("\n");
    sb.append("    fileFilterType: ").append(toIndentedString(fileFilterType)).append("\n");
    sb.append("    fileFilteringEnabled: ").append(toIndentedString(fileFilteringEnabled)).append("\n");
    sb.append("    hideDotFiles: ").append(toIndentedString(hideDotFiles)).append("\n");
    sb.append("    hostAcl: ").append(toIndentedString(hostAcl)).append("\n");
    sb.append("    impersonateGuest: ").append(toIndentedString(impersonateGuest)).append("\n");
    sb.append("    impersonateUser: ").append(toIndentedString(impersonateUser)).append("\n");
    sb.append("    mangleByteStart: ").append(toIndentedString(mangleByteStart)).append("\n");
    sb.append("    mangleMap: ").append(toIndentedString(mangleMap)).append("\n");
    sb.append("    ntfsAclSupport: ").append(toIndentedString(ntfsAclSupport)).append("\n");
    sb.append("    oplocks: ").append(toIndentedString(oplocks)).append("\n");
    sb.append("    strictCaLockout: ").append(toIndentedString(strictCaLockout)).append("\n");
    sb.append("    strictFlush: ").append(toIndentedString(strictFlush)).append("\n");
    sb.append("    strictLocking: ").append(toIndentedString(strictLocking)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

