/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.NodeDriveconfigNodeAlert;
import io.swagger.client.model.NodeDriveconfigNodeAllow;
import io.swagger.client.model.NodeDriveconfigNodeAutomaticReplacementRecognition;
import io.swagger.client.model.NodeDriveconfigNodeLog;
import io.swagger.client.model.NodeDriveconfigNodeReboot;
import io.swagger.client.model.NodeDriveconfigNodeSpinWait;
import io.swagger.client.model.NodeDriveconfigNodeStall;
import java.io.IOException;

/**
 * NodeDriveconfigNode
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T09:38:03.973-07:00")
public class NodeDriveconfigNode {
  @SerializedName("alert")
  private NodeDriveconfigNodeAlert alert = null;

  @SerializedName("allow")
  private NodeDriveconfigNodeAllow allow = null;

  @SerializedName("automatic_replacement_recognition")
  private NodeDriveconfigNodeAutomaticReplacementRecognition automaticReplacementRecognition = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("lnn")
  private Integer lnn = null;

  @SerializedName("log")
  private NodeDriveconfigNodeLog log = null;

  @SerializedName("reboot")
  private NodeDriveconfigNodeReboot reboot = null;

  @SerializedName("spin_wait")
  private NodeDriveconfigNodeSpinWait spinWait = null;

  @SerializedName("stall")
  private NodeDriveconfigNodeStall stall = null;

  public NodeDriveconfigNode alert(NodeDriveconfigNodeAlert alert) {
    this.alert = alert;
    return this;
  }

   /**
   * Configuration setting for drive alerts.
   * @return alert
  **/
  @ApiModelProperty(value = "Configuration setting for drive alerts.")
  public NodeDriveconfigNodeAlert getAlert() {
    return alert;
  }

  public void setAlert(NodeDriveconfigNodeAlert alert) {
    this.alert = alert;
  }

  public NodeDriveconfigNode allow(NodeDriveconfigNodeAllow allow) {
    this.allow = allow;
    return this;
  }

   /**
   * Configuration settings for drive formatting.
   * @return allow
  **/
  @ApiModelProperty(value = "Configuration settings for drive formatting.")
  public NodeDriveconfigNodeAllow getAllow() {
    return allow;
  }

  public void setAllow(NodeDriveconfigNodeAllow allow) {
    this.allow = allow;
  }

  public NodeDriveconfigNode automaticReplacementRecognition(NodeDriveconfigNodeAutomaticReplacementRecognition automaticReplacementRecognition) {
    this.automaticReplacementRecognition = automaticReplacementRecognition;
    return this;
  }

   /**
   * Configuration settings for automatic replacement recognition (ARR).
   * @return automaticReplacementRecognition
  **/
  @ApiModelProperty(value = "Configuration settings for automatic replacement recognition (ARR).")
  public NodeDriveconfigNodeAutomaticReplacementRecognition getAutomaticReplacementRecognition() {
    return automaticReplacementRecognition;
  }

  public void setAutomaticReplacementRecognition(NodeDriveconfigNodeAutomaticReplacementRecognition automaticReplacementRecognition) {
    this.automaticReplacementRecognition = automaticReplacementRecognition;
  }

  public NodeDriveconfigNode id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Node ID (Device Number) of this node.
   * @return id
  **/
  @ApiModelProperty(value = "Node ID (Device Number) of this node.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public NodeDriveconfigNode lnn(Integer lnn) {
    this.lnn = lnn;
    return this;
  }

   /**
   * Logical Node Number (LNN) of this node.
   * @return lnn
  **/
  @ApiModelProperty(value = "Logical Node Number (LNN) of this node.")
  public Integer getLnn() {
    return lnn;
  }

  public void setLnn(Integer lnn) {
    this.lnn = lnn;
  }

  public NodeDriveconfigNode log(NodeDriveconfigNodeLog log) {
    this.log = log;
    return this;
  }

   /**
   * Configuration settings for drive statistics logs.
   * @return log
  **/
  @ApiModelProperty(value = "Configuration settings for drive statistics logs.")
  public NodeDriveconfigNodeLog getLog() {
    return log;
  }

  public void setLog(NodeDriveconfigNodeLog log) {
    this.log = log;
  }

  public NodeDriveconfigNode reboot(NodeDriveconfigNodeReboot reboot) {
    this.reboot = reboot;
    return this;
  }

   /**
   * Configuration settings for a node reboot due to a drive error.
   * @return reboot
  **/
  @ApiModelProperty(value = "Configuration settings for a node reboot due to a drive error.")
  public NodeDriveconfigNodeReboot getReboot() {
    return reboot;
  }

  public void setReboot(NodeDriveconfigNodeReboot reboot) {
    this.reboot = reboot;
  }

  public NodeDriveconfigNode spinWait(NodeDriveconfigNodeSpinWait spinWait) {
    this.spinWait = spinWait;
    return this;
  }

   /**
   * Configuration settings for sleeping the drive daemon before node is rescanned.
   * @return spinWait
  **/
  @ApiModelProperty(value = "Configuration settings for sleeping the drive daemon before node is rescanned.")
  public NodeDriveconfigNodeSpinWait getSpinWait() {
    return spinWait;
  }

  public void setSpinWait(NodeDriveconfigNodeSpinWait spinWait) {
    this.spinWait = spinWait;
  }

  public NodeDriveconfigNode stall(NodeDriveconfigNodeStall stall) {
    this.stall = stall;
    return this;
  }

   /**
   * Configuration settings to evaluate a drive stall.
   * @return stall
  **/
  @ApiModelProperty(value = "Configuration settings to evaluate a drive stall.")
  public NodeDriveconfigNodeStall getStall() {
    return stall;
  }

  public void setStall(NodeDriveconfigNodeStall stall) {
    this.stall = stall;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDriveconfigNode nodeDriveconfigNode = (NodeDriveconfigNode) o;
    return Objects.equals(this.alert, nodeDriveconfigNode.alert) &&
        Objects.equals(this.allow, nodeDriveconfigNode.allow) &&
        Objects.equals(this.automaticReplacementRecognition, nodeDriveconfigNode.automaticReplacementRecognition) &&
        Objects.equals(this.id, nodeDriveconfigNode.id) &&
        Objects.equals(this.lnn, nodeDriveconfigNode.lnn) &&
        Objects.equals(this.log, nodeDriveconfigNode.log) &&
        Objects.equals(this.reboot, nodeDriveconfigNode.reboot) &&
        Objects.equals(this.spinWait, nodeDriveconfigNode.spinWait) &&
        Objects.equals(this.stall, nodeDriveconfigNode.stall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alert, allow, automaticReplacementRecognition, id, lnn, log, reboot, spinWait, stall);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDriveconfigNode {\n");
    
    sb.append("    alert: ").append(toIndentedString(alert)).append("\n");
    sb.append("    allow: ").append(toIndentedString(allow)).append("\n");
    sb.append("    automaticReplacementRecognition: ").append(toIndentedString(automaticReplacementRecognition)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lnn: ").append(toIndentedString(lnn)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    reboot: ").append(toIndentedString(reboot)).append("\n");
    sb.append("    spinWait: ").append(toIndentedString(spinWait)).append("\n");
    sb.append("    stall: ").append(toIndentedString(stall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

