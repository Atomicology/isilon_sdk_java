/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ClusterNodesOnefsVersion;
import io.swagger.client.model.UpgradeClusterClusterOverview;
import io.swagger.client.model.UpgradeClusterUpgradeSettings;
import java.io.IOException;

/**
 * Cluster wide upgrade status info.
 */
@ApiModel(description = "Cluster wide upgrade status info.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T15:41:52.549-07:00")
public class UpgradeCluster {
  @SerializedName("cluster_overview")
  private UpgradeClusterClusterOverview clusterOverview = null;

  @SerializedName("cluster_state")
  private String clusterState = null;

  @SerializedName("current_process")
  private String currentProcess = null;

  @SerializedName("finish_time")
  private String finishTime = null;

  @SerializedName("install_image_path")
  private String installImagePath = null;

  @SerializedName("node_median_time")
  private Integer nodeMedianTime = null;

  @SerializedName("onefs_version_current")
  private ClusterNodesOnefsVersion onefsVersionCurrent = null;

  @SerializedName("onefs_version_upgrade")
  private ClusterNodesOnefsVersion onefsVersionUpgrade = null;

  @SerializedName("patch_action")
  private String patchAction = null;

  @SerializedName("patch_name")
  private String patchName = null;

  @SerializedName("start_time")
  private String startTime = null;

  @SerializedName("upgrade_is_committed")
  private Boolean upgradeIsCommitted = null;

  @SerializedName("upgrade_settings")
  private UpgradeClusterUpgradeSettings upgradeSettings = null;

  @SerializedName("upgrade_triggered_time")
  private String upgradeTriggeredTime = null;

  public UpgradeCluster clusterOverview(UpgradeClusterClusterOverview clusterOverview) {
    this.clusterOverview = clusterOverview;
    return this;
  }

   /**
   * The cluster overview of an upgrade process.
   * @return clusterOverview
  **/
  @ApiModelProperty(value = "The cluster overview of an upgrade process.")
  public UpgradeClusterClusterOverview getClusterOverview() {
    return clusterOverview;
  }

  public void setClusterOverview(UpgradeClusterClusterOverview clusterOverview) {
    this.clusterOverview = clusterOverview;
  }

  public UpgradeCluster clusterState(String clusterState) {
    this.clusterState = clusterState;
    return this;
  }

   /**
   * The different states of an upgrade, rollback, or assessment. One of the following values: &#39;committed&#39;, &#39;upgraded&#39;, &#39;partially upgraded&#39;, &#39;upgrading&#39;, &#39;rolling back&#39;, &#39;assessing&#39;, &#39;error&#39;
   * @return clusterState
  **/
  @ApiModelProperty(value = "The different states of an upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'partially upgraded', 'upgrading', 'rolling back', 'assessing', 'error'")
  public String getClusterState() {
    return clusterState;
  }

  public void setClusterState(String clusterState) {
    this.clusterState = clusterState;
  }

  public UpgradeCluster currentProcess(String currentProcess) {
    this.currentProcess = currentProcess;
    return this;
  }

   /**
   * The current upgrade activity.
   * @return currentProcess
  **/
  @ApiModelProperty(value = "The current upgrade activity.")
  public String getCurrentProcess() {
    return currentProcess;
  }

  public void setCurrentProcess(String currentProcess) {
    this.currentProcess = currentProcess;
  }

  public UpgradeCluster finishTime(String finishTime) {
    this.finishTime = finishTime;
    return this;
  }

   /**
   * The time when a rollback, assessment or upgrade has finished completely. Use ISO 8601 standard. Null if the cluster_state is not &#39;upgraded&#39;.
   * @return finishTime
  **/
  @ApiModelProperty(value = "The time when a rollback, assessment or upgrade has finished completely. Use ISO 8601 standard. Null if the cluster_state is not 'upgraded'.")
  public String getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(String finishTime) {
    this.finishTime = finishTime;
  }

  public UpgradeCluster installImagePath(String installImagePath) {
    this.installImagePath = installImagePath;
    return this;
  }

   /**
   * The location (path) of the upgrade image which must be within /ifs. Null if the cluster_state is &#39;committed&#39; or &#39;upgraded.&#39;
   * @return installImagePath
  **/
  @ApiModelProperty(value = "The location (path) of the upgrade image which must be within /ifs. Null if the cluster_state is 'committed' or 'upgraded.'")
  public String getInstallImagePath() {
    return installImagePath;
  }

  public void setInstallImagePath(String installImagePath) {
    this.installImagePath = installImagePath;
  }

  public UpgradeCluster nodeMedianTime(Integer nodeMedianTime) {
    this.nodeMedianTime = nodeMedianTime;
    return this;
  }

   /**
   * The median time (seconds) to complete each node so far during this upgrade. Before the first node in an upgrade has completed this key will have an associated null value.
   * @return nodeMedianTime
  **/
  @ApiModelProperty(value = "The median time (seconds) to complete each node so far during this upgrade. Before the first node in an upgrade has completed this key will have an associated null value.")
  public Integer getNodeMedianTime() {
    return nodeMedianTime;
  }

  public void setNodeMedianTime(Integer nodeMedianTime) {
    this.nodeMedianTime = nodeMedianTime;
  }

  public UpgradeCluster onefsVersionCurrent(ClusterNodesOnefsVersion onefsVersionCurrent) {
    this.onefsVersionCurrent = onefsVersionCurrent;
    return this;
  }

   /**
   * The current OneFS version before upgrade.
   * @return onefsVersionCurrent
  **/
  @ApiModelProperty(value = "The current OneFS version before upgrade.")
  public ClusterNodesOnefsVersion getOnefsVersionCurrent() {
    return onefsVersionCurrent;
  }

  public void setOnefsVersionCurrent(ClusterNodesOnefsVersion onefsVersionCurrent) {
    this.onefsVersionCurrent = onefsVersionCurrent;
  }

  public UpgradeCluster onefsVersionUpgrade(ClusterNodesOnefsVersion onefsVersionUpgrade) {
    this.onefsVersionUpgrade = onefsVersionUpgrade;
    return this;
  }

   /**
   * The OneFS version the user is attempting to upgrade to. Null if the cluster_state is &#39;committed&#39; or &#39;assessing.&#39;
   * @return onefsVersionUpgrade
  **/
  @ApiModelProperty(value = "The OneFS version the user is attempting to upgrade to. Null if the cluster_state is 'committed' or 'assessing.'")
  public ClusterNodesOnefsVersion getOnefsVersionUpgrade() {
    return onefsVersionUpgrade;
  }

  public void setOnefsVersionUpgrade(ClusterNodesOnefsVersion onefsVersionUpgrade) {
    this.onefsVersionUpgrade = onefsVersionUpgrade;
  }

  public UpgradeCluster patchAction(String patchAction) {
    this.patchAction = patchAction;
    return this;
  }

   /**
   * The most recent patch action performed.
   * @return patchAction
  **/
  @ApiModelProperty(value = "The most recent patch action performed.")
  public String getPatchAction() {
    return patchAction;
  }

  public void setPatchAction(String patchAction) {
    this.patchAction = patchAction;
  }

  public UpgradeCluster patchName(String patchName) {
    this.patchName = patchName;
    return this;
  }

   /**
   * The patch with the most recent patch action.
   * @return patchName
  **/
  @ApiModelProperty(value = "The patch with the most recent patch action.")
  public String getPatchName() {
    return patchName;
  }

  public void setPatchName(String patchName) {
    this.patchName = patchName;
  }

  public UpgradeCluster startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The time when an upgrade, rollback, or assessment was started. Use ISO 8601 standard. Null if the cluster_state is &#39;committed&#39; or &#39;partially upgraded.&#39;
   * @return startTime
  **/
  @ApiModelProperty(value = "The time when an upgrade, rollback, or assessment was started. Use ISO 8601 standard. Null if the cluster_state is 'committed' or 'partially upgraded.'")
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public UpgradeCluster upgradeIsCommitted(Boolean upgradeIsCommitted) {
    this.upgradeIsCommitted = upgradeIsCommitted;
    return this;
  }

   /**
   * True if upgrade is committed.
   * @return upgradeIsCommitted
  **/
  @ApiModelProperty(value = "True if upgrade is committed.")
  public Boolean isUpgradeIsCommitted() {
    return upgradeIsCommitted;
  }

  public void setUpgradeIsCommitted(Boolean upgradeIsCommitted) {
    this.upgradeIsCommitted = upgradeIsCommitted;
  }

  public UpgradeCluster upgradeSettings(UpgradeClusterUpgradeSettings upgradeSettings) {
    this.upgradeSettings = upgradeSettings;
    return this;
  }

   /**
   * The settings necessary when starting an upgrade. Null if the cluster_state is not &#39;upgrading&#39; or &#39;partially upgraded.&#39; or &#39;error&#39;.
   * @return upgradeSettings
  **/
  @ApiModelProperty(value = "The settings necessary when starting an upgrade. Null if the cluster_state is not 'upgrading' or 'partially upgraded.' or 'error'.")
  public UpgradeClusterUpgradeSettings getUpgradeSettings() {
    return upgradeSettings;
  }

  public void setUpgradeSettings(UpgradeClusterUpgradeSettings upgradeSettings) {
    this.upgradeSettings = upgradeSettings;
  }

  public UpgradeCluster upgradeTriggeredTime(String upgradeTriggeredTime) {
    this.upgradeTriggeredTime = upgradeTriggeredTime;
    return this;
  }

   /**
   * Time at which upgrade was originally requested.
   * @return upgradeTriggeredTime
  **/
  @ApiModelProperty(value = "Time at which upgrade was originally requested.")
  public String getUpgradeTriggeredTime() {
    return upgradeTriggeredTime;
  }

  public void setUpgradeTriggeredTime(String upgradeTriggeredTime) {
    this.upgradeTriggeredTime = upgradeTriggeredTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeCluster upgradeCluster = (UpgradeCluster) o;
    return Objects.equals(this.clusterOverview, upgradeCluster.clusterOverview) &&
        Objects.equals(this.clusterState, upgradeCluster.clusterState) &&
        Objects.equals(this.currentProcess, upgradeCluster.currentProcess) &&
        Objects.equals(this.finishTime, upgradeCluster.finishTime) &&
        Objects.equals(this.installImagePath, upgradeCluster.installImagePath) &&
        Objects.equals(this.nodeMedianTime, upgradeCluster.nodeMedianTime) &&
        Objects.equals(this.onefsVersionCurrent, upgradeCluster.onefsVersionCurrent) &&
        Objects.equals(this.onefsVersionUpgrade, upgradeCluster.onefsVersionUpgrade) &&
        Objects.equals(this.patchAction, upgradeCluster.patchAction) &&
        Objects.equals(this.patchName, upgradeCluster.patchName) &&
        Objects.equals(this.startTime, upgradeCluster.startTime) &&
        Objects.equals(this.upgradeIsCommitted, upgradeCluster.upgradeIsCommitted) &&
        Objects.equals(this.upgradeSettings, upgradeCluster.upgradeSettings) &&
        Objects.equals(this.upgradeTriggeredTime, upgradeCluster.upgradeTriggeredTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterOverview, clusterState, currentProcess, finishTime, installImagePath, nodeMedianTime, onefsVersionCurrent, onefsVersionUpgrade, patchAction, patchName, startTime, upgradeIsCommitted, upgradeSettings, upgradeTriggeredTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeCluster {\n");
    
    sb.append("    clusterOverview: ").append(toIndentedString(clusterOverview)).append("\n");
    sb.append("    clusterState: ").append(toIndentedString(clusterState)).append("\n");
    sb.append("    currentProcess: ").append(toIndentedString(currentProcess)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    installImagePath: ").append(toIndentedString(installImagePath)).append("\n");
    sb.append("    nodeMedianTime: ").append(toIndentedString(nodeMedianTime)).append("\n");
    sb.append("    onefsVersionCurrent: ").append(toIndentedString(onefsVersionCurrent)).append("\n");
    sb.append("    onefsVersionUpgrade: ").append(toIndentedString(onefsVersionUpgrade)).append("\n");
    sb.append("    patchAction: ").append(toIndentedString(patchAction)).append("\n");
    sb.append("    patchName: ").append(toIndentedString(patchName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    upgradeIsCommitted: ").append(toIndentedString(upgradeIsCommitted)).append("\n");
    sb.append("    upgradeSettings: ").append(toIndentedString(upgradeSettings)).append("\n");
    sb.append("    upgradeTriggeredTime: ").append(toIndentedString(upgradeTriggeredTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

