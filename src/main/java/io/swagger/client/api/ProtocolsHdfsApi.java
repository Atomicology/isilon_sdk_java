/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthAccessAccessItemFileGroup;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.GroupMembers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtocolsHdfsApi {
    private ApiClient apiClient;

    public ProtocolsHdfsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtocolsHdfsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createProxyusersNameMember
     * @param proxyusersNameMember  (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProxyusersNameMemberCall(AuthAccessAccessItemFileGroup proxyusersNameMember, String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = proxyusersNameMember;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{Name}/members"
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProxyusersNameMemberValidateBeforeCall(AuthAccessAccessItemFileGroup proxyusersNameMember, String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'proxyusersNameMember' is set
        if (proxyusersNameMember == null) {
            throw new ApiException("Missing the required parameter 'proxyusersNameMember' when calling createProxyusersNameMember(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createProxyusersNameMember(Async)");
        }
        

        com.squareup.okhttp.Call call = createProxyusersNameMemberCall(proxyusersNameMember, name, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add a member to the HDFS proxyuser.
     * @param proxyusersNameMember  (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createProxyusersNameMember(AuthAccessAccessItemFileGroup proxyusersNameMember, String name, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createProxyusersNameMemberWithHttpInfo(proxyusersNameMember, name, zone);
        return resp.getData();
    }

    /**
     * 
     * Add a member to the HDFS proxyuser.
     * @param proxyusersNameMember  (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createProxyusersNameMemberWithHttpInfo(AuthAccessAccessItemFileGroup proxyusersNameMember, String name, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createProxyusersNameMemberValidateBeforeCall(proxyusersNameMember, name, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a member to the HDFS proxyuser.
     * @param proxyusersNameMember  (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProxyusersNameMemberAsync(AuthAccessAccessItemFileGroup proxyusersNameMember, String name, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProxyusersNameMemberValidateBeforeCall(proxyusersNameMember, name, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProxyusersNameMember
     * @param proxyusersNameMemberId Remove a member from the HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProxyusersNameMemberCall(String proxyusersNameMemberId, String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{Name}/members/{ProxyusersNameMemberId}"
            .replaceAll("\\{" + "ProxyusersNameMemberId" + "\\}", apiClient.escapeString(proxyusersNameMemberId.toString()))
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProxyusersNameMemberValidateBeforeCall(String proxyusersNameMemberId, String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'proxyusersNameMemberId' is set
        if (proxyusersNameMemberId == null) {
            throw new ApiException("Missing the required parameter 'proxyusersNameMemberId' when calling deleteProxyusersNameMember(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteProxyusersNameMember(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProxyusersNameMemberCall(proxyusersNameMemberId, name, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Remove a member from the HDFS proxyuser.
     * @param proxyusersNameMemberId Remove a member from the HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProxyusersNameMember(String proxyusersNameMemberId, String name, String zone) throws ApiException {
        deleteProxyusersNameMemberWithHttpInfo(proxyusersNameMemberId, name, zone);
    }

    /**
     * 
     * Remove a member from the HDFS proxyuser.
     * @param proxyusersNameMemberId Remove a member from the HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProxyusersNameMemberWithHttpInfo(String proxyusersNameMemberId, String name, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteProxyusersNameMemberValidateBeforeCall(proxyusersNameMemberId, name, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove a member from the HDFS proxyuser.
     * @param proxyusersNameMemberId Remove a member from the HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProxyusersNameMemberAsync(String proxyusersNameMemberId, String name, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProxyusersNameMemberValidateBeforeCall(proxyusersNameMemberId, name, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listProxyusersNameMembers
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProxyusersNameMembersCall(String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{Name}/members"
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProxyusersNameMembersValidateBeforeCall(String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling listProxyusersNameMembers(Async)");
        }
        

        com.squareup.okhttp.Call call = listProxyusersNameMembersCall(name, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all the members of the HDFS proxyuser.
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return GroupMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupMembers listProxyusersNameMembers(String name, String zone) throws ApiException {
        ApiResponse<GroupMembers> resp = listProxyusersNameMembersWithHttpInfo(name, zone);
        return resp.getData();
    }

    /**
     * 
     * List all the members of the HDFS proxyuser.
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return ApiResponse&lt;GroupMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupMembers> listProxyusersNameMembersWithHttpInfo(String name, String zone) throws ApiException {
        com.squareup.okhttp.Call call = listProxyusersNameMembersValidateBeforeCall(name, zone, null, null);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the members of the HDFS proxyuser.
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProxyusersNameMembersAsync(String name, String zone, final ApiCallback<GroupMembers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProxyusersNameMembersValidateBeforeCall(name, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProxyusersNameMember
     * @param proxyusersNameMember  (required)
     * @param proxyusersNameMemberId Create a new HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProxyusersNameMemberCall(Empty proxyusersNameMember, String proxyusersNameMemberId, String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = proxyusersNameMember;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{Name}/members/{ProxyusersNameMemberId}"
            .replaceAll("\\{" + "ProxyusersNameMemberId" + "\\}", apiClient.escapeString(proxyusersNameMemberId.toString()))
            .replaceAll("\\{" + "Name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProxyusersNameMemberValidateBeforeCall(Empty proxyusersNameMember, String proxyusersNameMemberId, String name, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'proxyusersNameMember' is set
        if (proxyusersNameMember == null) {
            throw new ApiException("Missing the required parameter 'proxyusersNameMember' when calling updateProxyusersNameMember(Async)");
        }
        
        // verify the required parameter 'proxyusersNameMemberId' is set
        if (proxyusersNameMemberId == null) {
            throw new ApiException("Missing the required parameter 'proxyusersNameMemberId' when calling updateProxyusersNameMember(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateProxyusersNameMember(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProxyusersNameMemberCall(proxyusersNameMember, proxyusersNameMemberId, name, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new HDFS proxyuser.
     * @param proxyusersNameMember  (required)
     * @param proxyusersNameMemberId Create a new HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProxyusersNameMember(Empty proxyusersNameMember, String proxyusersNameMemberId, String name, String zone) throws ApiException {
        updateProxyusersNameMemberWithHttpInfo(proxyusersNameMember, proxyusersNameMemberId, name, zone);
    }

    /**
     * 
     * Create a new HDFS proxyuser.
     * @param proxyusersNameMember  (required)
     * @param proxyusersNameMemberId Create a new HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProxyusersNameMemberWithHttpInfo(Empty proxyusersNameMember, String proxyusersNameMemberId, String name, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateProxyusersNameMemberValidateBeforeCall(proxyusersNameMember, proxyusersNameMemberId, name, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Create a new HDFS proxyuser.
     * @param proxyusersNameMember  (required)
     * @param proxyusersNameMemberId Create a new HDFS proxyuser. (required)
     * @param name  (required)
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProxyusersNameMemberAsync(Empty proxyusersNameMember, String proxyusersNameMemberId, String name, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProxyusersNameMemberValidateBeforeCall(proxyusersNameMember, proxyusersNameMemberId, name, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
