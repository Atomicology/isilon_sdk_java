/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateJobJobResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.JobEvents;
import io.swagger.client.model.JobJob;
import io.swagger.client.model.JobJobCreateParams;
import io.swagger.client.model.JobJobSummary;
import io.swagger.client.model.JobJobs;
import io.swagger.client.model.JobJobsExtended;
import io.swagger.client.model.JobPolicies;
import io.swagger.client.model.JobPoliciesExtended;
import io.swagger.client.model.JobPolicy;
import io.swagger.client.model.JobPolicyCreateParams;
import io.swagger.client.model.JobRecent;
import io.swagger.client.model.JobReports;
import io.swagger.client.model.JobStatistics;
import io.swagger.client.model.JobType;
import io.swagger.client.model.JobTypes;
import io.swagger.client.model.JobTypesExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobApi {
    private ApiClient apiClient;

    public JobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createJobJob
     * @param jobJob  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createJobJobCall(JobJobCreateParams jobJob, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jobJob;

        // create path and map variables
        String localVarPath = "/platform/3/job/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createJobJobValidateBeforeCall(JobJobCreateParams jobJob, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobJob' is set
        if (jobJob == null) {
            throw new ApiException("Missing the required parameter 'jobJob' when calling createJobJob(Async)");
        }
        

        com.squareup.okhttp.Call call = createJobJobCall(jobJob, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Queue a new instance of a job type.
     * @param jobJob  (required)
     * @return CreateJobJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateJobJobResponse createJobJob(JobJobCreateParams jobJob) throws ApiException {
        ApiResponse<CreateJobJobResponse> resp = createJobJobWithHttpInfo(jobJob);
        return resp.getData();
    }

    /**
     * 
     * Queue a new instance of a job type.
     * @param jobJob  (required)
     * @return ApiResponse&lt;CreateJobJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateJobJobResponse> createJobJobWithHttpInfo(JobJobCreateParams jobJob) throws ApiException {
        com.squareup.okhttp.Call call = createJobJobValidateBeforeCall(jobJob, null, null);
        Type localVarReturnType = new TypeToken<CreateJobJobResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queue a new instance of a job type.
     * @param jobJob  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createJobJobAsync(JobJobCreateParams jobJob, final ApiCallback<CreateJobJobResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createJobJobValidateBeforeCall(jobJob, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateJobJobResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createJobPolicy
     * @param jobPolicy  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createJobPolicyCall(JobPolicyCreateParams jobPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jobPolicy;

        // create path and map variables
        String localVarPath = "/platform/1/job/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createJobPolicyValidateBeforeCall(JobPolicyCreateParams jobPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobPolicy' is set
        if (jobPolicy == null) {
            throw new ApiException("Missing the required parameter 'jobPolicy' when calling createJobPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = createJobPolicyCall(jobPolicy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new job impact policy.
     * @param jobPolicy  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createJobPolicy(JobPolicyCreateParams jobPolicy) throws ApiException {
        ApiResponse<CreateResponse> resp = createJobPolicyWithHttpInfo(jobPolicy);
        return resp.getData();
    }

    /**
     * 
     * Create a new job impact policy.
     * @param jobPolicy  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createJobPolicyWithHttpInfo(JobPolicyCreateParams jobPolicy) throws ApiException {
        com.squareup.okhttp.Call call = createJobPolicyValidateBeforeCall(jobPolicy, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new job impact policy.
     * @param jobPolicy  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createJobPolicyAsync(JobPolicyCreateParams jobPolicy, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createJobPolicyValidateBeforeCall(jobPolicy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteJobPolicy
     * @param jobPolicyId Delete a job impact policy.  System policies may not be deleted. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteJobPolicyCall(String jobPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/policies/{JobPolicyId}"
            .replaceAll("\\{" + "JobPolicyId" + "\\}", apiClient.escapeString(jobPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteJobPolicyValidateBeforeCall(String jobPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobPolicyId' is set
        if (jobPolicyId == null) {
            throw new ApiException("Missing the required parameter 'jobPolicyId' when calling deleteJobPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteJobPolicyCall(jobPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a job impact policy.  System policies may not be deleted.
     * @param jobPolicyId Delete a job impact policy.  System policies may not be deleted. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteJobPolicy(String jobPolicyId) throws ApiException {
        deleteJobPolicyWithHttpInfo(jobPolicyId);
    }

    /**
     * 
     * Delete a job impact policy.  System policies may not be deleted.
     * @param jobPolicyId Delete a job impact policy.  System policies may not be deleted. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteJobPolicyWithHttpInfo(String jobPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = deleteJobPolicyValidateBeforeCall(jobPolicyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a job impact policy.  System policies may not be deleted.
     * @param jobPolicyId Delete a job impact policy.  System policies may not be deleted. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteJobPolicyAsync(String jobPolicyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteJobPolicyValidateBeforeCall(jobPolicyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getJobEvents
     * @param begin Restrict the query to events at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to events before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param state Restrict the query to events containing the given state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given key name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobEventsCall(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, String state, Integer limit, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/job/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (jobType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_type", jobType));
        if (timeoutMs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout_ms", timeoutMs));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobEventsValidateBeforeCall(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, String state, Integer limit, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobEventsCall(begin, end, jobId, resume, jobType, timeoutMs, state, limit, key, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List job events.
     * @param begin Restrict the query to events at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to events before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param state Restrict the query to events containing the given state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given key name. (optional)
     * @return JobEvents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobEvents getJobEvents(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, String state, Integer limit, String key) throws ApiException {
        ApiResponse<JobEvents> resp = getJobEventsWithHttpInfo(begin, end, jobId, resume, jobType, timeoutMs, state, limit, key);
        return resp.getData();
    }

    /**
     * 
     * List job events.
     * @param begin Restrict the query to events at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to events before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param state Restrict the query to events containing the given state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given key name. (optional)
     * @return ApiResponse&lt;JobEvents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobEvents> getJobEventsWithHttpInfo(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, String state, Integer limit, String key) throws ApiException {
        com.squareup.okhttp.Call call = getJobEventsValidateBeforeCall(begin, end, jobId, resume, jobType, timeoutMs, state, limit, key, null, null);
        Type localVarReturnType = new TypeToken<JobEvents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List job events.
     * @param begin Restrict the query to events at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to events before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param state Restrict the query to events containing the given state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given key name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobEventsAsync(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, String state, Integer limit, String key, final ApiCallback<JobEvents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobEventsValidateBeforeCall(begin, end, jobId, resume, jobType, timeoutMs, state, limit, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobEvents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobJob
     * @param jobJobId View a single job instance. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobJobCall(String jobJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/job/jobs/{JobJobId}"
            .replaceAll("\\{" + "JobJobId" + "\\}", apiClient.escapeString(jobJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobJobValidateBeforeCall(String jobJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobJobId' is set
        if (jobJobId == null) {
            throw new ApiException("Missing the required parameter 'jobJobId' when calling getJobJob(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobJobCall(jobJobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single job instance.
     * @param jobJobId View a single job instance. (required)
     * @return JobJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobJobs getJobJob(String jobJobId) throws ApiException {
        ApiResponse<JobJobs> resp = getJobJobWithHttpInfo(jobJobId);
        return resp.getData();
    }

    /**
     * 
     * View a single job instance.
     * @param jobJobId View a single job instance. (required)
     * @return ApiResponse&lt;JobJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobJobs> getJobJobWithHttpInfo(String jobJobId) throws ApiException {
        com.squareup.okhttp.Call call = getJobJobValidateBeforeCall(jobJobId, null, null);
        Type localVarReturnType = new TypeToken<JobJobs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single job instance.
     * @param jobJobId View a single job instance. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobJobAsync(String jobJobId, final ApiCallback<JobJobs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobJobValidateBeforeCall(jobJobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobJobs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobJobSummary
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobJobSummaryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/job-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobJobSummaryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobJobSummaryCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View job engine status.
     * @return JobJobSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobJobSummary getJobJobSummary() throws ApiException {
        ApiResponse<JobJobSummary> resp = getJobJobSummaryWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * View job engine status.
     * @return ApiResponse&lt;JobJobSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobJobSummary> getJobJobSummaryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getJobJobSummaryValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<JobJobSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View job engine status.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobJobSummaryAsync(final ApiCallback<JobJobSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobJobSummaryValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobJobSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobPolicy
     * @param jobPolicyId View a single job impact policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobPolicyCall(String jobPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/policies/{JobPolicyId}"
            .replaceAll("\\{" + "JobPolicyId" + "\\}", apiClient.escapeString(jobPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobPolicyValidateBeforeCall(String jobPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobPolicyId' is set
        if (jobPolicyId == null) {
            throw new ApiException("Missing the required parameter 'jobPolicyId' when calling getJobPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobPolicyCall(jobPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single job impact policy.
     * @param jobPolicyId View a single job impact policy. (required)
     * @return JobPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobPolicies getJobPolicy(String jobPolicyId) throws ApiException {
        ApiResponse<JobPolicies> resp = getJobPolicyWithHttpInfo(jobPolicyId);
        return resp.getData();
    }

    /**
     * 
     * View a single job impact policy.
     * @param jobPolicyId View a single job impact policy. (required)
     * @return ApiResponse&lt;JobPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobPolicies> getJobPolicyWithHttpInfo(String jobPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = getJobPolicyValidateBeforeCall(jobPolicyId, null, null);
        Type localVarReturnType = new TypeToken<JobPolicies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single job impact policy.
     * @param jobPolicyId View a single job impact policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobPolicyAsync(String jobPolicyId, final ApiCallback<JobPolicies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobPolicyValidateBeforeCall(jobPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobPolicies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobRecent
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Max number of recent jobs to return. The default is 8, the max is 100. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobRecentCall(Integer timeoutMs, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/job/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeoutMs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout_ms", timeoutMs));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobRecentValidateBeforeCall(Integer timeoutMs, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobRecentCall(timeoutMs, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List recently completed jobs.
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Max number of recent jobs to return. The default is 8, the max is 100. (optional)
     * @return JobRecent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobRecent getJobRecent(Integer timeoutMs, Integer limit) throws ApiException {
        ApiResponse<JobRecent> resp = getJobRecentWithHttpInfo(timeoutMs, limit);
        return resp.getData();
    }

    /**
     * 
     * List recently completed jobs.
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Max number of recent jobs to return. The default is 8, the max is 100. (optional)
     * @return ApiResponse&lt;JobRecent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobRecent> getJobRecentWithHttpInfo(Integer timeoutMs, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = getJobRecentValidateBeforeCall(timeoutMs, limit, null, null);
        Type localVarReturnType = new TypeToken<JobRecent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List recently completed jobs.
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Max number of recent jobs to return. The default is 8, the max is 100. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobRecentAsync(Integer timeoutMs, Integer limit, final ApiCallback<JobRecent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobRecentValidateBeforeCall(timeoutMs, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobRecent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobReports
     * @param begin Restrict the query to reports at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to reports before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given report key. (optional)
     * @param verbose Display more detailed information, including job engine framework statistics. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobReportsCall(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, Integer limit, String key, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/job/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (jobType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_type", jobType));
        if (timeoutMs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout_ms", timeoutMs));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (verbose != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("verbose", verbose));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobReportsValidateBeforeCall(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, Integer limit, String key, Boolean verbose, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobReportsCall(begin, end, jobId, resume, jobType, timeoutMs, limit, key, verbose, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List job reports.
     * @param begin Restrict the query to reports at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to reports before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given report key. (optional)
     * @param verbose Display more detailed information, including job engine framework statistics. (optional)
     * @return JobReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobReports getJobReports(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, Integer limit, String key, Boolean verbose) throws ApiException {
        ApiResponse<JobReports> resp = getJobReportsWithHttpInfo(begin, end, jobId, resume, jobType, timeoutMs, limit, key, verbose);
        return resp.getData();
    }

    /**
     * 
     * List job reports.
     * @param begin Restrict the query to reports at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to reports before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given report key. (optional)
     * @param verbose Display more detailed information, including job engine framework statistics. (optional)
     * @return ApiResponse&lt;JobReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobReports> getJobReportsWithHttpInfo(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, Integer limit, String key, Boolean verbose) throws ApiException {
        com.squareup.okhttp.Call call = getJobReportsValidateBeforeCall(begin, end, jobId, resume, jobType, timeoutMs, limit, key, verbose, null, null);
        Type localVarReturnType = new TypeToken<JobReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List job reports.
     * @param begin Restrict the query to reports at or after the given time, in seconds since the Epoch. (optional)
     * @param end Restrict the query to reports before the given time, in seconds since the Epoch. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param jobType Restrict the query to the given job type. (optional)
     * @param timeoutMs Query timeout in milliseconds. The default is 10000 ms. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param key Restrict the query to the given report key. (optional)
     * @param verbose Display more detailed information, including job engine framework statistics. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobReportsAsync(Integer begin, Integer end, Integer jobId, String resume, String jobType, Integer timeoutMs, Integer limit, String key, Boolean verbose, final ApiCallback<JobReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobReportsValidateBeforeCall(begin, end, jobId, resume, jobType, timeoutMs, limit, key, verbose, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobStatistics
     * @param devid Restrict the query to the given node. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobStatisticsCall(Integer devid, Integer jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (devid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devid", devid));
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("job_id", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobStatisticsValidateBeforeCall(Integer devid, Integer jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobStatisticsCall(devid, jobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View job engine statistics.
     * @param devid Restrict the query to the given node. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @return JobStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobStatistics getJobStatistics(Integer devid, Integer jobId) throws ApiException {
        ApiResponse<JobStatistics> resp = getJobStatisticsWithHttpInfo(devid, jobId);
        return resp.getData();
    }

    /**
     * 
     * View job engine statistics.
     * @param devid Restrict the query to the given node. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @return ApiResponse&lt;JobStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobStatistics> getJobStatisticsWithHttpInfo(Integer devid, Integer jobId) throws ApiException {
        com.squareup.okhttp.Call call = getJobStatisticsValidateBeforeCall(devid, jobId, null, null);
        Type localVarReturnType = new TypeToken<JobStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View job engine statistics.
     * @param devid Restrict the query to the given node. (optional)
     * @param jobId Restrict the query to the given job ID. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobStatisticsAsync(Integer devid, Integer jobId, final ApiCallback<JobStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobStatisticsValidateBeforeCall(devid, jobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobType
     * @param jobTypeId Retrieve job type information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTypeCall(String jobTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/types/{JobTypeId}"
            .replaceAll("\\{" + "JobTypeId" + "\\}", apiClient.escapeString(jobTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTypeValidateBeforeCall(String jobTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobTypeId' is set
        if (jobTypeId == null) {
            throw new ApiException("Missing the required parameter 'jobTypeId' when calling getJobType(Async)");
        }
        

        com.squareup.okhttp.Call call = getJobTypeCall(jobTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve job type information.
     * @param jobTypeId Retrieve job type information. (required)
     * @return JobTypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTypes getJobType(String jobTypeId) throws ApiException {
        ApiResponse<JobTypes> resp = getJobTypeWithHttpInfo(jobTypeId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve job type information.
     * @param jobTypeId Retrieve job type information. (required)
     * @return ApiResponse&lt;JobTypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTypes> getJobTypeWithHttpInfo(String jobTypeId) throws ApiException {
        com.squareup.okhttp.Call call = getJobTypeValidateBeforeCall(jobTypeId, null, null);
        Type localVarReturnType = new TypeToken<JobTypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve job type information.
     * @param jobTypeId Retrieve job type information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTypeAsync(String jobTypeId, final ApiCallback<JobTypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTypeValidateBeforeCall(jobTypeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJobTypes
     * @param sort The field that will be used for sorting. (optional)
     * @param showAll Whether to show all job types, including hidden ones.  Defaults to false. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJobTypesCall(String sort, Boolean showAll, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (showAll != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_all", showAll));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJobTypesValidateBeforeCall(String sort, Boolean showAll, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getJobTypesCall(sort, showAll, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List job types.
     * @param sort The field that will be used for sorting. (optional)
     * @param showAll Whether to show all job types, including hidden ones.  Defaults to false. (optional)
     * @param dir The direction of the sort. (optional)
     * @return JobTypesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobTypesExtended getJobTypes(String sort, Boolean showAll, String dir) throws ApiException {
        ApiResponse<JobTypesExtended> resp = getJobTypesWithHttpInfo(sort, showAll, dir);
        return resp.getData();
    }

    /**
     * 
     * List job types.
     * @param sort The field that will be used for sorting. (optional)
     * @param showAll Whether to show all job types, including hidden ones.  Defaults to false. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;JobTypesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobTypesExtended> getJobTypesWithHttpInfo(String sort, Boolean showAll, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getJobTypesValidateBeforeCall(sort, showAll, dir, null, null);
        Type localVarReturnType = new TypeToken<JobTypesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List job types.
     * @param sort The field that will be used for sorting. (optional)
     * @param showAll Whether to show all job types, including hidden ones.  Defaults to false. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJobTypesAsync(String sort, Boolean showAll, String dir, final ApiCallback<JobTypesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJobTypesValidateBeforeCall(sort, showAll, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobTypesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listJobJobs
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param batch If true, other arguments are ignored, and the query will return all results, unsorted, as quickly as possible. (optional)
     * @param state Limit the results to jobs in the specified state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listJobJobsCall(String sort, String resume, Boolean batch, String state, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/job/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (batch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("batch", batch));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listJobJobsValidateBeforeCall(String sort, String resume, Boolean batch, String state, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listJobJobsCall(sort, resume, batch, state, limit, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List running and paused jobs.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param batch If true, other arguments are ignored, and the query will return all results, unsorted, as quickly as possible. (optional)
     * @param state Limit the results to jobs in the specified state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return JobJobsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobJobsExtended listJobJobs(String sort, String resume, Boolean batch, String state, Integer limit, String dir) throws ApiException {
        ApiResponse<JobJobsExtended> resp = listJobJobsWithHttpInfo(sort, resume, batch, state, limit, dir);
        return resp.getData();
    }

    /**
     * 
     * List running and paused jobs.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param batch If true, other arguments are ignored, and the query will return all results, unsorted, as quickly as possible. (optional)
     * @param state Limit the results to jobs in the specified state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;JobJobsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobJobsExtended> listJobJobsWithHttpInfo(String sort, String resume, Boolean batch, String state, Integer limit, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listJobJobsValidateBeforeCall(sort, resume, batch, state, limit, dir, null, null);
        Type localVarReturnType = new TypeToken<JobJobsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List running and paused jobs.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param batch If true, other arguments are ignored, and the query will return all results, unsorted, as quickly as possible. (optional)
     * @param state Limit the results to jobs in the specified state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listJobJobsAsync(String sort, String resume, Boolean batch, String state, Integer limit, String dir, final ApiCallback<JobJobsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listJobJobsValidateBeforeCall(sort, resume, batch, state, limit, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobJobsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listJobPolicies
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listJobPoliciesCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/job/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listJobPoliciesValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listJobPoliciesCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List job impact policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return JobPoliciesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobPoliciesExtended listJobPolicies(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<JobPoliciesExtended> resp = listJobPoliciesWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List job impact policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;JobPoliciesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobPoliciesExtended> listJobPoliciesWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listJobPoliciesValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<JobPoliciesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List job impact policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listJobPoliciesAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<JobPoliciesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listJobPoliciesValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobPoliciesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateJobJob
     * @param jobJob  (required)
     * @param jobJobId Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobJobCall(JobJob jobJob, String jobJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jobJob;

        // create path and map variables
        String localVarPath = "/platform/3/job/jobs/{JobJobId}"
            .replaceAll("\\{" + "JobJobId" + "\\}", apiClient.escapeString(jobJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobJobValidateBeforeCall(JobJob jobJob, String jobJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobJob' is set
        if (jobJob == null) {
            throw new ApiException("Missing the required parameter 'jobJob' when calling updateJobJob(Async)");
        }
        
        // verify the required parameter 'jobJobId' is set
        if (jobJobId == null) {
            throw new ApiException("Missing the required parameter 'jobJobId' when calling updateJobJob(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobJobCall(jobJob, jobJobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied.
     * @param jobJob  (required)
     * @param jobJobId Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobJob(JobJob jobJob, String jobJobId) throws ApiException {
        updateJobJobWithHttpInfo(jobJob, jobJobId);
    }

    /**
     * 
     * Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied.
     * @param jobJob  (required)
     * @param jobJobId Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobJobWithHttpInfo(JobJob jobJob, String jobJobId) throws ApiException {
        com.squareup.okhttp.Call call = updateJobJobValidateBeforeCall(jobJob, jobJobId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied.
     * @param jobJob  (required)
     * @param jobJobId Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobJobAsync(JobJob jobJob, String jobJobId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobJobValidateBeforeCall(jobJob, jobJobId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobPolicy
     * @param jobPolicy  (required)
     * @param jobPolicyId Modify a job impact policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobPolicyCall(JobPolicy jobPolicy, String jobPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jobPolicy;

        // create path and map variables
        String localVarPath = "/platform/1/job/policies/{JobPolicyId}"
            .replaceAll("\\{" + "JobPolicyId" + "\\}", apiClient.escapeString(jobPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobPolicyValidateBeforeCall(JobPolicy jobPolicy, String jobPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobPolicy' is set
        if (jobPolicy == null) {
            throw new ApiException("Missing the required parameter 'jobPolicy' when calling updateJobPolicy(Async)");
        }
        
        // verify the required parameter 'jobPolicyId' is set
        if (jobPolicyId == null) {
            throw new ApiException("Missing the required parameter 'jobPolicyId' when calling updateJobPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobPolicyCall(jobPolicy, jobPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a job impact policy.
     * @param jobPolicy  (required)
     * @param jobPolicyId Modify a job impact policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobPolicy(JobPolicy jobPolicy, String jobPolicyId) throws ApiException {
        updateJobPolicyWithHttpInfo(jobPolicy, jobPolicyId);
    }

    /**
     * 
     * Modify a job impact policy.
     * @param jobPolicy  (required)
     * @param jobPolicyId Modify a job impact policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobPolicyWithHttpInfo(JobPolicy jobPolicy, String jobPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = updateJobPolicyValidateBeforeCall(jobPolicy, jobPolicyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a job impact policy.
     * @param jobPolicy  (required)
     * @param jobPolicyId Modify a job impact policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobPolicyAsync(JobPolicy jobPolicy, String jobPolicyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobPolicyValidateBeforeCall(jobPolicy, jobPolicyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateJobType
     * @param jobType  (required)
     * @param jobTypeId Modify the job type.  All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateJobTypeCall(JobType jobType, String jobTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jobType;

        // create path and map variables
        String localVarPath = "/platform/1/job/types/{JobTypeId}"
            .replaceAll("\\{" + "JobTypeId" + "\\}", apiClient.escapeString(jobTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateJobTypeValidateBeforeCall(JobType jobType, String jobTypeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jobType' is set
        if (jobType == null) {
            throw new ApiException("Missing the required parameter 'jobType' when calling updateJobType(Async)");
        }
        
        // verify the required parameter 'jobTypeId' is set
        if (jobTypeId == null) {
            throw new ApiException("Missing the required parameter 'jobTypeId' when calling updateJobType(Async)");
        }
        

        com.squareup.okhttp.Call call = updateJobTypeCall(jobType, jobTypeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the job type.  All input fields are optional, but one or more must be supplied.
     * @param jobType  (required)
     * @param jobTypeId Modify the job type.  All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJobType(JobType jobType, String jobTypeId) throws ApiException {
        updateJobTypeWithHttpInfo(jobType, jobTypeId);
    }

    /**
     * 
     * Modify the job type.  All input fields are optional, but one or more must be supplied.
     * @param jobType  (required)
     * @param jobTypeId Modify the job type.  All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJobTypeWithHttpInfo(JobType jobType, String jobTypeId) throws ApiException {
        com.squareup.okhttp.Call call = updateJobTypeValidateBeforeCall(jobType, jobTypeId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the job type.  All input fields are optional, but one or more must be supplied.
     * @param jobType  (required)
     * @param jobTypeId Modify the job type.  All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJobTypeAsync(JobType jobType, String jobTypeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJobTypeValidateBeforeCall(jobType, jobTypeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
