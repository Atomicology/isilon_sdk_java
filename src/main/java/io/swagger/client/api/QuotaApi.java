/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateQuotaReportResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.LicenseLicense;
import io.swagger.client.model.QuotaNotification;
import io.swagger.client.model.QuotaNotificationCreateParams;
import io.swagger.client.model.QuotaNotifications;
import io.swagger.client.model.QuotaNotificationsExtended;
import io.swagger.client.model.QuotaQuota;
import io.swagger.client.model.QuotaQuotaCreateParams;
import io.swagger.client.model.QuotaQuotas;
import io.swagger.client.model.QuotaQuotasExtended;
import io.swagger.client.model.QuotaQuotasSummary;
import io.swagger.client.model.QuotaReports;
import io.swagger.client.model.ReportAbout;
import io.swagger.client.model.SettingsMappingExtended;
import io.swagger.client.model.SettingsMappingExtendedExtended;
import io.swagger.client.model.SettingsMappings;
import io.swagger.client.model.SettingsReports;
import io.swagger.client.model.SettingsReportsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotaApi {
    private ApiClient apiClient;

    public QuotaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createQuotaQuota
     * @param quotaQuota  (required)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createQuotaQuotaCall(QuotaQuotaCreateParams quotaQuota, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quotaQuota;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQuotaQuotaValidateBeforeCall(QuotaQuotaCreateParams quotaQuota, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaQuota' is set
        if (quotaQuota == null) {
            throw new ApiException("Missing the required parameter 'quotaQuota' when calling createQuotaQuota(Async)");
        }
        

        com.squareup.okhttp.Call call = createQuotaQuotaCall(quotaQuota, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new quota.
     * @param quotaQuota  (required)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createQuotaQuota(QuotaQuotaCreateParams quotaQuota, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createQuotaQuotaWithHttpInfo(quotaQuota, zone);
        return resp.getData();
    }

    /**
     * 
     * Create a new quota.
     * @param quotaQuota  (required)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createQuotaQuotaWithHttpInfo(QuotaQuotaCreateParams quotaQuota, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createQuotaQuotaValidateBeforeCall(quotaQuota, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new quota.
     * @param quotaQuota  (required)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQuotaQuotaAsync(QuotaQuotaCreateParams quotaQuota, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQuotaQuotaValidateBeforeCall(quotaQuota, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createQuotaReport
     * @param quotaReport  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createQuotaReportCall(Empty quotaReport, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quotaReport;

        // create path and map variables
        String localVarPath = "/platform/1/quota/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQuotaReportValidateBeforeCall(Empty quotaReport, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaReport' is set
        if (quotaReport == null) {
            throw new ApiException("Missing the required parameter 'quotaReport' when calling createQuotaReport(Async)");
        }
        

        com.squareup.okhttp.Call call = createQuotaReportCall(quotaReport, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new report. The type of this report is &#39;manual&#39;; it is also sometimes called &#39;live&#39; or &#39;ad-hoc&#39;.
     * @param quotaReport  (required)
     * @return CreateQuotaReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateQuotaReportResponse createQuotaReport(Empty quotaReport) throws ApiException {
        ApiResponse<CreateQuotaReportResponse> resp = createQuotaReportWithHttpInfo(quotaReport);
        return resp.getData();
    }

    /**
     * 
     * Create a new report. The type of this report is &#39;manual&#39;; it is also sometimes called &#39;live&#39; or &#39;ad-hoc&#39;.
     * @param quotaReport  (required)
     * @return ApiResponse&lt;CreateQuotaReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateQuotaReportResponse> createQuotaReportWithHttpInfo(Empty quotaReport) throws ApiException {
        com.squareup.okhttp.Call call = createQuotaReportValidateBeforeCall(quotaReport, null, null);
        Type localVarReturnType = new TypeToken<CreateQuotaReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new report. The type of this report is &#39;manual&#39;; it is also sometimes called &#39;live&#39; or &#39;ad-hoc&#39;.
     * @param quotaReport  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQuotaReportAsync(Empty quotaReport, final ApiCallback<CreateQuotaReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQuotaReportValidateBeforeCall(quotaReport, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateQuotaReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSettingsMapping
     * @param settingsMapping  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSettingsMappingCall(SettingsMappingExtendedExtended settingsMapping, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsMapping;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSettingsMappingValidateBeforeCall(SettingsMappingExtendedExtended settingsMapping, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsMapping' is set
        if (settingsMapping == null) {
            throw new ApiException("Missing the required parameter 'settingsMapping' when calling createSettingsMapping(Async)");
        }
        

        com.squareup.okhttp.Call call = createSettingsMappingCall(settingsMapping, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new rule. The new rule must not conflict with an existing rule (e.g. match both the type and domain fields).
     * @param settingsMapping  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSettingsMapping(SettingsMappingExtendedExtended settingsMapping) throws ApiException {
        ApiResponse<CreateResponse> resp = createSettingsMappingWithHttpInfo(settingsMapping);
        return resp.getData();
    }

    /**
     * 
     * Create a new rule. The new rule must not conflict with an existing rule (e.g. match both the type and domain fields).
     * @param settingsMapping  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSettingsMappingWithHttpInfo(SettingsMappingExtendedExtended settingsMapping) throws ApiException {
        com.squareup.okhttp.Call call = createSettingsMappingValidateBeforeCall(settingsMapping, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new rule. The new rule must not conflict with an existing rule (e.g. match both the type and domain fields).
     * @param settingsMapping  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSettingsMappingAsync(SettingsMappingExtendedExtended settingsMapping, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSettingsMappingValidateBeforeCall(settingsMapping, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSettingsNotification
     * @param settingsNotification  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSettingsNotificationCall(QuotaNotificationCreateParams settingsNotification, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsNotification;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSettingsNotificationValidateBeforeCall(QuotaNotificationCreateParams settingsNotification, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsNotification' is set
        if (settingsNotification == null) {
            throw new ApiException("Missing the required parameter 'settingsNotification' when calling createSettingsNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = createSettingsNotificationCall(settingsNotification, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new global notification rule.
     * @param settingsNotification  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSettingsNotification(QuotaNotificationCreateParams settingsNotification) throws ApiException {
        ApiResponse<CreateResponse> resp = createSettingsNotificationWithHttpInfo(settingsNotification);
        return resp.getData();
    }

    /**
     * 
     * Create a new global notification rule.
     * @param settingsNotification  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSettingsNotificationWithHttpInfo(QuotaNotificationCreateParams settingsNotification) throws ApiException {
        com.squareup.okhttp.Call call = createSettingsNotificationValidateBeforeCall(settingsNotification, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new global notification rule.
     * @param settingsNotification  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSettingsNotificationAsync(QuotaNotificationCreateParams settingsNotification, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSettingsNotificationValidateBeforeCall(settingsNotification, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteQuotaQuota
     * @param quotaQuotaId Delete the quota. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaQuotaCall(String quotaQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{QuotaQuotaId}"
            .replaceAll("\\{" + "QuotaQuotaId" + "\\}", apiClient.escapeString(quotaQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuotaQuotaValidateBeforeCall(String quotaQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaQuotaId' is set
        if (quotaQuotaId == null) {
            throw new ApiException("Missing the required parameter 'quotaQuotaId' when calling deleteQuotaQuota(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuotaQuotaCall(quotaQuotaId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the quota.
     * @param quotaQuotaId Delete the quota. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuotaQuota(String quotaQuotaId) throws ApiException {
        deleteQuotaQuotaWithHttpInfo(quotaQuotaId);
    }

    /**
     * 
     * Delete the quota.
     * @param quotaQuotaId Delete the quota. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuotaQuotaWithHttpInfo(String quotaQuotaId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuotaQuotaValidateBeforeCall(quotaQuotaId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the quota.
     * @param quotaQuotaId Delete the quota. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaQuotaAsync(String quotaQuotaId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuotaQuotaValidateBeforeCall(quotaQuotaId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuotaQuotas
     * @param enforced Only delete quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only delete quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param recursePathChildren If used with the path argument, delete all quotas at that path or any descendent sub-directory. (optional)
     * @param recursePathParents If used with the path argument, delete all quotas at that path or any parent directory. (optional)
     * @param persona Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param path Only delete quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only delete quotas matching this type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaQuotasCall(Boolean enforced, Boolean includeSnapshots, String zone, Boolean recursePathChildren, Boolean recursePathParents, String persona, String path, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enforced != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enforced", enforced));
        if (includeSnapshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_snapshots", includeSnapshots));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (recursePathChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recurse_path_children", recursePathChildren));
        if (recursePathParents != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recurse_path_parents", recursePathParents));
        if (persona != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("persona", persona));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuotaQuotasValidateBeforeCall(Boolean enforced, Boolean includeSnapshots, String zone, Boolean recursePathChildren, Boolean recursePathParents, String persona, String path, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteQuotaQuotasCall(enforced, includeSnapshots, zone, recursePathChildren, recursePathParents, persona, path, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all or matching quotas.
     * @param enforced Only delete quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only delete quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param recursePathChildren If used with the path argument, delete all quotas at that path or any descendent sub-directory. (optional)
     * @param recursePathParents If used with the path argument, delete all quotas at that path or any parent directory. (optional)
     * @param persona Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param path Only delete quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only delete quotas matching this type. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuotaQuotas(Boolean enforced, Boolean includeSnapshots, String zone, Boolean recursePathChildren, Boolean recursePathParents, String persona, String path, String type) throws ApiException {
        deleteQuotaQuotasWithHttpInfo(enforced, includeSnapshots, zone, recursePathChildren, recursePathParents, persona, path, type);
    }

    /**
     * 
     * Delete all or matching quotas.
     * @param enforced Only delete quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only delete quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param recursePathChildren If used with the path argument, delete all quotas at that path or any descendent sub-directory. (optional)
     * @param recursePathParents If used with the path argument, delete all quotas at that path or any parent directory. (optional)
     * @param persona Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param path Only delete quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only delete quotas matching this type. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuotaQuotasWithHttpInfo(Boolean enforced, Boolean includeSnapshots, String zone, Boolean recursePathChildren, Boolean recursePathParents, String persona, String path, String type) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuotaQuotasValidateBeforeCall(enforced, includeSnapshots, zone, recursePathChildren, recursePathParents, persona, path, type, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all or matching quotas.
     * @param enforced Only delete quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only delete quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param recursePathChildren If used with the path argument, delete all quotas at that path or any descendent sub-directory. (optional)
     * @param recursePathParents If used with the path argument, delete all quotas at that path or any parent directory. (optional)
     * @param persona Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param path Only delete quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only delete quotas matching this type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaQuotasAsync(Boolean enforced, Boolean includeSnapshots, String zone, Boolean recursePathChildren, Boolean recursePathParents, String persona, String path, String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuotaQuotasValidateBeforeCall(enforced, includeSnapshots, zone, recursePathChildren, recursePathParents, persona, path, type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuotaReport
     * @param quotaReportId Delete the report. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaReportCall(String quotaReportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/reports/{QuotaReportId}"
            .replaceAll("\\{" + "QuotaReportId" + "\\}", apiClient.escapeString(quotaReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuotaReportValidateBeforeCall(String quotaReportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaReportId' is set
        if (quotaReportId == null) {
            throw new ApiException("Missing the required parameter 'quotaReportId' when calling deleteQuotaReport(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuotaReportCall(quotaReportId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the report.
     * @param quotaReportId Delete the report. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuotaReport(String quotaReportId) throws ApiException {
        deleteQuotaReportWithHttpInfo(quotaReportId);
    }

    /**
     * 
     * Delete the report.
     * @param quotaReportId Delete the report. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuotaReportWithHttpInfo(String quotaReportId) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuotaReportValidateBeforeCall(quotaReportId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the report.
     * @param quotaReportId Delete the report. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaReportAsync(String quotaReportId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuotaReportValidateBeforeCall(quotaReportId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSettingsMapping
     * @param settingsMappingId Delete the mapping. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsMappingCall(String settingsMappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/mappings/{SettingsMappingId}"
            .replaceAll("\\{" + "SettingsMappingId" + "\\}", apiClient.escapeString(settingsMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSettingsMappingValidateBeforeCall(String settingsMappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsMappingId' is set
        if (settingsMappingId == null) {
            throw new ApiException("Missing the required parameter 'settingsMappingId' when calling deleteSettingsMapping(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSettingsMappingCall(settingsMappingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the mapping.
     * @param settingsMappingId Delete the mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSettingsMapping(String settingsMappingId) throws ApiException {
        deleteSettingsMappingWithHttpInfo(settingsMappingId);
    }

    /**
     * 
     * Delete the mapping.
     * @param settingsMappingId Delete the mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSettingsMappingWithHttpInfo(String settingsMappingId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSettingsMappingValidateBeforeCall(settingsMappingId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the mapping.
     * @param settingsMappingId Delete the mapping. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsMappingAsync(String settingsMappingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSettingsMappingValidateBeforeCall(settingsMappingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSettingsMappings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsMappingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSettingsMappingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSettingsMappingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all rules.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSettingsMappings() throws ApiException {
        deleteSettingsMappingsWithHttpInfo();
    }

    /**
     * 
     * Delete all rules.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSettingsMappingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteSettingsMappingsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all rules.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsMappingsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSettingsMappingsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSettingsNotification
     * @param settingsNotificationId Delete the notification rule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsNotificationCall(String settingsNotificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/notifications/{SettingsNotificationId}"
            .replaceAll("\\{" + "SettingsNotificationId" + "\\}", apiClient.escapeString(settingsNotificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSettingsNotificationValidateBeforeCall(String settingsNotificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsNotificationId' is set
        if (settingsNotificationId == null) {
            throw new ApiException("Missing the required parameter 'settingsNotificationId' when calling deleteSettingsNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSettingsNotificationCall(settingsNotificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the notification rule.
     * @param settingsNotificationId Delete the notification rule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSettingsNotification(String settingsNotificationId) throws ApiException {
        deleteSettingsNotificationWithHttpInfo(settingsNotificationId);
    }

    /**
     * 
     * Delete the notification rule.
     * @param settingsNotificationId Delete the notification rule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSettingsNotificationWithHttpInfo(String settingsNotificationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSettingsNotificationValidateBeforeCall(settingsNotificationId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the notification rule.
     * @param settingsNotificationId Delete the notification rule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsNotificationAsync(String settingsNotificationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSettingsNotificationValidateBeforeCall(settingsNotificationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSettingsNotifications
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsNotificationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSettingsNotificationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSettingsNotificationsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all rules.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSettingsNotifications() throws ApiException {
        deleteSettingsNotificationsWithHttpInfo();
    }

    /**
     * 
     * Delete all rules.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSettingsNotificationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteSettingsNotificationsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all rules.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsNotificationsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSettingsNotificationsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getQuotaLicense
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuotaLicenseCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/quota/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuotaLicenseValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getQuotaLicenseCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve license information.
     * @return LicenseLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseLicense getQuotaLicense() throws ApiException {
        ApiResponse<LicenseLicense> resp = getQuotaLicenseWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve license information.
     * @return ApiResponse&lt;LicenseLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseLicense> getQuotaLicenseWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getQuotaLicenseValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LicenseLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve license information.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuotaLicenseAsync(final ApiCallback<LicenseLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuotaLicenseValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuotaQuota
     * @param quotaQuotaId Retrieve quota information. (required)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuotaQuotaCall(String quotaQuotaId, Boolean resolveNames, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{QuotaQuotaId}"
            .replaceAll("\\{" + "QuotaQuotaId" + "\\}", apiClient.escapeString(quotaQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuotaQuotaValidateBeforeCall(String quotaQuotaId, Boolean resolveNames, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaQuotaId' is set
        if (quotaQuotaId == null) {
            throw new ApiException("Missing the required parameter 'quotaQuotaId' when calling getQuotaQuota(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuotaQuotaCall(quotaQuotaId, resolveNames, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve quota information.
     * @param quotaQuotaId Retrieve quota information. (required)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @return QuotaQuotas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaQuotas getQuotaQuota(String quotaQuotaId, Boolean resolveNames, String zone) throws ApiException {
        ApiResponse<QuotaQuotas> resp = getQuotaQuotaWithHttpInfo(quotaQuotaId, resolveNames, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve quota information.
     * @param quotaQuotaId Retrieve quota information. (required)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @return ApiResponse&lt;QuotaQuotas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaQuotas> getQuotaQuotaWithHttpInfo(String quotaQuotaId, Boolean resolveNames, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getQuotaQuotaValidateBeforeCall(quotaQuotaId, resolveNames, zone, null, null);
        Type localVarReturnType = new TypeToken<QuotaQuotas>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve quota information.
     * @param quotaQuotaId Retrieve quota information. (required)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuotaQuotaAsync(String quotaQuotaId, Boolean resolveNames, String zone, final ApiCallback<QuotaQuotas> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuotaQuotaValidateBeforeCall(quotaQuotaId, resolveNames, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaQuotas>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuotaQuotasSummary
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuotaQuotasSummaryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuotaQuotasSummaryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getQuotaQuotasSummaryCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return summary information about quotas.
     * @return QuotaQuotasSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaQuotasSummary getQuotaQuotasSummary() throws ApiException {
        ApiResponse<QuotaQuotasSummary> resp = getQuotaQuotasSummaryWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Return summary information about quotas.
     * @return ApiResponse&lt;QuotaQuotasSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaQuotasSummary> getQuotaQuotasSummaryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getQuotaQuotasSummaryValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<QuotaQuotasSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return summary information about quotas.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuotaQuotasSummaryAsync(final ApiCallback<QuotaQuotasSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuotaQuotasSummaryValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaQuotasSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getQuotaReport
     * @param quotaReportId Retrieve report data (XML) or contents (meta-data). (required)
     * @param contents Display JSON meta-data contents instead of report data. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuotaReportCall(String quotaReportId, Boolean contents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/reports/{QuotaReportId}"
            .replaceAll("\\{" + "QuotaReportId" + "\\}", apiClient.escapeString(quotaReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contents != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contents", contents));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuotaReportValidateBeforeCall(String quotaReportId, Boolean contents, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaReportId' is set
        if (quotaReportId == null) {
            throw new ApiException("Missing the required parameter 'quotaReportId' when calling getQuotaReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuotaReportCall(quotaReportId, contents, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve report data (XML) or contents (meta-data).
     * @param quotaReportId Retrieve report data (XML) or contents (meta-data). (required)
     * @param contents Display JSON meta-data contents instead of report data. (optional)
     * @return ReportAbout
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportAbout getQuotaReport(String quotaReportId, Boolean contents) throws ApiException {
        ApiResponse<ReportAbout> resp = getQuotaReportWithHttpInfo(quotaReportId, contents);
        return resp.getData();
    }

    /**
     * 
     * Retrieve report data (XML) or contents (meta-data).
     * @param quotaReportId Retrieve report data (XML) or contents (meta-data). (required)
     * @param contents Display JSON meta-data contents instead of report data. (optional)
     * @return ApiResponse&lt;ReportAbout&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportAbout> getQuotaReportWithHttpInfo(String quotaReportId, Boolean contents) throws ApiException {
        com.squareup.okhttp.Call call = getQuotaReportValidateBeforeCall(quotaReportId, contents, null, null);
        Type localVarReturnType = new TypeToken<ReportAbout>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve report data (XML) or contents (meta-data).
     * @param quotaReportId Retrieve report data (XML) or contents (meta-data). (required)
     * @param contents Display JSON meta-data contents instead of report data. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuotaReportAsync(String quotaReportId, Boolean contents, final ApiCallback<ReportAbout> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuotaReportValidateBeforeCall(quotaReportId, contents, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportAbout>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsMapping
     * @param settingsMappingId Retrieve the mapping information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsMappingCall(String settingsMappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/mappings/{SettingsMappingId}"
            .replaceAll("\\{" + "SettingsMappingId" + "\\}", apiClient.escapeString(settingsMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsMappingValidateBeforeCall(String settingsMappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsMappingId' is set
        if (settingsMappingId == null) {
            throw new ApiException("Missing the required parameter 'settingsMappingId' when calling getSettingsMapping(Async)");
        }
        

        com.squareup.okhttp.Call call = getSettingsMappingCall(settingsMappingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the mapping information.
     * @param settingsMappingId Retrieve the mapping information. (required)
     * @return SettingsMappings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsMappings getSettingsMapping(String settingsMappingId) throws ApiException {
        ApiResponse<SettingsMappings> resp = getSettingsMappingWithHttpInfo(settingsMappingId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the mapping information.
     * @param settingsMappingId Retrieve the mapping information. (required)
     * @return ApiResponse&lt;SettingsMappings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsMappings> getSettingsMappingWithHttpInfo(String settingsMappingId) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsMappingValidateBeforeCall(settingsMappingId, null, null);
        Type localVarReturnType = new TypeToken<SettingsMappings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the mapping information.
     * @param settingsMappingId Retrieve the mapping information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsMappingAsync(String settingsMappingId, final ApiCallback<SettingsMappings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsMappingValidateBeforeCall(settingsMappingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsMappings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsNotification
     * @param settingsNotificationId Retrieve notification rule information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsNotificationCall(String settingsNotificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/notifications/{SettingsNotificationId}"
            .replaceAll("\\{" + "SettingsNotificationId" + "\\}", apiClient.escapeString(settingsNotificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsNotificationValidateBeforeCall(String settingsNotificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsNotificationId' is set
        if (settingsNotificationId == null) {
            throw new ApiException("Missing the required parameter 'settingsNotificationId' when calling getSettingsNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = getSettingsNotificationCall(settingsNotificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve notification rule information.
     * @param settingsNotificationId Retrieve notification rule information. (required)
     * @return QuotaNotifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaNotifications getSettingsNotification(String settingsNotificationId) throws ApiException {
        ApiResponse<QuotaNotifications> resp = getSettingsNotificationWithHttpInfo(settingsNotificationId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve notification rule information.
     * @param settingsNotificationId Retrieve notification rule information. (required)
     * @return ApiResponse&lt;QuotaNotifications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaNotifications> getSettingsNotificationWithHttpInfo(String settingsNotificationId) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsNotificationValidateBeforeCall(settingsNotificationId, null, null);
        Type localVarReturnType = new TypeToken<QuotaNotifications>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve notification rule information.
     * @param settingsNotificationId Retrieve notification rule information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsNotificationAsync(String settingsNotificationId, final ApiCallback<QuotaNotifications> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsNotificationValidateBeforeCall(settingsNotificationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaNotifications>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsReports
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsReportsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsReportsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSettingsReportsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all settings.
     * @return SettingsReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsReports getSettingsReports() throws ApiException {
        ApiResponse<SettingsReports> resp = getSettingsReportsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all settings.
     * @return ApiResponse&lt;SettingsReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsReports> getSettingsReportsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSettingsReportsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SettingsReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsReportsAsync(final ApiCallback<SettingsReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsReportsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listQuotaQuotas
     * @param enforced Only list quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only list quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param recursePathChildren If used with the path argument, match all quotas at that path or any descendent sub-directory. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param recursePathParents If used with the path argument, match all quotas at that path or any parent directory. (optional)
     * @param persona Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param exceeded Set to true to only list quotas which have exceeded one or more of their thresholds. (optional)
     * @param path Only list quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only list quotas matching this type. (optional)
     * @param reportId Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listQuotaQuotasCall(Boolean enforced, Boolean includeSnapshots, String zone, String resume, Boolean recursePathChildren, Boolean resolveNames, Boolean recursePathParents, String persona, Integer limit, Boolean exceeded, String path, String type, String reportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (enforced != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("enforced", enforced));
        if (includeSnapshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include_snapshots", includeSnapshots));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (recursePathChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recurse_path_children", recursePathChildren));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (recursePathParents != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recurse_path_parents", recursePathParents));
        if (persona != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("persona", persona));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (exceeded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exceeded", exceeded));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (reportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("report_id", reportId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listQuotaQuotasValidateBeforeCall(Boolean enforced, Boolean includeSnapshots, String zone, String resume, Boolean recursePathChildren, Boolean resolveNames, Boolean recursePathParents, String persona, Integer limit, Boolean exceeded, String path, String type, String reportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listQuotaQuotasCall(enforced, includeSnapshots, zone, resume, recursePathChildren, resolveNames, recursePathParents, persona, limit, exceeded, path, type, reportId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all or matching quotas. Can also be used to retrieve quota state from existing reports. For any query argument not supplied, the default behavior is return all.
     * @param enforced Only list quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only list quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param recursePathChildren If used with the path argument, match all quotas at that path or any descendent sub-directory. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param recursePathParents If used with the path argument, match all quotas at that path or any parent directory. (optional)
     * @param persona Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param exceeded Set to true to only list quotas which have exceeded one or more of their thresholds. (optional)
     * @param path Only list quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only list quotas matching this type. (optional)
     * @param reportId Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports. (optional)
     * @return QuotaQuotasExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaQuotasExtended listQuotaQuotas(Boolean enforced, Boolean includeSnapshots, String zone, String resume, Boolean recursePathChildren, Boolean resolveNames, Boolean recursePathParents, String persona, Integer limit, Boolean exceeded, String path, String type, String reportId) throws ApiException {
        ApiResponse<QuotaQuotasExtended> resp = listQuotaQuotasWithHttpInfo(enforced, includeSnapshots, zone, resume, recursePathChildren, resolveNames, recursePathParents, persona, limit, exceeded, path, type, reportId);
        return resp.getData();
    }

    /**
     * 
     * List all or matching quotas. Can also be used to retrieve quota state from existing reports. For any query argument not supplied, the default behavior is return all.
     * @param enforced Only list quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only list quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param recursePathChildren If used with the path argument, match all quotas at that path or any descendent sub-directory. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param recursePathParents If used with the path argument, match all quotas at that path or any parent directory. (optional)
     * @param persona Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param exceeded Set to true to only list quotas which have exceeded one or more of their thresholds. (optional)
     * @param path Only list quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only list quotas matching this type. (optional)
     * @param reportId Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports. (optional)
     * @return ApiResponse&lt;QuotaQuotasExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaQuotasExtended> listQuotaQuotasWithHttpInfo(Boolean enforced, Boolean includeSnapshots, String zone, String resume, Boolean recursePathChildren, Boolean resolveNames, Boolean recursePathParents, String persona, Integer limit, Boolean exceeded, String path, String type, String reportId) throws ApiException {
        com.squareup.okhttp.Call call = listQuotaQuotasValidateBeforeCall(enforced, includeSnapshots, zone, resume, recursePathChildren, resolveNames, recursePathParents, persona, limit, exceeded, path, type, reportId, null, null);
        Type localVarReturnType = new TypeToken<QuotaQuotasExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all or matching quotas. Can also be used to retrieve quota state from existing reports. For any query argument not supplied, the default behavior is return all.
     * @param enforced Only list quotas with this enforcement (non-accounting). (optional)
     * @param includeSnapshots Only list quotas with this setting for include_snapshots. (optional)
     * @param zone Optional named zone to use for user and group resolution. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param recursePathChildren If used with the path argument, match all quotas at that path or any descendent sub-directory. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param recursePathParents If used with the path argument, match all quotas at that path or any parent directory. (optional)
     * @param persona Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is &lt;PERSONA_TYPE&gt;:&lt;string/integer&gt;, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param exceeded Set to true to only list quotas which have exceeded one or more of their thresholds. (optional)
     * @param path Only list quotas matching this path (see also recurse_path_*). (optional)
     * @param type Only list quotas matching this type. (optional)
     * @param reportId Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listQuotaQuotasAsync(Boolean enforced, Boolean includeSnapshots, String zone, String resume, Boolean recursePathChildren, Boolean resolveNames, Boolean recursePathParents, String persona, Integer limit, Boolean exceeded, String path, String type, String reportId, final ApiCallback<QuotaQuotasExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listQuotaQuotasValidateBeforeCall(enforced, includeSnapshots, zone, resume, recursePathChildren, resolveNames, recursePathParents, persona, limit, exceeded, path, type, reportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaQuotasExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listQuotaReports
     * @param sort Order results by this field. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param generated Only list reports matching this source. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list reports matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listQuotaReportsCall(String sort, String resume, String generated, Integer limit, String type, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (generated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("generated", generated));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listQuotaReportsValidateBeforeCall(String sort, String resume, String generated, Integer limit, String type, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listQuotaReportsCall(sort, resume, generated, limit, type, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all or matching reports.
     * @param sort Order results by this field. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param generated Only list reports matching this source. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list reports matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @return QuotaReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaReports listQuotaReports(String sort, String resume, String generated, Integer limit, String type, String dir) throws ApiException {
        ApiResponse<QuotaReports> resp = listQuotaReportsWithHttpInfo(sort, resume, generated, limit, type, dir);
        return resp.getData();
    }

    /**
     * 
     * List all or matching reports.
     * @param sort Order results by this field. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param generated Only list reports matching this source. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list reports matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;QuotaReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaReports> listQuotaReportsWithHttpInfo(String sort, String resume, String generated, Integer limit, String type, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listQuotaReportsValidateBeforeCall(sort, resume, generated, limit, type, dir, null, null);
        Type localVarReturnType = new TypeToken<QuotaReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all or matching reports.
     * @param sort Order results by this field. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param generated Only list reports matching this source. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list reports matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listQuotaReportsAsync(String sort, String resume, String generated, Integer limit, String type, String dir, final ApiCallback<QuotaReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listQuotaReportsValidateBeforeCall(sort, resume, generated, limit, type, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSettingsMappings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSettingsMappingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSettingsMappingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSettingsMappingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all rules.
     * @return SettingsMappings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsMappings listSettingsMappings() throws ApiException {
        ApiResponse<SettingsMappings> resp = listSettingsMappingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all rules.
     * @return ApiResponse&lt;SettingsMappings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsMappings> listSettingsMappingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listSettingsMappingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SettingsMappings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all rules.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSettingsMappingsAsync(final ApiCallback<SettingsMappings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSettingsMappingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsMappings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSettingsNotifications
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSettingsNotificationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSettingsNotificationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSettingsNotificationsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all rules.
     * @return QuotaNotificationsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaNotificationsExtended listSettingsNotifications() throws ApiException {
        ApiResponse<QuotaNotificationsExtended> resp = listSettingsNotificationsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all rules.
     * @return ApiResponse&lt;QuotaNotificationsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaNotificationsExtended> listSettingsNotificationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listSettingsNotificationsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<QuotaNotificationsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all rules.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSettingsNotificationsAsync(final ApiCallback<QuotaNotificationsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSettingsNotificationsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaNotificationsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateQuotaQuota
     * @param quotaQuota  (required)
     * @param quotaQuotaId Modify quota. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuotaQuotaCall(QuotaQuota quotaQuota, String quotaQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quotaQuota;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{QuotaQuotaId}"
            .replaceAll("\\{" + "QuotaQuotaId" + "\\}", apiClient.escapeString(quotaQuotaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuotaQuotaValidateBeforeCall(QuotaQuota quotaQuota, String quotaQuotaId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaQuota' is set
        if (quotaQuota == null) {
            throw new ApiException("Missing the required parameter 'quotaQuota' when calling updateQuotaQuota(Async)");
        }
        
        // verify the required parameter 'quotaQuotaId' is set
        if (quotaQuotaId == null) {
            throw new ApiException("Missing the required parameter 'quotaQuotaId' when calling updateQuotaQuota(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuotaQuotaCall(quotaQuota, quotaQuotaId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify quota. All input fields are optional, but one or more must be supplied.
     * @param quotaQuota  (required)
     * @param quotaQuotaId Modify quota. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuotaQuota(QuotaQuota quotaQuota, String quotaQuotaId) throws ApiException {
        updateQuotaQuotaWithHttpInfo(quotaQuota, quotaQuotaId);
    }

    /**
     * 
     * Modify quota. All input fields are optional, but one or more must be supplied.
     * @param quotaQuota  (required)
     * @param quotaQuotaId Modify quota. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuotaQuotaWithHttpInfo(QuotaQuota quotaQuota, String quotaQuotaId) throws ApiException {
        com.squareup.okhttp.Call call = updateQuotaQuotaValidateBeforeCall(quotaQuota, quotaQuotaId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify quota. All input fields are optional, but one or more must be supplied.
     * @param quotaQuota  (required)
     * @param quotaQuotaId Modify quota. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuotaQuotaAsync(QuotaQuota quotaQuota, String quotaQuotaId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuotaQuotaValidateBeforeCall(quotaQuota, quotaQuotaId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsMapping
     * @param settingsMapping  (required)
     * @param settingsMappingId Modify the mapping. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsMappingCall(SettingsMappingExtended settingsMapping, String settingsMappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsMapping;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/mappings/{SettingsMappingId}"
            .replaceAll("\\{" + "SettingsMappingId" + "\\}", apiClient.escapeString(settingsMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsMappingValidateBeforeCall(SettingsMappingExtended settingsMapping, String settingsMappingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsMapping' is set
        if (settingsMapping == null) {
            throw new ApiException("Missing the required parameter 'settingsMapping' when calling updateSettingsMapping(Async)");
        }
        
        // verify the required parameter 'settingsMappingId' is set
        if (settingsMappingId == null) {
            throw new ApiException("Missing the required parameter 'settingsMappingId' when calling updateSettingsMapping(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsMappingCall(settingsMapping, settingsMappingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the mapping.
     * @param settingsMapping  (required)
     * @param settingsMappingId Modify the mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsMapping(SettingsMappingExtended settingsMapping, String settingsMappingId) throws ApiException {
        updateSettingsMappingWithHttpInfo(settingsMapping, settingsMappingId);
    }

    /**
     * 
     * Modify the mapping.
     * @param settingsMapping  (required)
     * @param settingsMappingId Modify the mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsMappingWithHttpInfo(SettingsMappingExtended settingsMapping, String settingsMappingId) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsMappingValidateBeforeCall(settingsMapping, settingsMappingId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the mapping.
     * @param settingsMapping  (required)
     * @param settingsMappingId Modify the mapping. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsMappingAsync(SettingsMappingExtended settingsMapping, String settingsMappingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsMappingValidateBeforeCall(settingsMapping, settingsMappingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsNotification
     * @param settingsNotification  (required)
     * @param settingsNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsNotificationCall(QuotaNotification settingsNotification, String settingsNotificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsNotification;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/notifications/{SettingsNotificationId}"
            .replaceAll("\\{" + "SettingsNotificationId" + "\\}", apiClient.escapeString(settingsNotificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsNotificationValidateBeforeCall(QuotaNotification settingsNotification, String settingsNotificationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsNotification' is set
        if (settingsNotification == null) {
            throw new ApiException("Missing the required parameter 'settingsNotification' when calling updateSettingsNotification(Async)");
        }
        
        // verify the required parameter 'settingsNotificationId' is set
        if (settingsNotificationId == null) {
            throw new ApiException("Missing the required parameter 'settingsNotificationId' when calling updateSettingsNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsNotificationCall(settingsNotification, settingsNotificationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     * @param settingsNotification  (required)
     * @param settingsNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsNotification(QuotaNotification settingsNotification, String settingsNotificationId) throws ApiException {
        updateSettingsNotificationWithHttpInfo(settingsNotification, settingsNotificationId);
    }

    /**
     * 
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     * @param settingsNotification  (required)
     * @param settingsNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsNotificationWithHttpInfo(QuotaNotification settingsNotification, String settingsNotificationId) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsNotificationValidateBeforeCall(settingsNotification, settingsNotificationId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     * @param settingsNotification  (required)
     * @param settingsNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsNotificationAsync(QuotaNotification settingsNotification, String settingsNotificationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsNotificationValidateBeforeCall(settingsNotification, settingsNotificationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsReports
     * @param settingsReports  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsReportsCall(SettingsReportsExtended settingsReports, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsReports;

        // create path and map variables
        String localVarPath = "/platform/1/quota/settings/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsReportsValidateBeforeCall(SettingsReportsExtended settingsReports, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsReports' is set
        if (settingsReports == null) {
            throw new ApiException("Missing the required parameter 'settingsReports' when calling updateSettingsReports(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsReportsCall(settingsReports, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more settings.
     * @param settingsReports  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsReports(SettingsReportsExtended settingsReports) throws ApiException {
        updateSettingsReportsWithHttpInfo(settingsReports);
    }

    /**
     * 
     * Modify one or more settings.
     * @param settingsReports  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsReportsWithHttpInfo(SettingsReportsExtended settingsReports) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsReportsValidateBeforeCall(settingsReports, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more settings.
     * @param settingsReports  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsReportsAsync(SettingsReportsExtended settingsReports, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsReportsValidateBeforeCall(settingsReports, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
