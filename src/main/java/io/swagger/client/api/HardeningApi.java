/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateHardeningApplyItemResponse;
import io.swagger.client.model.CreateHardeningResolveItemResponse;
import io.swagger.client.model.CreateHardeningRevertItemResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.HardeningApplyItem;
import io.swagger.client.model.HardeningResolveItem;
import io.swagger.client.model.HardeningState;
import io.swagger.client.model.HardeningStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HardeningApi {
    private ApiClient apiClient;

    public HardeningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HardeningApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHardeningApplyItem
     * @param hardeningApplyItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHardeningApplyItemCall(HardeningApplyItem hardeningApplyItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardeningApplyItem;

        // create path and map variables
        String localVarPath = "/platform/3/hardening/apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHardeningApplyItemValidateBeforeCall(HardeningApplyItem hardeningApplyItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardeningApplyItem' is set
        if (hardeningApplyItem == null) {
            throw new ApiException("Missing the required parameter 'hardeningApplyItem' when calling createHardeningApplyItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createHardeningApplyItemCall(hardeningApplyItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Apply hardening on the cluster.
     * @param hardeningApplyItem  (required)
     * @return CreateHardeningApplyItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateHardeningApplyItemResponse createHardeningApplyItem(HardeningApplyItem hardeningApplyItem) throws ApiException {
        ApiResponse<CreateHardeningApplyItemResponse> resp = createHardeningApplyItemWithHttpInfo(hardeningApplyItem);
        return resp.getData();
    }

    /**
     * 
     * Apply hardening on the cluster.
     * @param hardeningApplyItem  (required)
     * @return ApiResponse&lt;CreateHardeningApplyItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateHardeningApplyItemResponse> createHardeningApplyItemWithHttpInfo(HardeningApplyItem hardeningApplyItem) throws ApiException {
        com.squareup.okhttp.Call call = createHardeningApplyItemValidateBeforeCall(hardeningApplyItem, null, null);
        Type localVarReturnType = new TypeToken<CreateHardeningApplyItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Apply hardening on the cluster.
     * @param hardeningApplyItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHardeningApplyItemAsync(HardeningApplyItem hardeningApplyItem, final ApiCallback<CreateHardeningApplyItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHardeningApplyItemValidateBeforeCall(hardeningApplyItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateHardeningApplyItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createHardeningResolveItem
     * @param hardeningResolveItem  (required)
     * @param accept If true, execution proceeds to resolve all issues. If false, executrion aborts. This is a required argument. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHardeningResolveItemCall(HardeningResolveItem hardeningResolveItem, Boolean accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardeningResolveItem;

        // create path and map variables
        String localVarPath = "/platform/3/hardening/resolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accept != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accept", accept));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHardeningResolveItemValidateBeforeCall(HardeningResolveItem hardeningResolveItem, Boolean accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardeningResolveItem' is set
        if (hardeningResolveItem == null) {
            throw new ApiException("Missing the required parameter 'hardeningResolveItem' when calling createHardeningResolveItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createHardeningResolveItemCall(hardeningResolveItem, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Resolve issues related to hardening, found in current cluster configuration.
     * @param hardeningResolveItem  (required)
     * @param accept If true, execution proceeds to resolve all issues. If false, executrion aborts. This is a required argument. (optional)
     * @return CreateHardeningResolveItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateHardeningResolveItemResponse createHardeningResolveItem(HardeningResolveItem hardeningResolveItem, Boolean accept) throws ApiException {
        ApiResponse<CreateHardeningResolveItemResponse> resp = createHardeningResolveItemWithHttpInfo(hardeningResolveItem, accept);
        return resp.getData();
    }

    /**
     * 
     * Resolve issues related to hardening, found in current cluster configuration.
     * @param hardeningResolveItem  (required)
     * @param accept If true, execution proceeds to resolve all issues. If false, executrion aborts. This is a required argument. (optional)
     * @return ApiResponse&lt;CreateHardeningResolveItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateHardeningResolveItemResponse> createHardeningResolveItemWithHttpInfo(HardeningResolveItem hardeningResolveItem, Boolean accept) throws ApiException {
        com.squareup.okhttp.Call call = createHardeningResolveItemValidateBeforeCall(hardeningResolveItem, accept, null, null);
        Type localVarReturnType = new TypeToken<CreateHardeningResolveItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resolve issues related to hardening, found in current cluster configuration.
     * @param hardeningResolveItem  (required)
     * @param accept If true, execution proceeds to resolve all issues. If false, executrion aborts. This is a required argument. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHardeningResolveItemAsync(HardeningResolveItem hardeningResolveItem, Boolean accept, final ApiCallback<CreateHardeningResolveItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHardeningResolveItemValidateBeforeCall(hardeningResolveItem, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateHardeningResolveItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createHardeningRevertItem
     * @param hardeningRevertItem  (required)
     * @param force If specified, revert operation continues even in case of a failure. Default is false in which case revert stops at the first failure. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHardeningRevertItemCall(Empty hardeningRevertItem, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardeningRevertItem;

        // create path and map variables
        String localVarPath = "/platform/3/hardening/revert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHardeningRevertItemValidateBeforeCall(Empty hardeningRevertItem, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardeningRevertItem' is set
        if (hardeningRevertItem == null) {
            throw new ApiException("Missing the required parameter 'hardeningRevertItem' when calling createHardeningRevertItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createHardeningRevertItemCall(hardeningRevertItem, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Revert hardening on the cluster.
     * @param hardeningRevertItem  (required)
     * @param force If specified, revert operation continues even in case of a failure. Default is false in which case revert stops at the first failure. (optional)
     * @return CreateHardeningRevertItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateHardeningRevertItemResponse createHardeningRevertItem(Empty hardeningRevertItem, Boolean force) throws ApiException {
        ApiResponse<CreateHardeningRevertItemResponse> resp = createHardeningRevertItemWithHttpInfo(hardeningRevertItem, force);
        return resp.getData();
    }

    /**
     * 
     * Revert hardening on the cluster.
     * @param hardeningRevertItem  (required)
     * @param force If specified, revert operation continues even in case of a failure. Default is false in which case revert stops at the first failure. (optional)
     * @return ApiResponse&lt;CreateHardeningRevertItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateHardeningRevertItemResponse> createHardeningRevertItemWithHttpInfo(Empty hardeningRevertItem, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = createHardeningRevertItemValidateBeforeCall(hardeningRevertItem, force, null, null);
        Type localVarReturnType = new TypeToken<CreateHardeningRevertItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Revert hardening on the cluster.
     * @param hardeningRevertItem  (required)
     * @param force If specified, revert operation continues even in case of a failure. Default is false in which case revert stops at the first failure. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHardeningRevertItemAsync(Empty hardeningRevertItem, Boolean force, final ApiCallback<CreateHardeningRevertItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHardeningRevertItemValidateBeforeCall(hardeningRevertItem, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateHardeningRevertItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHardeningState
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHardeningStateCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/hardening/state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHardeningStateValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHardeningStateCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the state of the current hardening operation, if one is happening.  Note that this is different from the /status resource, which returns the overall hardening status of the cluster.
     * @return HardeningState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HardeningState getHardeningState() throws ApiException {
        ApiResponse<HardeningState> resp = getHardeningStateWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get the state of the current hardening operation, if one is happening.  Note that this is different from the /status resource, which returns the overall hardening status of the cluster.
     * @return ApiResponse&lt;HardeningState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HardeningState> getHardeningStateWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHardeningStateValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<HardeningState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the state of the current hardening operation, if one is happening.  Note that this is different from the /status resource, which returns the overall hardening status of the cluster.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHardeningStateAsync(final ApiCallback<HardeningState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHardeningStateValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HardeningState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHardeningStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHardeningStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/hardening/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHardeningStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHardeningStatusCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a message indicating whether or not the cluster is hardened. Note that this is different from the /state resource, which returns the state of a specific hardening operation (apply or revert).
     * @return HardeningStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HardeningStatus getHardeningStatus() throws ApiException {
        ApiResponse<HardeningStatus> resp = getHardeningStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get a message indicating whether or not the cluster is hardened. Note that this is different from the /state resource, which returns the state of a specific hardening operation (apply or revert).
     * @return ApiResponse&lt;HardeningStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HardeningStatus> getHardeningStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHardeningStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<HardeningStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a message indicating whether or not the cluster is hardened. Note that this is different from the /state resource, which returns the state of a specific hardening operation (apply or revert).
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHardeningStatusAsync(final ApiCallback<HardeningStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHardeningStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HardeningStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
