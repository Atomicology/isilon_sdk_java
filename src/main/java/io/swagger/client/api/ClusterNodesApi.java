/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.DrivesDriveFirmware;
import io.swagger.client.model.DrivesDriveFirmwareUpdate;
import io.swagger.client.model.DrivesDriveFirmwareUpdateItem;
import io.swagger.client.model.DrivesDriveFormatItem;
import io.swagger.client.model.DrivesDrivePurposeItem;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.NodeDriveconfig;
import io.swagger.client.model.NodeDriveconfigExtended;
import io.swagger.client.model.NodeDrives;
import io.swagger.client.model.NodeDrivesPurposelist;
import io.swagger.client.model.NodeHardware;
import io.swagger.client.model.NodeHardwareFast;
import io.swagger.client.model.NodePartitions;
import io.swagger.client.model.NodeSensors;
import io.swagger.client.model.NodeSleds;
import io.swagger.client.model.NodeState;
import io.swagger.client.model.NodeStateReadonly;
import io.swagger.client.model.NodeStateReadonlyExtended;
import io.swagger.client.model.NodeStateServicelight;
import io.swagger.client.model.NodeStateServicelightExtended;
import io.swagger.client.model.NodeStateSmartfail;
import io.swagger.client.model.NodeStateSmartfailExtended;
import io.swagger.client.model.NodeStatus;
import io.swagger.client.model.NodeStatusBatterystatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClusterNodesApi {
    private ApiClient apiClient;

    public ClusterNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClusterNodesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDrivesDriveAddItem
     * @param drivesDriveAddItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveAddItemCall(Empty drivesDriveAddItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDriveAddItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/add"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDriveAddItemValidateBeforeCall(Empty drivesDriveAddItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDriveAddItem' is set
        if (drivesDriveAddItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDriveAddItem' when calling createDrivesDriveAddItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDriveAddItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDriveAddItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDriveAddItemCall(drivesDriveAddItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add a drive to a node.
     * @param drivesDriveAddItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDriveAddItem(Empty drivesDriveAddItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDriveAddItemWithHttpInfo(drivesDriveAddItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Add a drive to a node.
     * @param drivesDriveAddItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDriveAddItemWithHttpInfo(Empty drivesDriveAddItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDriveAddItemValidateBeforeCall(drivesDriveAddItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a drive to a node.
     * @param drivesDriveAddItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveAddItemAsync(Empty drivesDriveAddItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDriveAddItemValidateBeforeCall(drivesDriveAddItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDrivesDriveFirmwareUpdateItem
     * @param drivesDriveFirmwareUpdateItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveFirmwareUpdateItemCall(DrivesDriveFirmwareUpdateItem drivesDriveFirmwareUpdateItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDriveFirmwareUpdateItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/firmware/update"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDriveFirmwareUpdateItemValidateBeforeCall(DrivesDriveFirmwareUpdateItem drivesDriveFirmwareUpdateItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDriveFirmwareUpdateItem' is set
        if (drivesDriveFirmwareUpdateItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDriveFirmwareUpdateItem' when calling createDrivesDriveFirmwareUpdateItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDriveFirmwareUpdateItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDriveFirmwareUpdateItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDriveFirmwareUpdateItemCall(drivesDriveFirmwareUpdateItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Start a drive firmware update.
     * @param drivesDriveFirmwareUpdateItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDriveFirmwareUpdateItem(DrivesDriveFirmwareUpdateItem drivesDriveFirmwareUpdateItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDriveFirmwareUpdateItemWithHttpInfo(drivesDriveFirmwareUpdateItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Start a drive firmware update.
     * @param drivesDriveFirmwareUpdateItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDriveFirmwareUpdateItemWithHttpInfo(DrivesDriveFirmwareUpdateItem drivesDriveFirmwareUpdateItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDriveFirmwareUpdateItemValidateBeforeCall(drivesDriveFirmwareUpdateItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start a drive firmware update.
     * @param drivesDriveFirmwareUpdateItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveFirmwareUpdateItemAsync(DrivesDriveFirmwareUpdateItem drivesDriveFirmwareUpdateItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDriveFirmwareUpdateItemValidateBeforeCall(drivesDriveFirmwareUpdateItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDrivesDriveFormatItem
     * @param drivesDriveFormatItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveFormatItemCall(DrivesDriveFormatItem drivesDriveFormatItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDriveFormatItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/format"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDriveFormatItemValidateBeforeCall(DrivesDriveFormatItem drivesDriveFormatItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDriveFormatItem' is set
        if (drivesDriveFormatItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDriveFormatItem' when calling createDrivesDriveFormatItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDriveFormatItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDriveFormatItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDriveFormatItemCall(drivesDriveFormatItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Format a drive for use by OneFS.
     * @param drivesDriveFormatItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDriveFormatItem(DrivesDriveFormatItem drivesDriveFormatItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDriveFormatItemWithHttpInfo(drivesDriveFormatItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Format a drive for use by OneFS.
     * @param drivesDriveFormatItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDriveFormatItemWithHttpInfo(DrivesDriveFormatItem drivesDriveFormatItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDriveFormatItemValidateBeforeCall(drivesDriveFormatItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Format a drive for use by OneFS.
     * @param drivesDriveFormatItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveFormatItemAsync(DrivesDriveFormatItem drivesDriveFormatItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDriveFormatItemValidateBeforeCall(drivesDriveFormatItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDrivesDrivePurposeItem
     * @param drivesDrivePurposeItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDrivePurposeItemCall(DrivesDrivePurposeItem drivesDrivePurposeItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDrivePurposeItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/purpose"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDrivePurposeItemValidateBeforeCall(DrivesDrivePurposeItem drivesDrivePurposeItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDrivePurposeItem' is set
        if (drivesDrivePurposeItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDrivePurposeItem' when calling createDrivesDrivePurposeItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDrivePurposeItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDrivePurposeItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDrivePurposeItemCall(drivesDrivePurposeItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Assign a drive to a specific use case.
     * @param drivesDrivePurposeItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDrivePurposeItem(DrivesDrivePurposeItem drivesDrivePurposeItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDrivePurposeItemWithHttpInfo(drivesDrivePurposeItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Assign a drive to a specific use case.
     * @param drivesDrivePurposeItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDrivePurposeItemWithHttpInfo(DrivesDrivePurposeItem drivesDrivePurposeItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDrivePurposeItemValidateBeforeCall(drivesDrivePurposeItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign a drive to a specific use case.
     * @param drivesDrivePurposeItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDrivePurposeItemAsync(DrivesDrivePurposeItem drivesDrivePurposeItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDrivePurposeItemValidateBeforeCall(drivesDrivePurposeItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDrivesDriveSmartfailItem
     * @param drivesDriveSmartfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveSmartfailItemCall(Empty drivesDriveSmartfailItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDriveSmartfailItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/smartfail"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDriveSmartfailItemValidateBeforeCall(Empty drivesDriveSmartfailItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDriveSmartfailItem' is set
        if (drivesDriveSmartfailItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDriveSmartfailItem' when calling createDrivesDriveSmartfailItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDriveSmartfailItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDriveSmartfailItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDriveSmartfailItemCall(drivesDriveSmartfailItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Remove a drive from use by OneFS.
     * @param drivesDriveSmartfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDriveSmartfailItem(Empty drivesDriveSmartfailItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDriveSmartfailItemWithHttpInfo(drivesDriveSmartfailItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Remove a drive from use by OneFS.
     * @param drivesDriveSmartfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDriveSmartfailItemWithHttpInfo(Empty drivesDriveSmartfailItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDriveSmartfailItemValidateBeforeCall(drivesDriveSmartfailItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a drive from use by OneFS.
     * @param drivesDriveSmartfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveSmartfailItemAsync(Empty drivesDriveSmartfailItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDriveSmartfailItemValidateBeforeCall(drivesDriveSmartfailItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDrivesDriveStopfailItem
     * @param drivesDriveStopfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveStopfailItemCall(Empty drivesDriveStopfailItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDriveStopfailItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/stopfail"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDriveStopfailItemValidateBeforeCall(Empty drivesDriveStopfailItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDriveStopfailItem' is set
        if (drivesDriveStopfailItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDriveStopfailItem' when calling createDrivesDriveStopfailItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDriveStopfailItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDriveStopfailItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDriveStopfailItemCall(drivesDriveStopfailItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Stop restriping from a smartfailing drive.
     * @param drivesDriveStopfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDriveStopfailItem(Empty drivesDriveStopfailItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDriveStopfailItemWithHttpInfo(drivesDriveStopfailItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Stop restriping from a smartfailing drive.
     * @param drivesDriveStopfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDriveStopfailItemWithHttpInfo(Empty drivesDriveStopfailItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDriveStopfailItemValidateBeforeCall(drivesDriveStopfailItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop restriping from a smartfailing drive.
     * @param drivesDriveStopfailItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveStopfailItemAsync(Empty drivesDriveStopfailItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDriveStopfailItemValidateBeforeCall(drivesDriveStopfailItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDrivesDriveSuspendItem
     * @param drivesDriveSuspendItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveSuspendItemCall(Empty drivesDriveSuspendItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = drivesDriveSuspendItem;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/suspend"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDrivesDriveSuspendItemValidateBeforeCall(Empty drivesDriveSuspendItem, Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'drivesDriveSuspendItem' is set
        if (drivesDriveSuspendItem == null) {
            throw new ApiException("Missing the required parameter 'drivesDriveSuspendItem' when calling createDrivesDriveSuspendItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createDrivesDriveSuspendItem(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling createDrivesDriveSuspendItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createDrivesDriveSuspendItemCall(drivesDriveSuspendItem, lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Temporarily remove a drive from use by OneFS.
     * @param drivesDriveSuspendItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createDrivesDriveSuspendItem(Empty drivesDriveSuspendItem, Integer lnn, String driveid) throws ApiException {
        ApiResponse<Empty> resp = createDrivesDriveSuspendItemWithHttpInfo(drivesDriveSuspendItem, lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Temporarily remove a drive from use by OneFS.
     * @param drivesDriveSuspendItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createDrivesDriveSuspendItemWithHttpInfo(Empty drivesDriveSuspendItem, Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = createDrivesDriveSuspendItemValidateBeforeCall(drivesDriveSuspendItem, lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Temporarily remove a drive from use by OneFS.
     * @param drivesDriveSuspendItem  (required)
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDrivesDriveSuspendItemAsync(Empty drivesDriveSuspendItem, Integer lnn, String driveid, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDrivesDriveSuspendItemValidateBeforeCall(drivesDriveSuspendItem, lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNodeRebootItem
     * @param nodeRebootItem  (required)
     * @param lnn  (required)
     * @param force Force reboot on Infinity platform even if a drive sled is not present. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNodeRebootItemCall(Empty nodeRebootItem, Integer lnn, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodeRebootItem;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/reboot"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNodeRebootItemValidateBeforeCall(Empty nodeRebootItem, Integer lnn, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeRebootItem' is set
        if (nodeRebootItem == null) {
            throw new ApiException("Missing the required parameter 'nodeRebootItem' when calling createNodeRebootItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createNodeRebootItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNodeRebootItemCall(nodeRebootItem, lnn, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Reboot the node specified by &lt;LNN&gt;.
     * @param nodeRebootItem  (required)
     * @param lnn  (required)
     * @param force Force reboot on Infinity platform even if a drive sled is not present. (optional)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNodeRebootItem(Empty nodeRebootItem, Integer lnn, Boolean force) throws ApiException {
        ApiResponse<Empty> resp = createNodeRebootItemWithHttpInfo(nodeRebootItem, lnn, force);
        return resp.getData();
    }

    /**
     * 
     * Reboot the node specified by &lt;LNN&gt;.
     * @param nodeRebootItem  (required)
     * @param lnn  (required)
     * @param force Force reboot on Infinity platform even if a drive sled is not present. (optional)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNodeRebootItemWithHttpInfo(Empty nodeRebootItem, Integer lnn, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = createNodeRebootItemValidateBeforeCall(nodeRebootItem, lnn, force, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reboot the node specified by &lt;LNN&gt;.
     * @param nodeRebootItem  (required)
     * @param lnn  (required)
     * @param force Force reboot on Infinity platform even if a drive sled is not present. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNodeRebootItemAsync(Empty nodeRebootItem, Integer lnn, Boolean force, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNodeRebootItemValidateBeforeCall(nodeRebootItem, lnn, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNodeShutdownItem
     * @param nodeShutdownItem  (required)
     * @param lnn  (required)
     * @param force Force shutdown on Infinity platform even if a drive sled is not present. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNodeShutdownItemCall(Empty nodeShutdownItem, Integer lnn, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodeShutdownItem;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/shutdown"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNodeShutdownItemValidateBeforeCall(Empty nodeShutdownItem, Integer lnn, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeShutdownItem' is set
        if (nodeShutdownItem == null) {
            throw new ApiException("Missing the required parameter 'nodeShutdownItem' when calling createNodeShutdownItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createNodeShutdownItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNodeShutdownItemCall(nodeShutdownItem, lnn, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Shutdown the node specified by &lt;LNN&gt;.
     * @param nodeShutdownItem  (required)
     * @param lnn  (required)
     * @param force Force shutdown on Infinity platform even if a drive sled is not present. (optional)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNodeShutdownItem(Empty nodeShutdownItem, Integer lnn, Boolean force) throws ApiException {
        ApiResponse<Empty> resp = createNodeShutdownItemWithHttpInfo(nodeShutdownItem, lnn, force);
        return resp.getData();
    }

    /**
     * 
     * Shutdown the node specified by &lt;LNN&gt;.
     * @param nodeShutdownItem  (required)
     * @param lnn  (required)
     * @param force Force shutdown on Infinity platform even if a drive sled is not present. (optional)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNodeShutdownItemWithHttpInfo(Empty nodeShutdownItem, Integer lnn, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = createNodeShutdownItemValidateBeforeCall(nodeShutdownItem, lnn, force, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Shutdown the node specified by &lt;LNN&gt;.
     * @param nodeShutdownItem  (required)
     * @param lnn  (required)
     * @param force Force shutdown on Infinity platform even if a drive sled is not present. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNodeShutdownItemAsync(Empty nodeShutdownItem, Integer lnn, Boolean force, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNodeShutdownItemValidateBeforeCall(nodeShutdownItem, lnn, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDrivesDriveFirmware
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDrivesDriveFirmwareCall(Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/firmware"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDrivesDriveFirmwareValidateBeforeCall(Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getDrivesDriveFirmware(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling getDrivesDriveFirmware(Async)");
        }
        

        com.squareup.okhttp.Call call = getDrivesDriveFirmwareCall(lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve drive firmware information.
     * @param lnn  (required)
     * @param driveid  (required)
     * @return DrivesDriveFirmware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DrivesDriveFirmware getDrivesDriveFirmware(Integer lnn, String driveid) throws ApiException {
        ApiResponse<DrivesDriveFirmware> resp = getDrivesDriveFirmwareWithHttpInfo(lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Retrieve drive firmware information.
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;DrivesDriveFirmware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DrivesDriveFirmware> getDrivesDriveFirmwareWithHttpInfo(Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = getDrivesDriveFirmwareValidateBeforeCall(lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<DrivesDriveFirmware>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve drive firmware information.
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDrivesDriveFirmwareAsync(Integer lnn, String driveid, final ApiCallback<DrivesDriveFirmware> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDrivesDriveFirmwareValidateBeforeCall(lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DrivesDriveFirmware>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeDrive
     * @param nodeDriveId Retrieve drive information. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeDriveCall(String nodeDriveId, Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/drives/{NodeDriveId}"
            .replaceAll("\\{" + "NodeDriveId" + "\\}", apiClient.escapeString(nodeDriveId.toString()))
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeDriveValidateBeforeCall(String nodeDriveId, Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeDriveId' is set
        if (nodeDriveId == null) {
            throw new ApiException("Missing the required parameter 'nodeDriveId' when calling getNodeDrive(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeDrive(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeDriveCall(nodeDriveId, lnn, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve drive information.
     * @param nodeDriveId Retrieve drive information. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return NodeDrives
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeDrives getNodeDrive(String nodeDriveId, Integer lnn, BigDecimal timeout) throws ApiException {
        ApiResponse<NodeDrives> resp = getNodeDriveWithHttpInfo(nodeDriveId, lnn, timeout);
        return resp.getData();
    }

    /**
     * 
     * Retrieve drive information.
     * @param nodeDriveId Retrieve drive information. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return ApiResponse&lt;NodeDrives&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeDrives> getNodeDriveWithHttpInfo(String nodeDriveId, Integer lnn, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getNodeDriveValidateBeforeCall(nodeDriveId, lnn, timeout, null, null);
        Type localVarReturnType = new TypeToken<NodeDrives>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve drive information.
     * @param nodeDriveId Retrieve drive information. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeDriveAsync(String nodeDriveId, Integer lnn, BigDecimal timeout, final ApiCallback<NodeDrives> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeDriveValidateBeforeCall(nodeDriveId, lnn, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeDrives>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeDriveconfig
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeDriveconfigCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/driveconfig"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeDriveconfigValidateBeforeCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeDriveconfig(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeDriveconfigCall(lnn, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a node&#39;s drive subsystem XML configuration file.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return NodeDriveconfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeDriveconfig getNodeDriveconfig(Integer lnn, BigDecimal timeout) throws ApiException {
        ApiResponse<NodeDriveconfig> resp = getNodeDriveconfigWithHttpInfo(lnn, timeout);
        return resp.getData();
    }

    /**
     * 
     * View a node&#39;s drive subsystem XML configuration file.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return ApiResponse&lt;NodeDriveconfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeDriveconfig> getNodeDriveconfigWithHttpInfo(Integer lnn, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getNodeDriveconfigValidateBeforeCall(lnn, timeout, null, null);
        Type localVarReturnType = new TypeToken<NodeDriveconfig>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a node&#39;s drive subsystem XML configuration file.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeDriveconfigAsync(Integer lnn, BigDecimal timeout, final ApiCallback<NodeDriveconfig> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeDriveconfigValidateBeforeCall(lnn, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeDriveconfig>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeDrives
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeDrivesCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/drives"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeDrivesValidateBeforeCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeDrives(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeDrivesCall(lnn, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List the drives on this node.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return NodeDrives
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeDrives getNodeDrives(Integer lnn, BigDecimal timeout) throws ApiException {
        ApiResponse<NodeDrives> resp = getNodeDrivesWithHttpInfo(lnn, timeout);
        return resp.getData();
    }

    /**
     * 
     * List the drives on this node.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return ApiResponse&lt;NodeDrives&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeDrives> getNodeDrivesWithHttpInfo(Integer lnn, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getNodeDrivesValidateBeforeCall(lnn, timeout, null, null);
        Type localVarReturnType = new TypeToken<NodeDrives>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the drives on this node.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeDrivesAsync(Integer lnn, BigDecimal timeout, final ApiCallback<NodeDrives> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeDrivesValidateBeforeCall(lnn, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeDrives>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeDrivesPurposelist
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeDrivesPurposelistCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives-purposelist"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeDrivesPurposelistValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeDrivesPurposelist(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeDrivesPurposelistCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Lists the available purposes for drives in this node.
     * @param lnn  (required)
     * @return NodeDrivesPurposelist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeDrivesPurposelist getNodeDrivesPurposelist(Integer lnn) throws ApiException {
        ApiResponse<NodeDrivesPurposelist> resp = getNodeDrivesPurposelistWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Lists the available purposes for drives in this node.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeDrivesPurposelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeDrivesPurposelist> getNodeDrivesPurposelistWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeDrivesPurposelistValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeDrivesPurposelist>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the available purposes for drives in this node.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeDrivesPurposelistAsync(Integer lnn, final ApiCallback<NodeDrivesPurposelist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeDrivesPurposelistValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeDrivesPurposelist>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeHardware
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeHardwareCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/hardware"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeHardwareValidateBeforeCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeHardware(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeHardwareCall(lnn, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node hardware identity information.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return NodeHardware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeHardware getNodeHardware(Integer lnn, BigDecimal timeout) throws ApiException {
        ApiResponse<NodeHardware> resp = getNodeHardwareWithHttpInfo(lnn, timeout);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node hardware identity information.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return ApiResponse&lt;NodeHardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeHardware> getNodeHardwareWithHttpInfo(Integer lnn, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getNodeHardwareValidateBeforeCall(lnn, timeout, null, null);
        Type localVarReturnType = new TypeToken<NodeHardware>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node hardware identity information.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeHardwareAsync(Integer lnn, BigDecimal timeout, final ApiCallback<NodeHardware> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeHardwareValidateBeforeCall(lnn, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeHardware>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeHardwareFast
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeHardwareFastCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/hardware-fast"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeHardwareFastValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeHardwareFast(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeHardwareFastCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Quickly retrieve a subset of node hardware identity information.
     * @param lnn  (required)
     * @return NodeHardwareFast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeHardwareFast getNodeHardwareFast(Integer lnn) throws ApiException {
        ApiResponse<NodeHardwareFast> resp = getNodeHardwareFastWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Quickly retrieve a subset of node hardware identity information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeHardwareFast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeHardwareFast> getNodeHardwareFastWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeHardwareFastValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeHardwareFast>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Quickly retrieve a subset of node hardware identity information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeHardwareFastAsync(Integer lnn, final ApiCallback<NodeHardwareFast> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeHardwareFastValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeHardwareFast>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodePartitions
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodePartitionsCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/partitions"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodePartitionsValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodePartitions(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodePartitionsCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node partition information.
     * @param lnn  (required)
     * @return NodePartitions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodePartitions getNodePartitions(Integer lnn) throws ApiException {
        ApiResponse<NodePartitions> resp = getNodePartitionsWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node partition information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodePartitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodePartitions> getNodePartitionsWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodePartitionsValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodePartitions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node partition information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodePartitionsAsync(Integer lnn, final ApiCallback<NodePartitions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodePartitionsValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodePartitions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeSensors
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeSensorsCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/sensors"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeSensorsValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeSensors(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeSensorsCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node sensor information.
     * @param lnn  (required)
     * @return NodeSensors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeSensors getNodeSensors(Integer lnn) throws ApiException {
        ApiResponse<NodeSensors> resp = getNodeSensorsWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node sensor information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeSensors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeSensors> getNodeSensorsWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeSensorsValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeSensors>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node sensor information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeSensorsAsync(Integer lnn, final ApiCallback<NodeSensors> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeSensorsValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeSensors>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeSled
     * @param nodeSledId Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeSledCall(String nodeSledId, Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/sleds/{NodeSledId}"
            .replaceAll("\\{" + "NodeSledId" + "\\}", apiClient.escapeString(nodeSledId.toString()))
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeSledValidateBeforeCall(String nodeSledId, Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeSledId' is set
        if (nodeSledId == null) {
            throw new ApiException("Missing the required parameter 'nodeSledId' when calling getNodeSled(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeSled(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeSledCall(nodeSledId, lnn, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats.
     * @param nodeSledId Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return NodeSleds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeSleds getNodeSled(String nodeSledId, Integer lnn, BigDecimal timeout) throws ApiException {
        ApiResponse<NodeSleds> resp = getNodeSledWithHttpInfo(nodeSledId, lnn, timeout);
        return resp.getData();
    }

    /**
     * 
     * Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats.
     * @param nodeSledId Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return ApiResponse&lt;NodeSleds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeSleds> getNodeSledWithHttpInfo(String nodeSledId, Integer lnn, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getNodeSledValidateBeforeCall(nodeSledId, lnn, timeout, null, null);
        Type localVarReturnType = new TypeToken<NodeSleds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats.
     * @param nodeSledId Get detailed information for the sled specified by &lt;SLEDID&gt;, or all sleds in the case where &lt;SLEDID&gt; is &#39;all&#39;, in the node specified by &lt;LNN&gt;.  Accepts &lt;sledid&gt; in either &#39;sled&#39; or &#39;all&#39; formats. (required)
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeSledAsync(String nodeSledId, Integer lnn, BigDecimal timeout, final ApiCallback<NodeSleds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeSledValidateBeforeCall(nodeSledId, lnn, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeSleds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeSleds
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeSledsCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/sleds"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeSledsValidateBeforeCall(Integer lnn, BigDecimal timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeSleds(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeSledsCall(lnn, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get detailed information for all sleds in this node. Equivalent to /5/cluster/nodes/&lt;lnn&gt;/sleds/all.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return NodeSleds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeSleds getNodeSleds(Integer lnn, BigDecimal timeout) throws ApiException {
        ApiResponse<NodeSleds> resp = getNodeSledsWithHttpInfo(lnn, timeout);
        return resp.getData();
    }

    /**
     * 
     * Get detailed information for all sleds in this node. Equivalent to /5/cluster/nodes/&lt;lnn&gt;/sleds/all.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @return ApiResponse&lt;NodeSleds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeSleds> getNodeSledsWithHttpInfo(Integer lnn, BigDecimal timeout) throws ApiException {
        com.squareup.okhttp.Call call = getNodeSledsValidateBeforeCall(lnn, timeout, null, null);
        Type localVarReturnType = new TypeToken<NodeSleds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get detailed information for all sleds in this node. Equivalent to /5/cluster/nodes/&lt;lnn&gt;/sleds/all.
     * @param lnn  (required)
     * @param timeout Request timeout (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeSledsAsync(Integer lnn, BigDecimal timeout, final ApiCallback<NodeSleds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeSledsValidateBeforeCall(lnn, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeSleds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeState
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeStateCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeStateValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeState(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeStateCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node state information.
     * @param lnn  (required)
     * @return NodeState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeState getNodeState(Integer lnn) throws ApiException {
        ApiResponse<NodeState> resp = getNodeStateWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node state information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeState> getNodeStateWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeStateValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node state information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeStateAsync(Integer lnn, final ApiCallback<NodeState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeStateValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeStateReadonly
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeStateReadonlyCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state/readonly"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeStateReadonlyValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeStateReadonly(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeStateReadonlyCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node readonly state information.
     * @param lnn  (required)
     * @return NodeStateReadonly
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStateReadonly getNodeStateReadonly(Integer lnn) throws ApiException {
        ApiResponse<NodeStateReadonly> resp = getNodeStateReadonlyWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node readonly state information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeStateReadonly&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStateReadonly> getNodeStateReadonlyWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeStateReadonlyValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeStateReadonly>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node readonly state information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeStateReadonlyAsync(Integer lnn, final ApiCallback<NodeStateReadonly> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeStateReadonlyValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStateReadonly>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeStateServicelight
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeStateServicelightCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state/servicelight"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeStateServicelightValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeStateServicelight(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeStateServicelightCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node service light state information.
     * @param lnn  (required)
     * @return NodeStateServicelight
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStateServicelight getNodeStateServicelight(Integer lnn) throws ApiException {
        ApiResponse<NodeStateServicelight> resp = getNodeStateServicelightWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node service light state information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeStateServicelight&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStateServicelight> getNodeStateServicelightWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeStateServicelightValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeStateServicelight>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node service light state information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeStateServicelightAsync(Integer lnn, final ApiCallback<NodeStateServicelight> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeStateServicelightValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStateServicelight>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeStateSmartfail
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeStateSmartfailCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state/smartfail"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeStateSmartfailValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeStateSmartfail(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeStateSmartfailCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node smartfail state information.
     * @param lnn  (required)
     * @return NodeStateSmartfail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStateSmartfail getNodeStateSmartfail(Integer lnn) throws ApiException {
        ApiResponse<NodeStateSmartfail> resp = getNodeStateSmartfailWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node smartfail state information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeStateSmartfail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStateSmartfail> getNodeStateSmartfailWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeStateSmartfailValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeStateSmartfail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node smartfail state information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeStateSmartfailAsync(Integer lnn, final ApiCallback<NodeStateSmartfail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeStateSmartfailValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStateSmartfail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeStatus
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeStatusCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/status"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeStatusValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeStatusCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node status information.
     * @param lnn  (required)
     * @return NodeStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStatus getNodeStatus(Integer lnn) throws ApiException {
        ApiResponse<NodeStatus> resp = getNodeStatusWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node status information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStatus> getNodeStatusWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeStatusValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node status information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeStatusAsync(Integer lnn, final ApiCallback<NodeStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeStatusValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeStatusBatterystatus
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeStatusBatterystatusCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/status/batterystatus"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeStatusBatterystatusValidateBeforeCall(Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodeStatusBatterystatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeStatusBatterystatusCall(lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node battery status information.
     * @param lnn  (required)
     * @return NodeStatusBatterystatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeStatusBatterystatus getNodeStatusBatterystatus(Integer lnn) throws ApiException {
        ApiResponse<NodeStatusBatterystatus> resp = getNodeStatusBatterystatusWithHttpInfo(lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node battery status information.
     * @param lnn  (required)
     * @return ApiResponse&lt;NodeStatusBatterystatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeStatusBatterystatus> getNodeStatusBatterystatusWithHttpInfo(Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNodeStatusBatterystatusValidateBeforeCall(lnn, null, null);
        Type localVarReturnType = new TypeToken<NodeStatusBatterystatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node battery status information.
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeStatusBatterystatusAsync(Integer lnn, final ApiCallback<NodeStatusBatterystatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeStatusBatterystatusValidateBeforeCall(lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeStatusBatterystatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDrivesDriveFirmwareUpdate
     * @param lnn  (required)
     * @param driveid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDrivesDriveFirmwareUpdateCall(Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/firmware/update"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()))
            .replaceAll("\\{" + "Driveid" + "\\}", apiClient.escapeString(driveid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDrivesDriveFirmwareUpdateValidateBeforeCall(Integer lnn, String driveid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling listDrivesDriveFirmwareUpdate(Async)");
        }
        
        // verify the required parameter 'driveid' is set
        if (driveid == null) {
            throw new ApiException("Missing the required parameter 'driveid' when calling listDrivesDriveFirmwareUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = listDrivesDriveFirmwareUpdateCall(lnn, driveid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve firmware update information.
     * @param lnn  (required)
     * @param driveid  (required)
     * @return DrivesDriveFirmwareUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DrivesDriveFirmwareUpdate listDrivesDriveFirmwareUpdate(Integer lnn, String driveid) throws ApiException {
        ApiResponse<DrivesDriveFirmwareUpdate> resp = listDrivesDriveFirmwareUpdateWithHttpInfo(lnn, driveid);
        return resp.getData();
    }

    /**
     * 
     * Retrieve firmware update information.
     * @param lnn  (required)
     * @param driveid  (required)
     * @return ApiResponse&lt;DrivesDriveFirmwareUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DrivesDriveFirmwareUpdate> listDrivesDriveFirmwareUpdateWithHttpInfo(Integer lnn, String driveid) throws ApiException {
        com.squareup.okhttp.Call call = listDrivesDriveFirmwareUpdateValidateBeforeCall(lnn, driveid, null, null);
        Type localVarReturnType = new TypeToken<DrivesDriveFirmwareUpdate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve firmware update information.
     * @param lnn  (required)
     * @param driveid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDrivesDriveFirmwareUpdateAsync(Integer lnn, String driveid, final ApiCallback<DrivesDriveFirmwareUpdate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDrivesDriveFirmwareUpdateValidateBeforeCall(lnn, driveid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DrivesDriveFirmwareUpdate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNodeDriveconfig
     * @param nodeDriveconfig  (required)
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeDriveconfigCall(NodeDriveconfigExtended nodeDriveconfig, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodeDriveconfig;

        // create path and map variables
        String localVarPath = "/platform/5/cluster/nodes/{Lnn}/driveconfig"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeDriveconfigValidateBeforeCall(NodeDriveconfigExtended nodeDriveconfig, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeDriveconfig' is set
        if (nodeDriveconfig == null) {
            throw new ApiException("Missing the required parameter 'nodeDriveconfig' when calling updateNodeDriveconfig(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling updateNodeDriveconfig(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeDriveconfigCall(nodeDriveconfig, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a node&#39;s drive subsystem XML configuration file.
     * @param nodeDriveconfig  (required)
     * @param lnn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNodeDriveconfig(NodeDriveconfigExtended nodeDriveconfig, Integer lnn) throws ApiException {
        updateNodeDriveconfigWithHttpInfo(nodeDriveconfig, lnn);
    }

    /**
     * 
     * Modify a node&#39;s drive subsystem XML configuration file.
     * @param nodeDriveconfig  (required)
     * @param lnn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNodeDriveconfigWithHttpInfo(NodeDriveconfigExtended nodeDriveconfig, Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeDriveconfigValidateBeforeCall(nodeDriveconfig, lnn, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a node&#39;s drive subsystem XML configuration file.
     * @param nodeDriveconfig  (required)
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeDriveconfigAsync(NodeDriveconfigExtended nodeDriveconfig, Integer lnn, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeDriveconfigValidateBeforeCall(nodeDriveconfig, lnn, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNodeStateReadonly
     * @param nodeStateReadonly  (required)
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeStateReadonlyCall(NodeStateReadonlyExtended nodeStateReadonly, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodeStateReadonly;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state/readonly"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeStateReadonlyValidateBeforeCall(NodeStateReadonlyExtended nodeStateReadonly, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeStateReadonly' is set
        if (nodeStateReadonly == null) {
            throw new ApiException("Missing the required parameter 'nodeStateReadonly' when calling updateNodeStateReadonly(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling updateNodeStateReadonly(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeStateReadonlyCall(nodeStateReadonly, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more node readonly state settings.
     * @param nodeStateReadonly  (required)
     * @param lnn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNodeStateReadonly(NodeStateReadonlyExtended nodeStateReadonly, Integer lnn) throws ApiException {
        updateNodeStateReadonlyWithHttpInfo(nodeStateReadonly, lnn);
    }

    /**
     * 
     * Modify one or more node readonly state settings.
     * @param nodeStateReadonly  (required)
     * @param lnn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNodeStateReadonlyWithHttpInfo(NodeStateReadonlyExtended nodeStateReadonly, Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeStateReadonlyValidateBeforeCall(nodeStateReadonly, lnn, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more node readonly state settings.
     * @param nodeStateReadonly  (required)
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeStateReadonlyAsync(NodeStateReadonlyExtended nodeStateReadonly, Integer lnn, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeStateReadonlyValidateBeforeCall(nodeStateReadonly, lnn, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNodeStateServicelight
     * @param nodeStateServicelight  (required)
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeStateServicelightCall(NodeStateServicelightExtended nodeStateServicelight, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodeStateServicelight;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state/servicelight"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeStateServicelightValidateBeforeCall(NodeStateServicelightExtended nodeStateServicelight, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeStateServicelight' is set
        if (nodeStateServicelight == null) {
            throw new ApiException("Missing the required parameter 'nodeStateServicelight' when calling updateNodeStateServicelight(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling updateNodeStateServicelight(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeStateServicelightCall(nodeStateServicelight, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more node service light state settings.
     * @param nodeStateServicelight  (required)
     * @param lnn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNodeStateServicelight(NodeStateServicelightExtended nodeStateServicelight, Integer lnn) throws ApiException {
        updateNodeStateServicelightWithHttpInfo(nodeStateServicelight, lnn);
    }

    /**
     * 
     * Modify one or more node service light state settings.
     * @param nodeStateServicelight  (required)
     * @param lnn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNodeStateServicelightWithHttpInfo(NodeStateServicelightExtended nodeStateServicelight, Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeStateServicelightValidateBeforeCall(nodeStateServicelight, lnn, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more node service light state settings.
     * @param nodeStateServicelight  (required)
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeStateServicelightAsync(NodeStateServicelightExtended nodeStateServicelight, Integer lnn, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeStateServicelightValidateBeforeCall(nodeStateServicelight, lnn, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNodeStateSmartfail
     * @param nodeStateSmartfail  (required)
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeStateSmartfailCall(NodeStateSmartfailExtended nodeStateSmartfail, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodeStateSmartfail;

        // create path and map variables
        String localVarPath = "/platform/3/cluster/nodes/{Lnn}/state/smartfail"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeStateSmartfailValidateBeforeCall(NodeStateSmartfailExtended nodeStateSmartfail, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeStateSmartfail' is set
        if (nodeStateSmartfail == null) {
            throw new ApiException("Missing the required parameter 'nodeStateSmartfail' when calling updateNodeStateSmartfail(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling updateNodeStateSmartfail(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeStateSmartfailCall(nodeStateSmartfail, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify smartfail state of the node.  Only the &#39;smartfailed&#39; body member has any effect on node smartfail state.
     * @param nodeStateSmartfail  (required)
     * @param lnn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNodeStateSmartfail(NodeStateSmartfailExtended nodeStateSmartfail, Integer lnn) throws ApiException {
        updateNodeStateSmartfailWithHttpInfo(nodeStateSmartfail, lnn);
    }

    /**
     * 
     * Modify smartfail state of the node.  Only the &#39;smartfailed&#39; body member has any effect on node smartfail state.
     * @param nodeStateSmartfail  (required)
     * @param lnn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNodeStateSmartfailWithHttpInfo(NodeStateSmartfailExtended nodeStateSmartfail, Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeStateSmartfailValidateBeforeCall(nodeStateSmartfail, lnn, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify smartfail state of the node.  Only the &#39;smartfailed&#39; body member has any effect on node smartfail state.
     * @param nodeStateSmartfail  (required)
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeStateSmartfailAsync(NodeStateSmartfailExtended nodeStateSmartfail, Integer lnn, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeStateSmartfailValidateBeforeCall(nodeStateSmartfail, lnn, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
