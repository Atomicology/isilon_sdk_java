/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.StatisticsCurrent;
import io.swagger.client.model.StatisticsHistory;
import io.swagger.client.model.StatisticsKeys;
import io.swagger.client.model.StatisticsKeysExtended;
import io.swagger.client.model.StatisticsOperations;
import io.swagger.client.model.StatisticsProtocols;
import io.swagger.client.model.SummaryClient;
import io.swagger.client.model.SummaryDrive;
import io.swagger.client.model.SummaryHeat;
import io.swagger.client.model.SummaryProtocol;
import io.swagger.client.model.SummaryProtocolStats;
import io.swagger.client.model.SummarySystem;
import io.swagger.client.model.SummaryWorkload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient apiClient;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getStatisticsCurrent
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsCurrentCall(Integer timeout, Boolean showNodes, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean raw, List<String> key, Boolean degraded, List<String> nodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/statistics/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (showNodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_nodes", showNodes));
        if (keys != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "keys", keys));
        if (devid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "devid", devid));
        if (substr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("substr", substr));
        if (stale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stale", stale));
        if (typeInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type_info", typeInfo));
        if (raw != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("raw", raw));
        if (key != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "key", key));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (nodes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "nodes", nodes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsCurrentValidateBeforeCall(Integer timeout, Boolean showNodes, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean raw, List<String> key, Boolean degraded, List<String> nodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStatisticsCurrentCall(timeout, showNodes, keys, devid, substr, stale, typeInfo, raw, key, degraded, nodes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve stats.
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @return StatisticsCurrent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticsCurrent getStatisticsCurrent(Integer timeout, Boolean showNodes, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean raw, List<String> key, Boolean degraded, List<String> nodes) throws ApiException {
        ApiResponse<StatisticsCurrent> resp = getStatisticsCurrentWithHttpInfo(timeout, showNodes, keys, devid, substr, stale, typeInfo, raw, key, degraded, nodes);
        return resp.getData();
    }

    /**
     * 
     * Retrieve stats.
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @return ApiResponse&lt;StatisticsCurrent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticsCurrent> getStatisticsCurrentWithHttpInfo(Integer timeout, Boolean showNodes, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean raw, List<String> key, Boolean degraded, List<String> nodes) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsCurrentValidateBeforeCall(timeout, showNodes, keys, devid, substr, stale, typeInfo, raw, key, degraded, nodes, null, null);
        Type localVarReturnType = new TypeToken<StatisticsCurrent>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve stats.
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsCurrentAsync(Integer timeout, Boolean showNodes, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean raw, List<String> key, Boolean degraded, List<String> nodes, final ApiCallback<StatisticsCurrent> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsCurrentValidateBeforeCall(timeout, showNodes, keys, devid, substr, stale, typeInfo, raw, key, degraded, nodes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticsCurrent>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatisticsHistory
     * @param begin Earliest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. (optional)
     * @param interval Minimum sampling interval time in seconds. If native statistics are higher resolution, data will be down-sampled. (optional)
     * @param end Latest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. If not supplied, use now as the end time. (optional)
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param memoryOnly Only use statistics sources that reside in memory (faster, but with less retention). (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param resolution Synonymous with &#39;interval&#39;, if supplied supersedes interval. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsHistoryCall(Integer begin, Integer interval, Integer end, Integer timeout, Boolean raw, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean memoryOnly, List<String> key, Boolean degraded, Boolean showNodes, Integer resolution, List<String> nodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/statistics/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (raw != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("raw", raw));
        if (keys != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "keys", keys));
        if (devid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "devid", devid));
        if (substr != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("substr", substr));
        if (stale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stale", stale));
        if (typeInfo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type_info", typeInfo));
        if (memoryOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("memory_only", memoryOnly));
        if (key != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "key", key));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (showNodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_nodes", showNodes));
        if (resolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolution", resolution));
        if (nodes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "nodes", nodes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsHistoryValidateBeforeCall(Integer begin, Integer interval, Integer end, Integer timeout, Boolean raw, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean memoryOnly, List<String> key, Boolean degraded, Boolean showNodes, Integer resolution, List<String> nodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStatisticsHistoryCall(begin, interval, end, timeout, raw, keys, devid, substr, stale, typeInfo, memoryOnly, key, degraded, showNodes, resolution, nodes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve stats.
     * @param begin Earliest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. (optional)
     * @param interval Minimum sampling interval time in seconds. If native statistics are higher resolution, data will be down-sampled. (optional)
     * @param end Latest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. If not supplied, use now as the end time. (optional)
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param memoryOnly Only use statistics sources that reside in memory (faster, but with less retention). (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param resolution Synonymous with &#39;interval&#39;, if supplied supersedes interval. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @return StatisticsHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticsHistory getStatisticsHistory(Integer begin, Integer interval, Integer end, Integer timeout, Boolean raw, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean memoryOnly, List<String> key, Boolean degraded, Boolean showNodes, Integer resolution, List<String> nodes) throws ApiException {
        ApiResponse<StatisticsHistory> resp = getStatisticsHistoryWithHttpInfo(begin, interval, end, timeout, raw, keys, devid, substr, stale, typeInfo, memoryOnly, key, degraded, showNodes, resolution, nodes);
        return resp.getData();
    }

    /**
     * 
     * Retrieve stats.
     * @param begin Earliest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. (optional)
     * @param interval Minimum sampling interval time in seconds. If native statistics are higher resolution, data will be down-sampled. (optional)
     * @param end Latest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. If not supplied, use now as the end time. (optional)
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param memoryOnly Only use statistics sources that reside in memory (faster, but with less retention). (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param resolution Synonymous with &#39;interval&#39;, if supplied supersedes interval. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @return ApiResponse&lt;StatisticsHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticsHistory> getStatisticsHistoryWithHttpInfo(Integer begin, Integer interval, Integer end, Integer timeout, Boolean raw, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean memoryOnly, List<String> key, Boolean degraded, Boolean showNodes, Integer resolution, List<String> nodes) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsHistoryValidateBeforeCall(begin, interval, end, timeout, raw, keys, devid, substr, stale, typeInfo, memoryOnly, key, degraded, showNodes, resolution, nodes, null, null);
        Type localVarReturnType = new TypeToken<StatisticsHistory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve stats.
     * @param begin Earliest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. (optional)
     * @param interval Minimum sampling interval time in seconds. If native statistics are higher resolution, data will be down-sampled. (optional)
     * @param end Latest time (Unix epoch seconds) of interest. Negative times are interpreted as relative (before) now. If not supplied, use now as the end time. (optional)
     * @param timeout Time in seconds to wait for results from remote nodes. (optional)
     * @param raw Causes the output to be in hex format. For internal use only, please do not use this. (optional)
     * @param keys Multiple key names. May request matching keys or request &#39;all&#39; keys. Can be comma separated list or can be used more than one time to make queries for multiple keys. May be used in conjunction with &#39;substr&#39;. Also works with &#39;key&#39; arguments. (optional)
     * @param devid Node devid to query. Either an &lt;integer&gt; or \&quot;all\&quot;. Can be used more than one time to query multiple nodes. \&quot;all\&quot; queries all up nodes. 0 means query the local node. For \&quot;cluster\&quot; scoped keys, in any devid including 0 can be used. (optional)
     * @param substr Used in conjunction with the &#39;keys&#39; argument, alters the behavior of keys. Makes the &#39;keys&#39; arg perform a partial match. Defaults to false. (optional)
     * @param stale For internal use only, please do not use this. (optional)
     * @param typeInfo The type ID is used by internal services. For internal use only, please do not use this. (optional)
     * @param memoryOnly Only use statistics sources that reside in memory (faster, but with less retention). (optional)
     * @param key One key name. Can be used more than one time to query multiple keys. Also works with &#39;keys&#39; arguments. (optional)
     * @param degraded If true, try to continue even if some stats are unavailable. In this case, errors will be present in the per-key returned data. (optional)
     * @param showNodes Shows the logical node number or LNN in addition to the devid. (optional)
     * @param resolution Synonymous with &#39;interval&#39;, if supplied supersedes interval. (optional)
     * @param nodes Specify node(s) for which statistics should be reported. One or more comma separated &lt;integer(s)&gt; specifying which node(s) to query, or \&quot;all\&quot;. Specifying more than one node may have unspecified results for keys that begin with \&quot;cluster\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsHistoryAsync(Integer begin, Integer interval, Integer end, Integer timeout, Boolean raw, List<String> keys, List<String> devid, Boolean substr, Boolean stale, Boolean typeInfo, Boolean memoryOnly, List<String> key, Boolean degraded, Boolean showNodes, Integer resolution, List<String> nodes, final ApiCallback<StatisticsHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsHistoryValidateBeforeCall(begin, interval, end, timeout, raw, keys, devid, substr, stale, typeInfo, memoryOnly, key, degraded, showNodes, resolution, nodes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticsHistory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatisticsKey
     * @param statisticsKeyId List key meta-data. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsKeyCall(String statisticsKeyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/statistics/keys/{StatisticsKeyId}"
            .replaceAll("\\{" + "StatisticsKeyId" + "\\}", apiClient.escapeString(statisticsKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsKeyValidateBeforeCall(String statisticsKeyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'statisticsKeyId' is set
        if (statisticsKeyId == null) {
            throw new ApiException("Missing the required parameter 'statisticsKeyId' when calling getStatisticsKey(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatisticsKeyCall(statisticsKeyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List key meta-data.
     * @param statisticsKeyId List key meta-data. (required)
     * @return StatisticsKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticsKeys getStatisticsKey(String statisticsKeyId) throws ApiException {
        ApiResponse<StatisticsKeys> resp = getStatisticsKeyWithHttpInfo(statisticsKeyId);
        return resp.getData();
    }

    /**
     * 
     * List key meta-data.
     * @param statisticsKeyId List key meta-data. (required)
     * @return ApiResponse&lt;StatisticsKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticsKeys> getStatisticsKeyWithHttpInfo(String statisticsKeyId) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsKeyValidateBeforeCall(statisticsKeyId, null, null);
        Type localVarReturnType = new TypeToken<StatisticsKeys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List key meta-data.
     * @param statisticsKeyId List key meta-data. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsKeyAsync(String statisticsKeyId, final ApiCallback<StatisticsKeys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsKeyValidateBeforeCall(statisticsKeyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticsKeys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatisticsKeys
     * @param count Only count matching keys, do not return meta-data. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param queryable Only list keys that can/cannot be queries. Default is true. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsKeysCall(Boolean count, Integer limit, Boolean queryable, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/statistics/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (queryable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("queryable", queryable));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsKeysValidateBeforeCall(Boolean count, Integer limit, Boolean queryable, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStatisticsKeysCall(count, limit, queryable, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List meta-data for matching keys.
     * @param count Only count matching keys, do not return meta-data. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param queryable Only list keys that can/cannot be queries. Default is true. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return StatisticsKeysExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticsKeysExtended getStatisticsKeys(Boolean count, Integer limit, Boolean queryable, String resume) throws ApiException {
        ApiResponse<StatisticsKeysExtended> resp = getStatisticsKeysWithHttpInfo(count, limit, queryable, resume);
        return resp.getData();
    }

    /**
     * 
     * List meta-data for matching keys.
     * @param count Only count matching keys, do not return meta-data. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param queryable Only list keys that can/cannot be queries. Default is true. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;StatisticsKeysExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticsKeysExtended> getStatisticsKeysWithHttpInfo(Boolean count, Integer limit, Boolean queryable, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsKeysValidateBeforeCall(count, limit, queryable, resume, null, null);
        Type localVarReturnType = new TypeToken<StatisticsKeysExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List meta-data for matching keys.
     * @param count Only count matching keys, do not return meta-data. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param queryable Only list keys that can/cannot be queries. Default is true. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsKeysAsync(Boolean count, Integer limit, Boolean queryable, String resume, final ApiCallback<StatisticsKeysExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsKeysValidateBeforeCall(count, limit, queryable, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticsKeysExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatisticsOperations
     * @param protocols A comma separated list. Only report operations for specified protocol(s). Default is all.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsOperationsCall(List<String> protocols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (protocols != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "protocols", protocols));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsOperationsValidateBeforeCall(List<String> protocols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStatisticsOperationsCall(protocols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve operations list.
     * @param protocols A comma separated list. Only report operations for specified protocol(s). Default is all.  (optional)
     * @return StatisticsOperations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticsOperations getStatisticsOperations(List<String> protocols) throws ApiException {
        ApiResponse<StatisticsOperations> resp = getStatisticsOperationsWithHttpInfo(protocols);
        return resp.getData();
    }

    /**
     * 
     * Retrieve operations list.
     * @param protocols A comma separated list. Only report operations for specified protocol(s). Default is all.  (optional)
     * @return ApiResponse&lt;StatisticsOperations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticsOperations> getStatisticsOperationsWithHttpInfo(List<String> protocols) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsOperationsValidateBeforeCall(protocols, null, null);
        Type localVarReturnType = new TypeToken<StatisticsOperations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve operations list.
     * @param protocols A comma separated list. Only report operations for specified protocol(s). Default is all.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsOperationsAsync(List<String> protocols, final ApiCallback<StatisticsOperations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsOperationsValidateBeforeCall(protocols, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticsOperations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatisticsProtocols
     * @param type Specifies whether internal, external, or all protocols should be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatisticsProtocolsCall(String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/statistics/protocols";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatisticsProtocolsValidateBeforeCall(String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStatisticsProtocolsCall(type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve protocol list.
     * @param type Specifies whether internal, external, or all protocols should be returned. (optional)
     * @return StatisticsProtocols
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatisticsProtocols getStatisticsProtocols(String type) throws ApiException {
        ApiResponse<StatisticsProtocols> resp = getStatisticsProtocolsWithHttpInfo(type);
        return resp.getData();
    }

    /**
     * 
     * Retrieve protocol list.
     * @param type Specifies whether internal, external, or all protocols should be returned. (optional)
     * @return ApiResponse&lt;StatisticsProtocols&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatisticsProtocols> getStatisticsProtocolsWithHttpInfo(String type) throws ApiException {
        com.squareup.okhttp.Call call = getStatisticsProtocolsValidateBeforeCall(type, null, null);
        Type localVarReturnType = new TypeToken<StatisticsProtocols>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve protocol list.
     * @param type Specifies whether internal, external, or all protocols should be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatisticsProtocolsAsync(String type, final ApiCallback<StatisticsProtocols> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatisticsProtocolsValidateBeforeCall(type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatisticsProtocols>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummaryClient
     * @param sort Sort data by the specified comma-separated field(s). (num_operations | operation_rate | in_max | in_min | in | in_avg | out_max | out_min | out | out_avg | time_max | time_min | time_avg | node | protocol | class | user_id | user_name | local_addr | local_name | remote_addr | remote_name) Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | local_addr | local_name | remote_addr | remote_name | user_id | user_name | devid). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param userNames A comma separated list. Only report statistics for operations requested by users with resolved names enumerated.  (optional)
     * @param remoteAddresses A comma separated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated.  (optional)
     * @param numeric Do not resolve hostnames and usernames to their human readable form(s). Default is false.  (optional)
     * @param localNames A comma separated list. Only report statistics for operations handled by the local hosts with resolved names enumerated.  (optional)
     * @param userIds A comma separated list. Only report statistics for operations requested by users with numeric UIDs enumerated.  (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write) (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param localAddresses A comma separated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param remoteNames A comma separated list. Only report statistics for operations requested by the remote clients with resolved names enumerated.  (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | internal | external) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummaryClientCall(String sort, String totalby, String userNames, String remoteAddresses, Boolean numeric, String localNames, String userIds, String classes, Integer timeout, String localAddresses, Boolean degraded, String remoteNames, String nodes, String protocols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/summary/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (totalby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("totalby", totalby));
        if (userNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_names", userNames));
        if (remoteAddresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remote_addresses", remoteAddresses));
        if (numeric != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeric", numeric));
        if (localNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local_names", localNames));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_ids", userIds));
        if (classes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classes", classes));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (localAddresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local_addresses", localAddresses));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (remoteNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remote_names", remoteNames));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (protocols != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocols", protocols));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummaryClientValidateBeforeCall(String sort, String totalby, String userNames, String remoteAddresses, Boolean numeric, String localNames, String userIds, String classes, Integer timeout, String localAddresses, Boolean degraded, String remoteNames, String nodes, String protocols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummaryClientCall(sort, totalby, userNames, remoteAddresses, numeric, localNames, userIds, classes, timeout, localAddresses, degraded, remoteNames, nodes, protocols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (num_operations | operation_rate | in_max | in_min | in | in_avg | out_max | out_min | out | out_avg | time_max | time_min | time_avg | node | protocol | class | user_id | user_name | local_addr | local_name | remote_addr | remote_name) Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | local_addr | local_name | remote_addr | remote_name | user_id | user_name | devid). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param userNames A comma separated list. Only report statistics for operations requested by users with resolved names enumerated.  (optional)
     * @param remoteAddresses A comma separated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated.  (optional)
     * @param numeric Do not resolve hostnames and usernames to their human readable form(s). Default is false.  (optional)
     * @param localNames A comma separated list. Only report statistics for operations handled by the local hosts with resolved names enumerated.  (optional)
     * @param userIds A comma separated list. Only report statistics for operations requested by users with numeric UIDs enumerated.  (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write) (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param localAddresses A comma separated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param remoteNames A comma separated list. Only report statistics for operations requested by the remote clients with resolved names enumerated.  (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | internal | external) (optional)
     * @return SummaryClient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryClient getSummaryClient(String sort, String totalby, String userNames, String remoteAddresses, Boolean numeric, String localNames, String userIds, String classes, Integer timeout, String localAddresses, Boolean degraded, String remoteNames, String nodes, String protocols) throws ApiException {
        ApiResponse<SummaryClient> resp = getSummaryClientWithHttpInfo(sort, totalby, userNames, remoteAddresses, numeric, localNames, userIds, classes, timeout, localAddresses, degraded, remoteNames, nodes, protocols);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (num_operations | operation_rate | in_max | in_min | in | in_avg | out_max | out_min | out | out_avg | time_max | time_min | time_avg | node | protocol | class | user_id | user_name | local_addr | local_name | remote_addr | remote_name) Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | local_addr | local_name | remote_addr | remote_name | user_id | user_name | devid). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param userNames A comma separated list. Only report statistics for operations requested by users with resolved names enumerated.  (optional)
     * @param remoteAddresses A comma separated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated.  (optional)
     * @param numeric Do not resolve hostnames and usernames to their human readable form(s). Default is false.  (optional)
     * @param localNames A comma separated list. Only report statistics for operations handled by the local hosts with resolved names enumerated.  (optional)
     * @param userIds A comma separated list. Only report statistics for operations requested by users with numeric UIDs enumerated.  (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write) (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param localAddresses A comma separated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param remoteNames A comma separated list. Only report statistics for operations requested by the remote clients with resolved names enumerated.  (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | internal | external) (optional)
     * @return ApiResponse&lt;SummaryClient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryClient> getSummaryClientWithHttpInfo(String sort, String totalby, String userNames, String remoteAddresses, Boolean numeric, String localNames, String userIds, String classes, Integer timeout, String localAddresses, Boolean degraded, String remoteNames, String nodes, String protocols) throws ApiException {
        com.squareup.okhttp.Call call = getSummaryClientValidateBeforeCall(sort, totalby, userNames, remoteAddresses, numeric, localNames, userIds, classes, timeout, localAddresses, degraded, remoteNames, nodes, protocols, null, null);
        Type localVarReturnType = new TypeToken<SummaryClient>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sort Sort data by the specified comma-separated field(s). (num_operations | operation_rate | in_max | in_min | in | in_avg | out_max | out_min | out | out_avg | time_max | time_min | time_avg | node | protocol | class | user_id | user_name | local_addr | local_name | remote_addr | remote_name) Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | local_addr | local_name | remote_addr | remote_name | user_id | user_name | devid). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param userNames A comma separated list. Only report statistics for operations requested by users with resolved names enumerated.  (optional)
     * @param remoteAddresses A comma separated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated.  (optional)
     * @param numeric Do not resolve hostnames and usernames to their human readable form(s). Default is false.  (optional)
     * @param localNames A comma separated list. Only report statistics for operations handled by the local hosts with resolved names enumerated.  (optional)
     * @param userIds A comma separated list. Only report statistics for operations requested by users with numeric UIDs enumerated.  (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write) (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param localAddresses A comma separated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param remoteNames A comma separated list. Only report statistics for operations requested by the remote clients with resolved names enumerated.  (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | internal | external) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummaryClientAsync(String sort, String totalby, String userNames, String remoteAddresses, Boolean numeric, String localNames, String userIds, String classes, Integer timeout, String localAddresses, Boolean degraded, String remoteNames, String nodes, String protocols, final ApiCallback<SummaryClient> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummaryClientValidateBeforeCall(sort, totalby, userNames, remoteAddresses, numeric, localNames, userIds, classes, timeout, localAddresses, degraded, remoteNames, nodes, protocols, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryClient>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummaryDrive
     * @param sort Sort data by the specified comma-separated field(s). (drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param type Specify drive type(s) for which statistics should be reported. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummaryDriveCall(String sort, Boolean degraded, String type, String nodes, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/summary/drive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummaryDriveValidateBeforeCall(String sort, Boolean degraded, String type, String nodes, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummaryDriveCall(sort, degraded, type, nodes, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param type Specify drive type(s) for which statistics should be reported. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @return SummaryDrive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryDrive getSummaryDrive(String sort, Boolean degraded, String type, String nodes, Integer timeout) throws ApiException {
        ApiResponse<SummaryDrive> resp = getSummaryDriveWithHttpInfo(sort, degraded, type, nodes, timeout);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param type Specify drive type(s) for which statistics should be reported. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @return ApiResponse&lt;SummaryDrive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryDrive> getSummaryDriveWithHttpInfo(String sort, Boolean degraded, String type, String nodes, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = getSummaryDriveValidateBeforeCall(sort, degraded, type, nodes, timeout, null, null);
        Type localVarReturnType = new TypeToken<SummaryDrive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sort Sort data by the specified comma-separated field(s). (drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param type Specify drive type(s) for which statistics should be reported. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummaryDriveAsync(String sort, Boolean degraded, String type, String nodes, Integer timeout, final ApiCallback<SummaryDrive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummaryDriveValidateBeforeCall(sort, degraded, type, nodes, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryDrive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummaryHeat
     * @param sort Sort data by the specified comma-separated field(s). (operation_rate | node | event_name | class_name | lin | path). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param convertlin Convert lin to hex. Default is true.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | event_name | event_class | operation_rate | path | lin). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param pathdepth Squash paths to this directory depth. Defaults to none, ie. the paths are not limited (Subject to the system limits.) (optional)
     * @param numeric Do not resolve LINs into filenames. Default is false.  (optional)
     * @param events A comma separated list. Default is all. Only report specified event types(s). (blocked | contended | deadlocked | getattr | link | lock | lookup | read | rename | setattr | unlink | write). (optional)
     * @param maxpath Maximum bytes allocated for looking up a path. An ASCII character is 1 byte (It may be more for other types of encoding). The default is 1024 bytes. Zero (0) means unlimited (Subject to the system limits.) (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummaryHeatCall(String sort, Boolean convertlin, String totalby, Integer pathdepth, Boolean numeric, String events, Integer maxpath, String classes, Integer timeout, String nodes, Boolean degraded, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/summary/heat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (convertlin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("convertlin", convertlin));
        if (totalby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("totalby", totalby));
        if (pathdepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pathdepth", pathdepth));
        if (numeric != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeric", numeric));
        if (events != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("events", events));
        if (maxpath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxpath", maxpath));
        if (classes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classes", classes));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummaryHeatValidateBeforeCall(String sort, Boolean convertlin, String totalby, Integer pathdepth, Boolean numeric, String events, Integer maxpath, String classes, Integer timeout, String nodes, Boolean degraded, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummaryHeatCall(sort, convertlin, totalby, pathdepth, numeric, events, maxpath, classes, timeout, nodes, degraded, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * File heat map, i.e. rate of file operations, and the type of operation listed by path/lin(s).
     * @param sort Sort data by the specified comma-separated field(s). (operation_rate | node | event_name | class_name | lin | path). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param convertlin Convert lin to hex. Default is true.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | event_name | event_class | operation_rate | path | lin). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param pathdepth Squash paths to this directory depth. Defaults to none, ie. the paths are not limited (Subject to the system limits.) (optional)
     * @param numeric Do not resolve LINs into filenames. Default is false.  (optional)
     * @param events A comma separated list. Default is all. Only report specified event types(s). (blocked | contended | deadlocked | getattr | link | lock | lookup | read | rename | setattr | unlink | write). (optional)
     * @param maxpath Maximum bytes allocated for looking up a path. An ASCII character is 1 byte (It may be more for other types of encoding). The default is 1024 bytes. Zero (0) means unlimited (Subject to the system limits.) (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @return SummaryHeat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryHeat getSummaryHeat(String sort, Boolean convertlin, String totalby, Integer pathdepth, Boolean numeric, String events, Integer maxpath, String classes, Integer timeout, String nodes, Boolean degraded) throws ApiException {
        ApiResponse<SummaryHeat> resp = getSummaryHeatWithHttpInfo(sort, convertlin, totalby, pathdepth, numeric, events, maxpath, classes, timeout, nodes, degraded);
        return resp.getData();
    }

    /**
     * 
     * File heat map, i.e. rate of file operations, and the type of operation listed by path/lin(s).
     * @param sort Sort data by the specified comma-separated field(s). (operation_rate | node | event_name | class_name | lin | path). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param convertlin Convert lin to hex. Default is true.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | event_name | event_class | operation_rate | path | lin). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param pathdepth Squash paths to this directory depth. Defaults to none, ie. the paths are not limited (Subject to the system limits.) (optional)
     * @param numeric Do not resolve LINs into filenames. Default is false.  (optional)
     * @param events A comma separated list. Default is all. Only report specified event types(s). (blocked | contended | deadlocked | getattr | link | lock | lookup | read | rename | setattr | unlink | write). (optional)
     * @param maxpath Maximum bytes allocated for looking up a path. An ASCII character is 1 byte (It may be more for other types of encoding). The default is 1024 bytes. Zero (0) means unlimited (Subject to the system limits.) (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @return ApiResponse&lt;SummaryHeat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryHeat> getSummaryHeatWithHttpInfo(String sort, Boolean convertlin, String totalby, Integer pathdepth, Boolean numeric, String events, Integer maxpath, String classes, Integer timeout, String nodes, Boolean degraded) throws ApiException {
        com.squareup.okhttp.Call call = getSummaryHeatValidateBeforeCall(sort, convertlin, totalby, pathdepth, numeric, events, maxpath, classes, timeout, nodes, degraded, null, null);
        Type localVarReturnType = new TypeToken<SummaryHeat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * File heat map, i.e. rate of file operations, and the type of operation listed by path/lin(s).
     * @param sort Sort data by the specified comma-separated field(s). (operation_rate | node | event_name | class_name | lin | path). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param convertlin Convert lin to hex. Default is true.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | event_name | event_class | operation_rate | path | lin). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param pathdepth Squash paths to this directory depth. Defaults to none, ie. the paths are not limited (Subject to the system limits.) (optional)
     * @param numeric Do not resolve LINs into filenames. Default is false.  (optional)
     * @param events A comma separated list. Default is all. Only report specified event types(s). (blocked | contended | deadlocked | getattr | link | lock | lookup | read | rename | setattr | unlink | write). (optional)
     * @param maxpath Maximum bytes allocated for looking up a path. An ASCII character is 1 byte (It may be more for other types of encoding). The default is 1024 bytes. Zero (0) means unlimited (Subject to the system limits.) (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | namespace_read | namespace_write). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummaryHeatAsync(String sort, Boolean convertlin, String totalby, Integer pathdepth, Boolean numeric, String events, Integer maxpath, String classes, Integer timeout, String nodes, Boolean degraded, final ApiCallback<SummaryHeat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummaryHeatValidateBeforeCall(sort, convertlin, totalby, pathdepth, numeric, events, maxpath, classes, timeout, nodes, degraded, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryHeat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummaryProtocol
     * @param operations Specify operation(s) for which statistics should be reported (See the cli command: &#39;isi statistics list operations&#39;, for a total list). Default is all.  (optional)
     * @param sort Sort data by the specified comma-separated field(s). (time | operation_count | operation_rate | in_max | in_min | in | in_avg | in_standard_dev | out_max | out_min | out | out_avg | out_standard_dev | time_max | time_min | time_avg | time_standard_dev | node | protocol | class | operation). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | operation). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param zero Show table entries with no values. (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | create | delete | namespace_read | namespace_write | file_state | session_state). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all external protocols. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | all | internal | external) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummaryProtocolCall(String operations, String sort, String totalby, Boolean zero, String classes, Integer timeout, Boolean degraded, String nodes, String protocols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/summary/protocol";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (operations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operations", operations));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (totalby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("totalby", totalby));
        if (zero != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zero", zero));
        if (classes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("classes", classes));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (protocols != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocols", protocols));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummaryProtocolValidateBeforeCall(String operations, String sort, String totalby, Boolean zero, String classes, Integer timeout, Boolean degraded, String nodes, String protocols, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummaryProtocolCall(operations, sort, totalby, zero, classes, timeout, degraded, nodes, protocols, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param operations Specify operation(s) for which statistics should be reported (See the cli command: &#39;isi statistics list operations&#39;, for a total list). Default is all.  (optional)
     * @param sort Sort data by the specified comma-separated field(s). (time | operation_count | operation_rate | in_max | in_min | in | in_avg | in_standard_dev | out_max | out_min | out | out_avg | out_standard_dev | time_max | time_min | time_avg | time_standard_dev | node | protocol | class | operation). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | operation). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param zero Show table entries with no values. (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | create | delete | namespace_read | namespace_write | file_state | session_state). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all external protocols. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | all | internal | external) (optional)
     * @return SummaryProtocol
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryProtocol getSummaryProtocol(String operations, String sort, String totalby, Boolean zero, String classes, Integer timeout, Boolean degraded, String nodes, String protocols) throws ApiException {
        ApiResponse<SummaryProtocol> resp = getSummaryProtocolWithHttpInfo(operations, sort, totalby, zero, classes, timeout, degraded, nodes, protocols);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param operations Specify operation(s) for which statistics should be reported (See the cli command: &#39;isi statistics list operations&#39;, for a total list). Default is all.  (optional)
     * @param sort Sort data by the specified comma-separated field(s). (time | operation_count | operation_rate | in_max | in_min | in | in_avg | in_standard_dev | out_max | out_min | out | out_avg | out_standard_dev | time_max | time_min | time_avg | time_standard_dev | node | protocol | class | operation). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | operation). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param zero Show table entries with no values. (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | create | delete | namespace_read | namespace_write | file_state | session_state). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all external protocols. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | all | internal | external) (optional)
     * @return ApiResponse&lt;SummaryProtocol&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryProtocol> getSummaryProtocolWithHttpInfo(String operations, String sort, String totalby, Boolean zero, String classes, Integer timeout, Boolean degraded, String nodes, String protocols) throws ApiException {
        com.squareup.okhttp.Call call = getSummaryProtocolValidateBeforeCall(operations, sort, totalby, zero, classes, timeout, degraded, nodes, protocols, null, null);
        Type localVarReturnType = new TypeToken<SummaryProtocol>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param operations Specify operation(s) for which statistics should be reported (See the cli command: &#39;isi statistics list operations&#39;, for a total list). Default is all.  (optional)
     * @param sort Sort data by the specified comma-separated field(s). (time | operation_count | operation_rate | in_max | in_min | in | in_avg | in_standard_dev | out_max | out_min | out | out_avg | out_standard_dev | time_max | time_min | time_avg | time_standard_dev | node | protocol | class | operation). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | protocol | class | operation). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param zero Show table entries with no values. (optional)
     * @param classes A comma separated list. Default is all. (other | write | read | create | delete | namespace_read | namespace_write | file_state | session_state). (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param protocols A comma separated list. Default is all external protocols. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs | all | internal | external) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummaryProtocolAsync(String operations, String sort, String totalby, Boolean zero, String classes, Integer timeout, Boolean degraded, String nodes, String protocols, final ApiCallback<SummaryProtocol> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummaryProtocolValidateBeforeCall(operations, sort, totalby, zero, classes, timeout, degraded, nodes, protocols, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryProtocol>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummaryProtocolStats
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param protocol A single protocol. Default is nfs3. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs) (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummaryProtocolStatsCall(Boolean degraded, String protocol, String nodes, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/summary/protocol-stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (protocol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("protocol", protocol));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummaryProtocolStatsValidateBeforeCall(Boolean degraded, String protocol, String nodes, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummaryProtocolStatsCall(degraded, protocol, nodes, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param protocol A single protocol. Default is nfs3. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs) (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @return SummaryProtocolStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryProtocolStats getSummaryProtocolStats(Boolean degraded, String protocol, String nodes, Integer timeout) throws ApiException {
        ApiResponse<SummaryProtocolStats> resp = getSummaryProtocolStatsWithHttpInfo(degraded, protocol, nodes, timeout);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param protocol A single protocol. Default is nfs3. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs) (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @return ApiResponse&lt;SummaryProtocolStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryProtocolStats> getSummaryProtocolStatsWithHttpInfo(Boolean degraded, String protocol, String nodes, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = getSummaryProtocolStatsValidateBeforeCall(degraded, protocol, nodes, timeout, null, null);
        Type localVarReturnType = new TypeToken<SummaryProtocolStats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param protocol A single protocol. Default is nfs3. (nfs3 | smb1 | nlm | ftp | http | siq | smb2 | nfs4 | papi | jobd | irp | lsass_in | lsass_out | hdfs) (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummaryProtocolStatsAsync(Boolean degraded, String protocol, String nodes, Integer timeout, final ApiCallback<SummaryProtocolStats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummaryProtocolStatsValidateBeforeCall(degraded, protocol, nodes, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryProtocolStats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummarySystem
     * @param sort Sort data by the specified comma-separated field(s). (time | node | cpu | smb | ftp | http | nfs | hdfs | total | net_in | net_out | disk_in). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param oprates Display protocol operation rate statistics rather than the default throughput statistics. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummarySystemCall(String sort, Boolean oprates, Boolean degraded, String nodes, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/statistics/summary/system";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (oprates != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("oprates", oprates));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummarySystemValidateBeforeCall(String sort, Boolean oprates, Boolean degraded, String nodes, Integer timeout, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummarySystemCall(sort, oprates, degraded, nodes, timeout, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (time | node | cpu | smb | ftp | http | nfs | hdfs | total | net_in | net_out | disk_in). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param oprates Display protocol operation rate statistics rather than the default throughput statistics. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @return SummarySystem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummarySystem getSummarySystem(String sort, Boolean oprates, Boolean degraded, String nodes, Integer timeout) throws ApiException {
        ApiResponse<SummarySystem> resp = getSummarySystemWithHttpInfo(sort, oprates, degraded, nodes, timeout);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (time | node | cpu | smb | ftp | http | nfs | hdfs | total | net_in | net_out | disk_in). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param oprates Display protocol operation rate statistics rather than the default throughput statistics. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @return ApiResponse&lt;SummarySystem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummarySystem> getSummarySystemWithHttpInfo(String sort, Boolean oprates, Boolean degraded, String nodes, Integer timeout) throws ApiException {
        com.squareup.okhttp.Call call = getSummarySystemValidateBeforeCall(sort, oprates, degraded, nodes, timeout, null, null);
        Type localVarReturnType = new TypeToken<SummarySystem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sort Sort data by the specified comma-separated field(s). (time | node | cpu | smb | ftp | http | nfs | hdfs | total | net_in | net_out | disk_in). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param oprates Display protocol operation rate statistics rather than the default throughput statistics. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummarySystemAsync(String sort, Boolean oprates, Boolean degraded, String nodes, Integer timeout, final ApiCallback<SummarySystem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummarySystemValidateBeforeCall(sort, oprates, degraded, nodes, timeout, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummarySystem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSummaryWorkload
     * @param sort Sort data by the specified comma-separated field(s). (node | system_name | job_type | cpu | reads | writes | l2 | l3). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param jobTypes A comma separated list. Only report statistics for job(s) specified by type, if configured.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | system_name | job_type). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param systemNames A comma separated list. Only report statistics for workloads specified by system names. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSummaryWorkloadCall(String sort, List<String> jobTypes, String totalby, Integer timeout, Boolean degraded, String nodes, String systemNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/statistics/summary/workload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (jobTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "job_types", jobTypes));
        if (totalby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("totalby", totalby));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (degraded != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("degraded", degraded));
        if (nodes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nodes", nodes));
        if (systemNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("system_names", systemNames));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSummaryWorkloadValidateBeforeCall(String sort, List<String> jobTypes, String totalby, Integer timeout, Boolean degraded, String nodes, String systemNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSummaryWorkloadCall(sort, jobTypes, totalby, timeout, degraded, nodes, systemNames, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (node | system_name | job_type | cpu | reads | writes | l2 | l3). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param jobTypes A comma separated list. Only report statistics for job(s) specified by type, if configured.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | system_name | job_type). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param systemNames A comma separated list. Only report statistics for workloads specified by system names. (optional)
     * @return SummaryWorkload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SummaryWorkload getSummaryWorkload(String sort, List<String> jobTypes, String totalby, Integer timeout, Boolean degraded, String nodes, String systemNames) throws ApiException {
        ApiResponse<SummaryWorkload> resp = getSummaryWorkloadWithHttpInfo(sort, jobTypes, totalby, timeout, degraded, nodes, systemNames);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sort Sort data by the specified comma-separated field(s). (node | system_name | job_type | cpu | reads | writes | l2 | l3). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param jobTypes A comma separated list. Only report statistics for job(s) specified by type, if configured.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | system_name | job_type). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param systemNames A comma separated list. Only report statistics for workloads specified by system names. (optional)
     * @return ApiResponse&lt;SummaryWorkload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SummaryWorkload> getSummaryWorkloadWithHttpInfo(String sort, List<String> jobTypes, String totalby, Integer timeout, Boolean degraded, String nodes, String systemNames) throws ApiException {
        com.squareup.okhttp.Call call = getSummaryWorkloadValidateBeforeCall(sort, jobTypes, totalby, timeout, degraded, nodes, systemNames, null, null);
        Type localVarReturnType = new TypeToken<SummaryWorkload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sort Sort data by the specified comma-separated field(s). (node | system_name | job_type | cpu | reads | writes | l2 | l3). Prepend &#39;asc:&#39; or &#39;desc:&#39; to a field to change the sort direction.  (optional)
     * @param jobTypes A comma separated list. Only report statistics for job(s) specified by type, if configured.  (optional)
     * @param totalby A comma separated list specifying what should be unique. (node | system_name | job_type). Aggregation is performed over all the fields not specified in the list. (optional)
     * @param timeout Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument. (optional)
     * @param degraded Continue to report if some nodes do not respond. (optional)
     * @param nodes A comma separated list. Specify node(s) for which statistics should be reported. Default is all. Zero (0) should be passed in as the sole argument to indicate local. (optional)
     * @param systemNames A comma separated list. Only report statistics for workloads specified by system names. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSummaryWorkloadAsync(String sort, List<String> jobTypes, String totalby, Integer timeout, Boolean degraded, String nodes, String systemNames, final ApiCallback<SummaryWorkload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSummaryWorkloadValidateBeforeCall(sort, jobTypes, totalby, timeout, degraded, nodes, systemNames, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SummaryWorkload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
