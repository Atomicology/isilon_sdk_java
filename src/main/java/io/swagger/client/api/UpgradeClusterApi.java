/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.NodesNodeFirmwareStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpgradeClusterApi {
    private ApiClient apiClient;

    public UpgradeClusterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpgradeClusterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNodesNodePatchSyncItem
     * @param nodesNodePatchSyncItem  (required)
     * @param lnn  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNodesNodePatchSyncItemCall(Empty nodesNodePatchSyncItem, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nodesNodePatchSyncItem;

        // create path and map variables
        String localVarPath = "/platform/4/upgrade/cluster/nodes/{Lnn}/patch/sync"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNodesNodePatchSyncItemValidateBeforeCall(Empty nodesNodePatchSyncItem, Integer lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodesNodePatchSyncItem' is set
        if (nodesNodePatchSyncItem == null) {
            throw new ApiException("Missing the required parameter 'nodesNodePatchSyncItem' when calling createNodesNodePatchSyncItem(Async)");
        }
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling createNodesNodePatchSyncItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNodesNodePatchSyncItemCall(nodesNodePatchSyncItem, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retry any pending patch sync operations.
     * @param nodesNodePatchSyncItem  (required)
     * @param lnn  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNodesNodePatchSyncItem(Empty nodesNodePatchSyncItem, Integer lnn) throws ApiException {
        ApiResponse<Empty> resp = createNodesNodePatchSyncItemWithHttpInfo(nodesNodePatchSyncItem, lnn);
        return resp.getData();
    }

    /**
     * 
     * Retry any pending patch sync operations.
     * @param nodesNodePatchSyncItem  (required)
     * @param lnn  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNodesNodePatchSyncItemWithHttpInfo(Empty nodesNodePatchSyncItem, Integer lnn) throws ApiException {
        com.squareup.okhttp.Call call = createNodesNodePatchSyncItemValidateBeforeCall(nodesNodePatchSyncItem, lnn, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retry any pending patch sync operations.
     * @param nodesNodePatchSyncItem  (required)
     * @param lnn  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNodesNodePatchSyncItemAsync(Empty nodesNodePatchSyncItem, Integer lnn, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNodesNodePatchSyncItemValidateBeforeCall(nodesNodePatchSyncItem, lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodesNodeFirmwareStatus
     * @param lnn  (required)
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodesNodeFirmwareStatusCall(Integer lnn, Boolean devices, Boolean _package, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/nodes/{Lnn}/firmware/status"
            .replaceAll("\\{" + "Lnn" + "\\}", apiClient.escapeString(lnn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (devices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devices", devices));
        if (_package != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("package", _package));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodesNodeFirmwareStatusValidateBeforeCall(Integer lnn, Boolean devices, Boolean _package, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lnn' is set
        if (lnn == null) {
            throw new ApiException("Missing the required parameter 'lnn' when calling getNodesNodeFirmwareStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodesNodeFirmwareStatusCall(lnn, devices, _package, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The firmware status for the node.
     * @param lnn  (required)
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @return NodesNodeFirmwareStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodesNodeFirmwareStatus getNodesNodeFirmwareStatus(Integer lnn, Boolean devices, Boolean _package) throws ApiException {
        ApiResponse<NodesNodeFirmwareStatus> resp = getNodesNodeFirmwareStatusWithHttpInfo(lnn, devices, _package);
        return resp.getData();
    }

    /**
     * 
     * The firmware status for the node.
     * @param lnn  (required)
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @return ApiResponse&lt;NodesNodeFirmwareStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodesNodeFirmwareStatus> getNodesNodeFirmwareStatusWithHttpInfo(Integer lnn, Boolean devices, Boolean _package) throws ApiException {
        com.squareup.okhttp.Call call = getNodesNodeFirmwareStatusValidateBeforeCall(lnn, devices, _package, null, null);
        Type localVarReturnType = new TypeToken<NodesNodeFirmwareStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The firmware status for the node.
     * @param lnn  (required)
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodesNodeFirmwareStatusAsync(Integer lnn, Boolean devices, Boolean _package, final ApiCallback<NodesNodeFirmwareStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodesNodeFirmwareStatusValidateBeforeCall(lnn, devices, _package, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodesNodeFirmwareStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
