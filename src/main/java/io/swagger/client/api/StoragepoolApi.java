/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CompatibilitiesClassActive;
import io.swagger.client.model.CompatibilitiesClassActiveExtended;
import io.swagger.client.model.CompatibilitiesClassActiveItem;
import io.swagger.client.model.CompatibilitiesClassAvailable;
import io.swagger.client.model.CompatibilitiesSsdActive;
import io.swagger.client.model.CompatibilitiesSsdActiveExtended;
import io.swagger.client.model.CompatibilitiesSsdActiveIdParams;
import io.swagger.client.model.CompatibilitiesSsdActiveItem;
import io.swagger.client.model.CompatibilitiesSsdAvailable;
import io.swagger.client.model.CreateCompatibilitiesClassActiveItemResponse;
import io.swagger.client.model.CreateStoragepoolTierResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.StoragepoolNodepool;
import io.swagger.client.model.StoragepoolNodepoolCreateParams;
import io.swagger.client.model.StoragepoolNodepools;
import io.swagger.client.model.StoragepoolNodepoolsExtended;
import io.swagger.client.model.StoragepoolSettings;
import io.swagger.client.model.StoragepoolSettingsExtended;
import io.swagger.client.model.StoragepoolStatus;
import io.swagger.client.model.StoragepoolStoragepools;
import io.swagger.client.model.StoragepoolSuggestedProtection;
import io.swagger.client.model.StoragepoolTier;
import io.swagger.client.model.StoragepoolTierCreateParams;
import io.swagger.client.model.StoragepoolTiers;
import io.swagger.client.model.StoragepoolTiersExtended;
import io.swagger.client.model.StoragepoolUnprovisioned;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoragepoolApi {
    private ApiClient apiClient;

    public StoragepoolApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoragepoolApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCompatibilitiesClassActiveItem
     * @param compatibilitiesClassActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCompatibilitiesClassActiveItemCall(CompatibilitiesClassActiveItem compatibilitiesClassActiveItem, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = compatibilitiesClassActiveItem;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/compatibilities/class/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assess", assess));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCompatibilitiesClassActiveItemValidateBeforeCall(CompatibilitiesClassActiveItem compatibilitiesClassActiveItem, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesClassActiveItem' is set
        if (compatibilitiesClassActiveItem == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesClassActiveItem' when calling createCompatibilitiesClassActiveItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createCompatibilitiesClassActiveItemCall(compatibilitiesClassActiveItem, assess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new compatibility
     * @param compatibilitiesClassActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return CreateCompatibilitiesClassActiveItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateCompatibilitiesClassActiveItemResponse createCompatibilitiesClassActiveItem(CompatibilitiesClassActiveItem compatibilitiesClassActiveItem, Boolean assess) throws ApiException {
        ApiResponse<CreateCompatibilitiesClassActiveItemResponse> resp = createCompatibilitiesClassActiveItemWithHttpInfo(compatibilitiesClassActiveItem, assess);
        return resp.getData();
    }

    /**
     * 
     * Create a new compatibility
     * @param compatibilitiesClassActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return ApiResponse&lt;CreateCompatibilitiesClassActiveItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateCompatibilitiesClassActiveItemResponse> createCompatibilitiesClassActiveItemWithHttpInfo(CompatibilitiesClassActiveItem compatibilitiesClassActiveItem, Boolean assess) throws ApiException {
        com.squareup.okhttp.Call call = createCompatibilitiesClassActiveItemValidateBeforeCall(compatibilitiesClassActiveItem, assess, null, null);
        Type localVarReturnType = new TypeToken<CreateCompatibilitiesClassActiveItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new compatibility
     * @param compatibilitiesClassActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCompatibilitiesClassActiveItemAsync(CompatibilitiesClassActiveItem compatibilitiesClassActiveItem, Boolean assess, final ApiCallback<CreateCompatibilitiesClassActiveItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCompatibilitiesClassActiveItemValidateBeforeCall(compatibilitiesClassActiveItem, assess, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCompatibilitiesClassActiveItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCompatibilitiesSsdActiveItem
     * @param compatibilitiesSsdActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCompatibilitiesSsdActiveItemCall(CompatibilitiesSsdActiveItem compatibilitiesSsdActiveItem, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = compatibilitiesSsdActiveItem;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/compatibilities/ssd/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assess", assess));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCompatibilitiesSsdActiveItemValidateBeforeCall(CompatibilitiesSsdActiveItem compatibilitiesSsdActiveItem, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesSsdActiveItem' is set
        if (compatibilitiesSsdActiveItem == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesSsdActiveItem' when calling createCompatibilitiesSsdActiveItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createCompatibilitiesSsdActiveItemCall(compatibilitiesSsdActiveItem, assess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new ssd compatibility
     * @param compatibilitiesSsdActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return CreateCompatibilitiesClassActiveItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateCompatibilitiesClassActiveItemResponse createCompatibilitiesSsdActiveItem(CompatibilitiesSsdActiveItem compatibilitiesSsdActiveItem, Boolean assess) throws ApiException {
        ApiResponse<CreateCompatibilitiesClassActiveItemResponse> resp = createCompatibilitiesSsdActiveItemWithHttpInfo(compatibilitiesSsdActiveItem, assess);
        return resp.getData();
    }

    /**
     * 
     * Create a new ssd compatibility
     * @param compatibilitiesSsdActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return ApiResponse&lt;CreateCompatibilitiesClassActiveItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateCompatibilitiesClassActiveItemResponse> createCompatibilitiesSsdActiveItemWithHttpInfo(CompatibilitiesSsdActiveItem compatibilitiesSsdActiveItem, Boolean assess) throws ApiException {
        com.squareup.okhttp.Call call = createCompatibilitiesSsdActiveItemValidateBeforeCall(compatibilitiesSsdActiveItem, assess, null, null);
        Type localVarReturnType = new TypeToken<CreateCompatibilitiesClassActiveItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new ssd compatibility
     * @param compatibilitiesSsdActiveItem  (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCompatibilitiesSsdActiveItemAsync(CompatibilitiesSsdActiveItem compatibilitiesSsdActiveItem, Boolean assess, final ApiCallback<CreateCompatibilitiesClassActiveItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCompatibilitiesSsdActiveItemValidateBeforeCall(compatibilitiesSsdActiveItem, assess, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCompatibilitiesClassActiveItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStoragepoolNodepool
     * @param storagepoolNodepool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStoragepoolNodepoolCall(StoragepoolNodepoolCreateParams storagepoolNodepool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storagepoolNodepool;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/nodepools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStoragepoolNodepoolValidateBeforeCall(StoragepoolNodepoolCreateParams storagepoolNodepool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolNodepool' is set
        if (storagepoolNodepool == null) {
            throw new ApiException("Missing the required parameter 'storagepoolNodepool' when calling createStoragepoolNodepool(Async)");
        }
        

        com.squareup.okhttp.Call call = createStoragepoolNodepoolCall(storagepoolNodepool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new node pool.
     * @param storagepoolNodepool  (required)
     * @return CreateStoragepoolTierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateStoragepoolTierResponse createStoragepoolNodepool(StoragepoolNodepoolCreateParams storagepoolNodepool) throws ApiException {
        ApiResponse<CreateStoragepoolTierResponse> resp = createStoragepoolNodepoolWithHttpInfo(storagepoolNodepool);
        return resp.getData();
    }

    /**
     * 
     * Create a new node pool.
     * @param storagepoolNodepool  (required)
     * @return ApiResponse&lt;CreateStoragepoolTierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateStoragepoolTierResponse> createStoragepoolNodepoolWithHttpInfo(StoragepoolNodepoolCreateParams storagepoolNodepool) throws ApiException {
        com.squareup.okhttp.Call call = createStoragepoolNodepoolValidateBeforeCall(storagepoolNodepool, null, null);
        Type localVarReturnType = new TypeToken<CreateStoragepoolTierResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new node pool.
     * @param storagepoolNodepool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStoragepoolNodepoolAsync(StoragepoolNodepoolCreateParams storagepoolNodepool, final ApiCallback<CreateStoragepoolTierResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStoragepoolNodepoolValidateBeforeCall(storagepoolNodepool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateStoragepoolTierResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStoragepoolTier
     * @param storagepoolTier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStoragepoolTierCall(StoragepoolTierCreateParams storagepoolTier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storagepoolTier;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStoragepoolTierValidateBeforeCall(StoragepoolTierCreateParams storagepoolTier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolTier' is set
        if (storagepoolTier == null) {
            throw new ApiException("Missing the required parameter 'storagepoolTier' when calling createStoragepoolTier(Async)");
        }
        

        com.squareup.okhttp.Call call = createStoragepoolTierCall(storagepoolTier, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new tier.
     * @param storagepoolTier  (required)
     * @return CreateStoragepoolTierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateStoragepoolTierResponse createStoragepoolTier(StoragepoolTierCreateParams storagepoolTier) throws ApiException {
        ApiResponse<CreateStoragepoolTierResponse> resp = createStoragepoolTierWithHttpInfo(storagepoolTier);
        return resp.getData();
    }

    /**
     * 
     * Create a new tier.
     * @param storagepoolTier  (required)
     * @return ApiResponse&lt;CreateStoragepoolTierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateStoragepoolTierResponse> createStoragepoolTierWithHttpInfo(StoragepoolTierCreateParams storagepoolTier) throws ApiException {
        com.squareup.okhttp.Call call = createStoragepoolTierValidateBeforeCall(storagepoolTier, null, null);
        Type localVarReturnType = new TypeToken<CreateStoragepoolTierResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new tier.
     * @param storagepoolTier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStoragepoolTierAsync(StoragepoolTierCreateParams storagepoolTier, final ApiCallback<CreateStoragepoolTierResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStoragepoolTierValidateBeforeCall(storagepoolTier, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateStoragepoolTierResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCompatibilitiesClassActiveById
     * @param compatibilitiesClassActiveId Delete an active compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCompatibilitiesClassActiveByIdCall(String compatibilitiesClassActiveId, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}"
            .replaceAll("\\{" + "CompatibilitiesClassActiveId" + "\\}", apiClient.escapeString(compatibilitiesClassActiveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assess", assess));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCompatibilitiesClassActiveByIdValidateBeforeCall(String compatibilitiesClassActiveId, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesClassActiveId' is set
        if (compatibilitiesClassActiveId == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesClassActiveId' when calling deleteCompatibilitiesClassActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCompatibilitiesClassActiveByIdCall(compatibilitiesClassActiveId, assess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete an active compatibility by id
     * @param compatibilitiesClassActiveId Delete an active compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCompatibilitiesClassActiveById(String compatibilitiesClassActiveId, Boolean assess) throws ApiException {
        deleteCompatibilitiesClassActiveByIdWithHttpInfo(compatibilitiesClassActiveId, assess);
    }

    /**
     * 
     * Delete an active compatibility by id
     * @param compatibilitiesClassActiveId Delete an active compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCompatibilitiesClassActiveByIdWithHttpInfo(String compatibilitiesClassActiveId, Boolean assess) throws ApiException {
        com.squareup.okhttp.Call call = deleteCompatibilitiesClassActiveByIdValidateBeforeCall(compatibilitiesClassActiveId, assess, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an active compatibility by id
     * @param compatibilitiesClassActiveId Delete an active compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCompatibilitiesClassActiveByIdAsync(String compatibilitiesClassActiveId, Boolean assess, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCompatibilitiesClassActiveByIdValidateBeforeCall(compatibilitiesClassActiveId, assess, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCompatibilitiesSsdActiveById
     * @param compatibilitiesSsdActiveId Delete an active ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCompatibilitiesSsdActiveByIdCall(String compatibilitiesSsdActiveId, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}"
            .replaceAll("\\{" + "CompatibilitiesSsdActiveId" + "\\}", apiClient.escapeString(compatibilitiesSsdActiveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assess", assess));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCompatibilitiesSsdActiveByIdValidateBeforeCall(String compatibilitiesSsdActiveId, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesSsdActiveId' is set
        if (compatibilitiesSsdActiveId == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesSsdActiveId' when calling deleteCompatibilitiesSsdActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCompatibilitiesSsdActiveByIdCall(compatibilitiesSsdActiveId, assess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete an active ssd compatibility by id
     * @param compatibilitiesSsdActiveId Delete an active ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCompatibilitiesSsdActiveById(String compatibilitiesSsdActiveId, Boolean assess) throws ApiException {
        deleteCompatibilitiesSsdActiveByIdWithHttpInfo(compatibilitiesSsdActiveId, assess);
    }

    /**
     * 
     * Delete an active ssd compatibility by id
     * @param compatibilitiesSsdActiveId Delete an active ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCompatibilitiesSsdActiveByIdWithHttpInfo(String compatibilitiesSsdActiveId, Boolean assess) throws ApiException {
        com.squareup.okhttp.Call call = deleteCompatibilitiesSsdActiveByIdValidateBeforeCall(compatibilitiesSsdActiveId, assess, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an active ssd compatibility by id
     * @param compatibilitiesSsdActiveId Delete an active ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCompatibilitiesSsdActiveByIdAsync(String compatibilitiesSsdActiveId, Boolean assess, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCompatibilitiesSsdActiveByIdValidateBeforeCall(compatibilitiesSsdActiveId, assess, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStoragepoolNodepool
     * @param storagepoolNodepoolId Delete node pool. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolNodepoolCall(String storagepoolNodepoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}"
            .replaceAll("\\{" + "StoragepoolNodepoolId" + "\\}", apiClient.escapeString(storagepoolNodepoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStoragepoolNodepoolValidateBeforeCall(String storagepoolNodepoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolNodepoolId' is set
        if (storagepoolNodepoolId == null) {
            throw new ApiException("Missing the required parameter 'storagepoolNodepoolId' when calling deleteStoragepoolNodepool(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStoragepoolNodepoolCall(storagepoolNodepoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete node pool.
     * @param storagepoolNodepoolId Delete node pool. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStoragepoolNodepool(String storagepoolNodepoolId) throws ApiException {
        deleteStoragepoolNodepoolWithHttpInfo(storagepoolNodepoolId);
    }

    /**
     * 
     * Delete node pool.
     * @param storagepoolNodepoolId Delete node pool. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStoragepoolNodepoolWithHttpInfo(String storagepoolNodepoolId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStoragepoolNodepoolValidateBeforeCall(storagepoolNodepoolId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete node pool.
     * @param storagepoolNodepoolId Delete node pool. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolNodepoolAsync(String storagepoolNodepoolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStoragepoolNodepoolValidateBeforeCall(storagepoolNodepoolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStoragepoolNodepools
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolNodepoolsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/nodepools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStoragepoolNodepoolsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteStoragepoolNodepoolsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all node pools.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStoragepoolNodepools() throws ApiException {
        deleteStoragepoolNodepoolsWithHttpInfo();
    }

    /**
     * 
     * Delete all node pools.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStoragepoolNodepoolsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteStoragepoolNodepoolsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all node pools.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolNodepoolsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStoragepoolNodepoolsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStoragepoolTier
     * @param storagepoolTierId Delete tier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolTierCall(String storagepoolTierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/tiers/{StoragepoolTierId}"
            .replaceAll("\\{" + "StoragepoolTierId" + "\\}", apiClient.escapeString(storagepoolTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStoragepoolTierValidateBeforeCall(String storagepoolTierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolTierId' is set
        if (storagepoolTierId == null) {
            throw new ApiException("Missing the required parameter 'storagepoolTierId' when calling deleteStoragepoolTier(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStoragepoolTierCall(storagepoolTierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete tier.
     * @param storagepoolTierId Delete tier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStoragepoolTier(String storagepoolTierId) throws ApiException {
        deleteStoragepoolTierWithHttpInfo(storagepoolTierId);
    }

    /**
     * 
     * Delete tier.
     * @param storagepoolTierId Delete tier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStoragepoolTierWithHttpInfo(String storagepoolTierId) throws ApiException {
        com.squareup.okhttp.Call call = deleteStoragepoolTierValidateBeforeCall(storagepoolTierId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete tier.
     * @param storagepoolTierId Delete tier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolTierAsync(String storagepoolTierId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStoragepoolTierValidateBeforeCall(storagepoolTierId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStoragepoolTiers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolTiersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStoragepoolTiersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteStoragepoolTiersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all tiers.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStoragepoolTiers() throws ApiException {
        deleteStoragepoolTiersWithHttpInfo();
    }

    /**
     * 
     * Delete all tiers.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStoragepoolTiersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteStoragepoolTiersValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all tiers.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStoragepoolTiersAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStoragepoolTiersValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCompatibilitiesClassActiveById
     * @param compatibilitiesClassActiveId Get an active compatibilities by id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesClassActiveByIdCall(String compatibilitiesClassActiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}"
            .replaceAll("\\{" + "CompatibilitiesClassActiveId" + "\\}", apiClient.escapeString(compatibilitiesClassActiveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompatibilitiesClassActiveByIdValidateBeforeCall(String compatibilitiesClassActiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesClassActiveId' is set
        if (compatibilitiesClassActiveId == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesClassActiveId' when calling getCompatibilitiesClassActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCompatibilitiesClassActiveByIdCall(compatibilitiesClassActiveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get an active compatibilities by id
     * @param compatibilitiesClassActiveId Get an active compatibilities by id (required)
     * @return CompatibilitiesClassActive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompatibilitiesClassActive getCompatibilitiesClassActiveById(String compatibilitiesClassActiveId) throws ApiException {
        ApiResponse<CompatibilitiesClassActive> resp = getCompatibilitiesClassActiveByIdWithHttpInfo(compatibilitiesClassActiveId);
        return resp.getData();
    }

    /**
     * 
     * Get an active compatibilities by id
     * @param compatibilitiesClassActiveId Get an active compatibilities by id (required)
     * @return ApiResponse&lt;CompatibilitiesClassActive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompatibilitiesClassActive> getCompatibilitiesClassActiveByIdWithHttpInfo(String compatibilitiesClassActiveId) throws ApiException {
        com.squareup.okhttp.Call call = getCompatibilitiesClassActiveByIdValidateBeforeCall(compatibilitiesClassActiveId, null, null);
        Type localVarReturnType = new TypeToken<CompatibilitiesClassActive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an active compatibilities by id
     * @param compatibilitiesClassActiveId Get an active compatibilities by id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesClassActiveByIdAsync(String compatibilitiesClassActiveId, final ApiCallback<CompatibilitiesClassActive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompatibilitiesClassActiveByIdValidateBeforeCall(compatibilitiesClassActiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompatibilitiesClassActive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompatibilitiesClassAvailable
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesClassAvailableCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/compatibilities/class/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompatibilitiesClassAvailableValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCompatibilitiesClassAvailableCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of available compatibilities
     * @return CompatibilitiesClassAvailable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompatibilitiesClassAvailable getCompatibilitiesClassAvailable() throws ApiException {
        ApiResponse<CompatibilitiesClassAvailable> resp = getCompatibilitiesClassAvailableWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get a list of available compatibilities
     * @return ApiResponse&lt;CompatibilitiesClassAvailable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompatibilitiesClassAvailable> getCompatibilitiesClassAvailableWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCompatibilitiesClassAvailableValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CompatibilitiesClassAvailable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of available compatibilities
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesClassAvailableAsync(final ApiCallback<CompatibilitiesClassAvailable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompatibilitiesClassAvailableValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompatibilitiesClassAvailable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompatibilitiesSsdActiveById
     * @param compatibilitiesSsdActiveId Get a active ssd compatibilities by id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesSsdActiveByIdCall(String compatibilitiesSsdActiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}"
            .replaceAll("\\{" + "CompatibilitiesSsdActiveId" + "\\}", apiClient.escapeString(compatibilitiesSsdActiveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompatibilitiesSsdActiveByIdValidateBeforeCall(String compatibilitiesSsdActiveId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesSsdActiveId' is set
        if (compatibilitiesSsdActiveId == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesSsdActiveId' when calling getCompatibilitiesSsdActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = getCompatibilitiesSsdActiveByIdCall(compatibilitiesSsdActiveId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a active ssd compatibilities by id
     * @param compatibilitiesSsdActiveId Get a active ssd compatibilities by id (required)
     * @return CompatibilitiesSsdActive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompatibilitiesSsdActive getCompatibilitiesSsdActiveById(String compatibilitiesSsdActiveId) throws ApiException {
        ApiResponse<CompatibilitiesSsdActive> resp = getCompatibilitiesSsdActiveByIdWithHttpInfo(compatibilitiesSsdActiveId);
        return resp.getData();
    }

    /**
     * 
     * Get a active ssd compatibilities by id
     * @param compatibilitiesSsdActiveId Get a active ssd compatibilities by id (required)
     * @return ApiResponse&lt;CompatibilitiesSsdActive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompatibilitiesSsdActive> getCompatibilitiesSsdActiveByIdWithHttpInfo(String compatibilitiesSsdActiveId) throws ApiException {
        com.squareup.okhttp.Call call = getCompatibilitiesSsdActiveByIdValidateBeforeCall(compatibilitiesSsdActiveId, null, null);
        Type localVarReturnType = new TypeToken<CompatibilitiesSsdActive>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a active ssd compatibilities by id
     * @param compatibilitiesSsdActiveId Get a active ssd compatibilities by id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesSsdActiveByIdAsync(String compatibilitiesSsdActiveId, final ApiCallback<CompatibilitiesSsdActive> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompatibilitiesSsdActiveByIdValidateBeforeCall(compatibilitiesSsdActiveId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompatibilitiesSsdActive>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCompatibilitiesSsdAvailable
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesSsdAvailableCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/compatibilities/ssd/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCompatibilitiesSsdAvailableValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCompatibilitiesSsdAvailableCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of available ssd compatibilities
     * @return CompatibilitiesSsdAvailable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompatibilitiesSsdAvailable getCompatibilitiesSsdAvailable() throws ApiException {
        ApiResponse<CompatibilitiesSsdAvailable> resp = getCompatibilitiesSsdAvailableWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get a list of available ssd compatibilities
     * @return ApiResponse&lt;CompatibilitiesSsdAvailable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompatibilitiesSsdAvailable> getCompatibilitiesSsdAvailableWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCompatibilitiesSsdAvailableValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CompatibilitiesSsdAvailable>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of available ssd compatibilities
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCompatibilitiesSsdAvailableAsync(final ApiCallback<CompatibilitiesSsdAvailable> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCompatibilitiesSsdAvailableValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompatibilitiesSsdAvailable>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolNodepool
     * @param storagepoolNodepoolId Retrieve node pool information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolNodepoolCall(String storagepoolNodepoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}"
            .replaceAll("\\{" + "StoragepoolNodepoolId" + "\\}", apiClient.escapeString(storagepoolNodepoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolNodepoolValidateBeforeCall(String storagepoolNodepoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolNodepoolId' is set
        if (storagepoolNodepoolId == null) {
            throw new ApiException("Missing the required parameter 'storagepoolNodepoolId' when calling getStoragepoolNodepool(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoragepoolNodepoolCall(storagepoolNodepoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve node pool information.
     * @param storagepoolNodepoolId Retrieve node pool information. (required)
     * @return StoragepoolNodepools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolNodepools getStoragepoolNodepool(String storagepoolNodepoolId) throws ApiException {
        ApiResponse<StoragepoolNodepools> resp = getStoragepoolNodepoolWithHttpInfo(storagepoolNodepoolId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve node pool information.
     * @param storagepoolNodepoolId Retrieve node pool information. (required)
     * @return ApiResponse&lt;StoragepoolNodepools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolNodepools> getStoragepoolNodepoolWithHttpInfo(String storagepoolNodepoolId) throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolNodepoolValidateBeforeCall(storagepoolNodepoolId, null, null);
        Type localVarReturnType = new TypeToken<StoragepoolNodepools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve node pool information.
     * @param storagepoolNodepoolId Retrieve node pool information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolNodepoolAsync(String storagepoolNodepoolId, final ApiCallback<StoragepoolNodepools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolNodepoolValidateBeforeCall(storagepoolNodepoolId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolNodepools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/storagepool/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStoragepoolSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all storagepool settings.
     * @return StoragepoolSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolSettings getStoragepoolSettings() throws ApiException {
        ApiResponse<StoragepoolSettings> resp = getStoragepoolSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all storagepool settings.
     * @return ApiResponse&lt;StoragepoolSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolSettings> getStoragepoolSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StoragepoolSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all storagepool settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolSettingsAsync(final ApiCallback<StoragepoolSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStoragepoolStatusCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List any health conditions detected.
     * @return StoragepoolStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolStatus getStoragepoolStatus() throws ApiException {
        ApiResponse<StoragepoolStatus> resp = getStoragepoolStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List any health conditions detected.
     * @return ApiResponse&lt;StoragepoolStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolStatus> getStoragepoolStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StoragepoolStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List any health conditions detected.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolStatusAsync(final ApiCallback<StoragepoolStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolStoragepools
     * @param sort The field that will be used for sorting. (optional)
     * @param toplevels If true, node pools contained within tiers will be filtered out of results. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolStoragepoolsCall(String sort, String toplevels, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/storagepools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (toplevels != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toplevels", toplevels));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolStoragepoolsValidateBeforeCall(String sort, String toplevels, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStoragepoolStoragepoolsCall(sort, toplevels, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all storage pools.
     * @param sort The field that will be used for sorting. (optional)
     * @param toplevels If true, node pools contained within tiers will be filtered out of results. (optional)
     * @param dir The direction of the sort. (optional)
     * @return StoragepoolStoragepools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolStoragepools getStoragepoolStoragepools(String sort, String toplevels, String dir) throws ApiException {
        ApiResponse<StoragepoolStoragepools> resp = getStoragepoolStoragepoolsWithHttpInfo(sort, toplevels, dir);
        return resp.getData();
    }

    /**
     * 
     * List all storage pools.
     * @param sort The field that will be used for sorting. (optional)
     * @param toplevels If true, node pools contained within tiers will be filtered out of results. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;StoragepoolStoragepools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolStoragepools> getStoragepoolStoragepoolsWithHttpInfo(String sort, String toplevels, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolStoragepoolsValidateBeforeCall(sort, toplevels, dir, null, null);
        Type localVarReturnType = new TypeToken<StoragepoolStoragepools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all storage pools.
     * @param sort The field that will be used for sorting. (optional)
     * @param toplevels If true, node pools contained within tiers will be filtered out of results. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolStoragepoolsAsync(String sort, String toplevels, String dir, final ApiCallback<StoragepoolStoragepools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolStoragepoolsValidateBeforeCall(sort, toplevels, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolStoragepools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolSuggestedProtectionNid
     * @param storagepoolSuggestedProtectionNid Retrieve the suggested protection policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolSuggestedProtectionNidCall(String storagepoolSuggestedProtectionNid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/suggested-protection/{StoragepoolSuggestedProtectionNid}"
            .replaceAll("\\{" + "StoragepoolSuggestedProtectionNid" + "\\}", apiClient.escapeString(storagepoolSuggestedProtectionNid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolSuggestedProtectionNidValidateBeforeCall(String storagepoolSuggestedProtectionNid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolSuggestedProtectionNid' is set
        if (storagepoolSuggestedProtectionNid == null) {
            throw new ApiException("Missing the required parameter 'storagepoolSuggestedProtectionNid' when calling getStoragepoolSuggestedProtectionNid(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoragepoolSuggestedProtectionNidCall(storagepoolSuggestedProtectionNid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the suggested protection policy.
     * @param storagepoolSuggestedProtectionNid Retrieve the suggested protection policy. (required)
     * @return StoragepoolSuggestedProtection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolSuggestedProtection getStoragepoolSuggestedProtectionNid(String storagepoolSuggestedProtectionNid) throws ApiException {
        ApiResponse<StoragepoolSuggestedProtection> resp = getStoragepoolSuggestedProtectionNidWithHttpInfo(storagepoolSuggestedProtectionNid);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the suggested protection policy.
     * @param storagepoolSuggestedProtectionNid Retrieve the suggested protection policy. (required)
     * @return ApiResponse&lt;StoragepoolSuggestedProtection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolSuggestedProtection> getStoragepoolSuggestedProtectionNidWithHttpInfo(String storagepoolSuggestedProtectionNid) throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolSuggestedProtectionNidValidateBeforeCall(storagepoolSuggestedProtectionNid, null, null);
        Type localVarReturnType = new TypeToken<StoragepoolSuggestedProtection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the suggested protection policy.
     * @param storagepoolSuggestedProtectionNid Retrieve the suggested protection policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolSuggestedProtectionNidAsync(String storagepoolSuggestedProtectionNid, final ApiCallback<StoragepoolSuggestedProtection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolSuggestedProtectionNidValidateBeforeCall(storagepoolSuggestedProtectionNid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolSuggestedProtection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolTier
     * @param storagepoolTierId Retrieve tier information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolTierCall(String storagepoolTierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/tiers/{StoragepoolTierId}"
            .replaceAll("\\{" + "StoragepoolTierId" + "\\}", apiClient.escapeString(storagepoolTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolTierValidateBeforeCall(String storagepoolTierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolTierId' is set
        if (storagepoolTierId == null) {
            throw new ApiException("Missing the required parameter 'storagepoolTierId' when calling getStoragepoolTier(Async)");
        }
        

        com.squareup.okhttp.Call call = getStoragepoolTierCall(storagepoolTierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve tier information.
     * @param storagepoolTierId Retrieve tier information. (required)
     * @return StoragepoolTiers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolTiers getStoragepoolTier(String storagepoolTierId) throws ApiException {
        ApiResponse<StoragepoolTiers> resp = getStoragepoolTierWithHttpInfo(storagepoolTierId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve tier information.
     * @param storagepoolTierId Retrieve tier information. (required)
     * @return ApiResponse&lt;StoragepoolTiers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolTiers> getStoragepoolTierWithHttpInfo(String storagepoolTierId) throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolTierValidateBeforeCall(storagepoolTierId, null, null);
        Type localVarReturnType = new TypeToken<StoragepoolTiers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve tier information.
     * @param storagepoolTierId Retrieve tier information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolTierAsync(String storagepoolTierId, final ApiCallback<StoragepoolTiers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolTierValidateBeforeCall(storagepoolTierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolTiers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStoragepoolUnprovisioned
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolUnprovisionedCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/unprovisioned";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStoragepoolUnprovisionedValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getStoragepoolUnprovisionedCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the unprovisioned nodes and drives
     * @return StoragepoolUnprovisioned
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolUnprovisioned getStoragepoolUnprovisioned() throws ApiException {
        ApiResponse<StoragepoolUnprovisioned> resp = getStoragepoolUnprovisionedWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get the unprovisioned nodes and drives
     * @return ApiResponse&lt;StoragepoolUnprovisioned&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolUnprovisioned> getStoragepoolUnprovisionedWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getStoragepoolUnprovisionedValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StoragepoolUnprovisioned>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the unprovisioned nodes and drives
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStoragepoolUnprovisionedAsync(final ApiCallback<StoragepoolUnprovisioned> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStoragepoolUnprovisionedValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolUnprovisioned>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCompatibilitiesClassActive
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCompatibilitiesClassActiveCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/compatibilities/class/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCompatibilitiesClassActiveValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listCompatibilitiesClassActiveCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of active compatibilities
     * @return CompatibilitiesClassActiveExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompatibilitiesClassActiveExtended listCompatibilitiesClassActive() throws ApiException {
        ApiResponse<CompatibilitiesClassActiveExtended> resp = listCompatibilitiesClassActiveWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get a list of active compatibilities
     * @return ApiResponse&lt;CompatibilitiesClassActiveExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompatibilitiesClassActiveExtended> listCompatibilitiesClassActiveWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listCompatibilitiesClassActiveValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CompatibilitiesClassActiveExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of active compatibilities
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCompatibilitiesClassActiveAsync(final ApiCallback<CompatibilitiesClassActiveExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCompatibilitiesClassActiveValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompatibilitiesClassActiveExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCompatibilitiesSsdActive
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCompatibilitiesSsdActiveCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/compatibilities/ssd/active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCompatibilitiesSsdActiveValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listCompatibilitiesSsdActiveCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of active ssd compatibilities
     * @return CompatibilitiesSsdActiveExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CompatibilitiesSsdActiveExtended listCompatibilitiesSsdActive() throws ApiException {
        ApiResponse<CompatibilitiesSsdActiveExtended> resp = listCompatibilitiesSsdActiveWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get a list of active ssd compatibilities
     * @return ApiResponse&lt;CompatibilitiesSsdActiveExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CompatibilitiesSsdActiveExtended> listCompatibilitiesSsdActiveWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listCompatibilitiesSsdActiveValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CompatibilitiesSsdActiveExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of active ssd compatibilities
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCompatibilitiesSsdActiveAsync(final ApiCallback<CompatibilitiesSsdActiveExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCompatibilitiesSsdActiveValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CompatibilitiesSsdActiveExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStoragepoolNodepools
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listStoragepoolNodepoolsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/nodepools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStoragepoolNodepoolsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listStoragepoolNodepoolsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all node pools.
     * @return StoragepoolNodepoolsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolNodepoolsExtended listStoragepoolNodepools() throws ApiException {
        ApiResponse<StoragepoolNodepoolsExtended> resp = listStoragepoolNodepoolsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all node pools.
     * @return ApiResponse&lt;StoragepoolNodepoolsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolNodepoolsExtended> listStoragepoolNodepoolsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listStoragepoolNodepoolsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StoragepoolNodepoolsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all node pools.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listStoragepoolNodepoolsAsync(final ApiCallback<StoragepoolNodepoolsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStoragepoolNodepoolsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolNodepoolsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStoragepoolTiers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listStoragepoolTiersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/tiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStoragepoolTiersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listStoragepoolTiersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all tiers.
     * @return StoragepoolTiersExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StoragepoolTiersExtended listStoragepoolTiers() throws ApiException {
        ApiResponse<StoragepoolTiersExtended> resp = listStoragepoolTiersWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all tiers.
     * @return ApiResponse&lt;StoragepoolTiersExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StoragepoolTiersExtended> listStoragepoolTiersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listStoragepoolTiersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<StoragepoolTiersExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all tiers.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listStoragepoolTiersAsync(final ApiCallback<StoragepoolTiersExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStoragepoolTiersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StoragepoolTiersExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCompatibilitiesSsdActiveById
     * @param compatibilitiesSsdActiveIdParams  (required)
     * @param compatibilitiesSsdActiveId Modify an ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCompatibilitiesSsdActiveByIdCall(CompatibilitiesSsdActiveIdParams compatibilitiesSsdActiveIdParams, String compatibilitiesSsdActiveId, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = compatibilitiesSsdActiveIdParams;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}"
            .replaceAll("\\{" + "CompatibilitiesSsdActiveId" + "\\}", apiClient.escapeString(compatibilitiesSsdActiveId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assess", assess));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCompatibilitiesSsdActiveByIdValidateBeforeCall(CompatibilitiesSsdActiveIdParams compatibilitiesSsdActiveIdParams, String compatibilitiesSsdActiveId, Boolean assess, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'compatibilitiesSsdActiveIdParams' is set
        if (compatibilitiesSsdActiveIdParams == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesSsdActiveIdParams' when calling updateCompatibilitiesSsdActiveById(Async)");
        }
        
        // verify the required parameter 'compatibilitiesSsdActiveId' is set
        if (compatibilitiesSsdActiveId == null) {
            throw new ApiException("Missing the required parameter 'compatibilitiesSsdActiveId' when calling updateCompatibilitiesSsdActiveById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCompatibilitiesSsdActiveByIdCall(compatibilitiesSsdActiveIdParams, compatibilitiesSsdActiveId, assess, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify an ssd compatibility by id
     * @param compatibilitiesSsdActiveIdParams  (required)
     * @param compatibilitiesSsdActiveId Modify an ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCompatibilitiesSsdActiveById(CompatibilitiesSsdActiveIdParams compatibilitiesSsdActiveIdParams, String compatibilitiesSsdActiveId, Boolean assess) throws ApiException {
        updateCompatibilitiesSsdActiveByIdWithHttpInfo(compatibilitiesSsdActiveIdParams, compatibilitiesSsdActiveId, assess);
    }

    /**
     * 
     * Modify an ssd compatibility by id
     * @param compatibilitiesSsdActiveIdParams  (required)
     * @param compatibilitiesSsdActiveId Modify an ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCompatibilitiesSsdActiveByIdWithHttpInfo(CompatibilitiesSsdActiveIdParams compatibilitiesSsdActiveIdParams, String compatibilitiesSsdActiveId, Boolean assess) throws ApiException {
        com.squareup.okhttp.Call call = updateCompatibilitiesSsdActiveByIdValidateBeforeCall(compatibilitiesSsdActiveIdParams, compatibilitiesSsdActiveId, assess, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify an ssd compatibility by id
     * @param compatibilitiesSsdActiveIdParams  (required)
     * @param compatibilitiesSsdActiveId Modify an ssd compatibility by id (required)
     * @param assess Do not perform action, only test that it is possible. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCompatibilitiesSsdActiveByIdAsync(CompatibilitiesSsdActiveIdParams compatibilitiesSsdActiveIdParams, String compatibilitiesSsdActiveId, Boolean assess, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCompatibilitiesSsdActiveByIdValidateBeforeCall(compatibilitiesSsdActiveIdParams, compatibilitiesSsdActiveId, assess, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateStoragepoolNodepool
     * @param storagepoolNodepool  (required)
     * @param storagepoolNodepoolId Modify node pool. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoragepoolNodepoolCall(StoragepoolNodepool storagepoolNodepool, String storagepoolNodepoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storagepoolNodepool;

        // create path and map variables
        String localVarPath = "/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}"
            .replaceAll("\\{" + "StoragepoolNodepoolId" + "\\}", apiClient.escapeString(storagepoolNodepoolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoragepoolNodepoolValidateBeforeCall(StoragepoolNodepool storagepoolNodepool, String storagepoolNodepoolId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolNodepool' is set
        if (storagepoolNodepool == null) {
            throw new ApiException("Missing the required parameter 'storagepoolNodepool' when calling updateStoragepoolNodepool(Async)");
        }
        
        // verify the required parameter 'storagepoolNodepoolId' is set
        if (storagepoolNodepoolId == null) {
            throw new ApiException("Missing the required parameter 'storagepoolNodepoolId' when calling updateStoragepoolNodepool(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoragepoolNodepoolCall(storagepoolNodepool, storagepoolNodepoolId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify node pool. All input fields are optional, but one or more must be supplied.
     * @param storagepoolNodepool  (required)
     * @param storagepoolNodepoolId Modify node pool. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateStoragepoolNodepool(StoragepoolNodepool storagepoolNodepool, String storagepoolNodepoolId) throws ApiException {
        updateStoragepoolNodepoolWithHttpInfo(storagepoolNodepool, storagepoolNodepoolId);
    }

    /**
     * 
     * Modify node pool. All input fields are optional, but one or more must be supplied.
     * @param storagepoolNodepool  (required)
     * @param storagepoolNodepoolId Modify node pool. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateStoragepoolNodepoolWithHttpInfo(StoragepoolNodepool storagepoolNodepool, String storagepoolNodepoolId) throws ApiException {
        com.squareup.okhttp.Call call = updateStoragepoolNodepoolValidateBeforeCall(storagepoolNodepool, storagepoolNodepoolId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify node pool. All input fields are optional, but one or more must be supplied.
     * @param storagepoolNodepool  (required)
     * @param storagepoolNodepoolId Modify node pool. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoragepoolNodepoolAsync(StoragepoolNodepool storagepoolNodepool, String storagepoolNodepoolId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoragepoolNodepoolValidateBeforeCall(storagepoolNodepool, storagepoolNodepoolId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateStoragepoolSettings
     * @param storagepoolSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoragepoolSettingsCall(StoragepoolSettingsExtended storagepoolSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storagepoolSettings;

        // create path and map variables
        String localVarPath = "/platform/5/storagepool/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoragepoolSettingsValidateBeforeCall(StoragepoolSettingsExtended storagepoolSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolSettings' is set
        if (storagepoolSettings == null) {
            throw new ApiException("Missing the required parameter 'storagepoolSettings' when calling updateStoragepoolSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoragepoolSettingsCall(storagepoolSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more settings.
     * @param storagepoolSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateStoragepoolSettings(StoragepoolSettingsExtended storagepoolSettings) throws ApiException {
        updateStoragepoolSettingsWithHttpInfo(storagepoolSettings);
    }

    /**
     * 
     * Modify one or more settings.
     * @param storagepoolSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateStoragepoolSettingsWithHttpInfo(StoragepoolSettingsExtended storagepoolSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateStoragepoolSettingsValidateBeforeCall(storagepoolSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more settings.
     * @param storagepoolSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoragepoolSettingsAsync(StoragepoolSettingsExtended storagepoolSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoragepoolSettingsValidateBeforeCall(storagepoolSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateStoragepoolTier
     * @param storagepoolTier  (required)
     * @param storagepoolTierId Modify tier. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStoragepoolTierCall(StoragepoolTier storagepoolTier, String storagepoolTierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = storagepoolTier;

        // create path and map variables
        String localVarPath = "/platform/1/storagepool/tiers/{StoragepoolTierId}"
            .replaceAll("\\{" + "StoragepoolTierId" + "\\}", apiClient.escapeString(storagepoolTierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStoragepoolTierValidateBeforeCall(StoragepoolTier storagepoolTier, String storagepoolTierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storagepoolTier' is set
        if (storagepoolTier == null) {
            throw new ApiException("Missing the required parameter 'storagepoolTier' when calling updateStoragepoolTier(Async)");
        }
        
        // verify the required parameter 'storagepoolTierId' is set
        if (storagepoolTierId == null) {
            throw new ApiException("Missing the required parameter 'storagepoolTierId' when calling updateStoragepoolTier(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStoragepoolTierCall(storagepoolTier, storagepoolTierId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify tier. All input fields are optional, but one or more must be supplied.
     * @param storagepoolTier  (required)
     * @param storagepoolTierId Modify tier. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateStoragepoolTier(StoragepoolTier storagepoolTier, String storagepoolTierId) throws ApiException {
        updateStoragepoolTierWithHttpInfo(storagepoolTier, storagepoolTierId);
    }

    /**
     * 
     * Modify tier. All input fields are optional, but one or more must be supplied.
     * @param storagepoolTier  (required)
     * @param storagepoolTierId Modify tier. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateStoragepoolTierWithHttpInfo(StoragepoolTier storagepoolTier, String storagepoolTierId) throws ApiException {
        com.squareup.okhttp.Call call = updateStoragepoolTierValidateBeforeCall(storagepoolTier, storagepoolTierId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify tier. All input fields are optional, but one or more must be supplied.
     * @param storagepoolTier  (required)
     * @param storagepoolTierId Modify tier. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStoragepoolTierAsync(StoragepoolTier storagepoolTier, String storagepoolTierId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStoragepoolTierValidateBeforeCall(storagepoolTier, storagepoolTierId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
