/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.IdResolutionPaths;
import io.swagger.client.model.IdResolutionPathsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdResolutionApi {
    private ApiClient apiClient;

    public IdResolutionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdResolutionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getIdResolutionPath
     * @param idResolutionPathId List lin to path mappings. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdResolutionPathCall(Integer idResolutionPathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/id-resolution/paths/{IdResolutionPathId}"
            .replaceAll("\\{" + "IdResolutionPathId" + "\\}", apiClient.escapeString(idResolutionPathId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdResolutionPathValidateBeforeCall(Integer idResolutionPathId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idResolutionPathId' is set
        if (idResolutionPathId == null) {
            throw new ApiException("Missing the required parameter 'idResolutionPathId' when calling getIdResolutionPath(Async)");
        }
        

        com.squareup.okhttp.Call call = getIdResolutionPathCall(idResolutionPathId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List lin to path mappings.
     * @param idResolutionPathId List lin to path mappings. (required)
     * @return IdResolutionPaths
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResolutionPaths getIdResolutionPath(Integer idResolutionPathId) throws ApiException {
        ApiResponse<IdResolutionPaths> resp = getIdResolutionPathWithHttpInfo(idResolutionPathId);
        return resp.getData();
    }

    /**
     * 
     * List lin to path mappings.
     * @param idResolutionPathId List lin to path mappings. (required)
     * @return ApiResponse&lt;IdResolutionPaths&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResolutionPaths> getIdResolutionPathWithHttpInfo(Integer idResolutionPathId) throws ApiException {
        com.squareup.okhttp.Call call = getIdResolutionPathValidateBeforeCall(idResolutionPathId, null, null);
        Type localVarReturnType = new TypeToken<IdResolutionPaths>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List lin to path mappings.
     * @param idResolutionPathId List lin to path mappings. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdResolutionPathAsync(Integer idResolutionPathId, final ApiCallback<IdResolutionPaths> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdResolutionPathValidateBeforeCall(idResolutionPathId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResolutionPaths>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIdResolutionPaths
     * @param sort The field that will be used for sorting. (optional)
     * @param lins A comma separated list specifying the lins that will be mapped with a path. Only the lins specified in this list will be mapped. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIdResolutionPathsCall(String sort, String lins, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/id-resolution/paths";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (lins != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lins", lins));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIdResolutionPathsValidateBeforeCall(String sort, String lins, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getIdResolutionPathsCall(sort, lins, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List lin to path mappings.
     * @param sort The field that will be used for sorting. (optional)
     * @param lins A comma separated list specifying the lins that will be mapped with a path. Only the lins specified in this list will be mapped. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return IdResolutionPathsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IdResolutionPathsExtended getIdResolutionPaths(String sort, String lins, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<IdResolutionPathsExtended> resp = getIdResolutionPathsWithHttpInfo(sort, lins, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List lin to path mappings.
     * @param sort The field that will be used for sorting. (optional)
     * @param lins A comma separated list specifying the lins that will be mapped with a path. Only the lins specified in this list will be mapped. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;IdResolutionPathsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IdResolutionPathsExtended> getIdResolutionPathsWithHttpInfo(String sort, String lins, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getIdResolutionPathsValidateBeforeCall(sort, lins, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<IdResolutionPathsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List lin to path mappings.
     * @param sort The field that will be used for sorting. (optional)
     * @param lins A comma separated list specifying the lins that will be mapped with a path. Only the lins specified in this list will be mapped. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIdResolutionPathsAsync(String sort, String lins, Integer limit, String dir, String resume, final ApiCallback<IdResolutionPathsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getIdResolutionPathsValidateBeforeCall(sort, lins, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IdResolutionPathsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
