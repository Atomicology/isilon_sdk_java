/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AdsProviderControllers;
import io.swagger.client.model.AdsProviderDomains;
import io.swagger.client.model.AdsProviderSearch;
import io.swagger.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthProvidersApi {
    private ApiClient apiClient;

    public AuthProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthProvidersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAdsProviderControllers
     * @param id  (required)
     * @param groupnet Groupnet identifier (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderControllersCall(String id, String groupnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads/{Id}/controllers"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupnet != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupnet", groupnet));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdsProviderControllersValidateBeforeCall(String id, String groupnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdsProviderControllers(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdsProviderControllersCall(id, groupnet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all ADS controllers.
     * @param id  (required)
     * @param groupnet Groupnet identifier (optional)
     * @return AdsProviderControllers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdsProviderControllers getAdsProviderControllers(String id, String groupnet) throws ApiException {
        ApiResponse<AdsProviderControllers> resp = getAdsProviderControllersWithHttpInfo(id, groupnet);
        return resp.getData();
    }

    /**
     * 
     * List all ADS controllers.
     * @param id  (required)
     * @param groupnet Groupnet identifier (optional)
     * @return ApiResponse&lt;AdsProviderControllers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdsProviderControllers> getAdsProviderControllersWithHttpInfo(String id, String groupnet) throws ApiException {
        com.squareup.okhttp.Call call = getAdsProviderControllersValidateBeforeCall(id, groupnet, null, null);
        Type localVarReturnType = new TypeToken<AdsProviderControllers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ADS controllers.
     * @param id  (required)
     * @param groupnet Groupnet identifier (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderControllersAsync(String id, String groupnet, final ApiCallback<AdsProviderControllers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdsProviderControllersValidateBeforeCall(id, groupnet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdsProviderControllers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdsProviderDomain
     * @param adsProviderDomainId Retrieve the ADS domain information. (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderDomainCall(String adsProviderDomainId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads/{Id}/domains/{AdsProviderDomainId}"
            .replaceAll("\\{" + "AdsProviderDomainId" + "\\}", apiClient.escapeString(adsProviderDomainId.toString()))
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdsProviderDomainValidateBeforeCall(String adsProviderDomainId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'adsProviderDomainId' is set
        if (adsProviderDomainId == null) {
            throw new ApiException("Missing the required parameter 'adsProviderDomainId' when calling getAdsProviderDomain(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdsProviderDomain(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdsProviderDomainCall(adsProviderDomainId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the ADS domain information.
     * @param adsProviderDomainId Retrieve the ADS domain information. (required)
     * @param id  (required)
     * @return AdsProviderDomains
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdsProviderDomains getAdsProviderDomain(String adsProviderDomainId, String id) throws ApiException {
        ApiResponse<AdsProviderDomains> resp = getAdsProviderDomainWithHttpInfo(adsProviderDomainId, id);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the ADS domain information.
     * @param adsProviderDomainId Retrieve the ADS domain information. (required)
     * @param id  (required)
     * @return ApiResponse&lt;AdsProviderDomains&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdsProviderDomains> getAdsProviderDomainWithHttpInfo(String adsProviderDomainId, String id) throws ApiException {
        com.squareup.okhttp.Call call = getAdsProviderDomainValidateBeforeCall(adsProviderDomainId, id, null, null);
        Type localVarReturnType = new TypeToken<AdsProviderDomains>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the ADS domain information.
     * @param adsProviderDomainId Retrieve the ADS domain information. (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderDomainAsync(String adsProviderDomainId, String id, final ApiCallback<AdsProviderDomains> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdsProviderDomainValidateBeforeCall(adsProviderDomainId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdsProviderDomains>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdsProviderDomains
     * @param id  (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderDomainsCall(String id, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads/{Id}/domains"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdsProviderDomainsValidateBeforeCall(String id, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdsProviderDomains(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdsProviderDomainsCall(id, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all ADS domains.
     * @param id  (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return AdsProviderDomains
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdsProviderDomains getAdsProviderDomains(String id, String scope) throws ApiException {
        ApiResponse<AdsProviderDomains> resp = getAdsProviderDomainsWithHttpInfo(id, scope);
        return resp.getData();
    }

    /**
     * 
     * List all ADS domains.
     * @param id  (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;AdsProviderDomains&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdsProviderDomains> getAdsProviderDomainsWithHttpInfo(String id, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getAdsProviderDomainsValidateBeforeCall(id, scope, null, null);
        Type localVarReturnType = new TypeToken<AdsProviderDomains>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ADS domains.
     * @param id  (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderDomainsAsync(String id, String scope, final ApiCallback<AdsProviderDomains> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdsProviderDomainsValidateBeforeCall(id, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdsProviderDomains>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAdsProviderSearch
     * @param id  (required)
     * @param domain The domain to search in. (optional)
     * @param description The user or group description to search for. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param searchUsers If true, search for users. (optional)
     * @param filter The LDAP filter to apply to the search. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param user The user name for the domain if untrusted. (optional)
     * @param password The password for the domain if untrusted. (optional)
     * @param searchGroups If true, search for groups. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderSearchCall(String id, String domain, String description, String resume, Boolean searchUsers, String filter, Integer limit, String user, String password, Boolean searchGroups, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/ads/{Id}/search"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain", domain));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (searchUsers != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_users", searchUsers));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (user != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user", user));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));
        if (searchGroups != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search_groups", searchGroups));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAdsProviderSearchValidateBeforeCall(String id, String domain, String description, String resume, Boolean searchUsers, String filter, Integer limit, String user, String password, Boolean searchGroups, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAdsProviderSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = getAdsProviderSearchCall(id, domain, description, resume, searchUsers, filter, limit, user, password, searchGroups, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve search results.
     * @param id  (required)
     * @param domain The domain to search in. (optional)
     * @param description The user or group description to search for. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param searchUsers If true, search for users. (optional)
     * @param filter The LDAP filter to apply to the search. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param user The user name for the domain if untrusted. (optional)
     * @param password The password for the domain if untrusted. (optional)
     * @param searchGroups If true, search for groups. (optional)
     * @return AdsProviderSearch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AdsProviderSearch getAdsProviderSearch(String id, String domain, String description, String resume, Boolean searchUsers, String filter, Integer limit, String user, String password, Boolean searchGroups) throws ApiException {
        ApiResponse<AdsProviderSearch> resp = getAdsProviderSearchWithHttpInfo(id, domain, description, resume, searchUsers, filter, limit, user, password, searchGroups);
        return resp.getData();
    }

    /**
     * 
     * Retrieve search results.
     * @param id  (required)
     * @param domain The domain to search in. (optional)
     * @param description The user or group description to search for. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param searchUsers If true, search for users. (optional)
     * @param filter The LDAP filter to apply to the search. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param user The user name for the domain if untrusted. (optional)
     * @param password The password for the domain if untrusted. (optional)
     * @param searchGroups If true, search for groups. (optional)
     * @return ApiResponse&lt;AdsProviderSearch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AdsProviderSearch> getAdsProviderSearchWithHttpInfo(String id, String domain, String description, String resume, Boolean searchUsers, String filter, Integer limit, String user, String password, Boolean searchGroups) throws ApiException {
        com.squareup.okhttp.Call call = getAdsProviderSearchValidateBeforeCall(id, domain, description, resume, searchUsers, filter, limit, user, password, searchGroups, null, null);
        Type localVarReturnType = new TypeToken<AdsProviderSearch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve search results.
     * @param id  (required)
     * @param domain The domain to search in. (optional)
     * @param description The user or group description to search for. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param searchUsers If true, search for users. (optional)
     * @param filter The LDAP filter to apply to the search. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param user The user name for the domain if untrusted. (optional)
     * @param password The password for the domain if untrusted. (optional)
     * @param searchGroups If true, search for groups. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAdsProviderSearchAsync(String id, String domain, String description, String resume, Boolean searchUsers, String filter, Integer limit, String user, String password, Boolean searchGroups, final ApiCallback<AdsProviderSearch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAdsProviderSearchValidateBeforeCall(id, domain, description, resume, searchUsers, filter, limit, user, password, searchGroups, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AdsProviderSearch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
