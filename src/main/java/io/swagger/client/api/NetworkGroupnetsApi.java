/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.GroupnetSubnet;
import io.swagger.client.model.GroupnetSubnetCreateParams;
import io.swagger.client.model.GroupnetSubnets;
import io.swagger.client.model.GroupnetSubnetsExtended;
import io.swagger.client.model.SubnetsSubnetPool;
import io.swagger.client.model.SubnetsSubnetPoolCreateParams;
import io.swagger.client.model.SubnetsSubnetPools;
import io.swagger.client.model.SubnetsSubnetPoolsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkGroupnetsApi {
    private ApiClient apiClient;

    public NetworkGroupnetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkGroupnetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createGroupnetSubnet
     * @param groupnetSubnet  (required)
     * @param groupnet  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGroupnetSubnetCall(GroupnetSubnetCreateParams groupnetSubnet, String groupnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupnetSubnet;

        // create path and map variables
        String localVarPath = "/platform/4/network/groupnets/{Groupnet}/subnets"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGroupnetSubnetValidateBeforeCall(GroupnetSubnetCreateParams groupnetSubnet, String groupnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnetSubnet' is set
        if (groupnetSubnet == null) {
            throw new ApiException("Missing the required parameter 'groupnetSubnet' when calling createGroupnetSubnet(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling createGroupnetSubnet(Async)");
        }
        

        com.squareup.okhttp.Call call = createGroupnetSubnetCall(groupnetSubnet, groupnet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new subnet.
     * @param groupnetSubnet  (required)
     * @param groupnet  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createGroupnetSubnet(GroupnetSubnetCreateParams groupnetSubnet, String groupnet) throws ApiException {
        ApiResponse<CreateResponse> resp = createGroupnetSubnetWithHttpInfo(groupnetSubnet, groupnet);
        return resp.getData();
    }

    /**
     * 
     * Create a new subnet.
     * @param groupnetSubnet  (required)
     * @param groupnet  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createGroupnetSubnetWithHttpInfo(GroupnetSubnetCreateParams groupnetSubnet, String groupnet) throws ApiException {
        com.squareup.okhttp.Call call = createGroupnetSubnetValidateBeforeCall(groupnetSubnet, groupnet, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new subnet.
     * @param groupnetSubnet  (required)
     * @param groupnet  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGroupnetSubnetAsync(GroupnetSubnetCreateParams groupnetSubnet, String groupnet, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGroupnetSubnetValidateBeforeCall(groupnetSubnet, groupnet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSubnetsSubnetPool
     * @param subnetsSubnetPool  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force Force creating this pool even if it causes an MTU conflict. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSubnetsSubnetPoolCall(SubnetsSubnetPoolCreateParams subnetsSubnetPool, String groupnet, String subnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subnetsSubnetPool;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSubnetsSubnetPoolValidateBeforeCall(SubnetsSubnetPoolCreateParams subnetsSubnetPool, String groupnet, String subnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subnetsSubnetPool' is set
        if (subnetsSubnetPool == null) {
            throw new ApiException("Missing the required parameter 'subnetsSubnetPool' when calling createSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling createSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling createSubnetsSubnetPool(Async)");
        }
        

        com.squareup.okhttp.Call call = createSubnetsSubnetPoolCall(subnetsSubnetPool, groupnet, subnet, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new pool.
     * @param subnetsSubnetPool  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force Force creating this pool even if it causes an MTU conflict. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSubnetsSubnetPool(SubnetsSubnetPoolCreateParams subnetsSubnetPool, String groupnet, String subnet, Boolean force) throws ApiException {
        ApiResponse<CreateResponse> resp = createSubnetsSubnetPoolWithHttpInfo(subnetsSubnetPool, groupnet, subnet, force);
        return resp.getData();
    }

    /**
     * 
     * Create a new pool.
     * @param subnetsSubnetPool  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force Force creating this pool even if it causes an MTU conflict. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSubnetsSubnetPoolWithHttpInfo(SubnetsSubnetPoolCreateParams subnetsSubnetPool, String groupnet, String subnet, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = createSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPool, groupnet, subnet, force, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new pool.
     * @param subnetsSubnetPool  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force Force creating this pool even if it causes an MTU conflict. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubnetsSubnetPoolAsync(SubnetsSubnetPoolCreateParams subnetsSubnetPool, String groupnet, String subnet, Boolean force, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPool, groupnet, subnet, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteGroupnetSubnet
     * @param groupnetSubnetId Delete a network subnet.. (required)
     * @param groupnet  (required)
     * @param force force deleting this subnet even if pools in other subnets rely on this subnet&#39;s SC VIP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGroupnetSubnetCall(String groupnetSubnetId, String groupnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}"
            .replaceAll("\\{" + "GroupnetSubnetId" + "\\}", apiClient.escapeString(groupnetSubnetId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGroupnetSubnetValidateBeforeCall(String groupnetSubnetId, String groupnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnetSubnetId' is set
        if (groupnetSubnetId == null) {
            throw new ApiException("Missing the required parameter 'groupnetSubnetId' when calling deleteGroupnetSubnet(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling deleteGroupnetSubnet(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGroupnetSubnetCall(groupnetSubnetId, groupnet, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a network subnet..
     * @param groupnetSubnetId Delete a network subnet.. (required)
     * @param groupnet  (required)
     * @param force force deleting this subnet even if pools in other subnets rely on this subnet&#39;s SC VIP. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGroupnetSubnet(String groupnetSubnetId, String groupnet, Boolean force) throws ApiException {
        deleteGroupnetSubnetWithHttpInfo(groupnetSubnetId, groupnet, force);
    }

    /**
     * 
     * Delete a network subnet..
     * @param groupnetSubnetId Delete a network subnet.. (required)
     * @param groupnet  (required)
     * @param force force deleting this subnet even if pools in other subnets rely on this subnet&#39;s SC VIP. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGroupnetSubnetWithHttpInfo(String groupnetSubnetId, String groupnet, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupnetSubnetValidateBeforeCall(groupnetSubnetId, groupnet, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a network subnet..
     * @param groupnetSubnetId Delete a network subnet.. (required)
     * @param groupnet  (required)
     * @param force force deleting this subnet even if pools in other subnets rely on this subnet&#39;s SC VIP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupnetSubnetAsync(String groupnetSubnetId, String groupnet, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupnetSubnetValidateBeforeCall(groupnetSubnetId, groupnet, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSubnetsSubnetPool
     * @param subnetsSubnetPoolId Delete a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubnetsSubnetPoolCall(String subnetsSubnetPoolId, String groupnet, String subnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}"
            .replaceAll("\\{" + "SubnetsSubnetPoolId" + "\\}", apiClient.escapeString(subnetsSubnetPoolId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSubnetsSubnetPoolValidateBeforeCall(String subnetsSubnetPoolId, String groupnet, String subnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subnetsSubnetPoolId' is set
        if (subnetsSubnetPoolId == null) {
            throw new ApiException("Missing the required parameter 'subnetsSubnetPoolId' when calling deleteSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling deleteSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling deleteSubnetsSubnetPool(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSubnetsSubnetPoolCall(subnetsSubnetPoolId, groupnet, subnet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a network pool.
     * @param subnetsSubnetPoolId Delete a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSubnetsSubnetPool(String subnetsSubnetPoolId, String groupnet, String subnet) throws ApiException {
        deleteSubnetsSubnetPoolWithHttpInfo(subnetsSubnetPoolId, groupnet, subnet);
    }

    /**
     * 
     * Delete a network pool.
     * @param subnetsSubnetPoolId Delete a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSubnetsSubnetPoolWithHttpInfo(String subnetsSubnetPoolId, String groupnet, String subnet) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPoolId, groupnet, subnet, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a network pool.
     * @param subnetsSubnetPoolId Delete a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubnetsSubnetPoolAsync(String subnetsSubnetPoolId, String groupnet, String subnet, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPoolId, groupnet, subnet, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getGroupnetSubnet
     * @param groupnetSubnetId View a network subnet. (required)
     * @param groupnet  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGroupnetSubnetCall(String groupnetSubnetId, String groupnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}"
            .replaceAll("\\{" + "GroupnetSubnetId" + "\\}", apiClient.escapeString(groupnetSubnetId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGroupnetSubnetValidateBeforeCall(String groupnetSubnetId, String groupnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnetSubnetId' is set
        if (groupnetSubnetId == null) {
            throw new ApiException("Missing the required parameter 'groupnetSubnetId' when calling getGroupnetSubnet(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling getGroupnetSubnet(Async)");
        }
        

        com.squareup.okhttp.Call call = getGroupnetSubnetCall(groupnetSubnetId, groupnet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a network subnet.
     * @param groupnetSubnetId View a network subnet. (required)
     * @param groupnet  (required)
     * @return GroupnetSubnets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupnetSubnets getGroupnetSubnet(String groupnetSubnetId, String groupnet) throws ApiException {
        ApiResponse<GroupnetSubnets> resp = getGroupnetSubnetWithHttpInfo(groupnetSubnetId, groupnet);
        return resp.getData();
    }

    /**
     * 
     * View a network subnet.
     * @param groupnetSubnetId View a network subnet. (required)
     * @param groupnet  (required)
     * @return ApiResponse&lt;GroupnetSubnets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupnetSubnets> getGroupnetSubnetWithHttpInfo(String groupnetSubnetId, String groupnet) throws ApiException {
        com.squareup.okhttp.Call call = getGroupnetSubnetValidateBeforeCall(groupnetSubnetId, groupnet, null, null);
        Type localVarReturnType = new TypeToken<GroupnetSubnets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a network subnet.
     * @param groupnetSubnetId View a network subnet. (required)
     * @param groupnet  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGroupnetSubnetAsync(String groupnetSubnetId, String groupnet, final ApiCallback<GroupnetSubnets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGroupnetSubnetValidateBeforeCall(groupnetSubnetId, groupnet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupnetSubnets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubnetsSubnetPool
     * @param subnetsSubnetPoolId View a single network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubnetsSubnetPoolCall(String subnetsSubnetPoolId, String groupnet, String subnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}"
            .replaceAll("\\{" + "SubnetsSubnetPoolId" + "\\}", apiClient.escapeString(subnetsSubnetPoolId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubnetsSubnetPoolValidateBeforeCall(String subnetsSubnetPoolId, String groupnet, String subnet, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subnetsSubnetPoolId' is set
        if (subnetsSubnetPoolId == null) {
            throw new ApiException("Missing the required parameter 'subnetsSubnetPoolId' when calling getSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling getSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling getSubnetsSubnetPool(Async)");
        }
        

        com.squareup.okhttp.Call call = getSubnetsSubnetPoolCall(subnetsSubnetPoolId, groupnet, subnet, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single network pool.
     * @param subnetsSubnetPoolId View a single network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @return SubnetsSubnetPools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubnetsSubnetPools getSubnetsSubnetPool(String subnetsSubnetPoolId, String groupnet, String subnet) throws ApiException {
        ApiResponse<SubnetsSubnetPools> resp = getSubnetsSubnetPoolWithHttpInfo(subnetsSubnetPoolId, groupnet, subnet);
        return resp.getData();
    }

    /**
     * 
     * View a single network pool.
     * @param subnetsSubnetPoolId View a single network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @return ApiResponse&lt;SubnetsSubnetPools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubnetsSubnetPools> getSubnetsSubnetPoolWithHttpInfo(String subnetsSubnetPoolId, String groupnet, String subnet) throws ApiException {
        com.squareup.okhttp.Call call = getSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPoolId, groupnet, subnet, null, null);
        Type localVarReturnType = new TypeToken<SubnetsSubnetPools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single network pool.
     * @param subnetsSubnetPoolId View a single network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubnetsSubnetPoolAsync(String subnetsSubnetPoolId, String groupnet, String subnet, final ApiCallback<SubnetsSubnetPools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPoolId, groupnet, subnet, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubnetsSubnetPools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listGroupnetSubnets
     * @param groupnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGroupnetSubnetsCall(String groupnet, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/network/groupnets/{Groupnet}/subnets"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGroupnetSubnetsValidateBeforeCall(String groupnet, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling listGroupnetSubnets(Async)");
        }
        

        com.squareup.okhttp.Call call = listGroupnetSubnetsCall(groupnet, sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of subnets.
     * @param groupnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return GroupnetSubnetsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupnetSubnetsExtended listGroupnetSubnets(String groupnet, String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<GroupnetSubnetsExtended> resp = listGroupnetSubnetsWithHttpInfo(groupnet, sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * Get a list of subnets.
     * @param groupnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;GroupnetSubnetsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupnetSubnetsExtended> listGroupnetSubnetsWithHttpInfo(String groupnet, String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listGroupnetSubnetsValidateBeforeCall(groupnet, sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<GroupnetSubnetsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of subnets.
     * @param groupnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGroupnetSubnetsAsync(String groupnet, String sort, Integer limit, String dir, String resume, final ApiCallback<GroupnetSubnetsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGroupnetSubnetsValidateBeforeCall(groupnet, sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupnetSubnetsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSubnetsSubnetPools
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param accessZone If specified, only pools with this zone name will be returned. (optional)
     * @param allocMethod If specified, only pools with this allocation type will be returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSubnetsSubnetPoolsCall(String groupnet, String subnet, String sort, String resume, String accessZone, String allocMethod, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (accessZone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_zone", accessZone));
        if (allocMethod != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alloc_method", allocMethod));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSubnetsSubnetPoolsValidateBeforeCall(String groupnet, String subnet, String sort, String resume, String accessZone, String allocMethod, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling listSubnetsSubnetPools(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling listSubnetsSubnetPools(Async)");
        }
        

        com.squareup.okhttp.Call call = listSubnetsSubnetPoolsCall(groupnet, subnet, sort, resume, accessZone, allocMethod, limit, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of network pools.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param accessZone If specified, only pools with this zone name will be returned. (optional)
     * @param allocMethod If specified, only pools with this allocation type will be returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return SubnetsSubnetPoolsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SubnetsSubnetPoolsExtended listSubnetsSubnetPools(String groupnet, String subnet, String sort, String resume, String accessZone, String allocMethod, Integer limit, String dir) throws ApiException {
        ApiResponse<SubnetsSubnetPoolsExtended> resp = listSubnetsSubnetPoolsWithHttpInfo(groupnet, subnet, sort, resume, accessZone, allocMethod, limit, dir);
        return resp.getData();
    }

    /**
     * 
     * Get a list of network pools.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param accessZone If specified, only pools with this zone name will be returned. (optional)
     * @param allocMethod If specified, only pools with this allocation type will be returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;SubnetsSubnetPoolsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SubnetsSubnetPoolsExtended> listSubnetsSubnetPoolsWithHttpInfo(String groupnet, String subnet, String sort, String resume, String accessZone, String allocMethod, Integer limit, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listSubnetsSubnetPoolsValidateBeforeCall(groupnet, subnet, sort, resume, accessZone, allocMethod, limit, dir, null, null);
        Type localVarReturnType = new TypeToken<SubnetsSubnetPoolsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of network pools.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param accessZone If specified, only pools with this zone name will be returned. (optional)
     * @param allocMethod If specified, only pools with this allocation type will be returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSubnetsSubnetPoolsAsync(String groupnet, String subnet, String sort, String resume, String accessZone, String allocMethod, Integer limit, String dir, final ApiCallback<SubnetsSubnetPoolsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSubnetsSubnetPoolsValidateBeforeCall(groupnet, subnet, sort, resume, accessZone, allocMethod, limit, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubnetsSubnetPoolsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateGroupnetSubnet
     * @param groupnetSubnet  (required)
     * @param groupnetSubnetId Modify a network subnet. (required)
     * @param groupnet  (required)
     * @param force force modifying this subnet even if it causes an MTU conflict. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateGroupnetSubnetCall(GroupnetSubnet groupnetSubnet, String groupnetSubnetId, String groupnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupnetSubnet;

        // create path and map variables
        String localVarPath = "/platform/4/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}"
            .replaceAll("\\{" + "GroupnetSubnetId" + "\\}", apiClient.escapeString(groupnetSubnetId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateGroupnetSubnetValidateBeforeCall(GroupnetSubnet groupnetSubnet, String groupnetSubnetId, String groupnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnetSubnet' is set
        if (groupnetSubnet == null) {
            throw new ApiException("Missing the required parameter 'groupnetSubnet' when calling updateGroupnetSubnet(Async)");
        }
        
        // verify the required parameter 'groupnetSubnetId' is set
        if (groupnetSubnetId == null) {
            throw new ApiException("Missing the required parameter 'groupnetSubnetId' when calling updateGroupnetSubnet(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling updateGroupnetSubnet(Async)");
        }
        

        com.squareup.okhttp.Call call = updateGroupnetSubnetCall(groupnetSubnet, groupnetSubnetId, groupnet, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a network subnet.
     * @param groupnetSubnet  (required)
     * @param groupnetSubnetId Modify a network subnet. (required)
     * @param groupnet  (required)
     * @param force force modifying this subnet even if it causes an MTU conflict. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateGroupnetSubnet(GroupnetSubnet groupnetSubnet, String groupnetSubnetId, String groupnet, Boolean force) throws ApiException {
        updateGroupnetSubnetWithHttpInfo(groupnetSubnet, groupnetSubnetId, groupnet, force);
    }

    /**
     * 
     * Modify a network subnet.
     * @param groupnetSubnet  (required)
     * @param groupnetSubnetId Modify a network subnet. (required)
     * @param groupnet  (required)
     * @param force force modifying this subnet even if it causes an MTU conflict. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateGroupnetSubnetWithHttpInfo(GroupnetSubnet groupnetSubnet, String groupnetSubnetId, String groupnet, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = updateGroupnetSubnetValidateBeforeCall(groupnetSubnet, groupnetSubnetId, groupnet, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a network subnet.
     * @param groupnetSubnet  (required)
     * @param groupnetSubnetId Modify a network subnet. (required)
     * @param groupnet  (required)
     * @param force force modifying this subnet even if it causes an MTU conflict. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateGroupnetSubnetAsync(GroupnetSubnet groupnetSubnet, String groupnetSubnetId, String groupnet, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateGroupnetSubnetValidateBeforeCall(groupnetSubnet, groupnetSubnetId, groupnet, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSubnetsSubnetPool
     * @param subnetsSubnetPool  (required)
     * @param subnetsSubnetPoolId Modify a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force force creating this pool even if it causes an MTU conflict. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSubnetsSubnetPoolCall(SubnetsSubnetPool subnetsSubnetPool, String subnetsSubnetPoolId, String groupnet, String subnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subnetsSubnetPool;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}"
            .replaceAll("\\{" + "SubnetsSubnetPoolId" + "\\}", apiClient.escapeString(subnetsSubnetPoolId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSubnetsSubnetPoolValidateBeforeCall(SubnetsSubnetPool subnetsSubnetPool, String subnetsSubnetPoolId, String groupnet, String subnet, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subnetsSubnetPool' is set
        if (subnetsSubnetPool == null) {
            throw new ApiException("Missing the required parameter 'subnetsSubnetPool' when calling updateSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'subnetsSubnetPoolId' is set
        if (subnetsSubnetPoolId == null) {
            throw new ApiException("Missing the required parameter 'subnetsSubnetPoolId' when calling updateSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling updateSubnetsSubnetPool(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling updateSubnetsSubnetPool(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSubnetsSubnetPoolCall(subnetsSubnetPool, subnetsSubnetPoolId, groupnet, subnet, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a network pool.
     * @param subnetsSubnetPool  (required)
     * @param subnetsSubnetPoolId Modify a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force force creating this pool even if it causes an MTU conflict. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSubnetsSubnetPool(SubnetsSubnetPool subnetsSubnetPool, String subnetsSubnetPoolId, String groupnet, String subnet, Boolean force) throws ApiException {
        updateSubnetsSubnetPoolWithHttpInfo(subnetsSubnetPool, subnetsSubnetPoolId, groupnet, subnet, force);
    }

    /**
     * 
     * Modify a network pool.
     * @param subnetsSubnetPool  (required)
     * @param subnetsSubnetPoolId Modify a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force force creating this pool even if it causes an MTU conflict. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSubnetsSubnetPoolWithHttpInfo(SubnetsSubnetPool subnetsSubnetPool, String subnetsSubnetPoolId, String groupnet, String subnet, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = updateSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPool, subnetsSubnetPoolId, groupnet, subnet, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a network pool.
     * @param subnetsSubnetPool  (required)
     * @param subnetsSubnetPoolId Modify a network pool. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param force force creating this pool even if it causes an MTU conflict. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSubnetsSubnetPoolAsync(SubnetsSubnetPool subnetsSubnetPool, String subnetsSubnetPoolId, String groupnet, String subnet, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSubnetsSubnetPoolValidateBeforeCall(subnetsSubnetPool, subnetsSubnetPoolId, groupnet, subnet, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
