/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ClusterArchiveItem;
import io.swagger.client.model.ClusterAssessItem;
import io.swagger.client.model.ClusterFirmwareProgress;
import io.swagger.client.model.ClusterFirmwareStatus;
import io.swagger.client.model.ClusterFirmwareUpgradeItem;
import io.swagger.client.model.ClusterNodes;
import io.swagger.client.model.ClusterNodesExtended;
import io.swagger.client.model.ClusterPatchPatch;
import io.swagger.client.model.ClusterPatchPatches;
import io.swagger.client.model.ClusterPatchPatchesExtended;
import io.swagger.client.model.ClusterRetryLastActionItem;
import io.swagger.client.model.ClusterUpgrade;
import io.swagger.client.model.ClusterUpgradeItem;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.HardwareStartItem;
import io.swagger.client.model.HardwareStatus;
import io.swagger.client.model.HardwareStopItem;
import io.swagger.client.model.UpgradeCluster;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpgradeApi {
    private ApiClient apiClient;

    public UpgradeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UpgradeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createClusterAddRemainingNode
     * @param clusterAddRemainingNode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterAddRemainingNodeCall(Empty clusterAddRemainingNode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterAddRemainingNode;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/add_remaining_nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterAddRemainingNodeValidateBeforeCall(Empty clusterAddRemainingNode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterAddRemainingNode' is set
        if (clusterAddRemainingNode == null) {
            throw new ApiException("Missing the required parameter 'clusterAddRemainingNode' when calling createClusterAddRemainingNode(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterAddRemainingNodeCall(clusterAddRemainingNode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Let system absorb any remaining or new nodes inside the existing upgrade.
     * @param clusterAddRemainingNode  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterAddRemainingNode(Empty clusterAddRemainingNode) throws ApiException {
        ApiResponse<Empty> resp = createClusterAddRemainingNodeWithHttpInfo(clusterAddRemainingNode);
        return resp.getData();
    }

    /**
     * 
     * Let system absorb any remaining or new nodes inside the existing upgrade.
     * @param clusterAddRemainingNode  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterAddRemainingNodeWithHttpInfo(Empty clusterAddRemainingNode) throws ApiException {
        com.squareup.okhttp.Call call = createClusterAddRemainingNodeValidateBeforeCall(clusterAddRemainingNode, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Let system absorb any remaining or new nodes inside the existing upgrade.
     * @param clusterAddRemainingNode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterAddRemainingNodeAsync(Empty clusterAddRemainingNode, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterAddRemainingNodeValidateBeforeCall(clusterAddRemainingNode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterArchiveItem
     * @param clusterArchiveItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterArchiveItemCall(ClusterArchiveItem clusterArchiveItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterArchiveItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterArchiveItemValidateBeforeCall(ClusterArchiveItem clusterArchiveItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterArchiveItem' is set
        if (clusterArchiveItem == null) {
            throw new ApiException("Missing the required parameter 'clusterArchiveItem' when calling createClusterArchiveItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterArchiveItemCall(clusterArchiveItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Start an archive of an upgrade.
     * @param clusterArchiveItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterArchiveItem(ClusterArchiveItem clusterArchiveItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterArchiveItemWithHttpInfo(clusterArchiveItem);
        return resp.getData();
    }

    /**
     * 
     * Start an archive of an upgrade.
     * @param clusterArchiveItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterArchiveItemWithHttpInfo(ClusterArchiveItem clusterArchiveItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterArchiveItemValidateBeforeCall(clusterArchiveItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start an archive of an upgrade.
     * @param clusterArchiveItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterArchiveItemAsync(ClusterArchiveItem clusterArchiveItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterArchiveItemValidateBeforeCall(clusterArchiveItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterAssessItem
     * @param clusterAssessItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterAssessItemCall(ClusterAssessItem clusterAssessItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterAssessItem;

        // create path and map variables
        String localVarPath = "/platform/5/upgrade/cluster/assess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterAssessItemValidateBeforeCall(ClusterAssessItem clusterAssessItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterAssessItem' is set
        if (clusterAssessItem == null) {
            throw new ApiException("Missing the required parameter 'clusterAssessItem' when calling createClusterAssessItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterAssessItemCall(clusterAssessItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Start upgrade assessment on cluster.
     * @param clusterAssessItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterAssessItem(ClusterAssessItem clusterAssessItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterAssessItemWithHttpInfo(clusterAssessItem);
        return resp.getData();
    }

    /**
     * 
     * Start upgrade assessment on cluster.
     * @param clusterAssessItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterAssessItemWithHttpInfo(ClusterAssessItem clusterAssessItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterAssessItemValidateBeforeCall(clusterAssessItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start upgrade assessment on cluster.
     * @param clusterAssessItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterAssessItemAsync(ClusterAssessItem clusterAssessItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterAssessItemValidateBeforeCall(clusterAssessItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterCommitItem
     * @param clusterCommitItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterCommitItemCall(Empty clusterCommitItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterCommitItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/commit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterCommitItemValidateBeforeCall(Empty clusterCommitItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterCommitItem' is set
        if (clusterCommitItem == null) {
            throw new ApiException("Missing the required parameter 'clusterCommitItem' when calling createClusterCommitItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterCommitItemCall(clusterCommitItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Commit the upgrade of a cluster.
     * @param clusterCommitItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterCommitItem(Empty clusterCommitItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterCommitItemWithHttpInfo(clusterCommitItem);
        return resp.getData();
    }

    /**
     * 
     * Commit the upgrade of a cluster.
     * @param clusterCommitItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterCommitItemWithHttpInfo(Empty clusterCommitItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterCommitItemValidateBeforeCall(clusterCommitItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit the upgrade of a cluster.
     * @param clusterCommitItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterCommitItemAsync(Empty clusterCommitItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterCommitItemValidateBeforeCall(clusterCommitItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterFirmwareAssessItem
     * @param clusterFirmwareAssessItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterFirmwareAssessItemCall(Empty clusterFirmwareAssessItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterFirmwareAssessItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/firmware/assess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterFirmwareAssessItemValidateBeforeCall(Empty clusterFirmwareAssessItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterFirmwareAssessItem' is set
        if (clusterFirmwareAssessItem == null) {
            throw new ApiException("Missing the required parameter 'clusterFirmwareAssessItem' when calling createClusterFirmwareAssessItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterFirmwareAssessItemCall(clusterFirmwareAssessItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Start firmware upgrade assessment on cluster.
     * @param clusterFirmwareAssessItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterFirmwareAssessItem(Empty clusterFirmwareAssessItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterFirmwareAssessItemWithHttpInfo(clusterFirmwareAssessItem);
        return resp.getData();
    }

    /**
     * 
     * Start firmware upgrade assessment on cluster.
     * @param clusterFirmwareAssessItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterFirmwareAssessItemWithHttpInfo(Empty clusterFirmwareAssessItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterFirmwareAssessItemValidateBeforeCall(clusterFirmwareAssessItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start firmware upgrade assessment on cluster.
     * @param clusterFirmwareAssessItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterFirmwareAssessItemAsync(Empty clusterFirmwareAssessItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterFirmwareAssessItemValidateBeforeCall(clusterFirmwareAssessItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterFirmwareUpgradeItem
     * @param clusterFirmwareUpgradeItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterFirmwareUpgradeItemCall(ClusterFirmwareUpgradeItem clusterFirmwareUpgradeItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterFirmwareUpgradeItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/firmware/upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterFirmwareUpgradeItemValidateBeforeCall(ClusterFirmwareUpgradeItem clusterFirmwareUpgradeItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterFirmwareUpgradeItem' is set
        if (clusterFirmwareUpgradeItem == null) {
            throw new ApiException("Missing the required parameter 'clusterFirmwareUpgradeItem' when calling createClusterFirmwareUpgradeItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterFirmwareUpgradeItemCall(clusterFirmwareUpgradeItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The settings necessary to start a firmware upgrade.
     * @param clusterFirmwareUpgradeItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterFirmwareUpgradeItem(ClusterFirmwareUpgradeItem clusterFirmwareUpgradeItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterFirmwareUpgradeItemWithHttpInfo(clusterFirmwareUpgradeItem);
        return resp.getData();
    }

    /**
     * 
     * The settings necessary to start a firmware upgrade.
     * @param clusterFirmwareUpgradeItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterFirmwareUpgradeItemWithHttpInfo(ClusterFirmwareUpgradeItem clusterFirmwareUpgradeItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterFirmwareUpgradeItemValidateBeforeCall(clusterFirmwareUpgradeItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The settings necessary to start a firmware upgrade.
     * @param clusterFirmwareUpgradeItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterFirmwareUpgradeItemAsync(ClusterFirmwareUpgradeItem clusterFirmwareUpgradeItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterFirmwareUpgradeItemValidateBeforeCall(clusterFirmwareUpgradeItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterPatchAbortItem
     * @param clusterPatchAbortItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterPatchAbortItemCall(Empty clusterPatchAbortItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterPatchAbortItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/patch/abort";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterPatchAbortItemValidateBeforeCall(Empty clusterPatchAbortItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterPatchAbortItem' is set
        if (clusterPatchAbortItem == null) {
            throw new ApiException("Missing the required parameter 'clusterPatchAbortItem' when calling createClusterPatchAbortItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterPatchAbortItemCall(clusterPatchAbortItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Abort the previous action performed by the patch system.
     * @param clusterPatchAbortItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterPatchAbortItem(Empty clusterPatchAbortItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterPatchAbortItemWithHttpInfo(clusterPatchAbortItem);
        return resp.getData();
    }

    /**
     * 
     * Abort the previous action performed by the patch system.
     * @param clusterPatchAbortItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterPatchAbortItemWithHttpInfo(Empty clusterPatchAbortItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterPatchAbortItemValidateBeforeCall(clusterPatchAbortItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Abort the previous action performed by the patch system.
     * @param clusterPatchAbortItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterPatchAbortItemAsync(Empty clusterPatchAbortItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterPatchAbortItemValidateBeforeCall(clusterPatchAbortItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterPatchPatch
     * @param clusterPatchPatch  (required)
     * @param override Whether to ignore patch system validation and force the installation. (optional)
     * @param rolling Whether to install the patch on one node at a time. Defaults to true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterPatchPatchCall(ClusterPatchPatch clusterPatchPatch, Boolean override, Boolean rolling, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterPatchPatch;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/patch/patches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (override != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("override", override));
        if (rolling != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rolling", rolling));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterPatchPatchValidateBeforeCall(ClusterPatchPatch clusterPatchPatch, Boolean override, Boolean rolling, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterPatchPatch' is set
        if (clusterPatchPatch == null) {
            throw new ApiException("Missing the required parameter 'clusterPatchPatch' when calling createClusterPatchPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterPatchPatchCall(clusterPatchPatch, override, rolling, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Install a patch.
     * @param clusterPatchPatch  (required)
     * @param override Whether to ignore patch system validation and force the installation. (optional)
     * @param rolling Whether to install the patch on one node at a time. Defaults to true. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createClusterPatchPatch(ClusterPatchPatch clusterPatchPatch, Boolean override, Boolean rolling) throws ApiException {
        ApiResponse<CreateResponse> resp = createClusterPatchPatchWithHttpInfo(clusterPatchPatch, override, rolling);
        return resp.getData();
    }

    /**
     * 
     * Install a patch.
     * @param clusterPatchPatch  (required)
     * @param override Whether to ignore patch system validation and force the installation. (optional)
     * @param rolling Whether to install the patch on one node at a time. Defaults to true. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createClusterPatchPatchWithHttpInfo(ClusterPatchPatch clusterPatchPatch, Boolean override, Boolean rolling) throws ApiException {
        com.squareup.okhttp.Call call = createClusterPatchPatchValidateBeforeCall(clusterPatchPatch, override, rolling, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Install a patch.
     * @param clusterPatchPatch  (required)
     * @param override Whether to ignore patch system validation and force the installation. (optional)
     * @param rolling Whether to install the patch on one node at a time. Defaults to true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterPatchPatchAsync(ClusterPatchPatch clusterPatchPatch, Boolean override, Boolean rolling, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterPatchPatchValidateBeforeCall(clusterPatchPatch, override, rolling, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterRetryLastActionItem
     * @param clusterRetryLastActionItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterRetryLastActionItemCall(ClusterRetryLastActionItem clusterRetryLastActionItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterRetryLastActionItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/retry_last_action";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterRetryLastActionItemValidateBeforeCall(ClusterRetryLastActionItem clusterRetryLastActionItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterRetryLastActionItem' is set
        if (clusterRetryLastActionItem == null) {
            throw new ApiException("Missing the required parameter 'clusterRetryLastActionItem' when calling createClusterRetryLastActionItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterRetryLastActionItemCall(clusterRetryLastActionItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retry the last upgrade action, in-case the previous attempt failed.
     * @param clusterRetryLastActionItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterRetryLastActionItem(ClusterRetryLastActionItem clusterRetryLastActionItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterRetryLastActionItemWithHttpInfo(clusterRetryLastActionItem);
        return resp.getData();
    }

    /**
     * 
     * Retry the last upgrade action, in-case the previous attempt failed.
     * @param clusterRetryLastActionItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterRetryLastActionItemWithHttpInfo(ClusterRetryLastActionItem clusterRetryLastActionItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterRetryLastActionItemValidateBeforeCall(clusterRetryLastActionItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retry the last upgrade action, in-case the previous attempt failed.
     * @param clusterRetryLastActionItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterRetryLastActionItemAsync(ClusterRetryLastActionItem clusterRetryLastActionItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterRetryLastActionItemValidateBeforeCall(clusterRetryLastActionItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterRollbackItem
     * @param clusterRollbackItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterRollbackItemCall(Empty clusterRollbackItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterRollbackItem;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/rollback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterRollbackItemValidateBeforeCall(Empty clusterRollbackItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterRollbackItem' is set
        if (clusterRollbackItem == null) {
            throw new ApiException("Missing the required parameter 'clusterRollbackItem' when calling createClusterRollbackItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterRollbackItemCall(clusterRollbackItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Rollback the upgrade of a cluster.
     * @param clusterRollbackItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterRollbackItem(Empty clusterRollbackItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterRollbackItemWithHttpInfo(clusterRollbackItem);
        return resp.getData();
    }

    /**
     * 
     * Rollback the upgrade of a cluster.
     * @param clusterRollbackItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterRollbackItemWithHttpInfo(Empty clusterRollbackItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterRollbackItemValidateBeforeCall(clusterRollbackItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rollback the upgrade of a cluster.
     * @param clusterRollbackItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterRollbackItemAsync(Empty clusterRollbackItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterRollbackItemValidateBeforeCall(clusterRollbackItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterUpgradeItem
     * @param clusterUpgradeItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterUpgradeItemCall(ClusterUpgradeItem clusterUpgradeItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterUpgradeItem;

        // create path and map variables
        String localVarPath = "/platform/5/upgrade/cluster/upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterUpgradeItemValidateBeforeCall(ClusterUpgradeItem clusterUpgradeItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterUpgradeItem' is set
        if (clusterUpgradeItem == null) {
            throw new ApiException("Missing the required parameter 'clusterUpgradeItem' when calling createClusterUpgradeItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterUpgradeItemCall(clusterUpgradeItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The settings necessary to start an upgrade.
     * @param clusterUpgradeItem  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createClusterUpgradeItem(ClusterUpgradeItem clusterUpgradeItem) throws ApiException {
        ApiResponse<Empty> resp = createClusterUpgradeItemWithHttpInfo(clusterUpgradeItem);
        return resp.getData();
    }

    /**
     * 
     * The settings necessary to start an upgrade.
     * @param clusterUpgradeItem  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createClusterUpgradeItemWithHttpInfo(ClusterUpgradeItem clusterUpgradeItem) throws ApiException {
        com.squareup.okhttp.Call call = createClusterUpgradeItemValidateBeforeCall(clusterUpgradeItem, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The settings necessary to start an upgrade.
     * @param clusterUpgradeItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterUpgradeItemAsync(ClusterUpgradeItem clusterUpgradeItem, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterUpgradeItemValidateBeforeCall(clusterUpgradeItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createHardwareStartItem
     * @param hardwareStartItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHardwareStartItemCall(HardwareStartItem hardwareStartItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardwareStartItem;

        // create path and map variables
        String localVarPath = "/platform/5/upgrade/hardware/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHardwareStartItemValidateBeforeCall(HardwareStartItem hardwareStartItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareStartItem' is set
        if (hardwareStartItem == null) {
            throw new ApiException("Missing the required parameter 'hardwareStartItem' when calling createHardwareStartItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createHardwareStartItemCall(hardwareStartItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Start a hardware upgrade
     * @param hardwareStartItem  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createHardwareStartItem(HardwareStartItem hardwareStartItem) throws ApiException {
        createHardwareStartItemWithHttpInfo(hardwareStartItem);
    }

    /**
     * 
     * Start a hardware upgrade
     * @param hardwareStartItem  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createHardwareStartItemWithHttpInfo(HardwareStartItem hardwareStartItem) throws ApiException {
        com.squareup.okhttp.Call call = createHardwareStartItemValidateBeforeCall(hardwareStartItem, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Start a hardware upgrade
     * @param hardwareStartItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHardwareStartItemAsync(HardwareStartItem hardwareStartItem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHardwareStartItemValidateBeforeCall(hardwareStartItem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createHardwareStopItem
     * @param hardwareStopItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHardwareStopItemCall(HardwareStopItem hardwareStopItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardwareStopItem;

        // create path and map variables
        String localVarPath = "/platform/5/upgrade/hardware/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHardwareStopItemValidateBeforeCall(HardwareStopItem hardwareStopItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareStopItem' is set
        if (hardwareStopItem == null) {
            throw new ApiException("Missing the required parameter 'hardwareStopItem' when calling createHardwareStopItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createHardwareStopItemCall(hardwareStopItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Stop an in-progess hardware upgrade process
     * @param hardwareStopItem  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createHardwareStopItem(HardwareStopItem hardwareStopItem) throws ApiException {
        createHardwareStopItemWithHttpInfo(hardwareStopItem);
    }

    /**
     * 
     * Stop an in-progess hardware upgrade process
     * @param hardwareStopItem  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createHardwareStopItemWithHttpInfo(HardwareStopItem hardwareStopItem) throws ApiException {
        com.squareup.okhttp.Call call = createHardwareStopItemValidateBeforeCall(hardwareStopItem, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Stop an in-progess hardware upgrade process
     * @param hardwareStopItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHardwareStopItemAsync(HardwareStopItem hardwareStopItem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHardwareStopItemValidateBeforeCall(hardwareStopItem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClusterPatchPatch
     * @param clusterPatchPatchId Uninstall a patch. (required)
     * @param override Whether to ignore patch system validation and force the uninstallation. (optional)
     * @param rolling Whether to uninstall the patch on one node at a time. Defaults to true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClusterPatchPatchCall(String clusterPatchPatchId, Boolean override, Boolean rolling, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/patch/patches/{ClusterPatchPatchId}"
            .replaceAll("\\{" + "ClusterPatchPatchId" + "\\}", apiClient.escapeString(clusterPatchPatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (override != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("override", override));
        if (rolling != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rolling", rolling));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClusterPatchPatchValidateBeforeCall(String clusterPatchPatchId, Boolean override, Boolean rolling, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterPatchPatchId' is set
        if (clusterPatchPatchId == null) {
            throw new ApiException("Missing the required parameter 'clusterPatchPatchId' when calling deleteClusterPatchPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClusterPatchPatchCall(clusterPatchPatchId, override, rolling, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Uninstall a patch.
     * @param clusterPatchPatchId Uninstall a patch. (required)
     * @param override Whether to ignore patch system validation and force the uninstallation. (optional)
     * @param rolling Whether to uninstall the patch on one node at a time. Defaults to true. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteClusterPatchPatch(String clusterPatchPatchId, Boolean override, Boolean rolling) throws ApiException {
        deleteClusterPatchPatchWithHttpInfo(clusterPatchPatchId, override, rolling);
    }

    /**
     * 
     * Uninstall a patch.
     * @param clusterPatchPatchId Uninstall a patch. (required)
     * @param override Whether to ignore patch system validation and force the uninstallation. (optional)
     * @param rolling Whether to uninstall the patch on one node at a time. Defaults to true. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClusterPatchPatchWithHttpInfo(String clusterPatchPatchId, Boolean override, Boolean rolling) throws ApiException {
        com.squareup.okhttp.Call call = deleteClusterPatchPatchValidateBeforeCall(clusterPatchPatchId, override, rolling, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Uninstall a patch.
     * @param clusterPatchPatchId Uninstall a patch. (required)
     * @param override Whether to ignore patch system validation and force the uninstallation. (optional)
     * @param rolling Whether to uninstall the patch on one node at a time. Defaults to true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClusterPatchPatchAsync(String clusterPatchPatchId, Boolean override, Boolean rolling, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClusterPatchPatchValidateBeforeCall(clusterPatchPatchId, override, rolling, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getClusterFirmwareProgress
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterFirmwareProgressCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/firmware/progress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterFirmwareProgressValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClusterFirmwareProgressCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Cluster wide firmware upgrade status info.
     * @return ClusterFirmwareProgress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterFirmwareProgress getClusterFirmwareProgress() throws ApiException {
        ApiResponse<ClusterFirmwareProgress> resp = getClusterFirmwareProgressWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Cluster wide firmware upgrade status info.
     * @return ApiResponse&lt;ClusterFirmwareProgress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterFirmwareProgress> getClusterFirmwareProgressWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getClusterFirmwareProgressValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ClusterFirmwareProgress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cluster wide firmware upgrade status info.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterFirmwareProgressAsync(final ApiCallback<ClusterFirmwareProgress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterFirmwareProgressValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterFirmwareProgress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClusterFirmwareStatus
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterFirmwareStatusCall(Boolean devices, Boolean _package, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/firmware/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (devices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devices", devices));
        if (_package != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("package", _package));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterFirmwareStatusValidateBeforeCall(Boolean devices, Boolean _package, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClusterFirmwareStatusCall(devices, _package, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The firmware status for the cluster.
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @return ClusterFirmwareStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterFirmwareStatus getClusterFirmwareStatus(Boolean devices, Boolean _package) throws ApiException {
        ApiResponse<ClusterFirmwareStatus> resp = getClusterFirmwareStatusWithHttpInfo(devices, _package);
        return resp.getData();
    }

    /**
     * 
     * The firmware status for the cluster.
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @return ApiResponse&lt;ClusterFirmwareStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterFirmwareStatus> getClusterFirmwareStatusWithHttpInfo(Boolean devices, Boolean _package) throws ApiException {
        com.squareup.okhttp.Call call = getClusterFirmwareStatusValidateBeforeCall(devices, _package, null, null);
        Type localVarReturnType = new TypeToken<ClusterFirmwareStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The firmware status for the cluster.
     * @param devices Show devices. If false, this returns an empty list. Default is false. (optional)
     * @param _package Show package. If false, this returns an empty list.Default is false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterFirmwareStatusAsync(Boolean devices, Boolean _package, final ApiCallback<ClusterFirmwareStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterFirmwareStatusValidateBeforeCall(devices, _package, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterFirmwareStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClusterNode
     * @param clusterNodeId The node details useful during an upgrade or assessment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterNodeCall(Integer clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/nodes/{ClusterNodeId}"
            .replaceAll("\\{" + "ClusterNodeId" + "\\}", apiClient.escapeString(clusterNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterNodeValidateBeforeCall(Integer clusterNodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterNodeId' is set
        if (clusterNodeId == null) {
            throw new ApiException("Missing the required parameter 'clusterNodeId' when calling getClusterNode(Async)");
        }
        

        com.squareup.okhttp.Call call = getClusterNodeCall(clusterNodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * The node details useful during an upgrade or assessment.
     * @param clusterNodeId The node details useful during an upgrade or assessment. (required)
     * @return ClusterNodes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterNodes getClusterNode(Integer clusterNodeId) throws ApiException {
        ApiResponse<ClusterNodes> resp = getClusterNodeWithHttpInfo(clusterNodeId);
        return resp.getData();
    }

    /**
     * 
     * The node details useful during an upgrade or assessment.
     * @param clusterNodeId The node details useful during an upgrade or assessment. (required)
     * @return ApiResponse&lt;ClusterNodes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterNodes> getClusterNodeWithHttpInfo(Integer clusterNodeId) throws ApiException {
        com.squareup.okhttp.Call call = getClusterNodeValidateBeforeCall(clusterNodeId, null, null);
        Type localVarReturnType = new TypeToken<ClusterNodes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The node details useful during an upgrade or assessment.
     * @param clusterNodeId The node details useful during an upgrade or assessment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterNodeAsync(Integer clusterNodeId, final ApiCallback<ClusterNodes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterNodeValidateBeforeCall(clusterNodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterNodes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClusterNodes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterNodesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/nodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterNodesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClusterNodesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View information about nodes during an upgrade, rollback, or pre-upgrade assessment.
     * @return ClusterNodesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterNodesExtended getClusterNodes() throws ApiException {
        ApiResponse<ClusterNodesExtended> resp = getClusterNodesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * View information about nodes during an upgrade, rollback, or pre-upgrade assessment.
     * @return ApiResponse&lt;ClusterNodesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterNodesExtended> getClusterNodesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getClusterNodesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ClusterNodesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View information about nodes during an upgrade, rollback, or pre-upgrade assessment.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterNodesAsync(final ApiCallback<ClusterNodesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterNodesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterNodesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClusterPatchPatch
     * @param clusterPatchPatchId View a single patch. (required)
     * @param local Only view patch information on the local node. (optional)
     * @param location Path location of patch file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterPatchPatchCall(String clusterPatchPatchId, Boolean local, String location, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/patch/patches/{ClusterPatchPatchId}"
            .replaceAll("\\{" + "ClusterPatchPatchId" + "\\}", apiClient.escapeString(clusterPatchPatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (local != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local", local));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterPatchPatchValidateBeforeCall(String clusterPatchPatchId, Boolean local, String location, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterPatchPatchId' is set
        if (clusterPatchPatchId == null) {
            throw new ApiException("Missing the required parameter 'clusterPatchPatchId' when calling getClusterPatchPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = getClusterPatchPatchCall(clusterPatchPatchId, local, location, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single patch.
     * @param clusterPatchPatchId View a single patch. (required)
     * @param local Only view patch information on the local node. (optional)
     * @param location Path location of patch file. (optional)
     * @return ClusterPatchPatches
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterPatchPatches getClusterPatchPatch(String clusterPatchPatchId, Boolean local, String location) throws ApiException {
        ApiResponse<ClusterPatchPatches> resp = getClusterPatchPatchWithHttpInfo(clusterPatchPatchId, local, location);
        return resp.getData();
    }

    /**
     * 
     * View a single patch.
     * @param clusterPatchPatchId View a single patch. (required)
     * @param local Only view patch information on the local node. (optional)
     * @param location Path location of patch file. (optional)
     * @return ApiResponse&lt;ClusterPatchPatches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterPatchPatches> getClusterPatchPatchWithHttpInfo(String clusterPatchPatchId, Boolean local, String location) throws ApiException {
        com.squareup.okhttp.Call call = getClusterPatchPatchValidateBeforeCall(clusterPatchPatchId, local, location, null, null);
        Type localVarReturnType = new TypeToken<ClusterPatchPatches>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single patch.
     * @param clusterPatchPatchId View a single patch. (required)
     * @param local Only view patch information on the local node. (optional)
     * @param location Path location of patch file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterPatchPatchAsync(String clusterPatchPatchId, Boolean local, String location, final ApiCallback<ClusterPatchPatches> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterPatchPatchValidateBeforeCall(clusterPatchPatchId, local, location, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterPatchPatches>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHardwareStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHardwareStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/upgrade/hardware/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHardwareStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHardwareStatusCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View the status of hardware upgrades in progress
     * @return HardwareStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HardwareStatus getHardwareStatus() throws ApiException {
        ApiResponse<HardwareStatus> resp = getHardwareStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * View the status of hardware upgrades in progress
     * @return ApiResponse&lt;HardwareStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HardwareStatus> getHardwareStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHardwareStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<HardwareStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View the status of hardware upgrades in progress
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHardwareStatusAsync(final ApiCallback<HardwareStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHardwareStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HardwareStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpgradeCluster
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpgradeClusterCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/upgrade/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpgradeClusterValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getUpgradeClusterCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Cluster wide upgrade status info.
     * @return UpgradeCluster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpgradeCluster getUpgradeCluster() throws ApiException {
        ApiResponse<UpgradeCluster> resp = getUpgradeClusterWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Cluster wide upgrade status info.
     * @return ApiResponse&lt;UpgradeCluster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpgradeCluster> getUpgradeClusterWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getUpgradeClusterValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<UpgradeCluster>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cluster wide upgrade status info.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpgradeClusterAsync(final ApiCallback<UpgradeCluster> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUpgradeClusterValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpgradeCluster>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listClusterPatchPatches
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param location Path location of patch file. (optional)
     * @param local Whether to view patches on the local node only. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listClusterPatchPatchesCall(String sort, String resume, Integer limit, String location, Boolean local, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/upgrade/cluster/patch/patches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (location != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location", location));
        if (local != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local", local));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listClusterPatchPatchesValidateBeforeCall(String sort, String resume, Integer limit, String location, Boolean local, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listClusterPatchPatchesCall(sort, resume, limit, location, local, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all patches.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param location Path location of patch file. (optional)
     * @param local Whether to view patches on the local node only. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ClusterPatchPatchesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ClusterPatchPatchesExtended listClusterPatchPatches(String sort, String resume, Integer limit, String location, Boolean local, String dir) throws ApiException {
        ApiResponse<ClusterPatchPatchesExtended> resp = listClusterPatchPatchesWithHttpInfo(sort, resume, limit, location, local, dir);
        return resp.getData();
    }

    /**
     * 
     * List all patches.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param location Path location of patch file. (optional)
     * @param local Whether to view patches on the local node only. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;ClusterPatchPatchesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ClusterPatchPatchesExtended> listClusterPatchPatchesWithHttpInfo(String sort, String resume, Integer limit, String location, Boolean local, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listClusterPatchPatchesValidateBeforeCall(sort, resume, limit, location, local, dir, null, null);
        Type localVarReturnType = new TypeToken<ClusterPatchPatchesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all patches.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param location Path location of patch file. (optional)
     * @param local Whether to view patches on the local node only. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listClusterPatchPatchesAsync(String sort, String resume, Integer limit, String location, Boolean local, String dir, final ApiCallback<ClusterPatchPatchesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listClusterPatchPatchesValidateBeforeCall(sort, resume, limit, location, local, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterPatchPatchesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClusterUpgrade
     * @param clusterUpgrade  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClusterUpgradeCall(ClusterUpgrade clusterUpgrade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterUpgrade;

        // create path and map variables
        String localVarPath = "/platform/5/upgrade/cluster/upgrade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClusterUpgradeValidateBeforeCall(ClusterUpgrade clusterUpgrade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clusterUpgrade' is set
        if (clusterUpgrade == null) {
            throw new ApiException("Missing the required parameter 'clusterUpgrade' when calling updateClusterUpgrade(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClusterUpgradeCall(clusterUpgrade, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add nodes to a running upgrade.
     * @param clusterUpgrade  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateClusterUpgrade(ClusterUpgrade clusterUpgrade) throws ApiException {
        updateClusterUpgradeWithHttpInfo(clusterUpgrade);
    }

    /**
     * 
     * Add nodes to a running upgrade.
     * @param clusterUpgrade  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateClusterUpgradeWithHttpInfo(ClusterUpgrade clusterUpgrade) throws ApiException {
        com.squareup.okhttp.Call call = updateClusterUpgradeValidateBeforeCall(clusterUpgrade, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Add nodes to a running upgrade.
     * @param clusterUpgrade  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClusterUpgradeAsync(ClusterUpgrade clusterUpgrade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClusterUpgradeValidateBeforeCall(clusterUpgrade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
