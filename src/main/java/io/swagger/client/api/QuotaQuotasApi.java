/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.QuotaNotification;
import io.swagger.client.model.QuotaNotificationCreateParams;
import io.swagger.client.model.QuotaNotifications;
import io.swagger.client.model.QuotaNotificationsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuotaQuotasApi {
    private ApiClient apiClient;

    public QuotaQuotasApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuotaQuotasApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createQuotaNotification
     * @param quotaNotification  (required)
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createQuotaNotificationCall(QuotaNotificationCreateParams quotaNotification, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quotaNotification;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications"
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQuotaNotificationValidateBeforeCall(QuotaNotificationCreateParams quotaNotification, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaNotification' is set
        if (quotaNotification == null) {
            throw new ApiException("Missing the required parameter 'quotaNotification' when calling createQuotaNotification(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling createQuotaNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = createQuotaNotificationCall(quotaNotification, qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new notification rule specific to this quota.
     * @param quotaNotification  (required)
     * @param qid  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createQuotaNotification(QuotaNotificationCreateParams quotaNotification, String qid) throws ApiException {
        ApiResponse<CreateResponse> resp = createQuotaNotificationWithHttpInfo(quotaNotification, qid);
        return resp.getData();
    }

    /**
     * 
     * Create a new notification rule specific to this quota.
     * @param quotaNotification  (required)
     * @param qid  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createQuotaNotificationWithHttpInfo(QuotaNotificationCreateParams quotaNotification, String qid) throws ApiException {
        com.squareup.okhttp.Call call = createQuotaNotificationValidateBeforeCall(quotaNotification, qid, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new notification rule specific to this quota.
     * @param quotaNotification  (required)
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQuotaNotificationAsync(QuotaNotificationCreateParams quotaNotification, String qid, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQuotaNotificationValidateBeforeCall(quotaNotification, qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteQuotaNotification
     * @param quotaNotificationId Delete the notification rule. (required)
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaNotificationCall(String quotaNotificationId, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications/{QuotaNotificationId}"
            .replaceAll("\\{" + "QuotaNotificationId" + "\\}", apiClient.escapeString(quotaNotificationId.toString()))
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuotaNotificationValidateBeforeCall(String quotaNotificationId, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaNotificationId' is set
        if (quotaNotificationId == null) {
            throw new ApiException("Missing the required parameter 'quotaNotificationId' when calling deleteQuotaNotification(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling deleteQuotaNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuotaNotificationCall(quotaNotificationId, qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the notification rule.
     * @param quotaNotificationId Delete the notification rule. (required)
     * @param qid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuotaNotification(String quotaNotificationId, String qid) throws ApiException {
        deleteQuotaNotificationWithHttpInfo(quotaNotificationId, qid);
    }

    /**
     * 
     * Delete the notification rule.
     * @param quotaNotificationId Delete the notification rule. (required)
     * @param qid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuotaNotificationWithHttpInfo(String quotaNotificationId, String qid) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuotaNotificationValidateBeforeCall(quotaNotificationId, qid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the notification rule.
     * @param quotaNotificationId Delete the notification rule. (required)
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaNotificationAsync(String quotaNotificationId, String qid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuotaNotificationValidateBeforeCall(quotaNotificationId, qid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteQuotaNotifications
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaNotificationsCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications"
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuotaNotificationsValidateBeforeCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling deleteQuotaNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteQuotaNotificationsCall(qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all quota specific rules. The quota will then use the global rules.
     * @param qid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuotaNotifications(String qid) throws ApiException {
        deleteQuotaNotificationsWithHttpInfo(qid);
    }

    /**
     * 
     * Delete all quota specific rules. The quota will then use the global rules.
     * @param qid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuotaNotificationsWithHttpInfo(String qid) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuotaNotificationsValidateBeforeCall(qid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all quota specific rules. The quota will then use the global rules.
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuotaNotificationsAsync(String qid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuotaNotificationsValidateBeforeCall(qid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getQuotaNotification
     * @param quotaNotificationId Retrieve notification rule information. (required)
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getQuotaNotificationCall(String quotaNotificationId, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications/{QuotaNotificationId}"
            .replaceAll("\\{" + "QuotaNotificationId" + "\\}", apiClient.escapeString(quotaNotificationId.toString()))
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuotaNotificationValidateBeforeCall(String quotaNotificationId, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaNotificationId' is set
        if (quotaNotificationId == null) {
            throw new ApiException("Missing the required parameter 'quotaNotificationId' when calling getQuotaNotification(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling getQuotaNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = getQuotaNotificationCall(quotaNotificationId, qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve notification rule information.
     * @param quotaNotificationId Retrieve notification rule information. (required)
     * @param qid  (required)
     * @return QuotaNotifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaNotifications getQuotaNotification(String quotaNotificationId, String qid) throws ApiException {
        ApiResponse<QuotaNotifications> resp = getQuotaNotificationWithHttpInfo(quotaNotificationId, qid);
        return resp.getData();
    }

    /**
     * 
     * Retrieve notification rule information.
     * @param quotaNotificationId Retrieve notification rule information. (required)
     * @param qid  (required)
     * @return ApiResponse&lt;QuotaNotifications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaNotifications> getQuotaNotificationWithHttpInfo(String quotaNotificationId, String qid) throws ApiException {
        com.squareup.okhttp.Call call = getQuotaNotificationValidateBeforeCall(quotaNotificationId, qid, null, null);
        Type localVarReturnType = new TypeToken<QuotaNotifications>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve notification rule information.
     * @param quotaNotificationId Retrieve notification rule information. (required)
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuotaNotificationAsync(String quotaNotificationId, String qid, final ApiCallback<QuotaNotifications> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuotaNotificationValidateBeforeCall(quotaNotificationId, qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaNotifications>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listQuotaNotifications
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listQuotaNotificationsCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications"
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listQuotaNotificationsValidateBeforeCall(String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling listQuotaNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = listQuotaNotificationsCall(qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all rules.
     * @param qid  (required)
     * @return QuotaNotificationsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuotaNotificationsExtended listQuotaNotifications(String qid) throws ApiException {
        ApiResponse<QuotaNotificationsExtended> resp = listQuotaNotificationsWithHttpInfo(qid);
        return resp.getData();
    }

    /**
     * 
     * List all rules.
     * @param qid  (required)
     * @return ApiResponse&lt;QuotaNotificationsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuotaNotificationsExtended> listQuotaNotificationsWithHttpInfo(String qid) throws ApiException {
        com.squareup.okhttp.Call call = listQuotaNotificationsValidateBeforeCall(qid, null, null);
        Type localVarReturnType = new TypeToken<QuotaNotificationsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all rules.
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listQuotaNotificationsAsync(String qid, final ApiCallback<QuotaNotificationsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listQuotaNotificationsValidateBeforeCall(qid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuotaNotificationsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateQuotaNotification
     * @param quotaNotification  (required)
     * @param quotaNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuotaNotificationCall(QuotaNotification quotaNotification, String quotaNotificationId, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quotaNotification;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications/{QuotaNotificationId}"
            .replaceAll("\\{" + "QuotaNotificationId" + "\\}", apiClient.escapeString(quotaNotificationId.toString()))
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuotaNotificationValidateBeforeCall(QuotaNotification quotaNotification, String quotaNotificationId, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaNotification' is set
        if (quotaNotification == null) {
            throw new ApiException("Missing the required parameter 'quotaNotification' when calling updateQuotaNotification(Async)");
        }
        
        // verify the required parameter 'quotaNotificationId' is set
        if (quotaNotificationId == null) {
            throw new ApiException("Missing the required parameter 'quotaNotificationId' when calling updateQuotaNotification(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling updateQuotaNotification(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuotaNotificationCall(quotaNotification, quotaNotificationId, qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     * @param quotaNotification  (required)
     * @param quotaNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @param qid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuotaNotification(QuotaNotification quotaNotification, String quotaNotificationId, String qid) throws ApiException {
        updateQuotaNotificationWithHttpInfo(quotaNotification, quotaNotificationId, qid);
    }

    /**
     * 
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     * @param quotaNotification  (required)
     * @param quotaNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @param qid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuotaNotificationWithHttpInfo(QuotaNotification quotaNotification, String quotaNotificationId, String qid) throws ApiException {
        com.squareup.okhttp.Call call = updateQuotaNotificationValidateBeforeCall(quotaNotification, quotaNotificationId, qid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify notification rule. All input fields are optional, but one or more must be supplied.
     * @param quotaNotification  (required)
     * @param quotaNotificationId Modify notification rule. All input fields are optional, but one or more must be supplied. (required)
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuotaNotificationAsync(QuotaNotification quotaNotification, String quotaNotificationId, String qid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuotaNotificationValidateBeforeCall(quotaNotification, quotaNotificationId, qid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateQuotaNotifications
     * @param quotaNotifications  (required)
     * @param qid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateQuotaNotificationsCall(Empty quotaNotifications, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = quotaNotifications;

        // create path and map variables
        String localVarPath = "/platform/1/quota/quotas/{Qid}/notifications"
            .replaceAll("\\{" + "Qid" + "\\}", apiClient.escapeString(qid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuotaNotificationsValidateBeforeCall(Empty quotaNotifications, String qid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'quotaNotifications' is set
        if (quotaNotifications == null) {
            throw new ApiException("Missing the required parameter 'quotaNotifications' when calling updateQuotaNotifications(Async)");
        }
        
        // verify the required parameter 'qid' is set
        if (qid == null) {
            throw new ApiException("Missing the required parameter 'qid' when calling updateQuotaNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = updateQuotaNotificationsCall(quotaNotifications, qid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This method creates an empty set of rules so that the global rules are not used. The input must be an empty JSON object.
     * @param quotaNotifications  (required)
     * @param qid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuotaNotifications(Empty quotaNotifications, String qid) throws ApiException {
        updateQuotaNotificationsWithHttpInfo(quotaNotifications, qid);
    }

    /**
     * 
     * This method creates an empty set of rules so that the global rules are not used. The input must be an empty JSON object.
     * @param quotaNotifications  (required)
     * @param qid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuotaNotificationsWithHttpInfo(Empty quotaNotifications, String qid) throws ApiException {
        com.squareup.okhttp.Call call = updateQuotaNotificationsValidateBeforeCall(quotaNotifications, qid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * This method creates an empty set of rules so that the global rules are not used. The input must be an empty JSON object.
     * @param quotaNotifications  (required)
     * @param qid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuotaNotificationsAsync(Empty quotaNotifications, String qid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuotaNotificationsValidateBeforeCall(quotaNotifications, qid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
