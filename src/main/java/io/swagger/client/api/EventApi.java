/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateQuotaReportResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.EventAlertCondition;
import io.swagger.client.model.EventAlertConditionCreateParams;
import io.swagger.client.model.EventAlertConditions;
import io.swagger.client.model.EventAlertConditionsExtended;
import io.swagger.client.model.EventCategories;
import io.swagger.client.model.EventCategoriesExtended;
import io.swagger.client.model.EventChannel;
import io.swagger.client.model.EventChannelCreateParams;
import io.swagger.client.model.EventChannels;
import io.swagger.client.model.EventChannelsExtended;
import io.swagger.client.model.EventEvent;
import io.swagger.client.model.EventEventgroupDefinitions;
import io.swagger.client.model.EventEventgroupDefinitionsExtended;
import io.swagger.client.model.EventEventgroupOccurrence;
import io.swagger.client.model.EventEventgroupOccurrences;
import io.swagger.client.model.EventEventgroupOccurrencesExtended;
import io.swagger.client.model.EventEventlists;
import io.swagger.client.model.EventEventlistsExtended;
import io.swagger.client.model.EventSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventApi {
    private ApiClient apiClient;

    public EventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createEventAlertCondition
     * @param eventAlertCondition  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEventAlertConditionCall(EventAlertConditionCreateParams eventAlertCondition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventAlertCondition;

        // create path and map variables
        String localVarPath = "/platform/4/event/alert-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEventAlertConditionValidateBeforeCall(EventAlertConditionCreateParams eventAlertCondition, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventAlertCondition' is set
        if (eventAlertCondition == null) {
            throw new ApiException("Missing the required parameter 'eventAlertCondition' when calling createEventAlertCondition(Async)");
        }
        

        com.squareup.okhttp.Call call = createEventAlertConditionCall(eventAlertCondition, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new alert condition.
     * @param eventAlertCondition  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createEventAlertCondition(EventAlertConditionCreateParams eventAlertCondition) throws ApiException {
        ApiResponse<CreateResponse> resp = createEventAlertConditionWithHttpInfo(eventAlertCondition);
        return resp.getData();
    }

    /**
     * 
     * Create a new alert condition.
     * @param eventAlertCondition  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createEventAlertConditionWithHttpInfo(EventAlertConditionCreateParams eventAlertCondition) throws ApiException {
        com.squareup.okhttp.Call call = createEventAlertConditionValidateBeforeCall(eventAlertCondition, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new alert condition.
     * @param eventAlertCondition  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEventAlertConditionAsync(EventAlertConditionCreateParams eventAlertCondition, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEventAlertConditionValidateBeforeCall(eventAlertCondition, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEventChannel
     * @param eventChannel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEventChannelCall(EventChannelCreateParams eventChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventChannel;

        // create path and map variables
        String localVarPath = "/platform/3/event/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEventChannelValidateBeforeCall(EventChannelCreateParams eventChannel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventChannel' is set
        if (eventChannel == null) {
            throw new ApiException("Missing the required parameter 'eventChannel' when calling createEventChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = createEventChannelCall(eventChannel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new channel.
     * @param eventChannel  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createEventChannel(EventChannelCreateParams eventChannel) throws ApiException {
        ApiResponse<CreateResponse> resp = createEventChannelWithHttpInfo(eventChannel);
        return resp.getData();
    }

    /**
     * 
     * Create a new channel.
     * @param eventChannel  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createEventChannelWithHttpInfo(EventChannelCreateParams eventChannel) throws ApiException {
        com.squareup.okhttp.Call call = createEventChannelValidateBeforeCall(eventChannel, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new channel.
     * @param eventChannel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEventChannelAsync(EventChannelCreateParams eventChannel, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEventChannelValidateBeforeCall(eventChannel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEventEvent
     * @param eventEvent  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEventEventCall(EventEvent eventEvent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventEvent;

        // create path and map variables
        String localVarPath = "/platform/3/event/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEventEventValidateBeforeCall(EventEvent eventEvent, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventEvent' is set
        if (eventEvent == null) {
            throw new ApiException("Missing the required parameter 'eventEvent' when calling createEventEvent(Async)");
        }
        

        com.squareup.okhttp.Call call = createEventEventCall(eventEvent, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a test event.
     * @param eventEvent  (required)
     * @return CreateQuotaReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateQuotaReportResponse createEventEvent(EventEvent eventEvent) throws ApiException {
        ApiResponse<CreateQuotaReportResponse> resp = createEventEventWithHttpInfo(eventEvent);
        return resp.getData();
    }

    /**
     * 
     * Create a test event.
     * @param eventEvent  (required)
     * @return ApiResponse&lt;CreateQuotaReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateQuotaReportResponse> createEventEventWithHttpInfo(EventEvent eventEvent) throws ApiException {
        com.squareup.okhttp.Call call = createEventEventValidateBeforeCall(eventEvent, null, null);
        Type localVarReturnType = new TypeToken<CreateQuotaReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a test event.
     * @param eventEvent  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEventEventAsync(EventEvent eventEvent, final ApiCallback<CreateQuotaReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEventEventValidateBeforeCall(eventEvent, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateQuotaReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteEventAlertCondition
     * @param eventAlertConditionId Delete the alert-condition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEventAlertConditionCall(String eventAlertConditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/event/alert-conditions/{EventAlertConditionId}"
            .replaceAll("\\{" + "EventAlertConditionId" + "\\}", apiClient.escapeString(eventAlertConditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEventAlertConditionValidateBeforeCall(String eventAlertConditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventAlertConditionId' is set
        if (eventAlertConditionId == null) {
            throw new ApiException("Missing the required parameter 'eventAlertConditionId' when calling deleteEventAlertCondition(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEventAlertConditionCall(eventAlertConditionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the alert-condition.
     * @param eventAlertConditionId Delete the alert-condition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEventAlertCondition(String eventAlertConditionId) throws ApiException {
        deleteEventAlertConditionWithHttpInfo(eventAlertConditionId);
    }

    /**
     * 
     * Delete the alert-condition.
     * @param eventAlertConditionId Delete the alert-condition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEventAlertConditionWithHttpInfo(String eventAlertConditionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventAlertConditionValidateBeforeCall(eventAlertConditionId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the alert-condition.
     * @param eventAlertConditionId Delete the alert-condition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventAlertConditionAsync(String eventAlertConditionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventAlertConditionValidateBeforeCall(eventAlertConditionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEventAlertConditions
     * @param channel Delete only conditions for this channel (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEventAlertConditionsCall(String channel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/event/alert-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (channel != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("channel", channel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEventAlertConditionsValidateBeforeCall(String channel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteEventAlertConditionsCall(channel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Bulk delete of alert conditions.
     * @param channel Delete only conditions for this channel (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEventAlertConditions(String channel) throws ApiException {
        deleteEventAlertConditionsWithHttpInfo(channel);
    }

    /**
     * 
     * Bulk delete of alert conditions.
     * @param channel Delete only conditions for this channel (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEventAlertConditionsWithHttpInfo(String channel) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventAlertConditionsValidateBeforeCall(channel, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Bulk delete of alert conditions.
     * @param channel Delete only conditions for this channel (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventAlertConditionsAsync(String channel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventAlertConditionsValidateBeforeCall(channel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEventChannel
     * @param eventChannelId Delete the channel. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEventChannelCall(String eventChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/channels/{EventChannelId}"
            .replaceAll("\\{" + "EventChannelId" + "\\}", apiClient.escapeString(eventChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEventChannelValidateBeforeCall(String eventChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventChannelId' is set
        if (eventChannelId == null) {
            throw new ApiException("Missing the required parameter 'eventChannelId' when calling deleteEventChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEventChannelCall(eventChannelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the channel.
     * @param eventChannelId Delete the channel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEventChannel(String eventChannelId) throws ApiException {
        deleteEventChannelWithHttpInfo(eventChannelId);
    }

    /**
     * 
     * Delete the channel.
     * @param eventChannelId Delete the channel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEventChannelWithHttpInfo(String eventChannelId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEventChannelValidateBeforeCall(eventChannelId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the channel.
     * @param eventChannelId Delete the channel. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEventChannelAsync(String eventChannelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEventChannelValidateBeforeCall(eventChannelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getEventAlertCondition
     * @param eventAlertConditionId Retrieve the alert-condition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventAlertConditionCall(String eventAlertConditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/event/alert-conditions/{EventAlertConditionId}"
            .replaceAll("\\{" + "EventAlertConditionId" + "\\}", apiClient.escapeString(eventAlertConditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventAlertConditionValidateBeforeCall(String eventAlertConditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventAlertConditionId' is set
        if (eventAlertConditionId == null) {
            throw new ApiException("Missing the required parameter 'eventAlertConditionId' when calling getEventAlertCondition(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventAlertConditionCall(eventAlertConditionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the alert-condition.
     * @param eventAlertConditionId Retrieve the alert-condition. (required)
     * @return EventAlertConditions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventAlertConditions getEventAlertCondition(String eventAlertConditionId) throws ApiException {
        ApiResponse<EventAlertConditions> resp = getEventAlertConditionWithHttpInfo(eventAlertConditionId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the alert-condition.
     * @param eventAlertConditionId Retrieve the alert-condition. (required)
     * @return ApiResponse&lt;EventAlertConditions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventAlertConditions> getEventAlertConditionWithHttpInfo(String eventAlertConditionId) throws ApiException {
        com.squareup.okhttp.Call call = getEventAlertConditionValidateBeforeCall(eventAlertConditionId, null, null);
        Type localVarReturnType = new TypeToken<EventAlertConditions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the alert-condition.
     * @param eventAlertConditionId Retrieve the alert-condition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventAlertConditionAsync(String eventAlertConditionId, final ApiCallback<EventAlertConditions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventAlertConditionValidateBeforeCall(eventAlertConditionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventAlertConditions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventCategories
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventCategoriesCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventCategoriesValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventCategoriesCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all eventgroup categories.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return EventCategoriesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventCategoriesExtended getEventCategories(Integer limit, String resume) throws ApiException {
        ApiResponse<EventCategoriesExtended> resp = getEventCategoriesWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List all eventgroup categories.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;EventCategoriesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventCategoriesExtended> getEventCategoriesWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getEventCategoriesValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<EventCategoriesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all eventgroup categories.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventCategoriesAsync(Integer limit, String resume, final ApiCallback<EventCategoriesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventCategoriesValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventCategoriesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventCategory
     * @param eventCategoryId Retrieve the eventgroup category. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventCategoryCall(String eventCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/categories/{EventCategoryId}"
            .replaceAll("\\{" + "EventCategoryId" + "\\}", apiClient.escapeString(eventCategoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventCategoryValidateBeforeCall(String eventCategoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventCategoryId' is set
        if (eventCategoryId == null) {
            throw new ApiException("Missing the required parameter 'eventCategoryId' when calling getEventCategory(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventCategoryCall(eventCategoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the eventgroup category.
     * @param eventCategoryId Retrieve the eventgroup category. (required)
     * @return EventCategories
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventCategories getEventCategory(String eventCategoryId) throws ApiException {
        ApiResponse<EventCategories> resp = getEventCategoryWithHttpInfo(eventCategoryId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the eventgroup category.
     * @param eventCategoryId Retrieve the eventgroup category. (required)
     * @return ApiResponse&lt;EventCategories&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventCategories> getEventCategoryWithHttpInfo(String eventCategoryId) throws ApiException {
        com.squareup.okhttp.Call call = getEventCategoryValidateBeforeCall(eventCategoryId, null, null);
        Type localVarReturnType = new TypeToken<EventCategories>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the eventgroup category.
     * @param eventCategoryId Retrieve the eventgroup category. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventCategoryAsync(String eventCategoryId, final ApiCallback<EventCategories> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventCategoryValidateBeforeCall(eventCategoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventCategories>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventChannel
     * @param eventChannelId Retrieve the channel. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventChannelCall(String eventChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/channels/{EventChannelId}"
            .replaceAll("\\{" + "EventChannelId" + "\\}", apiClient.escapeString(eventChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventChannelValidateBeforeCall(String eventChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventChannelId' is set
        if (eventChannelId == null) {
            throw new ApiException("Missing the required parameter 'eventChannelId' when calling getEventChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventChannelCall(eventChannelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the channel.
     * @param eventChannelId Retrieve the channel. (required)
     * @return EventChannels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventChannels getEventChannel(String eventChannelId) throws ApiException {
        ApiResponse<EventChannels> resp = getEventChannelWithHttpInfo(eventChannelId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the channel.
     * @param eventChannelId Retrieve the channel. (required)
     * @return ApiResponse&lt;EventChannels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventChannels> getEventChannelWithHttpInfo(String eventChannelId) throws ApiException {
        com.squareup.okhttp.Call call = getEventChannelValidateBeforeCall(eventChannelId, null, null);
        Type localVarReturnType = new TypeToken<EventChannels>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the channel.
     * @param eventChannelId Retrieve the channel. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventChannelAsync(String eventChannelId, final ApiCallback<EventChannels> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventChannelValidateBeforeCall(eventChannelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventChannels>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventEventgroupDefinition
     * @param eventEventgroupDefinitionId Retrieve the eventgroup definition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupDefinitionCall(String eventEventgroupDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/event/eventgroup-definitions/{EventEventgroupDefinitionId}"
            .replaceAll("\\{" + "EventEventgroupDefinitionId" + "\\}", apiClient.escapeString(eventEventgroupDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventEventgroupDefinitionValidateBeforeCall(String eventEventgroupDefinitionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventEventgroupDefinitionId' is set
        if (eventEventgroupDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'eventEventgroupDefinitionId' when calling getEventEventgroupDefinition(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventEventgroupDefinitionCall(eventEventgroupDefinitionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the eventgroup definition.
     * @param eventEventgroupDefinitionId Retrieve the eventgroup definition. (required)
     * @return EventEventgroupDefinitions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEventgroupDefinitions getEventEventgroupDefinition(String eventEventgroupDefinitionId) throws ApiException {
        ApiResponse<EventEventgroupDefinitions> resp = getEventEventgroupDefinitionWithHttpInfo(eventEventgroupDefinitionId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the eventgroup definition.
     * @param eventEventgroupDefinitionId Retrieve the eventgroup definition. (required)
     * @return ApiResponse&lt;EventEventgroupDefinitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEventgroupDefinitions> getEventEventgroupDefinitionWithHttpInfo(String eventEventgroupDefinitionId) throws ApiException {
        com.squareup.okhttp.Call call = getEventEventgroupDefinitionValidateBeforeCall(eventEventgroupDefinitionId, null, null);
        Type localVarReturnType = new TypeToken<EventEventgroupDefinitions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the eventgroup definition.
     * @param eventEventgroupDefinitionId Retrieve the eventgroup definition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupDefinitionAsync(String eventEventgroupDefinitionId, final ApiCallback<EventEventgroupDefinitions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventEventgroupDefinitionValidateBeforeCall(eventEventgroupDefinitionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEventgroupDefinitions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventEventgroupDefinitions
     * @param category Return eventgroups in the specified category (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupDefinitionsCall(Integer category, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/event/eventgroup-definitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventEventgroupDefinitionsValidateBeforeCall(Integer category, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventEventgroupDefinitionsCall(category, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all eventgroup definitions.
     * @param category Return eventgroups in the specified category (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return EventEventgroupDefinitionsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEventgroupDefinitionsExtended getEventEventgroupDefinitions(Integer category, Integer limit, String resume) throws ApiException {
        ApiResponse<EventEventgroupDefinitionsExtended> resp = getEventEventgroupDefinitionsWithHttpInfo(category, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List all eventgroup definitions.
     * @param category Return eventgroups in the specified category (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;EventEventgroupDefinitionsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEventgroupDefinitionsExtended> getEventEventgroupDefinitionsWithHttpInfo(Integer category, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getEventEventgroupDefinitionsValidateBeforeCall(category, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<EventEventgroupDefinitionsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all eventgroup definitions.
     * @param category Return eventgroups in the specified category (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupDefinitionsAsync(Integer category, Integer limit, String resume, final ApiCallback<EventEventgroupDefinitionsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventEventgroupDefinitionsValidateBeforeCall(category, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEventgroupDefinitionsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventEventgroupOccurrence
     * @param eventEventgroupOccurrenceId Retrieve individual eventgroup occurrence. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupOccurrenceCall(String eventEventgroupOccurrenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/eventgroup-occurrences/{EventEventgroupOccurrenceId}"
            .replaceAll("\\{" + "EventEventgroupOccurrenceId" + "\\}", apiClient.escapeString(eventEventgroupOccurrenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventEventgroupOccurrenceValidateBeforeCall(String eventEventgroupOccurrenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventEventgroupOccurrenceId' is set
        if (eventEventgroupOccurrenceId == null) {
            throw new ApiException("Missing the required parameter 'eventEventgroupOccurrenceId' when calling getEventEventgroupOccurrence(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventEventgroupOccurrenceCall(eventEventgroupOccurrenceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve individual eventgroup occurrence.
     * @param eventEventgroupOccurrenceId Retrieve individual eventgroup occurrence. (required)
     * @return EventEventgroupOccurrences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEventgroupOccurrences getEventEventgroupOccurrence(String eventEventgroupOccurrenceId) throws ApiException {
        ApiResponse<EventEventgroupOccurrences> resp = getEventEventgroupOccurrenceWithHttpInfo(eventEventgroupOccurrenceId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve individual eventgroup occurrence.
     * @param eventEventgroupOccurrenceId Retrieve individual eventgroup occurrence. (required)
     * @return ApiResponse&lt;EventEventgroupOccurrences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEventgroupOccurrences> getEventEventgroupOccurrenceWithHttpInfo(String eventEventgroupOccurrenceId) throws ApiException {
        com.squareup.okhttp.Call call = getEventEventgroupOccurrenceValidateBeforeCall(eventEventgroupOccurrenceId, null, null);
        Type localVarReturnType = new TypeToken<EventEventgroupOccurrences>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve individual eventgroup occurrence.
     * @param eventEventgroupOccurrenceId Retrieve individual eventgroup occurrence. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupOccurrenceAsync(String eventEventgroupOccurrenceId, final ApiCallback<EventEventgroupOccurrences> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventEventgroupOccurrenceValidateBeforeCall(eventEventgroupOccurrenceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEventgroupOccurrences>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventEventgroupOccurrences
     * @param resolved Filter for resolved eventgroups (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param begin events that are in progress after this time (optional)
     * @param end events that were in progress before this time (optional)
     * @param eventCount events for which event_count &gt; this (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param ignore Filter for ignored eventgroups (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resolver Filter for eventgroup resolver (optional)
     * @param cause Filter for cause (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupOccurrencesCall(Boolean resolved, String sort, Integer begin, Integer end, Integer eventCount, String resume, Boolean ignore, Integer limit, String resolver, String cause, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/eventgroup-occurrences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resolved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolved", resolved));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (eventCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("event_count", eventCount));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (ignore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore", ignore));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resolver != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolver", resolver));
        if (cause != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cause", cause));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventEventgroupOccurrencesValidateBeforeCall(Boolean resolved, String sort, Integer begin, Integer end, Integer eventCount, String resume, Boolean ignore, Integer limit, String resolver, String cause, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventEventgroupOccurrencesCall(resolved, sort, begin, end, eventCount, resume, ignore, limit, resolver, cause, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all eventgroup occurrences.
     * @param resolved Filter for resolved eventgroups (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param begin events that are in progress after this time (optional)
     * @param end events that were in progress before this time (optional)
     * @param eventCount events for which event_count &gt; this (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param ignore Filter for ignored eventgroups (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resolver Filter for eventgroup resolver (optional)
     * @param cause Filter for cause (optional)
     * @param dir The direction of the sort. (optional)
     * @return EventEventgroupOccurrencesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEventgroupOccurrencesExtended getEventEventgroupOccurrences(Boolean resolved, String sort, Integer begin, Integer end, Integer eventCount, String resume, Boolean ignore, Integer limit, String resolver, String cause, String dir) throws ApiException {
        ApiResponse<EventEventgroupOccurrencesExtended> resp = getEventEventgroupOccurrencesWithHttpInfo(resolved, sort, begin, end, eventCount, resume, ignore, limit, resolver, cause, dir);
        return resp.getData();
    }

    /**
     * 
     * List all eventgroup occurrences.
     * @param resolved Filter for resolved eventgroups (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param begin events that are in progress after this time (optional)
     * @param end events that were in progress before this time (optional)
     * @param eventCount events for which event_count &gt; this (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param ignore Filter for ignored eventgroups (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resolver Filter for eventgroup resolver (optional)
     * @param cause Filter for cause (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;EventEventgroupOccurrencesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEventgroupOccurrencesExtended> getEventEventgroupOccurrencesWithHttpInfo(Boolean resolved, String sort, Integer begin, Integer end, Integer eventCount, String resume, Boolean ignore, Integer limit, String resolver, String cause, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getEventEventgroupOccurrencesValidateBeforeCall(resolved, sort, begin, end, eventCount, resume, ignore, limit, resolver, cause, dir, null, null);
        Type localVarReturnType = new TypeToken<EventEventgroupOccurrencesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all eventgroup occurrences.
     * @param resolved Filter for resolved eventgroups (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param begin events that are in progress after this time (optional)
     * @param end events that were in progress before this time (optional)
     * @param eventCount events for which event_count &gt; this (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param ignore Filter for ignored eventgroups (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resolver Filter for eventgroup resolver (optional)
     * @param cause Filter for cause (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventEventgroupOccurrencesAsync(Boolean resolved, String sort, Integer begin, Integer end, Integer eventCount, String resume, Boolean ignore, Integer limit, String resolver, String cause, String dir, final ApiCallback<EventEventgroupOccurrencesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventEventgroupOccurrencesValidateBeforeCall(resolved, sort, begin, end, eventCount, resume, ignore, limit, resolver, cause, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEventgroupOccurrencesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventEventlist
     * @param eventEventlistId Retrieve the list of events for a eventgroup occureence. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventEventlistCall(String eventEventlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/eventlists/{EventEventlistId}"
            .replaceAll("\\{" + "EventEventlistId" + "\\}", apiClient.escapeString(eventEventlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventEventlistValidateBeforeCall(String eventEventlistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventEventlistId' is set
        if (eventEventlistId == null) {
            throw new ApiException("Missing the required parameter 'eventEventlistId' when calling getEventEventlist(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventEventlistCall(eventEventlistId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the list of events for a eventgroup occureence.
     * @param eventEventlistId Retrieve the list of events for a eventgroup occureence. (required)
     * @return EventEventlists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEventlists getEventEventlist(String eventEventlistId) throws ApiException {
        ApiResponse<EventEventlists> resp = getEventEventlistWithHttpInfo(eventEventlistId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the list of events for a eventgroup occureence.
     * @param eventEventlistId Retrieve the list of events for a eventgroup occureence. (required)
     * @return ApiResponse&lt;EventEventlists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEventlists> getEventEventlistWithHttpInfo(String eventEventlistId) throws ApiException {
        com.squareup.okhttp.Call call = getEventEventlistValidateBeforeCall(eventEventlistId, null, null);
        Type localVarReturnType = new TypeToken<EventEventlists>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the list of events for a eventgroup occureence.
     * @param eventEventlistId Retrieve the list of events for a eventgroup occureence. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventEventlistAsync(String eventEventlistId, final ApiCallback<EventEventlists> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventEventlistValidateBeforeCall(eventEventlistId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEventlists>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventEventlists
     * @param eventInstance Return only this event occurrence (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventEventlistsCall(String eventInstance, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/eventlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (eventInstance != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("event_instance", eventInstance));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventEventlistsValidateBeforeCall(String eventInstance, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventEventlistsCall(eventInstance, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all event occurrences grouped by eventgroup occurrence.
     * @param eventInstance Return only this event occurrence (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return EventEventlistsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventEventlistsExtended getEventEventlists(String eventInstance, Integer limit, String resume) throws ApiException {
        ApiResponse<EventEventlistsExtended> resp = getEventEventlistsWithHttpInfo(eventInstance, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List all event occurrences grouped by eventgroup occurrence.
     * @param eventInstance Return only this event occurrence (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;EventEventlistsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventEventlistsExtended> getEventEventlistsWithHttpInfo(String eventInstance, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getEventEventlistsValidateBeforeCall(eventInstance, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<EventEventlistsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all event occurrences grouped by eventgroup occurrence.
     * @param eventInstance Return only this event occurrence (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventEventlistsAsync(String eventInstance, Integer limit, String resume, final ApiCallback<EventEventlistsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventEventlistsValidateBeforeCall(eventInstance, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventEventlistsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getEventSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the settings.
     * @return EventSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventSettings getEventSettings() throws ApiException {
        ApiResponse<EventSettings> resp = getEventSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the settings.
     * @return ApiResponse&lt;EventSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventSettings> getEventSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getEventSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<EventSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventSettingsAsync(final ApiCallback<EventSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEventAlertConditions
     * @param channels Return only conditions for the specified channel: (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEventAlertConditionsCall(String channels, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/event/alert-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (channels != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("channels", channels));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEventAlertConditionsValidateBeforeCall(String channels, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listEventAlertConditionsCall(channels, sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all alert conditions.
     * @param channels Return only conditions for the specified channel: (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return EventAlertConditionsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventAlertConditionsExtended listEventAlertConditions(String channels, String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<EventAlertConditionsExtended> resp = listEventAlertConditionsWithHttpInfo(channels, sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all alert conditions.
     * @param channels Return only conditions for the specified channel: (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;EventAlertConditionsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventAlertConditionsExtended> listEventAlertConditionsWithHttpInfo(String channels, String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listEventAlertConditionsValidateBeforeCall(channels, sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<EventAlertConditionsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all alert conditions.
     * @param channels Return only conditions for the specified channel: (optional)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEventAlertConditionsAsync(String channels, String sort, Integer limit, String dir, String resume, final ApiCallback<EventAlertConditionsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEventAlertConditionsValidateBeforeCall(channels, sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventAlertConditionsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEventChannels
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEventChannelsCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/event/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEventChannelsValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listEventChannelsCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all channels.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return EventChannelsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventChannelsExtended listEventChannels(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<EventChannelsExtended> resp = listEventChannelsWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all channels.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;EventChannelsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventChannelsExtended> listEventChannelsWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listEventChannelsValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<EventChannelsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all channels.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEventChannelsAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<EventChannelsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEventChannelsValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventChannelsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEventAlertCondition
     * @param eventAlertCondition  (required)
     * @param eventAlertConditionId Modify the alert-condition (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventAlertConditionCall(EventAlertCondition eventAlertCondition, String eventAlertConditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventAlertCondition;

        // create path and map variables
        String localVarPath = "/platform/4/event/alert-conditions/{EventAlertConditionId}"
            .replaceAll("\\{" + "EventAlertConditionId" + "\\}", apiClient.escapeString(eventAlertConditionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventAlertConditionValidateBeforeCall(EventAlertCondition eventAlertCondition, String eventAlertConditionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventAlertCondition' is set
        if (eventAlertCondition == null) {
            throw new ApiException("Missing the required parameter 'eventAlertCondition' when calling updateEventAlertCondition(Async)");
        }
        
        // verify the required parameter 'eventAlertConditionId' is set
        if (eventAlertConditionId == null) {
            throw new ApiException("Missing the required parameter 'eventAlertConditionId' when calling updateEventAlertCondition(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEventAlertConditionCall(eventAlertCondition, eventAlertConditionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the alert-condition
     * @param eventAlertCondition  (required)
     * @param eventAlertConditionId Modify the alert-condition (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateEventAlertCondition(EventAlertCondition eventAlertCondition, String eventAlertConditionId) throws ApiException {
        updateEventAlertConditionWithHttpInfo(eventAlertCondition, eventAlertConditionId);
    }

    /**
     * 
     * Modify the alert-condition
     * @param eventAlertCondition  (required)
     * @param eventAlertConditionId Modify the alert-condition (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateEventAlertConditionWithHttpInfo(EventAlertCondition eventAlertCondition, String eventAlertConditionId) throws ApiException {
        com.squareup.okhttp.Call call = updateEventAlertConditionValidateBeforeCall(eventAlertCondition, eventAlertConditionId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the alert-condition
     * @param eventAlertCondition  (required)
     * @param eventAlertConditionId Modify the alert-condition (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventAlertConditionAsync(EventAlertCondition eventAlertCondition, String eventAlertConditionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventAlertConditionValidateBeforeCall(eventAlertCondition, eventAlertConditionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEventChannel
     * @param eventChannel  (required)
     * @param eventChannelId Modify the channel. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventChannelCall(EventChannel eventChannel, String eventChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventChannel;

        // create path and map variables
        String localVarPath = "/platform/3/event/channels/{EventChannelId}"
            .replaceAll("\\{" + "EventChannelId" + "\\}", apiClient.escapeString(eventChannelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventChannelValidateBeforeCall(EventChannel eventChannel, String eventChannelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventChannel' is set
        if (eventChannel == null) {
            throw new ApiException("Missing the required parameter 'eventChannel' when calling updateEventChannel(Async)");
        }
        
        // verify the required parameter 'eventChannelId' is set
        if (eventChannelId == null) {
            throw new ApiException("Missing the required parameter 'eventChannelId' when calling updateEventChannel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEventChannelCall(eventChannel, eventChannelId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the channel.
     * @param eventChannel  (required)
     * @param eventChannelId Modify the channel. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateEventChannel(EventChannel eventChannel, String eventChannelId) throws ApiException {
        updateEventChannelWithHttpInfo(eventChannel, eventChannelId);
    }

    /**
     * 
     * Modify the channel.
     * @param eventChannel  (required)
     * @param eventChannelId Modify the channel. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateEventChannelWithHttpInfo(EventChannel eventChannel, String eventChannelId) throws ApiException {
        com.squareup.okhttp.Call call = updateEventChannelValidateBeforeCall(eventChannel, eventChannelId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the channel.
     * @param eventChannel  (required)
     * @param eventChannelId Modify the channel. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventChannelAsync(EventChannel eventChannel, String eventChannelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventChannelValidateBeforeCall(eventChannel, eventChannelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEventEventgroupOccurrence
     * @param eventEventgroupOccurrence  (required)
     * @param eventEventgroupOccurrenceId modify eventgroup occurrence. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventEventgroupOccurrenceCall(EventEventgroupOccurrence eventEventgroupOccurrence, String eventEventgroupOccurrenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventEventgroupOccurrence;

        // create path and map variables
        String localVarPath = "/platform/3/event/eventgroup-occurrences/{EventEventgroupOccurrenceId}"
            .replaceAll("\\{" + "EventEventgroupOccurrenceId" + "\\}", apiClient.escapeString(eventEventgroupOccurrenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventEventgroupOccurrenceValidateBeforeCall(EventEventgroupOccurrence eventEventgroupOccurrence, String eventEventgroupOccurrenceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventEventgroupOccurrence' is set
        if (eventEventgroupOccurrence == null) {
            throw new ApiException("Missing the required parameter 'eventEventgroupOccurrence' when calling updateEventEventgroupOccurrence(Async)");
        }
        
        // verify the required parameter 'eventEventgroupOccurrenceId' is set
        if (eventEventgroupOccurrenceId == null) {
            throw new ApiException("Missing the required parameter 'eventEventgroupOccurrenceId' when calling updateEventEventgroupOccurrence(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEventEventgroupOccurrenceCall(eventEventgroupOccurrence, eventEventgroupOccurrenceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * modify eventgroup occurrence.
     * @param eventEventgroupOccurrence  (required)
     * @param eventEventgroupOccurrenceId modify eventgroup occurrence. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateEventEventgroupOccurrence(EventEventgroupOccurrence eventEventgroupOccurrence, String eventEventgroupOccurrenceId) throws ApiException {
        updateEventEventgroupOccurrenceWithHttpInfo(eventEventgroupOccurrence, eventEventgroupOccurrenceId);
    }

    /**
     * 
     * modify eventgroup occurrence.
     * @param eventEventgroupOccurrence  (required)
     * @param eventEventgroupOccurrenceId modify eventgroup occurrence. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateEventEventgroupOccurrenceWithHttpInfo(EventEventgroupOccurrence eventEventgroupOccurrence, String eventEventgroupOccurrenceId) throws ApiException {
        com.squareup.okhttp.Call call = updateEventEventgroupOccurrenceValidateBeforeCall(eventEventgroupOccurrence, eventEventgroupOccurrenceId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * modify eventgroup occurrence.
     * @param eventEventgroupOccurrence  (required)
     * @param eventEventgroupOccurrenceId modify eventgroup occurrence. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventEventgroupOccurrenceAsync(EventEventgroupOccurrence eventEventgroupOccurrence, String eventEventgroupOccurrenceId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventEventgroupOccurrenceValidateBeforeCall(eventEventgroupOccurrence, eventEventgroupOccurrenceId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEventEventgroupOccurrences
     * @param eventEventgroupOccurrences  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventEventgroupOccurrencesCall(EventEventgroupOccurrence eventEventgroupOccurrences, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventEventgroupOccurrences;

        // create path and map variables
        String localVarPath = "/platform/3/event/eventgroup-occurrences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventEventgroupOccurrencesValidateBeforeCall(EventEventgroupOccurrence eventEventgroupOccurrences, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventEventgroupOccurrences' is set
        if (eventEventgroupOccurrences == null) {
            throw new ApiException("Missing the required parameter 'eventEventgroupOccurrences' when calling updateEventEventgroupOccurrences(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEventEventgroupOccurrencesCall(eventEventgroupOccurrences, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify all eventgroup occurrences, resolve or ignore all
     * @param eventEventgroupOccurrences  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateEventEventgroupOccurrences(EventEventgroupOccurrence eventEventgroupOccurrences) throws ApiException {
        updateEventEventgroupOccurrencesWithHttpInfo(eventEventgroupOccurrences);
    }

    /**
     * 
     * Modify all eventgroup occurrences, resolve or ignore all
     * @param eventEventgroupOccurrences  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateEventEventgroupOccurrencesWithHttpInfo(EventEventgroupOccurrence eventEventgroupOccurrences) throws ApiException {
        com.squareup.okhttp.Call call = updateEventEventgroupOccurrencesValidateBeforeCall(eventEventgroupOccurrences, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify all eventgroup occurrences, resolve or ignore all
     * @param eventEventgroupOccurrences  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventEventgroupOccurrencesAsync(EventEventgroupOccurrence eventEventgroupOccurrences, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventEventgroupOccurrencesValidateBeforeCall(eventEventgroupOccurrences, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateEventSettings
     * @param eventSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEventSettingsCall(EventSettings eventSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = eventSettings;

        // create path and map variables
        String localVarPath = "/platform/3/event/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEventSettingsValidateBeforeCall(EventSettings eventSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'eventSettings' is set
        if (eventSettings == null) {
            throw new ApiException("Missing the required parameter 'eventSettings' when calling updateEventSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEventSettingsCall(eventSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update settings
     * @param eventSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateEventSettings(EventSettings eventSettings) throws ApiException {
        updateEventSettingsWithHttpInfo(eventSettings);
    }

    /**
     * 
     * Update settings
     * @param eventSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateEventSettingsWithHttpInfo(EventSettings eventSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateEventSettingsValidateBeforeCall(eventSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update settings
     * @param eventSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEventSettingsAsync(EventSettings eventSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEventSettingsValidateBeforeCall(eventSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
