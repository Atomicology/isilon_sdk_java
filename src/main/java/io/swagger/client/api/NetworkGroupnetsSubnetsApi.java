/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.PoolsPoolInterfaces;
import io.swagger.client.model.PoolsPoolRule;
import io.swagger.client.model.PoolsPoolRuleCreateParams;
import io.swagger.client.model.PoolsPoolRules;
import io.swagger.client.model.PoolsPoolRulesExtended;
import io.swagger.client.model.PoolsPoolScResumeNode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkGroupnetsSubnetsApi {
    private ApiClient apiClient;

    public NetworkGroupnetsSubnetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkGroupnetsSubnetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPoolsPoolRebalanceIp
     * @param poolsPoolRebalanceIp  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolRebalanceIpCall(Empty poolsPoolRebalanceIp, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = poolsPoolRebalanceIp;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rebalance-ips"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPoolsPoolRebalanceIpValidateBeforeCall(Empty poolsPoolRebalanceIp, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolRebalanceIp' is set
        if (poolsPoolRebalanceIp == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolRebalanceIp' when calling createPoolsPoolRebalanceIp(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling createPoolsPoolRebalanceIp(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling createPoolsPoolRebalanceIp(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling createPoolsPoolRebalanceIp(Async)");
        }
        

        com.squareup.okhttp.Call call = createPoolsPoolRebalanceIpCall(poolsPoolRebalanceIp, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Rebalance IP addresses in specified pool.
     * @param poolsPoolRebalanceIp  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createPoolsPoolRebalanceIp(Empty poolsPoolRebalanceIp, String groupnet, String subnet, String pool) throws ApiException {
        ApiResponse<Empty> resp = createPoolsPoolRebalanceIpWithHttpInfo(poolsPoolRebalanceIp, groupnet, subnet, pool);
        return resp.getData();
    }

    /**
     * 
     * Rebalance IP addresses in specified pool.
     * @param poolsPoolRebalanceIp  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createPoolsPoolRebalanceIpWithHttpInfo(Empty poolsPoolRebalanceIp, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = createPoolsPoolRebalanceIpValidateBeforeCall(poolsPoolRebalanceIp, groupnet, subnet, pool, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rebalance IP addresses in specified pool.
     * @param poolsPoolRebalanceIp  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolRebalanceIpAsync(Empty poolsPoolRebalanceIp, String groupnet, String subnet, String pool, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPoolsPoolRebalanceIpValidateBeforeCall(poolsPoolRebalanceIp, groupnet, subnet, pool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPoolsPoolRule
     * @param poolsPoolRule  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolRuleCall(PoolsPoolRuleCreateParams poolsPoolRule, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = poolsPoolRule;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPoolsPoolRuleValidateBeforeCall(PoolsPoolRuleCreateParams poolsPoolRule, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolRule' is set
        if (poolsPoolRule == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolRule' when calling createPoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling createPoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling createPoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling createPoolsPoolRule(Async)");
        }
        

        com.squareup.okhttp.Call call = createPoolsPoolRuleCall(poolsPoolRule, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new rule.
     * @param poolsPoolRule  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createPoolsPoolRule(PoolsPoolRuleCreateParams poolsPoolRule, String groupnet, String subnet, String pool) throws ApiException {
        ApiResponse<CreateResponse> resp = createPoolsPoolRuleWithHttpInfo(poolsPoolRule, groupnet, subnet, pool);
        return resp.getData();
    }

    /**
     * 
     * Create a new rule.
     * @param poolsPoolRule  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createPoolsPoolRuleWithHttpInfo(PoolsPoolRuleCreateParams poolsPoolRule, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = createPoolsPoolRuleValidateBeforeCall(poolsPoolRule, groupnet, subnet, pool, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new rule.
     * @param poolsPoolRule  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolRuleAsync(PoolsPoolRuleCreateParams poolsPoolRule, String groupnet, String subnet, String pool, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPoolsPoolRuleValidateBeforeCall(poolsPoolRule, groupnet, subnet, pool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPoolsPoolScResumeNode
     * @param poolsPoolScResumeNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolScResumeNodeCall(PoolsPoolScResumeNode poolsPoolScResumeNode, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = poolsPoolScResumeNode;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-resume-nodes"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPoolsPoolScResumeNodeValidateBeforeCall(PoolsPoolScResumeNode poolsPoolScResumeNode, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolScResumeNode' is set
        if (poolsPoolScResumeNode == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolScResumeNode' when calling createPoolsPoolScResumeNode(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling createPoolsPoolScResumeNode(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling createPoolsPoolScResumeNode(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling createPoolsPoolScResumeNode(Async)");
        }
        

        com.squareup.okhttp.Call call = createPoolsPoolScResumeNodeCall(poolsPoolScResumeNode, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Resume suspended nodes.
     * @param poolsPoolScResumeNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createPoolsPoolScResumeNode(PoolsPoolScResumeNode poolsPoolScResumeNode, String groupnet, String subnet, String pool) throws ApiException {
        ApiResponse<Empty> resp = createPoolsPoolScResumeNodeWithHttpInfo(poolsPoolScResumeNode, groupnet, subnet, pool);
        return resp.getData();
    }

    /**
     * 
     * Resume suspended nodes.
     * @param poolsPoolScResumeNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createPoolsPoolScResumeNodeWithHttpInfo(PoolsPoolScResumeNode poolsPoolScResumeNode, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = createPoolsPoolScResumeNodeValidateBeforeCall(poolsPoolScResumeNode, groupnet, subnet, pool, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resume suspended nodes.
     * @param poolsPoolScResumeNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolScResumeNodeAsync(PoolsPoolScResumeNode poolsPoolScResumeNode, String groupnet, String subnet, String pool, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPoolsPoolScResumeNodeValidateBeforeCall(poolsPoolScResumeNode, groupnet, subnet, pool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPoolsPoolScSuspendNode
     * @param poolsPoolScSuspendNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolScSuspendNodeCall(PoolsPoolScResumeNode poolsPoolScSuspendNode, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = poolsPoolScSuspendNode;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-suspend-nodes"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPoolsPoolScSuspendNodeValidateBeforeCall(PoolsPoolScResumeNode poolsPoolScSuspendNode, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolScSuspendNode' is set
        if (poolsPoolScSuspendNode == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolScSuspendNode' when calling createPoolsPoolScSuspendNode(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling createPoolsPoolScSuspendNode(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling createPoolsPoolScSuspendNode(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling createPoolsPoolScSuspendNode(Async)");
        }
        

        com.squareup.okhttp.Call call = createPoolsPoolScSuspendNodeCall(poolsPoolScSuspendNode, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Suspend nodes.
     * @param poolsPoolScSuspendNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createPoolsPoolScSuspendNode(PoolsPoolScResumeNode poolsPoolScSuspendNode, String groupnet, String subnet, String pool) throws ApiException {
        ApiResponse<Empty> resp = createPoolsPoolScSuspendNodeWithHttpInfo(poolsPoolScSuspendNode, groupnet, subnet, pool);
        return resp.getData();
    }

    /**
     * 
     * Suspend nodes.
     * @param poolsPoolScSuspendNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createPoolsPoolScSuspendNodeWithHttpInfo(PoolsPoolScResumeNode poolsPoolScSuspendNode, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = createPoolsPoolScSuspendNodeValidateBeforeCall(poolsPoolScSuspendNode, groupnet, subnet, pool, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Suspend nodes.
     * @param poolsPoolScSuspendNode  (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPoolsPoolScSuspendNodeAsync(PoolsPoolScResumeNode poolsPoolScSuspendNode, String groupnet, String subnet, String pool, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPoolsPoolScSuspendNodeValidateBeforeCall(poolsPoolScSuspendNode, groupnet, subnet, pool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePoolsPoolRule
     * @param poolsPoolRuleId Delete a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePoolsPoolRuleCall(String poolsPoolRuleId, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}"
            .replaceAll("\\{" + "PoolsPoolRuleId" + "\\}", apiClient.escapeString(poolsPoolRuleId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePoolsPoolRuleValidateBeforeCall(String poolsPoolRuleId, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolRuleId' is set
        if (poolsPoolRuleId == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolRuleId' when calling deletePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling deletePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling deletePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling deletePoolsPoolRule(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePoolsPoolRuleCall(poolsPoolRuleId, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a network rule.
     * @param poolsPoolRuleId Delete a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePoolsPoolRule(String poolsPoolRuleId, String groupnet, String subnet, String pool) throws ApiException {
        deletePoolsPoolRuleWithHttpInfo(poolsPoolRuleId, groupnet, subnet, pool);
    }

    /**
     * 
     * Delete a network rule.
     * @param poolsPoolRuleId Delete a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePoolsPoolRuleWithHttpInfo(String poolsPoolRuleId, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = deletePoolsPoolRuleValidateBeforeCall(poolsPoolRuleId, groupnet, subnet, pool, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a network rule.
     * @param poolsPoolRuleId Delete a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePoolsPoolRuleAsync(String poolsPoolRuleId, String groupnet, String subnet, String pool, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePoolsPoolRuleValidateBeforeCall(poolsPoolRuleId, groupnet, subnet, pool, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPoolsPoolInterfaces
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param lnns Get a list of interfaces for the specified lnn. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoolsPoolInterfacesCall(String groupnet, String subnet, String pool, String sort, String resume, Integer limit, String dir, String lnns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/interfaces"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (lnns != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnns", lnns));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoolsPoolInterfacesValidateBeforeCall(String groupnet, String subnet, String pool, String sort, String resume, Integer limit, String dir, String lnns, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling getPoolsPoolInterfaces(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling getPoolsPoolInterfaces(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getPoolsPoolInterfaces(Async)");
        }
        

        com.squareup.okhttp.Call call = getPoolsPoolInterfacesCall(groupnet, subnet, pool, sort, resume, limit, dir, lnns, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of interfaces.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param lnns Get a list of interfaces for the specified lnn. (optional)
     * @return PoolsPoolInterfaces
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolsPoolInterfaces getPoolsPoolInterfaces(String groupnet, String subnet, String pool, String sort, String resume, Integer limit, String dir, String lnns) throws ApiException {
        ApiResponse<PoolsPoolInterfaces> resp = getPoolsPoolInterfacesWithHttpInfo(groupnet, subnet, pool, sort, resume, limit, dir, lnns);
        return resp.getData();
    }

    /**
     * 
     * Get a list of interfaces.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param lnns Get a list of interfaces for the specified lnn. (optional)
     * @return ApiResponse&lt;PoolsPoolInterfaces&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolsPoolInterfaces> getPoolsPoolInterfacesWithHttpInfo(String groupnet, String subnet, String pool, String sort, String resume, Integer limit, String dir, String lnns) throws ApiException {
        com.squareup.okhttp.Call call = getPoolsPoolInterfacesValidateBeforeCall(groupnet, subnet, pool, sort, resume, limit, dir, lnns, null, null);
        Type localVarReturnType = new TypeToken<PoolsPoolInterfaces>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of interfaces.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param lnns Get a list of interfaces for the specified lnn. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoolsPoolInterfacesAsync(String groupnet, String subnet, String pool, String sort, String resume, Integer limit, String dir, String lnns, final ApiCallback<PoolsPoolInterfaces> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoolsPoolInterfacesValidateBeforeCall(groupnet, subnet, pool, sort, resume, limit, dir, lnns, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolsPoolInterfaces>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPoolsPoolRule
     * @param poolsPoolRuleId View a single network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPoolsPoolRuleCall(String poolsPoolRuleId, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}"
            .replaceAll("\\{" + "PoolsPoolRuleId" + "\\}", apiClient.escapeString(poolsPoolRuleId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPoolsPoolRuleValidateBeforeCall(String poolsPoolRuleId, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolRuleId' is set
        if (poolsPoolRuleId == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolRuleId' when calling getPoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling getPoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling getPoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getPoolsPoolRule(Async)");
        }
        

        com.squareup.okhttp.Call call = getPoolsPoolRuleCall(poolsPoolRuleId, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single network rule.
     * @param poolsPoolRuleId View a single network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return PoolsPoolRules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolsPoolRules getPoolsPoolRule(String poolsPoolRuleId, String groupnet, String subnet, String pool) throws ApiException {
        ApiResponse<PoolsPoolRules> resp = getPoolsPoolRuleWithHttpInfo(poolsPoolRuleId, groupnet, subnet, pool);
        return resp.getData();
    }

    /**
     * 
     * View a single network rule.
     * @param poolsPoolRuleId View a single network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;PoolsPoolRules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolsPoolRules> getPoolsPoolRuleWithHttpInfo(String poolsPoolRuleId, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = getPoolsPoolRuleValidateBeforeCall(poolsPoolRuleId, groupnet, subnet, pool, null, null);
        Type localVarReturnType = new TypeToken<PoolsPoolRules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single network rule.
     * @param poolsPoolRuleId View a single network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPoolsPoolRuleAsync(String poolsPoolRuleId, String groupnet, String subnet, String pool, final ApiCallback<PoolsPoolRules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPoolsPoolRuleValidateBeforeCall(poolsPoolRuleId, groupnet, subnet, pool, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolsPoolRules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPoolsPoolRules
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPoolsPoolRulesCall(String groupnet, String subnet, String pool, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules"
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPoolsPoolRulesValidateBeforeCall(String groupnet, String subnet, String pool, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling listPoolsPoolRules(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling listPoolsPoolRules(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling listPoolsPoolRules(Async)");
        }
        

        com.squareup.okhttp.Call call = listPoolsPoolRulesCall(groupnet, subnet, pool, sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of network rules.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return PoolsPoolRulesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PoolsPoolRulesExtended listPoolsPoolRules(String groupnet, String subnet, String pool, String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<PoolsPoolRulesExtended> resp = listPoolsPoolRulesWithHttpInfo(groupnet, subnet, pool, sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * Get a list of network rules.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;PoolsPoolRulesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PoolsPoolRulesExtended> listPoolsPoolRulesWithHttpInfo(String groupnet, String subnet, String pool, String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listPoolsPoolRulesValidateBeforeCall(groupnet, subnet, pool, sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<PoolsPoolRulesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of network rules.
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPoolsPoolRulesAsync(String groupnet, String subnet, String pool, String sort, Integer limit, String dir, String resume, final ApiCallback<PoolsPoolRulesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPoolsPoolRulesValidateBeforeCall(groupnet, subnet, pool, sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PoolsPoolRulesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePoolsPoolRule
     * @param poolsPoolRule  (required)
     * @param poolsPoolRuleId Modify a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePoolsPoolRuleCall(PoolsPoolRule poolsPoolRule, String poolsPoolRuleId, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = poolsPoolRule;

        // create path and map variables
        String localVarPath = "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}"
            .replaceAll("\\{" + "PoolsPoolRuleId" + "\\}", apiClient.escapeString(poolsPoolRuleId.toString()))
            .replaceAll("\\{" + "Groupnet" + "\\}", apiClient.escapeString(groupnet.toString()))
            .replaceAll("\\{" + "Subnet" + "\\}", apiClient.escapeString(subnet.toString()))
            .replaceAll("\\{" + "Pool" + "\\}", apiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePoolsPoolRuleValidateBeforeCall(PoolsPoolRule poolsPoolRule, String poolsPoolRuleId, String groupnet, String subnet, String pool, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'poolsPoolRule' is set
        if (poolsPoolRule == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolRule' when calling updatePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'poolsPoolRuleId' is set
        if (poolsPoolRuleId == null) {
            throw new ApiException("Missing the required parameter 'poolsPoolRuleId' when calling updatePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'groupnet' is set
        if (groupnet == null) {
            throw new ApiException("Missing the required parameter 'groupnet' when calling updatePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'subnet' is set
        if (subnet == null) {
            throw new ApiException("Missing the required parameter 'subnet' when calling updatePoolsPoolRule(Async)");
        }
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling updatePoolsPoolRule(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePoolsPoolRuleCall(poolsPoolRule, poolsPoolRuleId, groupnet, subnet, pool, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a network rule.
     * @param poolsPoolRule  (required)
     * @param poolsPoolRuleId Modify a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePoolsPoolRule(PoolsPoolRule poolsPoolRule, String poolsPoolRuleId, String groupnet, String subnet, String pool) throws ApiException {
        updatePoolsPoolRuleWithHttpInfo(poolsPoolRule, poolsPoolRuleId, groupnet, subnet, pool);
    }

    /**
     * 
     * Modify a network rule.
     * @param poolsPoolRule  (required)
     * @param poolsPoolRuleId Modify a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePoolsPoolRuleWithHttpInfo(PoolsPoolRule poolsPoolRule, String poolsPoolRuleId, String groupnet, String subnet, String pool) throws ApiException {
        com.squareup.okhttp.Call call = updatePoolsPoolRuleValidateBeforeCall(poolsPoolRule, poolsPoolRuleId, groupnet, subnet, pool, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a network rule.
     * @param poolsPoolRule  (required)
     * @param poolsPoolRuleId Modify a network rule. (required)
     * @param groupnet  (required)
     * @param subnet  (required)
     * @param pool  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePoolsPoolRuleAsync(PoolsPoolRule poolsPoolRule, String poolsPoolRuleId, String groupnet, String subnet, String pool, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePoolsPoolRuleValidateBeforeCall(poolsPoolRule, poolsPoolRuleId, groupnet, subnet, pool, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
