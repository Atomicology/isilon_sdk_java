/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.ReportSubreports;
import io.swagger.client.model.ReportSubreportsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SyncReportsApi {
    private ApiClient apiClient;

    public SyncReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SyncReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getReportSubreport
     * @param reportSubreportId View a single SyncIQ subreport. (required)
     * @param rid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportSubreportCall(String reportSubreportId, String rid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/reports/{Rid}/subreports/{ReportSubreportId}"
            .replaceAll("\\{" + "ReportSubreportId" + "\\}", apiClient.escapeString(reportSubreportId.toString()))
            .replaceAll("\\{" + "Rid" + "\\}", apiClient.escapeString(rid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportSubreportValidateBeforeCall(String reportSubreportId, String rid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportSubreportId' is set
        if (reportSubreportId == null) {
            throw new ApiException("Missing the required parameter 'reportSubreportId' when calling getReportSubreport(Async)");
        }
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling getReportSubreport(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportSubreportCall(reportSubreportId, rid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ subreport.
     * @param reportSubreportId View a single SyncIQ subreport. (required)
     * @param rid  (required)
     * @return ReportSubreports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportSubreports getReportSubreport(String reportSubreportId, String rid) throws ApiException {
        ApiResponse<ReportSubreports> resp = getReportSubreportWithHttpInfo(reportSubreportId, rid);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ subreport.
     * @param reportSubreportId View a single SyncIQ subreport. (required)
     * @param rid  (required)
     * @return ApiResponse&lt;ReportSubreports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportSubreports> getReportSubreportWithHttpInfo(String reportSubreportId, String rid) throws ApiException {
        com.squareup.okhttp.Call call = getReportSubreportValidateBeforeCall(reportSubreportId, rid, null, null);
        Type localVarReturnType = new TypeToken<ReportSubreports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ subreport.
     * @param reportSubreportId View a single SyncIQ subreport. (required)
     * @param rid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportSubreportAsync(String reportSubreportId, String rid, final ApiCallback<ReportSubreports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportSubreportValidateBeforeCall(reportSubreportId, rid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportSubreports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportSubreports
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportSubreportsCall(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/reports/{Rid}/subreports"
            .replaceAll("\\{" + "Rid" + "\\}", apiClient.escapeString(rid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (newerThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newer_than", newerThan));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportSubreportsValidateBeforeCall(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling getReportSubreports(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportSubreportsCall(rid, sort, resume, newerThan, state, limit, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of SyncIQ subreports for a report.
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return ReportSubreportsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportSubreportsExtended getReportSubreports(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir) throws ApiException {
        ApiResponse<ReportSubreportsExtended> resp = getReportSubreportsWithHttpInfo(rid, sort, resume, newerThan, state, limit, dir);
        return resp.getData();
    }

    /**
     * 
     * Get a list of SyncIQ subreports for a report.
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;ReportSubreportsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportSubreportsExtended> getReportSubreportsWithHttpInfo(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getReportSubreportsValidateBeforeCall(rid, sort, resume, newerThan, state, limit, dir, null, null);
        Type localVarReturnType = new TypeToken<ReportSubreportsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of SyncIQ subreports for a report.
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportSubreportsAsync(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir, final ApiCallback<ReportSubreportsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportSubreportsValidateBeforeCall(rid, sort, resume, newerThan, state, limit, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportSubreportsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
