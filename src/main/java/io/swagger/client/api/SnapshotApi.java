/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateSnapshotAliasResponse;
import io.swagger.client.model.CreateSnapshotChangelistResponse;
import io.swagger.client.model.CreateSnapshotRepstateResponse;
import io.swagger.client.model.CreateSnapshotScheduleResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.LicenseLicense;
import io.swagger.client.model.SnapshotAlias;
import io.swagger.client.model.SnapshotAliasCreateParams;
import io.swagger.client.model.SnapshotAliases;
import io.swagger.client.model.SnapshotAliasesExtended;
import io.swagger.client.model.SnapshotChangelists;
import io.swagger.client.model.SnapshotChangelistsExtended;
import io.swagger.client.model.SnapshotPending;
import io.swagger.client.model.SnapshotRepstates;
import io.swagger.client.model.SnapshotRepstatesExtended;
import io.swagger.client.model.SnapshotSchedule;
import io.swagger.client.model.SnapshotScheduleCreateParams;
import io.swagger.client.model.SnapshotSchedules;
import io.swagger.client.model.SnapshotSchedulesExtended;
import io.swagger.client.model.SnapshotSettings;
import io.swagger.client.model.SnapshotSettingsExtended;
import io.swagger.client.model.SnapshotSnapshot;
import io.swagger.client.model.SnapshotSnapshotCreateParams;
import io.swagger.client.model.SnapshotSnapshotExtended;
import io.swagger.client.model.SnapshotSnapshots;
import io.swagger.client.model.SnapshotSnapshotsExtended;
import io.swagger.client.model.SnapshotSnapshotsSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnapshotApi {
    private ApiClient apiClient;

    public SnapshotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnapshotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSnapshotAlias
     * @param snapshotAlias  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSnapshotAliasCall(SnapshotAliasCreateParams snapshotAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotAlias;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSnapshotAliasValidateBeforeCall(SnapshotAliasCreateParams snapshotAlias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotAlias' is set
        if (snapshotAlias == null) {
            throw new ApiException("Missing the required parameter 'snapshotAlias' when calling createSnapshotAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = createSnapshotAliasCall(snapshotAlias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new snapshot alias.
     * @param snapshotAlias  (required)
     * @return CreateSnapshotAliasResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSnapshotAliasResponse createSnapshotAlias(SnapshotAliasCreateParams snapshotAlias) throws ApiException {
        ApiResponse<CreateSnapshotAliasResponse> resp = createSnapshotAliasWithHttpInfo(snapshotAlias);
        return resp.getData();
    }

    /**
     * 
     * Create a new snapshot alias.
     * @param snapshotAlias  (required)
     * @return ApiResponse&lt;CreateSnapshotAliasResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSnapshotAliasResponse> createSnapshotAliasWithHttpInfo(SnapshotAliasCreateParams snapshotAlias) throws ApiException {
        com.squareup.okhttp.Call call = createSnapshotAliasValidateBeforeCall(snapshotAlias, null, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotAliasResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new snapshot alias.
     * @param snapshotAlias  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSnapshotAliasAsync(SnapshotAliasCreateParams snapshotAlias, final ApiCallback<CreateSnapshotAliasResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSnapshotAliasValidateBeforeCall(snapshotAlias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSnapshotAliasResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSnapshotChangelist
     * @param snapshotChangelist  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSnapshotChangelistCall(SnapshotChangelists snapshotChangelist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotChangelist;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/changelists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSnapshotChangelistValidateBeforeCall(SnapshotChangelists snapshotChangelist, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotChangelist' is set
        if (snapshotChangelist == null) {
            throw new ApiException("Missing the required parameter 'snapshotChangelist' when calling createSnapshotChangelist(Async)");
        }
        

        com.squareup.okhttp.Call call = createSnapshotChangelistCall(snapshotChangelist, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new changelist.
     * @param snapshotChangelist  (required)
     * @return CreateSnapshotChangelistResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSnapshotChangelistResponse createSnapshotChangelist(SnapshotChangelists snapshotChangelist) throws ApiException {
        ApiResponse<CreateSnapshotChangelistResponse> resp = createSnapshotChangelistWithHttpInfo(snapshotChangelist);
        return resp.getData();
    }

    /**
     * 
     * Create a new changelist.
     * @param snapshotChangelist  (required)
     * @return ApiResponse&lt;CreateSnapshotChangelistResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSnapshotChangelistResponse> createSnapshotChangelistWithHttpInfo(SnapshotChangelists snapshotChangelist) throws ApiException {
        com.squareup.okhttp.Call call = createSnapshotChangelistValidateBeforeCall(snapshotChangelist, null, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotChangelistResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new changelist.
     * @param snapshotChangelist  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSnapshotChangelistAsync(SnapshotChangelists snapshotChangelist, final ApiCallback<CreateSnapshotChangelistResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSnapshotChangelistValidateBeforeCall(snapshotChangelist, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSnapshotChangelistResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSnapshotRepstate
     * @param snapshotRepstate  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSnapshotRepstateCall(SnapshotRepstates snapshotRepstate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotRepstate;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/repstates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSnapshotRepstateValidateBeforeCall(SnapshotRepstates snapshotRepstate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotRepstate' is set
        if (snapshotRepstate == null) {
            throw new ApiException("Missing the required parameter 'snapshotRepstate' when calling createSnapshotRepstate(Async)");
        }
        

        com.squareup.okhttp.Call call = createSnapshotRepstateCall(snapshotRepstate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new repstates.
     * @param snapshotRepstate  (required)
     * @return CreateSnapshotRepstateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSnapshotRepstateResponse createSnapshotRepstate(SnapshotRepstates snapshotRepstate) throws ApiException {
        ApiResponse<CreateSnapshotRepstateResponse> resp = createSnapshotRepstateWithHttpInfo(snapshotRepstate);
        return resp.getData();
    }

    /**
     * 
     * Create a new repstates.
     * @param snapshotRepstate  (required)
     * @return ApiResponse&lt;CreateSnapshotRepstateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSnapshotRepstateResponse> createSnapshotRepstateWithHttpInfo(SnapshotRepstates snapshotRepstate) throws ApiException {
        com.squareup.okhttp.Call call = createSnapshotRepstateValidateBeforeCall(snapshotRepstate, null, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotRepstateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new repstates.
     * @param snapshotRepstate  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSnapshotRepstateAsync(SnapshotRepstates snapshotRepstate, final ApiCallback<CreateSnapshotRepstateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSnapshotRepstateValidateBeforeCall(snapshotRepstate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSnapshotRepstateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSnapshotSchedule
     * @param snapshotSchedule  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSnapshotScheduleCall(SnapshotScheduleCreateParams snapshotSchedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotSchedule;

        // create path and map variables
        String localVarPath = "/platform/3/snapshot/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSnapshotScheduleValidateBeforeCall(SnapshotScheduleCreateParams snapshotSchedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSchedule' is set
        if (snapshotSchedule == null) {
            throw new ApiException("Missing the required parameter 'snapshotSchedule' when calling createSnapshotSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = createSnapshotScheduleCall(snapshotSchedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new schedule.
     * @param snapshotSchedule  (required)
     * @return CreateSnapshotScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSnapshotScheduleResponse createSnapshotSchedule(SnapshotScheduleCreateParams snapshotSchedule) throws ApiException {
        ApiResponse<CreateSnapshotScheduleResponse> resp = createSnapshotScheduleWithHttpInfo(snapshotSchedule);
        return resp.getData();
    }

    /**
     * 
     * Create a new schedule.
     * @param snapshotSchedule  (required)
     * @return ApiResponse&lt;CreateSnapshotScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSnapshotScheduleResponse> createSnapshotScheduleWithHttpInfo(SnapshotScheduleCreateParams snapshotSchedule) throws ApiException {
        com.squareup.okhttp.Call call = createSnapshotScheduleValidateBeforeCall(snapshotSchedule, null, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotScheduleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new schedule.
     * @param snapshotSchedule  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSnapshotScheduleAsync(SnapshotScheduleCreateParams snapshotSchedule, final ApiCallback<CreateSnapshotScheduleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSnapshotScheduleValidateBeforeCall(snapshotSchedule, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSnapshotScheduleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSnapshotSnapshot
     * @param snapshotSnapshot  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSnapshotSnapshotCall(SnapshotSnapshotCreateParams snapshotSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotSnapshot;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSnapshotSnapshotValidateBeforeCall(SnapshotSnapshotCreateParams snapshotSnapshot, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSnapshot' is set
        if (snapshotSnapshot == null) {
            throw new ApiException("Missing the required parameter 'snapshotSnapshot' when calling createSnapshotSnapshot(Async)");
        }
        

        com.squareup.okhttp.Call call = createSnapshotSnapshotCall(snapshotSnapshot, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new snapshot.
     * @param snapshotSnapshot  (required)
     * @return SnapshotSnapshotExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSnapshotExtended createSnapshotSnapshot(SnapshotSnapshotCreateParams snapshotSnapshot) throws ApiException {
        ApiResponse<SnapshotSnapshotExtended> resp = createSnapshotSnapshotWithHttpInfo(snapshotSnapshot);
        return resp.getData();
    }

    /**
     * 
     * Create a new snapshot.
     * @param snapshotSnapshot  (required)
     * @return ApiResponse&lt;SnapshotSnapshotExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSnapshotExtended> createSnapshotSnapshotWithHttpInfo(SnapshotSnapshotCreateParams snapshotSnapshot) throws ApiException {
        com.squareup.okhttp.Call call = createSnapshotSnapshotValidateBeforeCall(snapshotSnapshot, null, null);
        Type localVarReturnType = new TypeToken<SnapshotSnapshotExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new snapshot.
     * @param snapshotSnapshot  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSnapshotSnapshotAsync(SnapshotSnapshotCreateParams snapshotSnapshot, final ApiCallback<SnapshotSnapshotExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSnapshotSnapshotValidateBeforeCall(snapshotSnapshot, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSnapshotExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotAlias
     * @param snapshotAliasId Delete the snapshot alias (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotAliasCall(String snapshotAliasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/aliases/{SnapshotAliasId}"
            .replaceAll("\\{" + "SnapshotAliasId" + "\\}", apiClient.escapeString(snapshotAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotAliasValidateBeforeCall(String snapshotAliasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotAliasId' is set
        if (snapshotAliasId == null) {
            throw new ApiException("Missing the required parameter 'snapshotAliasId' when calling deleteSnapshotAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotAliasCall(snapshotAliasId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the snapshot alias
     * @param snapshotAliasId Delete the snapshot alias (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotAlias(String snapshotAliasId) throws ApiException {
        deleteSnapshotAliasWithHttpInfo(snapshotAliasId);
    }

    /**
     * 
     * Delete the snapshot alias
     * @param snapshotAliasId Delete the snapshot alias (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotAliasWithHttpInfo(String snapshotAliasId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotAliasValidateBeforeCall(snapshotAliasId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the snapshot alias
     * @param snapshotAliasId Delete the snapshot alias (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotAliasAsync(String snapshotAliasId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotAliasValidateBeforeCall(snapshotAliasId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotAliases
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotAliasesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotAliasesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSnapshotAliasesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all or matching snapshot aliases.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotAliases() throws ApiException {
        deleteSnapshotAliasesWithHttpInfo();
    }

    /**
     * 
     * Delete all or matching snapshot aliases.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotAliasesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotAliasesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all or matching snapshot aliases.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotAliasesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotAliasesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotChangelist
     * @param snapshotChangelistId Delete the specified changelist. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotChangelistCall(String snapshotChangelistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/changelists/{SnapshotChangelistId}"
            .replaceAll("\\{" + "SnapshotChangelistId" + "\\}", apiClient.escapeString(snapshotChangelistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotChangelistValidateBeforeCall(String snapshotChangelistId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotChangelistId' is set
        if (snapshotChangelistId == null) {
            throw new ApiException("Missing the required parameter 'snapshotChangelistId' when calling deleteSnapshotChangelist(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotChangelistCall(snapshotChangelistId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the specified changelist.
     * @param snapshotChangelistId Delete the specified changelist. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotChangelist(String snapshotChangelistId) throws ApiException {
        deleteSnapshotChangelistWithHttpInfo(snapshotChangelistId);
    }

    /**
     * 
     * Delete the specified changelist.
     * @param snapshotChangelistId Delete the specified changelist. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotChangelistWithHttpInfo(String snapshotChangelistId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotChangelistValidateBeforeCall(snapshotChangelistId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the specified changelist.
     * @param snapshotChangelistId Delete the specified changelist. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotChangelistAsync(String snapshotChangelistId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotChangelistValidateBeforeCall(snapshotChangelistId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotRepstate
     * @param snapshotRepstateId Delete the specified repstate. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotRepstateCall(String snapshotRepstateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/repstates/{SnapshotRepstateId}"
            .replaceAll("\\{" + "SnapshotRepstateId" + "\\}", apiClient.escapeString(snapshotRepstateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotRepstateValidateBeforeCall(String snapshotRepstateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotRepstateId' is set
        if (snapshotRepstateId == null) {
            throw new ApiException("Missing the required parameter 'snapshotRepstateId' when calling deleteSnapshotRepstate(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotRepstateCall(snapshotRepstateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the specified repstate.
     * @param snapshotRepstateId Delete the specified repstate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotRepstate(String snapshotRepstateId) throws ApiException {
        deleteSnapshotRepstateWithHttpInfo(snapshotRepstateId);
    }

    /**
     * 
     * Delete the specified repstate.
     * @param snapshotRepstateId Delete the specified repstate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotRepstateWithHttpInfo(String snapshotRepstateId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotRepstateValidateBeforeCall(snapshotRepstateId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the specified repstate.
     * @param snapshotRepstateId Delete the specified repstate. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotRepstateAsync(String snapshotRepstateId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotRepstateValidateBeforeCall(snapshotRepstateId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotSchedule
     * @param snapshotScheduleId Delete the schedule. This does not affect already created snapshots. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotScheduleCall(String snapshotScheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/snapshot/schedules/{SnapshotScheduleId}"
            .replaceAll("\\{" + "SnapshotScheduleId" + "\\}", apiClient.escapeString(snapshotScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotScheduleValidateBeforeCall(String snapshotScheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotScheduleId' is set
        if (snapshotScheduleId == null) {
            throw new ApiException("Missing the required parameter 'snapshotScheduleId' when calling deleteSnapshotSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotScheduleCall(snapshotScheduleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the schedule. This does not affect already created snapshots.
     * @param snapshotScheduleId Delete the schedule. This does not affect already created snapshots. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotSchedule(String snapshotScheduleId) throws ApiException {
        deleteSnapshotScheduleWithHttpInfo(snapshotScheduleId);
    }

    /**
     * 
     * Delete the schedule. This does not affect already created snapshots.
     * @param snapshotScheduleId Delete the schedule. This does not affect already created snapshots. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotScheduleWithHttpInfo(String snapshotScheduleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotScheduleValidateBeforeCall(snapshotScheduleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the schedule. This does not affect already created snapshots.
     * @param snapshotScheduleId Delete the schedule. This does not affect already created snapshots. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotScheduleAsync(String snapshotScheduleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotScheduleValidateBeforeCall(snapshotScheduleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotSchedules
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotSchedulesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/snapshot/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotSchedulesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSnapshotSchedulesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all snapshot schedules.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotSchedules() throws ApiException {
        deleteSnapshotSchedulesWithHttpInfo();
    }

    /**
     * 
     * Delete all snapshot schedules.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotSchedulesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotSchedulesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all snapshot schedules.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotSchedulesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotSchedulesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotSnapshot
     * @param snapshotSnapshotId Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotSnapshotCall(String snapshotSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{SnapshotSnapshotId}"
            .replaceAll("\\{" + "SnapshotSnapshotId" + "\\}", apiClient.escapeString(snapshotSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotSnapshotValidateBeforeCall(String snapshotSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSnapshotId' is set
        if (snapshotSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotSnapshotId' when calling deleteSnapshotSnapshot(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotSnapshotCall(snapshotSnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.
     * @param snapshotSnapshotId Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotSnapshot(String snapshotSnapshotId) throws ApiException {
        deleteSnapshotSnapshotWithHttpInfo(snapshotSnapshotId);
    }

    /**
     * 
     * Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.
     * @param snapshotSnapshotId Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotSnapshotWithHttpInfo(String snapshotSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotSnapshotValidateBeforeCall(snapshotSnapshotId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.
     * @param snapshotSnapshotId Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotSnapshotAsync(String snapshotSnapshotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotSnapshotValidateBeforeCall(snapshotSnapshotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotSnapshots
     * @param type Only list snapshots matching this type. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotSnapshotsCall(String type, String schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (schedule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("schedule", schedule));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotSnapshotsValidateBeforeCall(String type, String schedule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSnapshotSnapshotsCall(type, schedule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all or matching snapshots.
     * @param type Only list snapshots matching this type. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotSnapshots(String type, String schedule) throws ApiException {
        deleteSnapshotSnapshotsWithHttpInfo(type, schedule);
    }

    /**
     * 
     * Delete all or matching snapshots.
     * @param type Only list snapshots matching this type. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotSnapshotsWithHttpInfo(String type, String schedule) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotSnapshotsValidateBeforeCall(type, schedule, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all or matching snapshots.
     * @param type Only list snapshots matching this type. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotSnapshotsAsync(String type, String schedule, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotSnapshotsValidateBeforeCall(type, schedule, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getSnapshotAlias
     * @param snapshotAliasId Retrieve snapshot alias information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotAliasCall(String snapshotAliasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/aliases/{SnapshotAliasId}"
            .replaceAll("\\{" + "SnapshotAliasId" + "\\}", apiClient.escapeString(snapshotAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotAliasValidateBeforeCall(String snapshotAliasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotAliasId' is set
        if (snapshotAliasId == null) {
            throw new ApiException("Missing the required parameter 'snapshotAliasId' when calling getSnapshotAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotAliasCall(snapshotAliasId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve snapshot alias information.
     * @param snapshotAliasId Retrieve snapshot alias information. (required)
     * @return SnapshotAliases
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotAliases getSnapshotAlias(String snapshotAliasId) throws ApiException {
        ApiResponse<SnapshotAliases> resp = getSnapshotAliasWithHttpInfo(snapshotAliasId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve snapshot alias information.
     * @param snapshotAliasId Retrieve snapshot alias information. (required)
     * @return ApiResponse&lt;SnapshotAliases&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotAliases> getSnapshotAliasWithHttpInfo(String snapshotAliasId) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotAliasValidateBeforeCall(snapshotAliasId, null, null);
        Type localVarReturnType = new TypeToken<SnapshotAliases>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve snapshot alias information.
     * @param snapshotAliasId Retrieve snapshot alias information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotAliasAsync(String snapshotAliasId, final ApiCallback<SnapshotAliases> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotAliasValidateBeforeCall(snapshotAliasId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotAliases>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotChangelist
     * @param snapshotChangelistId Retrieve basic information on a changelist. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotChangelistCall(String snapshotChangelistId, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/changelists/{SnapshotChangelistId}"
            .replaceAll("\\{" + "SnapshotChangelistId" + "\\}", apiClient.escapeString(snapshotChangelistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotChangelistValidateBeforeCall(String snapshotChangelistId, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotChangelistId' is set
        if (snapshotChangelistId == null) {
            throw new ApiException("Missing the required parameter 'snapshotChangelistId' when calling getSnapshotChangelist(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotChangelistCall(snapshotChangelistId, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve basic information on a changelist.
     * @param snapshotChangelistId Retrieve basic information on a changelist. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotChangelists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotChangelists getSnapshotChangelist(String snapshotChangelistId, Integer limit, String resume) throws ApiException {
        ApiResponse<SnapshotChangelists> resp = getSnapshotChangelistWithHttpInfo(snapshotChangelistId, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Retrieve basic information on a changelist.
     * @param snapshotChangelistId Retrieve basic information on a changelist. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotChangelists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotChangelists> getSnapshotChangelistWithHttpInfo(String snapshotChangelistId, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotChangelistValidateBeforeCall(snapshotChangelistId, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotChangelists>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve basic information on a changelist.
     * @param snapshotChangelistId Retrieve basic information on a changelist. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotChangelistAsync(String snapshotChangelistId, Integer limit, String resume, final ApiCallback<SnapshotChangelists> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotChangelistValidateBeforeCall(snapshotChangelistId, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotChangelists>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotLicense
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotLicenseCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/snapshot/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotLicenseValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSnapshotLicenseCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve license information.
     * @return LicenseLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseLicense getSnapshotLicense() throws ApiException {
        ApiResponse<LicenseLicense> resp = getSnapshotLicenseWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve license information.
     * @return ApiResponse&lt;LicenseLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseLicense> getSnapshotLicenseWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotLicenseValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LicenseLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve license information.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotLicenseAsync(final ApiCallback<LicenseLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotLicenseValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotPending
     * @param limit Return no more than this many result at once (see resume). (optional)
     * @param begin Unix Epoch time to start generating matches. Default is now. (optional)
     * @param schedule Limit output only to the named schedule. (optional)
     * @param end Unix Epoch time to end generating matches. Default is forever. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotPendingCall(Integer limit, Integer begin, String schedule, Integer end, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (schedule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("schedule", schedule));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotPendingValidateBeforeCall(Integer limit, Integer begin, String schedule, Integer end, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSnapshotPendingCall(limit, begin, schedule, end, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return list of snapshots to be taken.
     * @param limit Return no more than this many result at once (see resume). (optional)
     * @param begin Unix Epoch time to start generating matches. Default is now. (optional)
     * @param schedule Limit output only to the named schedule. (optional)
     * @param end Unix Epoch time to end generating matches. Default is forever. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotPending
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotPending getSnapshotPending(Integer limit, Integer begin, String schedule, Integer end, String resume) throws ApiException {
        ApiResponse<SnapshotPending> resp = getSnapshotPendingWithHttpInfo(limit, begin, schedule, end, resume);
        return resp.getData();
    }

    /**
     * 
     * Return list of snapshots to be taken.
     * @param limit Return no more than this many result at once (see resume). (optional)
     * @param begin Unix Epoch time to start generating matches. Default is now. (optional)
     * @param schedule Limit output only to the named schedule. (optional)
     * @param end Unix Epoch time to end generating matches. Default is forever. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotPending&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotPending> getSnapshotPendingWithHttpInfo(Integer limit, Integer begin, String schedule, Integer end, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotPendingValidateBeforeCall(limit, begin, schedule, end, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotPending>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return list of snapshots to be taken.
     * @param limit Return no more than this many result at once (see resume). (optional)
     * @param begin Unix Epoch time to start generating matches. Default is now. (optional)
     * @param schedule Limit output only to the named schedule. (optional)
     * @param end Unix Epoch time to end generating matches. Default is forever. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotPendingAsync(Integer limit, Integer begin, String schedule, Integer end, String resume, final ApiCallback<SnapshotPending> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotPendingValidateBeforeCall(limit, begin, schedule, end, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotPending>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotRepstate
     * @param snapshotRepstateId Retrieve basic information on a repstate. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotRepstateCall(String snapshotRepstateId, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/repstates/{SnapshotRepstateId}"
            .replaceAll("\\{" + "SnapshotRepstateId" + "\\}", apiClient.escapeString(snapshotRepstateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotRepstateValidateBeforeCall(String snapshotRepstateId, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotRepstateId' is set
        if (snapshotRepstateId == null) {
            throw new ApiException("Missing the required parameter 'snapshotRepstateId' when calling getSnapshotRepstate(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotRepstateCall(snapshotRepstateId, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve basic information on a repstate.
     * @param snapshotRepstateId Retrieve basic information on a repstate. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotRepstates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotRepstates getSnapshotRepstate(String snapshotRepstateId, Integer limit, String resume) throws ApiException {
        ApiResponse<SnapshotRepstates> resp = getSnapshotRepstateWithHttpInfo(snapshotRepstateId, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Retrieve basic information on a repstate.
     * @param snapshotRepstateId Retrieve basic information on a repstate. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotRepstates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotRepstates> getSnapshotRepstateWithHttpInfo(String snapshotRepstateId, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotRepstateValidateBeforeCall(snapshotRepstateId, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotRepstates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve basic information on a repstate.
     * @param snapshotRepstateId Retrieve basic information on a repstate. (required)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotRepstateAsync(String snapshotRepstateId, Integer limit, String resume, final ApiCallback<SnapshotRepstates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotRepstateValidateBeforeCall(snapshotRepstateId, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotRepstates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotSchedule
     * @param snapshotScheduleId Retrieve the schedule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotScheduleCall(String snapshotScheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/snapshot/schedules/{SnapshotScheduleId}"
            .replaceAll("\\{" + "SnapshotScheduleId" + "\\}", apiClient.escapeString(snapshotScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotScheduleValidateBeforeCall(String snapshotScheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotScheduleId' is set
        if (snapshotScheduleId == null) {
            throw new ApiException("Missing the required parameter 'snapshotScheduleId' when calling getSnapshotSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotScheduleCall(snapshotScheduleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the schedule.
     * @param snapshotScheduleId Retrieve the schedule. (required)
     * @return SnapshotSchedules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSchedules getSnapshotSchedule(String snapshotScheduleId) throws ApiException {
        ApiResponse<SnapshotSchedules> resp = getSnapshotScheduleWithHttpInfo(snapshotScheduleId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the schedule.
     * @param snapshotScheduleId Retrieve the schedule. (required)
     * @return ApiResponse&lt;SnapshotSchedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSchedules> getSnapshotScheduleWithHttpInfo(String snapshotScheduleId) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotScheduleValidateBeforeCall(snapshotScheduleId, null, null);
        Type localVarReturnType = new TypeToken<SnapshotSchedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the schedule.
     * @param snapshotScheduleId Retrieve the schedule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotScheduleAsync(String snapshotScheduleId, final ApiCallback<SnapshotSchedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotScheduleValidateBeforeCall(snapshotScheduleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSchedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSnapshotSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all settings
     * @return SnapshotSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSettings getSnapshotSettings() throws ApiException {
        ApiResponse<SnapshotSettings> resp = getSnapshotSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all settings
     * @return ApiResponse&lt;SnapshotSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSettings> getSnapshotSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SnapshotSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all settings
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotSettingsAsync(final ApiCallback<SnapshotSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotSnapshot
     * @param snapshotSnapshotId Retrieve snapshot information. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotSnapshotCall(String snapshotSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{SnapshotSnapshotId}"
            .replaceAll("\\{" + "SnapshotSnapshotId" + "\\}", apiClient.escapeString(snapshotSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotSnapshotValidateBeforeCall(String snapshotSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSnapshotId' is set
        if (snapshotSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotSnapshotId' when calling getSnapshotSnapshot(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotSnapshotCall(snapshotSnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve snapshot information.
     * @param snapshotSnapshotId Retrieve snapshot information. (required)
     * @return SnapshotSnapshots
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSnapshots getSnapshotSnapshot(String snapshotSnapshotId) throws ApiException {
        ApiResponse<SnapshotSnapshots> resp = getSnapshotSnapshotWithHttpInfo(snapshotSnapshotId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve snapshot information.
     * @param snapshotSnapshotId Retrieve snapshot information. (required)
     * @return ApiResponse&lt;SnapshotSnapshots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSnapshots> getSnapshotSnapshotWithHttpInfo(String snapshotSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotSnapshotValidateBeforeCall(snapshotSnapshotId, null, null);
        Type localVarReturnType = new TypeToken<SnapshotSnapshots>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve snapshot information.
     * @param snapshotSnapshotId Retrieve snapshot information. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotSnapshotAsync(String snapshotSnapshotId, final ApiCallback<SnapshotSnapshots> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotSnapshotValidateBeforeCall(snapshotSnapshotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSnapshots>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshotSnapshotsSummary
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotSnapshotsSummaryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotSnapshotsSummaryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSnapshotSnapshotsSummaryCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return summary information about snapshots.
     * @return SnapshotSnapshotsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSnapshotsSummary getSnapshotSnapshotsSummary() throws ApiException {
        ApiResponse<SnapshotSnapshotsSummary> resp = getSnapshotSnapshotsSummaryWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Return summary information about snapshots.
     * @return ApiResponse&lt;SnapshotSnapshotsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSnapshotsSummary> getSnapshotSnapshotsSummaryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotSnapshotsSummaryValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SnapshotSnapshotsSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return summary information about snapshots.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotSnapshotsSummaryAsync(final ApiCallback<SnapshotSnapshotsSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotSnapshotsSummaryValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSnapshotsSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSnapshotAliases
     * @param sort The field that will be used for sorting.  Choices are id, name, snapshot, and created.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSnapshotAliasesCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSnapshotAliasesValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSnapshotAliasesCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all or matching snapshot aliases.
     * @param sort The field that will be used for sorting.  Choices are id, name, snapshot, and created.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotAliasesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotAliasesExtended listSnapshotAliases(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SnapshotAliasesExtended> resp = listSnapshotAliasesWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all or matching snapshot aliases.
     * @param sort The field that will be used for sorting.  Choices are id, name, snapshot, and created.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotAliasesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotAliasesExtended> listSnapshotAliasesWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSnapshotAliasesValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotAliasesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all or matching snapshot aliases.
     * @param sort The field that will be used for sorting.  Choices are id, name, snapshot, and created.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSnapshotAliasesAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<SnapshotAliasesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSnapshotAliasesValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotAliasesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSnapshotChangelists
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSnapshotChangelistsCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/changelists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSnapshotChangelistsValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSnapshotChangelistsCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all changelists.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotChangelistsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotChangelistsExtended listSnapshotChangelists(Integer limit, String resume) throws ApiException {
        ApiResponse<SnapshotChangelistsExtended> resp = listSnapshotChangelistsWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List all changelists.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotChangelistsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotChangelistsExtended> listSnapshotChangelistsWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSnapshotChangelistsValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotChangelistsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all changelists.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSnapshotChangelistsAsync(Integer limit, String resume, final ApiCallback<SnapshotChangelistsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSnapshotChangelistsValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotChangelistsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSnapshotRepstates
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSnapshotRepstatesCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/repstates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSnapshotRepstatesValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSnapshotRepstatesCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all repstates.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotRepstatesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotRepstatesExtended listSnapshotRepstates(Integer limit, String resume) throws ApiException {
        ApiResponse<SnapshotRepstatesExtended> resp = listSnapshotRepstatesWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List all repstates.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotRepstatesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotRepstatesExtended> listSnapshotRepstatesWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSnapshotRepstatesValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotRepstatesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all repstates.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSnapshotRepstatesAsync(Integer limit, String resume, final ApiCallback<SnapshotRepstatesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSnapshotRepstatesValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotRepstatesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSnapshotSchedules
     * @param sort The field that will be used for sorting.  Choices are id, name, path, pattern, schedule, duration, alias, next_run, and next_snapshot.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSnapshotSchedulesCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/snapshot/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSnapshotSchedulesValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSnapshotSchedulesCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all or matching schedules.
     * @param sort The field that will be used for sorting.  Choices are id, name, path, pattern, schedule, duration, alias, next_run, and next_snapshot.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotSchedulesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSchedulesExtended listSnapshotSchedules(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SnapshotSchedulesExtended> resp = listSnapshotSchedulesWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all or matching schedules.
     * @param sort The field that will be used for sorting.  Choices are id, name, path, pattern, schedule, duration, alias, next_run, and next_snapshot.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotSchedulesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSchedulesExtended> listSnapshotSchedulesWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSnapshotSchedulesValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotSchedulesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all or matching schedules.
     * @param sort The field that will be used for sorting.  Choices are id, name, path, pattern, schedule, duration, alias, next_run, and next_snapshot.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSnapshotSchedulesAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<SnapshotSchedulesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSnapshotSchedulesValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSchedulesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSnapshotSnapshots
     * @param sort The field that will be used for sorting.  Choices are id, name, path, created, expires, size, has_locks, schedule, alias_target, alias_target_name, pct_filesystem, pct_reserve, and state.  Default is id. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param state Only list snapshots matching this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list snapshots matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSnapshotSnapshotsCall(String sort, String schedule, String resume, String state, Integer limit, String type, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (schedule != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("schedule", schedule));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSnapshotSnapshotsValidateBeforeCall(String sort, String schedule, String resume, String state, Integer limit, String type, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSnapshotSnapshotsCall(sort, schedule, resume, state, limit, type, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all or matching snapshots.
     * @param sort The field that will be used for sorting.  Choices are id, name, path, created, expires, size, has_locks, schedule, alias_target, alias_target_name, pct_filesystem, pct_reserve, and state.  Default is id. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param state Only list snapshots matching this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list snapshots matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @return SnapshotSnapshotsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotSnapshotsExtended listSnapshotSnapshots(String sort, String schedule, String resume, String state, Integer limit, String type, String dir) throws ApiException {
        ApiResponse<SnapshotSnapshotsExtended> resp = listSnapshotSnapshotsWithHttpInfo(sort, schedule, resume, state, limit, type, dir);
        return resp.getData();
    }

    /**
     * 
     * List all or matching snapshots.
     * @param sort The field that will be used for sorting.  Choices are id, name, path, created, expires, size, has_locks, schedule, alias_target, alias_target_name, pct_filesystem, pct_reserve, and state.  Default is id. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param state Only list snapshots matching this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list snapshots matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;SnapshotSnapshotsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotSnapshotsExtended> listSnapshotSnapshotsWithHttpInfo(String sort, String schedule, String resume, String state, Integer limit, String type, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listSnapshotSnapshotsValidateBeforeCall(sort, schedule, resume, state, limit, type, dir, null, null);
        Type localVarReturnType = new TypeToken<SnapshotSnapshotsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all or matching snapshots.
     * @param sort The field that will be used for sorting.  Choices are id, name, path, created, expires, size, has_locks, schedule, alias_target, alias_target_name, pct_filesystem, pct_reserve, and state.  Default is id. (optional)
     * @param schedule Only list snapshots created by this schedule. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param state Only list snapshots matching this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param type Only list snapshots matching this type. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSnapshotSnapshotsAsync(String sort, String schedule, String resume, String state, Integer limit, String type, String dir, final ApiCallback<SnapshotSnapshotsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSnapshotSnapshotsValidateBeforeCall(sort, schedule, resume, state, limit, type, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotSnapshotsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSnapshotAlias
     * @param snapshotAlias  (required)
     * @param snapshotAliasId Modify snapshot alias. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotAliasCall(SnapshotAlias snapshotAlias, String snapshotAliasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotAlias;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/aliases/{SnapshotAliasId}"
            .replaceAll("\\{" + "SnapshotAliasId" + "\\}", apiClient.escapeString(snapshotAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnapshotAliasValidateBeforeCall(SnapshotAlias snapshotAlias, String snapshotAliasId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotAlias' is set
        if (snapshotAlias == null) {
            throw new ApiException("Missing the required parameter 'snapshotAlias' when calling updateSnapshotAlias(Async)");
        }
        
        // verify the required parameter 'snapshotAliasId' is set
        if (snapshotAliasId == null) {
            throw new ApiException("Missing the required parameter 'snapshotAliasId' when calling updateSnapshotAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSnapshotAliasCall(snapshotAlias, snapshotAliasId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify snapshot alias. All input fields are optional, but one or more must be supplied.
     * @param snapshotAlias  (required)
     * @param snapshotAliasId Modify snapshot alias. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSnapshotAlias(SnapshotAlias snapshotAlias, String snapshotAliasId) throws ApiException {
        updateSnapshotAliasWithHttpInfo(snapshotAlias, snapshotAliasId);
    }

    /**
     * 
     * Modify snapshot alias. All input fields are optional, but one or more must be supplied.
     * @param snapshotAlias  (required)
     * @param snapshotAliasId Modify snapshot alias. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSnapshotAliasWithHttpInfo(SnapshotAlias snapshotAlias, String snapshotAliasId) throws ApiException {
        com.squareup.okhttp.Call call = updateSnapshotAliasValidateBeforeCall(snapshotAlias, snapshotAliasId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify snapshot alias. All input fields are optional, but one or more must be supplied.
     * @param snapshotAlias  (required)
     * @param snapshotAliasId Modify snapshot alias. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotAliasAsync(SnapshotAlias snapshotAlias, String snapshotAliasId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnapshotAliasValidateBeforeCall(snapshotAlias, snapshotAliasId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSnapshotSchedule
     * @param snapshotSchedule  (required)
     * @param snapshotScheduleId Modify the schedule. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotScheduleCall(SnapshotSchedule snapshotSchedule, String snapshotScheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotSchedule;

        // create path and map variables
        String localVarPath = "/platform/3/snapshot/schedules/{SnapshotScheduleId}"
            .replaceAll("\\{" + "SnapshotScheduleId" + "\\}", apiClient.escapeString(snapshotScheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnapshotScheduleValidateBeforeCall(SnapshotSchedule snapshotSchedule, String snapshotScheduleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSchedule' is set
        if (snapshotSchedule == null) {
            throw new ApiException("Missing the required parameter 'snapshotSchedule' when calling updateSnapshotSchedule(Async)");
        }
        
        // verify the required parameter 'snapshotScheduleId' is set
        if (snapshotScheduleId == null) {
            throw new ApiException("Missing the required parameter 'snapshotScheduleId' when calling updateSnapshotSchedule(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSnapshotScheduleCall(snapshotSchedule, snapshotScheduleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the schedule. All input fields are optional, but one or more must be supplied.
     * @param snapshotSchedule  (required)
     * @param snapshotScheduleId Modify the schedule. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSnapshotSchedule(SnapshotSchedule snapshotSchedule, String snapshotScheduleId) throws ApiException {
        updateSnapshotScheduleWithHttpInfo(snapshotSchedule, snapshotScheduleId);
    }

    /**
     * 
     * Modify the schedule. All input fields are optional, but one or more must be supplied.
     * @param snapshotSchedule  (required)
     * @param snapshotScheduleId Modify the schedule. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSnapshotScheduleWithHttpInfo(SnapshotSchedule snapshotSchedule, String snapshotScheduleId) throws ApiException {
        com.squareup.okhttp.Call call = updateSnapshotScheduleValidateBeforeCall(snapshotSchedule, snapshotScheduleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the schedule. All input fields are optional, but one or more must be supplied.
     * @param snapshotSchedule  (required)
     * @param snapshotScheduleId Modify the schedule. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotScheduleAsync(SnapshotSchedule snapshotSchedule, String snapshotScheduleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnapshotScheduleValidateBeforeCall(snapshotSchedule, snapshotScheduleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSnapshotSettings
     * @param snapshotSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotSettingsCall(SnapshotSettingsExtended snapshotSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotSettings;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnapshotSettingsValidateBeforeCall(SnapshotSettingsExtended snapshotSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSettings' is set
        if (snapshotSettings == null) {
            throw new ApiException("Missing the required parameter 'snapshotSettings' when calling updateSnapshotSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSnapshotSettingsCall(snapshotSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more settings.
     * @param snapshotSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSnapshotSettings(SnapshotSettingsExtended snapshotSettings) throws ApiException {
        updateSnapshotSettingsWithHttpInfo(snapshotSettings);
    }

    /**
     * 
     * Modify one or more settings.
     * @param snapshotSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSnapshotSettingsWithHttpInfo(SnapshotSettingsExtended snapshotSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateSnapshotSettingsValidateBeforeCall(snapshotSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more settings.
     * @param snapshotSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotSettingsAsync(SnapshotSettingsExtended snapshotSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnapshotSettingsValidateBeforeCall(snapshotSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSnapshotSnapshot
     * @param snapshotSnapshot  (required)
     * @param snapshotSnapshotId Modify snapshot. All input fields are optional, but one or more must be supplied. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotSnapshotCall(SnapshotSnapshot snapshotSnapshot, String snapshotSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotSnapshot;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{SnapshotSnapshotId}"
            .replaceAll("\\{" + "SnapshotSnapshotId" + "\\}", apiClient.escapeString(snapshotSnapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnapshotSnapshotValidateBeforeCall(SnapshotSnapshot snapshotSnapshot, String snapshotSnapshotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotSnapshot' is set
        if (snapshotSnapshot == null) {
            throw new ApiException("Missing the required parameter 'snapshotSnapshot' when calling updateSnapshotSnapshot(Async)");
        }
        
        // verify the required parameter 'snapshotSnapshotId' is set
        if (snapshotSnapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotSnapshotId' when calling updateSnapshotSnapshot(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSnapshotSnapshotCall(snapshotSnapshot, snapshotSnapshotId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify snapshot. All input fields are optional, but one or more must be supplied.
     * @param snapshotSnapshot  (required)
     * @param snapshotSnapshotId Modify snapshot. All input fields are optional, but one or more must be supplied. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSnapshotSnapshot(SnapshotSnapshot snapshotSnapshot, String snapshotSnapshotId) throws ApiException {
        updateSnapshotSnapshotWithHttpInfo(snapshotSnapshot, snapshotSnapshotId);
    }

    /**
     * 
     * Modify snapshot. All input fields are optional, but one or more must be supplied.
     * @param snapshotSnapshot  (required)
     * @param snapshotSnapshotId Modify snapshot. All input fields are optional, but one or more must be supplied. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSnapshotSnapshotWithHttpInfo(SnapshotSnapshot snapshotSnapshot, String snapshotSnapshotId) throws ApiException {
        com.squareup.okhttp.Call call = updateSnapshotSnapshotValidateBeforeCall(snapshotSnapshot, snapshotSnapshotId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify snapshot. All input fields are optional, but one or more must be supplied.
     * @param snapshotSnapshot  (required)
     * @param snapshotSnapshotId Modify snapshot. All input fields are optional, but one or more must be supplied. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotSnapshotAsync(SnapshotSnapshot snapshotSnapshot, String snapshotSnapshotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnapshotSnapshotValidateBeforeCall(snapshotSnapshot, snapshotSnapshotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
