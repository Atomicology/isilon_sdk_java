/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthAccessAccessItemFileGroup;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.GroupMembers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthGroupsApi {
    private ApiClient apiClient;

    public AuthGroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthGroupsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createGroupMember
     * @param groupMember  (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createGroupMemberCall(AuthAccessAccessItemFileGroup groupMember, String group, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = groupMember;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups/{Group}/members"
            .replaceAll("\\{" + "Group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createGroupMemberValidateBeforeCall(AuthAccessAccessItemFileGroup groupMember, String group, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupMember' is set
        if (groupMember == null) {
            throw new ApiException("Missing the required parameter 'groupMember' when calling createGroupMember(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling createGroupMember(Async)");
        }
        

        com.squareup.okhttp.Call call = createGroupMemberCall(groupMember, group, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add a member to the group.
     * @param groupMember  (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createGroupMember(AuthAccessAccessItemFileGroup groupMember, String group, String zone, String provider) throws ApiException {
        ApiResponse<CreateResponse> resp = createGroupMemberWithHttpInfo(groupMember, group, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * Add a member to the group.
     * @param groupMember  (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createGroupMemberWithHttpInfo(AuthAccessAccessItemFileGroup groupMember, String group, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = createGroupMemberValidateBeforeCall(groupMember, group, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a member to the group.
     * @param groupMember  (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createGroupMemberAsync(AuthAccessAccessItemFileGroup groupMember, String group, String zone, String provider, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createGroupMemberValidateBeforeCall(groupMember, group, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteGroupMember
     * @param groupMemberId Remove the member from the group. (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteGroupMemberCall(String groupMemberId, String group, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups/{Group}/members/{GroupMemberId}"
            .replaceAll("\\{" + "GroupMemberId" + "\\}", apiClient.escapeString(groupMemberId.toString()))
            .replaceAll("\\{" + "Group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteGroupMemberValidateBeforeCall(String groupMemberId, String group, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'groupMemberId' is set
        if (groupMemberId == null) {
            throw new ApiException("Missing the required parameter 'groupMemberId' when calling deleteGroupMember(Async)");
        }
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling deleteGroupMember(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteGroupMemberCall(groupMemberId, group, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Remove the member from the group.
     * @param groupMemberId Remove the member from the group. (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteGroupMember(String groupMemberId, String group, String zone, String provider) throws ApiException {
        deleteGroupMemberWithHttpInfo(groupMemberId, group, zone, provider);
    }

    /**
     * 
     * Remove the member from the group.
     * @param groupMemberId Remove the member from the group. (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteGroupMemberWithHttpInfo(String groupMemberId, String group, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = deleteGroupMemberValidateBeforeCall(groupMemberId, group, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove the member from the group.
     * @param groupMemberId Remove the member from the group. (required)
     * @param group  (required)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteGroupMemberAsync(String groupMemberId, String group, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteGroupMemberValidateBeforeCall(groupMemberId, group, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listGroupMembers
     * @param group  (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listGroupMembersCall(String group, Boolean resolveNames, String resume, Integer limit, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups/{Group}/members"
            .replaceAll("\\{" + "Group" + "\\}", apiClient.escapeString(group.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listGroupMembersValidateBeforeCall(String group, Boolean resolveNames, String resume, Integer limit, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'group' is set
        if (group == null) {
            throw new ApiException("Missing the required parameter 'group' when calling listGroupMembers(Async)");
        }
        

        com.squareup.okhttp.Call call = listGroupMembersCall(group, resolveNames, resume, limit, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all the members of the group.
     * @param group  (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @return GroupMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupMembers listGroupMembers(String group, Boolean resolveNames, String resume, Integer limit, String zone, String provider) throws ApiException {
        ApiResponse<GroupMembers> resp = listGroupMembersWithHttpInfo(group, resolveNames, resume, limit, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * List all the members of the group.
     * @param group  (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @return ApiResponse&lt;GroupMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupMembers> listGroupMembersWithHttpInfo(String group, Boolean resolveNames, String resume, Integer limit, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = listGroupMembersValidateBeforeCall(group, resolveNames, resume, limit, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the members of the group.
     * @param group  (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Filter group members by zone. (optional)
     * @param provider Filter group members by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listGroupMembersAsync(String group, Boolean resolveNames, String resume, Integer limit, String zone, String provider, final ApiCallback<GroupMembers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listGroupMembersValidateBeforeCall(group, resolveNames, resume, limit, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupMembers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
