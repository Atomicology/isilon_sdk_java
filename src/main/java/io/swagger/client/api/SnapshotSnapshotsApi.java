/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateSnapshotLockResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.SnapshotLock;
import io.swagger.client.model.SnapshotLockCreateParams;
import io.swagger.client.model.SnapshotLocks;
import io.swagger.client.model.SnapshotLocksExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnapshotSnapshotsApi {
    private ApiClient apiClient;

    public SnapshotSnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnapshotSnapshotsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSnapshotLock
     * @param snapshotLock  (required)
     * @param sid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSnapshotLockCall(SnapshotLockCreateParams snapshotLock, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotLock;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{Sid}/locks"
            .replaceAll("\\{" + "Sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSnapshotLockValidateBeforeCall(SnapshotLockCreateParams snapshotLock, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotLock' is set
        if (snapshotLock == null) {
            throw new ApiException("Missing the required parameter 'snapshotLock' when calling createSnapshotLock(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling createSnapshotLock(Async)");
        }
        

        com.squareup.okhttp.Call call = createSnapshotLockCall(snapshotLock, sid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new lock on this snapshot.
     * @param snapshotLock  (required)
     * @param sid  (required)
     * @return CreateSnapshotLockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSnapshotLockResponse createSnapshotLock(SnapshotLockCreateParams snapshotLock, String sid) throws ApiException {
        ApiResponse<CreateSnapshotLockResponse> resp = createSnapshotLockWithHttpInfo(snapshotLock, sid);
        return resp.getData();
    }

    /**
     * 
     * Create a new lock on this snapshot.
     * @param snapshotLock  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;CreateSnapshotLockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSnapshotLockResponse> createSnapshotLockWithHttpInfo(SnapshotLockCreateParams snapshotLock, String sid) throws ApiException {
        com.squareup.okhttp.Call call = createSnapshotLockValidateBeforeCall(snapshotLock, sid, null, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotLockResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new lock on this snapshot.
     * @param snapshotLock  (required)
     * @param sid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSnapshotLockAsync(SnapshotLockCreateParams snapshotLock, String sid, final ApiCallback<CreateSnapshotLockResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSnapshotLockValidateBeforeCall(snapshotLock, sid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSnapshotLockResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotLock
     * @param snapshotLockId Delete the snapshot lock. (required)
     * @param sid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotLockCall(String snapshotLockId, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{Sid}/locks/{SnapshotLockId}"
            .replaceAll("\\{" + "SnapshotLockId" + "\\}", apiClient.escapeString(snapshotLockId.toString()))
            .replaceAll("\\{" + "Sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotLockValidateBeforeCall(String snapshotLockId, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotLockId' is set
        if (snapshotLockId == null) {
            throw new ApiException("Missing the required parameter 'snapshotLockId' when calling deleteSnapshotLock(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteSnapshotLock(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotLockCall(snapshotLockId, sid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the snapshot lock.
     * @param snapshotLockId Delete the snapshot lock. (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotLock(String snapshotLockId, String sid) throws ApiException {
        deleteSnapshotLockWithHttpInfo(snapshotLockId, sid);
    }

    /**
     * 
     * Delete the snapshot lock.
     * @param snapshotLockId Delete the snapshot lock. (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotLockWithHttpInfo(String snapshotLockId, String sid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotLockValidateBeforeCall(snapshotLockId, sid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the snapshot lock.
     * @param snapshotLockId Delete the snapshot lock. (required)
     * @param sid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotLockAsync(String snapshotLockId, String sid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotLockValidateBeforeCall(snapshotLockId, sid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSnapshotLocks
     * @param sid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotLocksCall(String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{Sid}/locks"
            .replaceAll("\\{" + "Sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSnapshotLocksValidateBeforeCall(String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteSnapshotLocks(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSnapshotLocksCall(sid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all locks. Will try to drain count of recursively held locks so that the snapshot can be deleted.
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSnapshotLocks(String sid) throws ApiException {
        deleteSnapshotLocksWithHttpInfo(sid);
    }

    /**
     * 
     * Delete all locks. Will try to drain count of recursively held locks so that the snapshot can be deleted.
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSnapshotLocksWithHttpInfo(String sid) throws ApiException {
        com.squareup.okhttp.Call call = deleteSnapshotLocksValidateBeforeCall(sid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all locks. Will try to drain count of recursively held locks so that the snapshot can be deleted.
     * @param sid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSnapshotLocksAsync(String sid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSnapshotLocksValidateBeforeCall(sid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getSnapshotLock
     * @param snapshotLockId Retrieve lock information. (required)
     * @param sid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotLockCall(String snapshotLockId, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{Sid}/locks/{SnapshotLockId}"
            .replaceAll("\\{" + "SnapshotLockId" + "\\}", apiClient.escapeString(snapshotLockId.toString()))
            .replaceAll("\\{" + "Sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotLockValidateBeforeCall(String snapshotLockId, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotLockId' is set
        if (snapshotLockId == null) {
            throw new ApiException("Missing the required parameter 'snapshotLockId' when calling getSnapshotLock(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling getSnapshotLock(Async)");
        }
        

        com.squareup.okhttp.Call call = getSnapshotLockCall(snapshotLockId, sid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve lock information.
     * @param snapshotLockId Retrieve lock information. (required)
     * @param sid  (required)
     * @return SnapshotLocks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotLocks getSnapshotLock(String snapshotLockId, String sid) throws ApiException {
        ApiResponse<SnapshotLocks> resp = getSnapshotLockWithHttpInfo(snapshotLockId, sid);
        return resp.getData();
    }

    /**
     * 
     * Retrieve lock information.
     * @param snapshotLockId Retrieve lock information. (required)
     * @param sid  (required)
     * @return ApiResponse&lt;SnapshotLocks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotLocks> getSnapshotLockWithHttpInfo(String snapshotLockId, String sid) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotLockValidateBeforeCall(snapshotLockId, sid, null, null);
        Type localVarReturnType = new TypeToken<SnapshotLocks>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve lock information.
     * @param snapshotLockId Retrieve lock information. (required)
     * @param sid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotLockAsync(String snapshotLockId, String sid, final ApiCallback<SnapshotLocks> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotLockValidateBeforeCall(snapshotLockId, sid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotLocks>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSnapshotLocks
     * @param sid  (required)
     * @param sort The field that will be used for sorting.  Choices are id, expires, and comment.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSnapshotLocksCall(String sid, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{Sid}/locks"
            .replaceAll("\\{" + "Sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSnapshotLocksValidateBeforeCall(String sid, String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling listSnapshotLocks(Async)");
        }
        

        com.squareup.okhttp.Call call = listSnapshotLocksCall(sid, sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all locks.
     * @param sid  (required)
     * @param sort The field that will be used for sorting.  Choices are id, expires, and comment.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SnapshotLocksExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnapshotLocksExtended listSnapshotLocks(String sid, String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SnapshotLocksExtended> resp = listSnapshotLocksWithHttpInfo(sid, sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all locks.
     * @param sid  (required)
     * @param sort The field that will be used for sorting.  Choices are id, expires, and comment.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SnapshotLocksExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnapshotLocksExtended> listSnapshotLocksWithHttpInfo(String sid, String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSnapshotLocksValidateBeforeCall(sid, sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SnapshotLocksExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all locks.
     * @param sid  (required)
     * @param sort The field that will be used for sorting.  Choices are id, expires, and comment.  Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSnapshotLocksAsync(String sid, String sort, Integer limit, String dir, String resume, final ApiCallback<SnapshotLocksExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSnapshotLocksValidateBeforeCall(sid, sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnapshotLocksExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSnapshotLock
     * @param snapshotLock  (required)
     * @param snapshotLockId Modify lock. All input fields are optional, but one or more must be supplied. (required)
     * @param sid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotLockCall(SnapshotLock snapshotLock, String snapshotLockId, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snapshotLock;

        // create path and map variables
        String localVarPath = "/platform/1/snapshot/snapshots/{Sid}/locks/{SnapshotLockId}"
            .replaceAll("\\{" + "SnapshotLockId" + "\\}", apiClient.escapeString(snapshotLockId.toString()))
            .replaceAll("\\{" + "Sid" + "\\}", apiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnapshotLockValidateBeforeCall(SnapshotLock snapshotLock, String snapshotLockId, String sid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snapshotLock' is set
        if (snapshotLock == null) {
            throw new ApiException("Missing the required parameter 'snapshotLock' when calling updateSnapshotLock(Async)");
        }
        
        // verify the required parameter 'snapshotLockId' is set
        if (snapshotLockId == null) {
            throw new ApiException("Missing the required parameter 'snapshotLockId' when calling updateSnapshotLock(Async)");
        }
        
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateSnapshotLock(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSnapshotLockCall(snapshotLock, snapshotLockId, sid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify lock. All input fields are optional, but one or more must be supplied.
     * @param snapshotLock  (required)
     * @param snapshotLockId Modify lock. All input fields are optional, but one or more must be supplied. (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSnapshotLock(SnapshotLock snapshotLock, String snapshotLockId, String sid) throws ApiException {
        updateSnapshotLockWithHttpInfo(snapshotLock, snapshotLockId, sid);
    }

    /**
     * 
     * Modify lock. All input fields are optional, but one or more must be supplied.
     * @param snapshotLock  (required)
     * @param snapshotLockId Modify lock. All input fields are optional, but one or more must be supplied. (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSnapshotLockWithHttpInfo(SnapshotLock snapshotLock, String snapshotLockId, String sid) throws ApiException {
        com.squareup.okhttp.Call call = updateSnapshotLockValidateBeforeCall(snapshotLock, snapshotLockId, sid, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify lock. All input fields are optional, but one or more must be supplied.
     * @param snapshotLock  (required)
     * @param snapshotLockId Modify lock. All input fields are optional, but one or more must be supplied. (required)
     * @param sid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnapshotLockAsync(SnapshotLock snapshotLock, String snapshotLockId, String sid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnapshotLockValidateBeforeCall(snapshotLock, snapshotLockId, sid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
