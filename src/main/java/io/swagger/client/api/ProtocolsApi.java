/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateAuthRefreshItemResponse;
import io.swagger.client.model.CreateNfsAliasResponse;
import io.swagger.client.model.CreateNfsNlmSessionsCheckItemResponse;
import io.swagger.client.model.CreateQuotaReportResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.FtpSettings;
import io.swagger.client.model.FtpSettingsExtended;
import io.swagger.client.model.HdfsLogLevel;
import io.swagger.client.model.HdfsProxyuserCreateParams;
import io.swagger.client.model.HdfsProxyusers;
import io.swagger.client.model.HdfsRack;
import io.swagger.client.model.HdfsRackCreateParams;
import io.swagger.client.model.HdfsRacks;
import io.swagger.client.model.HdfsRacksExtended;
import io.swagger.client.model.HdfsRangerPluginSettings;
import io.swagger.client.model.HdfsRangerPluginSettingsSettings;
import io.swagger.client.model.HdfsSettings;
import io.swagger.client.model.HdfsSettingsSettings;
import io.swagger.client.model.HttpSettings;
import io.swagger.client.model.HttpSettingsSettings;
import io.swagger.client.model.NdmpContextsBackup;
import io.swagger.client.model.NdmpContextsBackupExtended;
import io.swagger.client.model.NdmpContextsBre;
import io.swagger.client.model.NdmpContextsBreExtended;
import io.swagger.client.model.NdmpDiagnostics;
import io.swagger.client.model.NdmpDiagnosticsDiagnostics;
import io.swagger.client.model.NdmpDumpdates;
import io.swagger.client.model.NdmpLogs;
import io.swagger.client.model.NdmpSessions;
import io.swagger.client.model.NdmpSessionsExtended;
import io.swagger.client.model.NdmpSettingsDmas;
import io.swagger.client.model.NdmpSettingsGlobal;
import io.swagger.client.model.NdmpSettingsGlobalGlobal;
import io.swagger.client.model.NdmpSettingsPreferredIp;
import io.swagger.client.model.NdmpSettingsPreferredIpCreateParams;
import io.swagger.client.model.NdmpSettingsPreferredIps;
import io.swagger.client.model.NdmpSettingsVariable;
import io.swagger.client.model.NdmpSettingsVariableCreateParams;
import io.swagger.client.model.NdmpSettingsVariables;
import io.swagger.client.model.NdmpUser;
import io.swagger.client.model.NdmpUserCreateParams;
import io.swagger.client.model.NdmpUsers;
import io.swagger.client.model.NdmpUsersExtended;
import io.swagger.client.model.NfsAlias;
import io.swagger.client.model.NfsAliasCreateParams;
import io.swagger.client.model.NfsAliases;
import io.swagger.client.model.NfsAliasesExtended;
import io.swagger.client.model.NfsCheckExtended;
import io.swagger.client.model.NfsExport;
import io.swagger.client.model.NfsExportCreateParams;
import io.swagger.client.model.NfsExports;
import io.swagger.client.model.NfsExportsExtended;
import io.swagger.client.model.NfsExportsSummary;
import io.swagger.client.model.NfsLogLevel;
import io.swagger.client.model.NfsNetgroup;
import io.swagger.client.model.NfsNlmLocks;
import io.swagger.client.model.NfsNlmSessions;
import io.swagger.client.model.NfsNlmSessionsExtended;
import io.swagger.client.model.NfsNlmWaiters;
import io.swagger.client.model.NfsSettingsExport;
import io.swagger.client.model.NfsSettingsExportSettings;
import io.swagger.client.model.NfsSettingsGlobal;
import io.swagger.client.model.NfsSettingsGlobalSettings;
import io.swagger.client.model.NfsSettingsZone;
import io.swagger.client.model.NfsSettingsZoneSettings;
import io.swagger.client.model.NtpServer;
import io.swagger.client.model.NtpServerCreateParams;
import io.swagger.client.model.NtpServers;
import io.swagger.client.model.NtpServersExtended;
import io.swagger.client.model.NtpSettings;
import io.swagger.client.model.NtpSettingsSettings;
import io.swagger.client.model.SmbLogLevel;
import io.swagger.client.model.SmbLogLevelFilter;
import io.swagger.client.model.SmbLogLevelFilters;
import io.swagger.client.model.SmbOpenfiles;
import io.swagger.client.model.SmbSessions;
import io.swagger.client.model.SmbSettingsGlobal;
import io.swagger.client.model.SmbSettingsGlobalExtended;
import io.swagger.client.model.SmbSettingsShare;
import io.swagger.client.model.SmbSettingsShareExtended;
import io.swagger.client.model.SmbShare;
import io.swagger.client.model.SmbShareCreateParams;
import io.swagger.client.model.SmbShares;
import io.swagger.client.model.SmbSharesExtended;
import io.swagger.client.model.SmbSharesSummary;
import io.swagger.client.model.SnmpSettings;
import io.swagger.client.model.SnmpSettingsExtended;
import io.swagger.client.model.SwiftAccount;
import io.swagger.client.model.SwiftAccounts;
import io.swagger.client.model.SwiftAccountsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtocolsApi {
    private ApiClient apiClient;

    public ProtocolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtocolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHdfsProxyuser
     * @param hdfsProxyuser  (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHdfsProxyuserCall(HdfsProxyuserCreateParams hdfsProxyuser, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsProxyuser;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHdfsProxyuserValidateBeforeCall(HdfsProxyuserCreateParams hdfsProxyuser, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsProxyuser' is set
        if (hdfsProxyuser == null) {
            throw new ApiException("Missing the required parameter 'hdfsProxyuser' when calling createHdfsProxyuser(Async)");
        }
        

        com.squareup.okhttp.Call call = createHdfsProxyuserCall(hdfsProxyuser, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new HDFS proxyuser.
     * @param hdfsProxyuser  (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createHdfsProxyuser(HdfsProxyuserCreateParams hdfsProxyuser, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createHdfsProxyuserWithHttpInfo(hdfsProxyuser, zone);
        return resp.getData();
    }

    /**
     * 
     * Create a new HDFS proxyuser.
     * @param hdfsProxyuser  (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createHdfsProxyuserWithHttpInfo(HdfsProxyuserCreateParams hdfsProxyuser, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createHdfsProxyuserValidateBeforeCall(hdfsProxyuser, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new HDFS proxyuser.
     * @param hdfsProxyuser  (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHdfsProxyuserAsync(HdfsProxyuserCreateParams hdfsProxyuser, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHdfsProxyuserValidateBeforeCall(hdfsProxyuser, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createHdfsRack
     * @param hdfsRack  (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHdfsRackCall(HdfsRackCreateParams hdfsRack, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsRack;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/racks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHdfsRackValidateBeforeCall(HdfsRackCreateParams hdfsRack, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsRack' is set
        if (hdfsRack == null) {
            throw new ApiException("Missing the required parameter 'hdfsRack' when calling createHdfsRack(Async)");
        }
        

        com.squareup.okhttp.Call call = createHdfsRackCall(hdfsRack, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new HDFS rack.
     * @param hdfsRack  (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createHdfsRack(HdfsRackCreateParams hdfsRack, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createHdfsRackWithHttpInfo(hdfsRack, zone);
        return resp.getData();
    }

    /**
     * 
     * Create a new HDFS rack.
     * @param hdfsRack  (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createHdfsRackWithHttpInfo(HdfsRackCreateParams hdfsRack, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createHdfsRackValidateBeforeCall(hdfsRack, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new HDFS rack.
     * @param hdfsRack  (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHdfsRackAsync(HdfsRackCreateParams hdfsRack, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHdfsRackValidateBeforeCall(hdfsRack, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNdmpSettingsPreferredIp
     * @param ndmpSettingsPreferredIp  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNdmpSettingsPreferredIpCall(NdmpSettingsPreferredIpCreateParams ndmpSettingsPreferredIp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpSettingsPreferredIp;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/ndmp/settings/preferred-ips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNdmpSettingsPreferredIpValidateBeforeCall(NdmpSettingsPreferredIpCreateParams ndmpSettingsPreferredIp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsPreferredIp' is set
        if (ndmpSettingsPreferredIp == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsPreferredIp' when calling createNdmpSettingsPreferredIp(Async)");
        }
        

        com.squareup.okhttp.Call call = createNdmpSettingsPreferredIpCall(ndmpSettingsPreferredIp, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a preferred ip preference.
     * @param ndmpSettingsPreferredIp  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNdmpSettingsPreferredIp(NdmpSettingsPreferredIpCreateParams ndmpSettingsPreferredIp) throws ApiException {
        ApiResponse<Empty> resp = createNdmpSettingsPreferredIpWithHttpInfo(ndmpSettingsPreferredIp);
        return resp.getData();
    }

    /**
     * 
     * Create a preferred ip preference.
     * @param ndmpSettingsPreferredIp  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNdmpSettingsPreferredIpWithHttpInfo(NdmpSettingsPreferredIpCreateParams ndmpSettingsPreferredIp) throws ApiException {
        com.squareup.okhttp.Call call = createNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIp, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a preferred ip preference.
     * @param ndmpSettingsPreferredIp  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNdmpSettingsPreferredIpAsync(NdmpSettingsPreferredIpCreateParams ndmpSettingsPreferredIp, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNdmpSettingsVariable
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Create a preferred NDMP environment variable. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNdmpSettingsVariableCall(NdmpSettingsVariableCreateParams ndmpSettingsVariable, String ndmpSettingsVariableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpSettingsVariable;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}"
            .replaceAll("\\{" + "NdmpSettingsVariableId" + "\\}", apiClient.escapeString(ndmpSettingsVariableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNdmpSettingsVariableValidateBeforeCall(NdmpSettingsVariableCreateParams ndmpSettingsVariable, String ndmpSettingsVariableId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsVariable' is set
        if (ndmpSettingsVariable == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsVariable' when calling createNdmpSettingsVariable(Async)");
        }
        
        // verify the required parameter 'ndmpSettingsVariableId' is set
        if (ndmpSettingsVariableId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsVariableId' when calling createNdmpSettingsVariable(Async)");
        }
        

        com.squareup.okhttp.Call call = createNdmpSettingsVariableCall(ndmpSettingsVariable, ndmpSettingsVariableId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a preferred NDMP environment variable.
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Create a preferred NDMP environment variable. (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNdmpSettingsVariable(NdmpSettingsVariableCreateParams ndmpSettingsVariable, String ndmpSettingsVariableId) throws ApiException {
        ApiResponse<Empty> resp = createNdmpSettingsVariableWithHttpInfo(ndmpSettingsVariable, ndmpSettingsVariableId);
        return resp.getData();
    }

    /**
     * 
     * Create a preferred NDMP environment variable.
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Create a preferred NDMP environment variable. (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNdmpSettingsVariableWithHttpInfo(NdmpSettingsVariableCreateParams ndmpSettingsVariable, String ndmpSettingsVariableId) throws ApiException {
        com.squareup.okhttp.Call call = createNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariable, ndmpSettingsVariableId, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a preferred NDMP environment variable.
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Create a preferred NDMP environment variable. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNdmpSettingsVariableAsync(NdmpSettingsVariableCreateParams ndmpSettingsVariable, String ndmpSettingsVariableId, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariable, ndmpSettingsVariableId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNdmpUser
     * @param ndmpUser  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNdmpUserCall(NdmpUserCreateParams ndmpUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpUser;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNdmpUserValidateBeforeCall(NdmpUserCreateParams ndmpUser, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpUser' is set
        if (ndmpUser == null) {
            throw new ApiException("Missing the required parameter 'ndmpUser' when calling createNdmpUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createNdmpUserCall(ndmpUser, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Created a new user.
     * @param ndmpUser  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNdmpUser(NdmpUserCreateParams ndmpUser) throws ApiException {
        ApiResponse<Empty> resp = createNdmpUserWithHttpInfo(ndmpUser);
        return resp.getData();
    }

    /**
     * 
     * Created a new user.
     * @param ndmpUser  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNdmpUserWithHttpInfo(NdmpUserCreateParams ndmpUser) throws ApiException {
        com.squareup.okhttp.Call call = createNdmpUserValidateBeforeCall(ndmpUser, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Created a new user.
     * @param ndmpUser  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNdmpUserAsync(NdmpUserCreateParams ndmpUser, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNdmpUserValidateBeforeCall(ndmpUser, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNfsAlias
     * @param nfsAlias  (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNfsAliasCall(NfsAliasCreateParams nfsAlias, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsAlias;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNfsAliasValidateBeforeCall(NfsAliasCreateParams nfsAlias, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsAlias' is set
        if (nfsAlias == null) {
            throw new ApiException("Missing the required parameter 'nfsAlias' when calling createNfsAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = createNfsAliasCall(nfsAlias, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new NFS alias.
     * @param nfsAlias  (required)
     * @param zone Access zone (optional)
     * @return CreateNfsAliasResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNfsAliasResponse createNfsAlias(NfsAliasCreateParams nfsAlias, String zone) throws ApiException {
        ApiResponse<CreateNfsAliasResponse> resp = createNfsAliasWithHttpInfo(nfsAlias, zone);
        return resp.getData();
    }

    /**
     * 
     * Create a new NFS alias.
     * @param nfsAlias  (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;CreateNfsAliasResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNfsAliasResponse> createNfsAliasWithHttpInfo(NfsAliasCreateParams nfsAlias, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createNfsAliasValidateBeforeCall(nfsAlias, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateNfsAliasResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new NFS alias.
     * @param nfsAlias  (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNfsAliasAsync(NfsAliasCreateParams nfsAlias, String zone, final ApiCallback<CreateNfsAliasResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNfsAliasValidateBeforeCall(nfsAlias, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNfsAliasResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNfsExport
     * @param nfsExport  (required)
     * @param force If true, the export will be created even if it conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNfsExportCall(NfsExportCreateParams nfsExport, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsExport;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/nfs/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (ignoreUnresolvableHosts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_unresolvable_hosts", ignoreUnresolvableHosts));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (ignoreConflicts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_conflicts", ignoreConflicts));
        if (ignoreBadPaths != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_bad_paths", ignoreBadPaths));
        if (ignoreBadAuth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_bad_auth", ignoreBadAuth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNfsExportValidateBeforeCall(NfsExportCreateParams nfsExport, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsExport' is set
        if (nfsExport == null) {
            throw new ApiException("Missing the required parameter 'nfsExport' when calling createNfsExport(Async)");
        }
        

        com.squareup.okhttp.Call call = createNfsExportCall(nfsExport, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new NFS export.
     * @param nfsExport  (required)
     * @param force If true, the export will be created even if it conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @return CreateQuotaReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateQuotaReportResponse createNfsExport(NfsExportCreateParams nfsExport, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth) throws ApiException {
        ApiResponse<CreateQuotaReportResponse> resp = createNfsExportWithHttpInfo(nfsExport, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth);
        return resp.getData();
    }

    /**
     * 
     * Create a new NFS export.
     * @param nfsExport  (required)
     * @param force If true, the export will be created even if it conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @return ApiResponse&lt;CreateQuotaReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateQuotaReportResponse> createNfsExportWithHttpInfo(NfsExportCreateParams nfsExport, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth) throws ApiException {
        com.squareup.okhttp.Call call = createNfsExportValidateBeforeCall(nfsExport, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth, null, null);
        Type localVarReturnType = new TypeToken<CreateQuotaReportResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new NFS export.
     * @param nfsExport  (required)
     * @param force If true, the export will be created even if it conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNfsExportAsync(NfsExportCreateParams nfsExport, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth, final ApiCallback<CreateQuotaReportResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNfsExportValidateBeforeCall(nfsExport, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateQuotaReportResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNfsNetgroupCheckItem
     * @param nfsNetgroupCheckItem  (required)
     * @param host IP address of node to update. If unspecified, the local nodes cache is updated. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNfsNetgroupCheckItemCall(Empty nfsNetgroupCheckItem, String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsNetgroupCheckItem;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/netgroup/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (host != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host", host));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNfsNetgroupCheckItemValidateBeforeCall(Empty nfsNetgroupCheckItem, String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsNetgroupCheckItem' is set
        if (nfsNetgroupCheckItem == null) {
            throw new ApiException("Missing the required parameter 'nfsNetgroupCheckItem' when calling createNfsNetgroupCheckItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNfsNetgroupCheckItemCall(nfsNetgroupCheckItem, host, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Update the NFS netgroups in the cache.
     * @param nfsNetgroupCheckItem  (required)
     * @param host IP address of node to update. If unspecified, the local nodes cache is updated. (optional)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNfsNetgroupCheckItem(Empty nfsNetgroupCheckItem, String host) throws ApiException {
        ApiResponse<Empty> resp = createNfsNetgroupCheckItemWithHttpInfo(nfsNetgroupCheckItem, host);
        return resp.getData();
    }

    /**
     * 
     * Update the NFS netgroups in the cache.
     * @param nfsNetgroupCheckItem  (required)
     * @param host IP address of node to update. If unspecified, the local nodes cache is updated. (optional)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNfsNetgroupCheckItemWithHttpInfo(Empty nfsNetgroupCheckItem, String host) throws ApiException {
        com.squareup.okhttp.Call call = createNfsNetgroupCheckItemValidateBeforeCall(nfsNetgroupCheckItem, host, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the NFS netgroups in the cache.
     * @param nfsNetgroupCheckItem  (required)
     * @param host IP address of node to update. If unspecified, the local nodes cache is updated. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNfsNetgroupCheckItemAsync(Empty nfsNetgroupCheckItem, String host, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNfsNetgroupCheckItemValidateBeforeCall(nfsNetgroupCheckItem, host, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNfsNetgroupFlushItem
     * @param nfsNetgroupFlushItem  (required)
     * @param host IP address of node to flush. If unspecified, all nodes on the cluster are flushed. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNfsNetgroupFlushItemCall(Empty nfsNetgroupFlushItem, String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsNetgroupFlushItem;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/netgroup/flush";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (host != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host", host));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNfsNetgroupFlushItemValidateBeforeCall(Empty nfsNetgroupFlushItem, String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsNetgroupFlushItem' is set
        if (nfsNetgroupFlushItem == null) {
            throw new ApiException("Missing the required parameter 'nfsNetgroupFlushItem' when calling createNfsNetgroupFlushItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNfsNetgroupFlushItemCall(nfsNetgroupFlushItem, host, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Flush the NFS netgroups in the cache.
     * @param nfsNetgroupFlushItem  (required)
     * @param host IP address of node to flush. If unspecified, all nodes on the cluster are flushed. (optional)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNfsNetgroupFlushItem(Empty nfsNetgroupFlushItem, String host) throws ApiException {
        ApiResponse<Empty> resp = createNfsNetgroupFlushItemWithHttpInfo(nfsNetgroupFlushItem, host);
        return resp.getData();
    }

    /**
     * 
     * Flush the NFS netgroups in the cache.
     * @param nfsNetgroupFlushItem  (required)
     * @param host IP address of node to flush. If unspecified, all nodes on the cluster are flushed. (optional)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNfsNetgroupFlushItemWithHttpInfo(Empty nfsNetgroupFlushItem, String host) throws ApiException {
        com.squareup.okhttp.Call call = createNfsNetgroupFlushItemValidateBeforeCall(nfsNetgroupFlushItem, host, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Flush the NFS netgroups in the cache.
     * @param nfsNetgroupFlushItem  (required)
     * @param host IP address of node to flush. If unspecified, all nodes on the cluster are flushed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNfsNetgroupFlushItemAsync(Empty nfsNetgroupFlushItem, String host, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNfsNetgroupFlushItemValidateBeforeCall(nfsNetgroupFlushItem, host, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNfsNlmSessionsCheckItem
     * @param nfsNlmSessionsCheckItem  (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNfsNlmSessionsCheckItemCall(Empty nfsNlmSessionsCheckItem, String clusterIp, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsNlmSessionsCheckItem;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/nlm/sessions-check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_ip", clusterIp));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNfsNlmSessionsCheckItemValidateBeforeCall(Empty nfsNlmSessionsCheckItem, String clusterIp, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsNlmSessionsCheckItem' is set
        if (nfsNlmSessionsCheckItem == null) {
            throw new ApiException("Missing the required parameter 'nfsNlmSessionsCheckItem' when calling createNfsNlmSessionsCheckItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNfsNlmSessionsCheckItemCall(nfsNlmSessionsCheckItem, clusterIp, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Perform an active scan for lost NFSv3 locks.
     * @param nfsNlmSessionsCheckItem  (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @return CreateNfsNlmSessionsCheckItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateNfsNlmSessionsCheckItemResponse createNfsNlmSessionsCheckItem(Empty nfsNlmSessionsCheckItem, String clusterIp, String zone) throws ApiException {
        ApiResponse<CreateNfsNlmSessionsCheckItemResponse> resp = createNfsNlmSessionsCheckItemWithHttpInfo(nfsNlmSessionsCheckItem, clusterIp, zone);
        return resp.getData();
    }

    /**
     * 
     * Perform an active scan for lost NFSv3 locks.
     * @param nfsNlmSessionsCheckItem  (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @return ApiResponse&lt;CreateNfsNlmSessionsCheckItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateNfsNlmSessionsCheckItemResponse> createNfsNlmSessionsCheckItemWithHttpInfo(Empty nfsNlmSessionsCheckItem, String clusterIp, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createNfsNlmSessionsCheckItemValidateBeforeCall(nfsNlmSessionsCheckItem, clusterIp, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateNfsNlmSessionsCheckItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Perform an active scan for lost NFSv3 locks.
     * @param nfsNlmSessionsCheckItem  (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNfsNlmSessionsCheckItemAsync(Empty nfsNlmSessionsCheckItem, String clusterIp, String zone, final ApiCallback<CreateNfsNlmSessionsCheckItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNfsNlmSessionsCheckItemValidateBeforeCall(nfsNlmSessionsCheckItem, clusterIp, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateNfsNlmSessionsCheckItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNfsReloadItem
     * @param nfsReloadItem  (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNfsReloadItemCall(Empty nfsReloadItem, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsReloadItem;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/reload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNfsReloadItemValidateBeforeCall(Empty nfsReloadItem, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsReloadItem' is set
        if (nfsReloadItem == null) {
            throw new ApiException("Missing the required parameter 'nfsReloadItem' when calling createNfsReloadItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createNfsReloadItemCall(nfsReloadItem, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Reload default NFS export configuration.
     * @param nfsReloadItem  (required)
     * @param zone Access zone (optional)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createNfsReloadItem(Empty nfsReloadItem, String zone) throws ApiException {
        ApiResponse<Empty> resp = createNfsReloadItemWithHttpInfo(nfsReloadItem, zone);
        return resp.getData();
    }

    /**
     * 
     * Reload default NFS export configuration.
     * @param nfsReloadItem  (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createNfsReloadItemWithHttpInfo(Empty nfsReloadItem, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createNfsReloadItemValidateBeforeCall(nfsReloadItem, zone, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reload default NFS export configuration.
     * @param nfsReloadItem  (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNfsReloadItemAsync(Empty nfsReloadItem, String zone, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNfsReloadItemValidateBeforeCall(nfsReloadItem, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNtpServer
     * @param ntpServer  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNtpServerCall(NtpServerCreateParams ntpServer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ntpServer;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNtpServerValidateBeforeCall(NtpServerCreateParams ntpServer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ntpServer' is set
        if (ntpServer == null) {
            throw new ApiException("Missing the required parameter 'ntpServer' when calling createNtpServer(Async)");
        }
        

        com.squareup.okhttp.Call call = createNtpServerCall(ntpServer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create an NTP server entry.
     * @param ntpServer  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createNtpServer(NtpServerCreateParams ntpServer) throws ApiException {
        ApiResponse<CreateResponse> resp = createNtpServerWithHttpInfo(ntpServer);
        return resp.getData();
    }

    /**
     * 
     * Create an NTP server entry.
     * @param ntpServer  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createNtpServerWithHttpInfo(NtpServerCreateParams ntpServer) throws ApiException {
        com.squareup.okhttp.Call call = createNtpServerValidateBeforeCall(ntpServer, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an NTP server entry.
     * @param ntpServer  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNtpServerAsync(NtpServerCreateParams ntpServer, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNtpServerValidateBeforeCall(ntpServer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSmbLogLevelFilter
     * @param smbLogLevelFilter  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSmbLogLevelFilterCall(SmbLogLevelFilter smbLogLevelFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smbLogLevelFilter;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSmbLogLevelFilterValidateBeforeCall(SmbLogLevelFilter smbLogLevelFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbLogLevelFilter' is set
        if (smbLogLevelFilter == null) {
            throw new ApiException("Missing the required parameter 'smbLogLevelFilter' when calling createSmbLogLevelFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = createSmbLogLevelFilterCall(smbLogLevelFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Add an SMB log filter.
     * @param smbLogLevelFilter  (required)
     * @return CreateAuthRefreshItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateAuthRefreshItemResponse createSmbLogLevelFilter(SmbLogLevelFilter smbLogLevelFilter) throws ApiException {
        ApiResponse<CreateAuthRefreshItemResponse> resp = createSmbLogLevelFilterWithHttpInfo(smbLogLevelFilter);
        return resp.getData();
    }

    /**
     * 
     * Add an SMB log filter.
     * @param smbLogLevelFilter  (required)
     * @return ApiResponse&lt;CreateAuthRefreshItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateAuthRefreshItemResponse> createSmbLogLevelFilterWithHttpInfo(SmbLogLevelFilter smbLogLevelFilter) throws ApiException {
        com.squareup.okhttp.Call call = createSmbLogLevelFilterValidateBeforeCall(smbLogLevelFilter, null, null);
        Type localVarReturnType = new TypeToken<CreateAuthRefreshItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add an SMB log filter.
     * @param smbLogLevelFilter  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSmbLogLevelFilterAsync(SmbLogLevelFilter smbLogLevelFilter, final ApiCallback<CreateAuthRefreshItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSmbLogLevelFilterValidateBeforeCall(smbLogLevelFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAuthRefreshItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSmbShare
     * @param smbShare  (required)
     * @param zone Zone which contains this share. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSmbShareCall(SmbShareCreateParams smbShare, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smbShare;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/smb/shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSmbShareValidateBeforeCall(SmbShareCreateParams smbShare, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbShare' is set
        if (smbShare == null) {
            throw new ApiException("Missing the required parameter 'smbShare' when calling createSmbShare(Async)");
        }
        

        com.squareup.okhttp.Call call = createSmbShareCall(smbShare, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new share.
     * @param smbShare  (required)
     * @param zone Zone which contains this share. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSmbShare(SmbShareCreateParams smbShare, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createSmbShareWithHttpInfo(smbShare, zone);
        return resp.getData();
    }

    /**
     * 
     * Create a new share.
     * @param smbShare  (required)
     * @param zone Zone which contains this share. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSmbShareWithHttpInfo(SmbShareCreateParams smbShare, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createSmbShareValidateBeforeCall(smbShare, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new share.
     * @param smbShare  (required)
     * @param zone Zone which contains this share. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSmbShareAsync(SmbShareCreateParams smbShare, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSmbShareValidateBeforeCall(smbShare, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSwiftAccount
     * @param swiftAccount  (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSwiftAccountCall(SwiftAccount swiftAccount, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = swiftAccount;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/swift/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSwiftAccountValidateBeforeCall(SwiftAccount swiftAccount, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'swiftAccount' is set
        if (swiftAccount == null) {
            throw new ApiException("Missing the required parameter 'swiftAccount' when calling createSwiftAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = createSwiftAccountCall(swiftAccount, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new Swift account
     * @param swiftAccount  (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSwiftAccount(SwiftAccount swiftAccount, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createSwiftAccountWithHttpInfo(swiftAccount, zone);
        return resp.getData();
    }

    /**
     * 
     * Create a new Swift account
     * @param swiftAccount  (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSwiftAccountWithHttpInfo(SwiftAccount swiftAccount, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createSwiftAccountValidateBeforeCall(swiftAccount, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Swift account
     * @param swiftAccount  (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSwiftAccountAsync(SwiftAccount swiftAccount, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSwiftAccountValidateBeforeCall(swiftAccount, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHdfsProxyuser
     * @param hdfsProxyuserId Delete an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHdfsProxyuserCall(String hdfsProxyuserId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}"
            .replaceAll("\\{" + "HdfsProxyuserId" + "\\}", apiClient.escapeString(hdfsProxyuserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHdfsProxyuserValidateBeforeCall(String hdfsProxyuserId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsProxyuserId' is set
        if (hdfsProxyuserId == null) {
            throw new ApiException("Missing the required parameter 'hdfsProxyuserId' when calling deleteHdfsProxyuser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteHdfsProxyuserCall(hdfsProxyuserId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete an HDFS proxyuser.
     * @param hdfsProxyuserId Delete an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteHdfsProxyuser(String hdfsProxyuserId, String zone) throws ApiException {
        deleteHdfsProxyuserWithHttpInfo(hdfsProxyuserId, zone);
    }

    /**
     * 
     * Delete an HDFS proxyuser.
     * @param hdfsProxyuserId Delete an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteHdfsProxyuserWithHttpInfo(String hdfsProxyuserId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteHdfsProxyuserValidateBeforeCall(hdfsProxyuserId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an HDFS proxyuser.
     * @param hdfsProxyuserId Delete an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHdfsProxyuserAsync(String hdfsProxyuserId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHdfsProxyuserValidateBeforeCall(hdfsProxyuserId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteHdfsRack
     * @param hdfsRackId Delete the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHdfsRackCall(String hdfsRackId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/racks/{HdfsRackId}"
            .replaceAll("\\{" + "HdfsRackId" + "\\}", apiClient.escapeString(hdfsRackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHdfsRackValidateBeforeCall(String hdfsRackId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsRackId' is set
        if (hdfsRackId == null) {
            throw new ApiException("Missing the required parameter 'hdfsRackId' when calling deleteHdfsRack(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteHdfsRackCall(hdfsRackId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the HDFS rack.
     * @param hdfsRackId Delete the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteHdfsRack(String hdfsRackId, String zone) throws ApiException {
        deleteHdfsRackWithHttpInfo(hdfsRackId, zone);
    }

    /**
     * 
     * Delete the HDFS rack.
     * @param hdfsRackId Delete the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteHdfsRackWithHttpInfo(String hdfsRackId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteHdfsRackValidateBeforeCall(hdfsRackId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the HDFS rack.
     * @param hdfsRackId Delete the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHdfsRackAsync(String hdfsRackId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHdfsRackValidateBeforeCall(hdfsRackId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpContextsBackupById
     * @param ndmpContextsBackupId Delete a backup context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpContextsBackupByIdCall(String ndmpContextsBackupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/backup/{NdmpContextsBackupId}"
            .replaceAll("\\{" + "NdmpContextsBackupId" + "\\}", apiClient.escapeString(ndmpContextsBackupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpContextsBackupByIdValidateBeforeCall(String ndmpContextsBackupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpContextsBackupId' is set
        if (ndmpContextsBackupId == null) {
            throw new ApiException("Missing the required parameter 'ndmpContextsBackupId' when calling deleteNdmpContextsBackupById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpContextsBackupByIdCall(ndmpContextsBackupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a backup context
     * @param ndmpContextsBackupId Delete a backup context (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpContextsBackupById(String ndmpContextsBackupId) throws ApiException {
        deleteNdmpContextsBackupByIdWithHttpInfo(ndmpContextsBackupId);
    }

    /**
     * 
     * Delete a backup context
     * @param ndmpContextsBackupId Delete a backup context (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpContextsBackupByIdWithHttpInfo(String ndmpContextsBackupId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpContextsBackupByIdValidateBeforeCall(ndmpContextsBackupId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a backup context
     * @param ndmpContextsBackupId Delete a backup context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpContextsBackupByIdAsync(String ndmpContextsBackupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpContextsBackupByIdValidateBeforeCall(ndmpContextsBackupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpContextsBreById
     * @param ndmpContextsBreId Delete a NDMP BRE context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpContextsBreByIdCall(String ndmpContextsBreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/bre/{NdmpContextsBreId}"
            .replaceAll("\\{" + "NdmpContextsBreId" + "\\}", apiClient.escapeString(ndmpContextsBreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpContextsBreByIdValidateBeforeCall(String ndmpContextsBreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpContextsBreId' is set
        if (ndmpContextsBreId == null) {
            throw new ApiException("Missing the required parameter 'ndmpContextsBreId' when calling deleteNdmpContextsBreById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpContextsBreByIdCall(ndmpContextsBreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a NDMP BRE context
     * @param ndmpContextsBreId Delete a NDMP BRE context (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpContextsBreById(String ndmpContextsBreId) throws ApiException {
        deleteNdmpContextsBreByIdWithHttpInfo(ndmpContextsBreId);
    }

    /**
     * 
     * Delete a NDMP BRE context
     * @param ndmpContextsBreId Delete a NDMP BRE context (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpContextsBreByIdWithHttpInfo(String ndmpContextsBreId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpContextsBreByIdValidateBeforeCall(ndmpContextsBreId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a NDMP BRE context
     * @param ndmpContextsBreId Delete a NDMP BRE context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpContextsBreByIdAsync(String ndmpContextsBreId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpContextsBreByIdValidateBeforeCall(ndmpContextsBreId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpContextsRestoreById
     * @param ndmpContextsRestoreId Delete a restore context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpContextsRestoreByIdCall(String ndmpContextsRestoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/restore/{NdmpContextsRestoreId}"
            .replaceAll("\\{" + "NdmpContextsRestoreId" + "\\}", apiClient.escapeString(ndmpContextsRestoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpContextsRestoreByIdValidateBeforeCall(String ndmpContextsRestoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpContextsRestoreId' is set
        if (ndmpContextsRestoreId == null) {
            throw new ApiException("Missing the required parameter 'ndmpContextsRestoreId' when calling deleteNdmpContextsRestoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpContextsRestoreByIdCall(ndmpContextsRestoreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a restore context
     * @param ndmpContextsRestoreId Delete a restore context (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpContextsRestoreById(String ndmpContextsRestoreId) throws ApiException {
        deleteNdmpContextsRestoreByIdWithHttpInfo(ndmpContextsRestoreId);
    }

    /**
     * 
     * Delete a restore context
     * @param ndmpContextsRestoreId Delete a restore context (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpContextsRestoreByIdWithHttpInfo(String ndmpContextsRestoreId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpContextsRestoreByIdValidateBeforeCall(ndmpContextsRestoreId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a restore context
     * @param ndmpContextsRestoreId Delete a restore context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpContextsRestoreByIdAsync(String ndmpContextsRestoreId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpContextsRestoreByIdValidateBeforeCall(ndmpContextsRestoreId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpDumpdate
     * @param ndmpDumpdateId Delete dumpdates entries of a specified path. (required)
     * @param level Level is an input from 0 to 10. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpDumpdateCall(String ndmpDumpdateId, Integer level, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/dumpdates/{NdmpDumpdateId}"
            .replaceAll("\\{" + "NdmpDumpdateId" + "\\}", apiClient.escapeString(ndmpDumpdateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpDumpdateValidateBeforeCall(String ndmpDumpdateId, Integer level, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpDumpdateId' is set
        if (ndmpDumpdateId == null) {
            throw new ApiException("Missing the required parameter 'ndmpDumpdateId' when calling deleteNdmpDumpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpDumpdateCall(ndmpDumpdateId, level, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete dumpdates entries of a specified path.
     * @param ndmpDumpdateId Delete dumpdates entries of a specified path. (required)
     * @param level Level is an input from 0 to 10. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpDumpdate(String ndmpDumpdateId, Integer level) throws ApiException {
        deleteNdmpDumpdateWithHttpInfo(ndmpDumpdateId, level);
    }

    /**
     * 
     * Delete dumpdates entries of a specified path.
     * @param ndmpDumpdateId Delete dumpdates entries of a specified path. (required)
     * @param level Level is an input from 0 to 10. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpDumpdateWithHttpInfo(String ndmpDumpdateId, Integer level) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpDumpdateValidateBeforeCall(ndmpDumpdateId, level, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete dumpdates entries of a specified path.
     * @param ndmpDumpdateId Delete dumpdates entries of a specified path. (required)
     * @param level Level is an input from 0 to 10. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpDumpdateAsync(String ndmpDumpdateId, Integer level, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpDumpdateValidateBeforeCall(ndmpDumpdateId, level, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpSession
     * @param ndmpSessionId Delete the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpSessionCall(String ndmpSessionId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/sessions/{NdmpSessionId}"
            .replaceAll("\\{" + "NdmpSessionId" + "\\}", apiClient.escapeString(ndmpSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpSessionValidateBeforeCall(String ndmpSessionId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSessionId' is set
        if (ndmpSessionId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSessionId' when calling deleteNdmpSession(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpSessionCall(ndmpSessionId, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the ndmp session.
     * @param ndmpSessionId Delete the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpSession(String ndmpSessionId, String lnn) throws ApiException {
        deleteNdmpSessionWithHttpInfo(ndmpSessionId, lnn);
    }

    /**
     * 
     * Delete the ndmp session.
     * @param ndmpSessionId Delete the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpSessionWithHttpInfo(String ndmpSessionId, String lnn) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpSessionValidateBeforeCall(ndmpSessionId, lnn, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the ndmp session.
     * @param ndmpSessionId Delete the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpSessionAsync(String ndmpSessionId, String lnn, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpSessionValidateBeforeCall(ndmpSessionId, lnn, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpSettingsPreferredIp
     * @param ndmpSettingsPreferredIpId Delete a preferred ip preference. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpSettingsPreferredIpCall(String ndmpSettingsPreferredIpId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/ndmp/settings/preferred-ips/{NdmpSettingsPreferredIpId}"
            .replaceAll("\\{" + "NdmpSettingsPreferredIpId" + "\\}", apiClient.escapeString(ndmpSettingsPreferredIpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpSettingsPreferredIpValidateBeforeCall(String ndmpSettingsPreferredIpId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsPreferredIpId' is set
        if (ndmpSettingsPreferredIpId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsPreferredIpId' when calling deleteNdmpSettingsPreferredIp(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpSettingsPreferredIpCall(ndmpSettingsPreferredIpId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a preferred ip preference.
     * @param ndmpSettingsPreferredIpId Delete a preferred ip preference. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpSettingsPreferredIp(String ndmpSettingsPreferredIpId) throws ApiException {
        deleteNdmpSettingsPreferredIpWithHttpInfo(ndmpSettingsPreferredIpId);
    }

    /**
     * 
     * Delete a preferred ip preference.
     * @param ndmpSettingsPreferredIpId Delete a preferred ip preference. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpSettingsPreferredIpWithHttpInfo(String ndmpSettingsPreferredIpId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIpId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a preferred ip preference.
     * @param ndmpSettingsPreferredIpId Delete a preferred ip preference. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpSettingsPreferredIpAsync(String ndmpSettingsPreferredIpId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIpId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpSettingsVariable
     * @param ndmpSettingsVariableId Delete preferred environment variable entries (required)
     * @param name Name of the variable to delete. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpSettingsVariableCall(String ndmpSettingsVariableId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}"
            .replaceAll("\\{" + "NdmpSettingsVariableId" + "\\}", apiClient.escapeString(ndmpSettingsVariableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpSettingsVariableValidateBeforeCall(String ndmpSettingsVariableId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsVariableId' is set
        if (ndmpSettingsVariableId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsVariableId' when calling deleteNdmpSettingsVariable(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpSettingsVariableCall(ndmpSettingsVariableId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete preferred environment variable entries
     * @param ndmpSettingsVariableId Delete preferred environment variable entries (required)
     * @param name Name of the variable to delete. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpSettingsVariable(String ndmpSettingsVariableId, String name) throws ApiException {
        deleteNdmpSettingsVariableWithHttpInfo(ndmpSettingsVariableId, name);
    }

    /**
     * 
     * Delete preferred environment variable entries
     * @param ndmpSettingsVariableId Delete preferred environment variable entries (required)
     * @param name Name of the variable to delete. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpSettingsVariableWithHttpInfo(String ndmpSettingsVariableId, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariableId, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete preferred environment variable entries
     * @param ndmpSettingsVariableId Delete preferred environment variable entries (required)
     * @param name Name of the variable to delete. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpSettingsVariableAsync(String ndmpSettingsVariableId, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariableId, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNdmpUser
     * @param ndmpUserId Delete the user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpUserCall(String ndmpUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/users/{NdmpUserId}"
            .replaceAll("\\{" + "NdmpUserId" + "\\}", apiClient.escapeString(ndmpUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNdmpUserValidateBeforeCall(String ndmpUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpUserId' is set
        if (ndmpUserId == null) {
            throw new ApiException("Missing the required parameter 'ndmpUserId' when calling deleteNdmpUser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNdmpUserCall(ndmpUserId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the user.
     * @param ndmpUserId Delete the user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNdmpUser(String ndmpUserId) throws ApiException {
        deleteNdmpUserWithHttpInfo(ndmpUserId);
    }

    /**
     * 
     * Delete the user.
     * @param ndmpUserId Delete the user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNdmpUserWithHttpInfo(String ndmpUserId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNdmpUserValidateBeforeCall(ndmpUserId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the user.
     * @param ndmpUserId Delete the user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNdmpUserAsync(String ndmpUserId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNdmpUserValidateBeforeCall(ndmpUserId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNfsAlias
     * @param nfsAliasId Delete the export. (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNfsAliasCall(String nfsAliasId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/aliases/{NfsAliasId}"
            .replaceAll("\\{" + "NfsAliasId" + "\\}", apiClient.escapeString(nfsAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNfsAliasValidateBeforeCall(String nfsAliasId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsAliasId' is set
        if (nfsAliasId == null) {
            throw new ApiException("Missing the required parameter 'nfsAliasId' when calling deleteNfsAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNfsAliasCall(nfsAliasId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the export.
     * @param nfsAliasId Delete the export. (required)
     * @param zone Access zone (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNfsAlias(String nfsAliasId, String zone) throws ApiException {
        deleteNfsAliasWithHttpInfo(nfsAliasId, zone);
    }

    /**
     * 
     * Delete the export.
     * @param nfsAliasId Delete the export. (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNfsAliasWithHttpInfo(String nfsAliasId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteNfsAliasValidateBeforeCall(nfsAliasId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the export.
     * @param nfsAliasId Delete the export. (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNfsAliasAsync(String nfsAliasId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNfsAliasValidateBeforeCall(nfsAliasId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNfsExport
     * @param nfsExportId Delete the export. (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNfsExportCall(String nfsExportId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/nfs/exports/{NfsExportId}"
            .replaceAll("\\{" + "NfsExportId" + "\\}", apiClient.escapeString(nfsExportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNfsExportValidateBeforeCall(String nfsExportId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsExportId' is set
        if (nfsExportId == null) {
            throw new ApiException("Missing the required parameter 'nfsExportId' when calling deleteNfsExport(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNfsExportCall(nfsExportId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the export.
     * @param nfsExportId Delete the export. (required)
     * @param zone Access zone (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNfsExport(String nfsExportId, String zone) throws ApiException {
        deleteNfsExportWithHttpInfo(nfsExportId, zone);
    }

    /**
     * 
     * Delete the export.
     * @param nfsExportId Delete the export. (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNfsExportWithHttpInfo(String nfsExportId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteNfsExportValidateBeforeCall(nfsExportId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the export.
     * @param nfsExportId Delete the export. (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNfsExportAsync(String nfsExportId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNfsExportValidateBeforeCall(nfsExportId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNfsNlmSession
     * @param nfsNlmSessionId Delete all lock state for this host. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param refresh if set to true, the client will be given a chance to reclaim its locks before they are destroyed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNfsNlmSessionCall(String nfsNlmSessionId, String clusterIp, String zone, Boolean refresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/nlm/sessions/{NfsNlmSessionId}"
            .replaceAll("\\{" + "NfsNlmSessionId" + "\\}", apiClient.escapeString(nfsNlmSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_ip", clusterIp));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (refresh != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("refresh", refresh));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNfsNlmSessionValidateBeforeCall(String nfsNlmSessionId, String clusterIp, String zone, Boolean refresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsNlmSessionId' is set
        if (nfsNlmSessionId == null) {
            throw new ApiException("Missing the required parameter 'nfsNlmSessionId' when calling deleteNfsNlmSession(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNfsNlmSessionCall(nfsNlmSessionId, clusterIp, zone, refresh, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all lock state for this host.
     * @param nfsNlmSessionId Delete all lock state for this host. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param refresh if set to true, the client will be given a chance to reclaim its locks before they are destroyed (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNfsNlmSession(String nfsNlmSessionId, String clusterIp, String zone, Boolean refresh) throws ApiException {
        deleteNfsNlmSessionWithHttpInfo(nfsNlmSessionId, clusterIp, zone, refresh);
    }

    /**
     * 
     * Delete all lock state for this host.
     * @param nfsNlmSessionId Delete all lock state for this host. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param refresh if set to true, the client will be given a chance to reclaim its locks before they are destroyed (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNfsNlmSessionWithHttpInfo(String nfsNlmSessionId, String clusterIp, String zone, Boolean refresh) throws ApiException {
        com.squareup.okhttp.Call call = deleteNfsNlmSessionValidateBeforeCall(nfsNlmSessionId, clusterIp, zone, refresh, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all lock state for this host.
     * @param nfsNlmSessionId Delete all lock state for this host. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param refresh if set to true, the client will be given a chance to reclaim its locks before they are destroyed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNfsNlmSessionAsync(String nfsNlmSessionId, String clusterIp, String zone, Boolean refresh, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNfsNlmSessionValidateBeforeCall(nfsNlmSessionId, clusterIp, zone, refresh, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNtpServer
     * @param ntpServerId Delete an NTP server entry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNtpServerCall(String ntpServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/servers/{NtpServerId}"
            .replaceAll("\\{" + "NtpServerId" + "\\}", apiClient.escapeString(ntpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNtpServerValidateBeforeCall(String ntpServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ntpServerId' is set
        if (ntpServerId == null) {
            throw new ApiException("Missing the required parameter 'ntpServerId' when calling deleteNtpServer(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNtpServerCall(ntpServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete an NTP server entry.
     * @param ntpServerId Delete an NTP server entry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNtpServer(String ntpServerId) throws ApiException {
        deleteNtpServerWithHttpInfo(ntpServerId);
    }

    /**
     * 
     * Delete an NTP server entry.
     * @param ntpServerId Delete an NTP server entry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNtpServerWithHttpInfo(String ntpServerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNtpServerValidateBeforeCall(ntpServerId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an NTP server entry.
     * @param ntpServerId Delete an NTP server entry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNtpServerAsync(String ntpServerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNtpServerValidateBeforeCall(ntpServerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNtpServers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNtpServersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNtpServersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteNtpServersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all NTP server entries.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNtpServers() throws ApiException {
        deleteNtpServersWithHttpInfo();
    }

    /**
     * 
     * Delete all NTP server entries.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNtpServersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteNtpServersValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all NTP server entries.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNtpServersAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNtpServersValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbLogLevelFilter
     * @param smbLogLevelFilterId Delete log filter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbLogLevelFilterCall(String smbLogLevelFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level/filters/{SmbLogLevelFilterId}"
            .replaceAll("\\{" + "SmbLogLevelFilterId" + "\\}", apiClient.escapeString(smbLogLevelFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbLogLevelFilterValidateBeforeCall(String smbLogLevelFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbLogLevelFilterId' is set
        if (smbLogLevelFilterId == null) {
            throw new ApiException("Missing the required parameter 'smbLogLevelFilterId' when calling deleteSmbLogLevelFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSmbLogLevelFilterCall(smbLogLevelFilterId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete log filter.
     * @param smbLogLevelFilterId Delete log filter. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbLogLevelFilter(String smbLogLevelFilterId) throws ApiException {
        deleteSmbLogLevelFilterWithHttpInfo(smbLogLevelFilterId);
    }

    /**
     * 
     * Delete log filter.
     * @param smbLogLevelFilterId Delete log filter. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbLogLevelFilterWithHttpInfo(String smbLogLevelFilterId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbLogLevelFilterValidateBeforeCall(smbLogLevelFilterId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete log filter.
     * @param smbLogLevelFilterId Delete log filter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbLogLevelFilterAsync(String smbLogLevelFilterId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbLogLevelFilterValidateBeforeCall(smbLogLevelFilterId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbLogLevelFilters
     * @param level Valid SMB logging levels (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbLogLevelFiltersCall(String level, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbLogLevelFiltersValidateBeforeCall(String level, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSmbLogLevelFiltersCall(level, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete existing SMB log filters.
     * @param level Valid SMB logging levels (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbLogLevelFilters(String level) throws ApiException {
        deleteSmbLogLevelFiltersWithHttpInfo(level);
    }

    /**
     * 
     * Delete existing SMB log filters.
     * @param level Valid SMB logging levels (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbLogLevelFiltersWithHttpInfo(String level) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbLogLevelFiltersValidateBeforeCall(level, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete existing SMB log filters.
     * @param level Valid SMB logging levels (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbLogLevelFiltersAsync(String level, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbLogLevelFiltersValidateBeforeCall(level, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbOpenfile
     * @param smbOpenfileId Close the file in the SMB server. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbOpenfileCall(String smbOpenfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/smb/openfiles/{SmbOpenfileId}"
            .replaceAll("\\{" + "SmbOpenfileId" + "\\}", apiClient.escapeString(smbOpenfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbOpenfileValidateBeforeCall(String smbOpenfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbOpenfileId' is set
        if (smbOpenfileId == null) {
            throw new ApiException("Missing the required parameter 'smbOpenfileId' when calling deleteSmbOpenfile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSmbOpenfileCall(smbOpenfileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Close the file in the SMB server.
     * @param smbOpenfileId Close the file in the SMB server. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbOpenfile(String smbOpenfileId) throws ApiException {
        deleteSmbOpenfileWithHttpInfo(smbOpenfileId);
    }

    /**
     * 
     * Close the file in the SMB server.
     * @param smbOpenfileId Close the file in the SMB server. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbOpenfileWithHttpInfo(String smbOpenfileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbOpenfileValidateBeforeCall(smbOpenfileId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Close the file in the SMB server.
     * @param smbOpenfileId Close the file in the SMB server. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbOpenfileAsync(String smbOpenfileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbOpenfileValidateBeforeCall(smbOpenfileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbSession
     * @param smbSessionId Close the SMB session. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbSessionCall(String smbSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/smb/sessions/{SmbSessionId}"
            .replaceAll("\\{" + "SmbSessionId" + "\\}", apiClient.escapeString(smbSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbSessionValidateBeforeCall(String smbSessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbSessionId' is set
        if (smbSessionId == null) {
            throw new ApiException("Missing the required parameter 'smbSessionId' when calling deleteSmbSession(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSmbSessionCall(smbSessionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Close the SMB session.
     * @param smbSessionId Close the SMB session. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbSession(String smbSessionId) throws ApiException {
        deleteSmbSessionWithHttpInfo(smbSessionId);
    }

    /**
     * 
     * Close the SMB session.
     * @param smbSessionId Close the SMB session. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbSessionWithHttpInfo(String smbSessionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbSessionValidateBeforeCall(smbSessionId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Close the SMB session.
     * @param smbSessionId Close the SMB session. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbSessionAsync(String smbSessionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbSessionValidateBeforeCall(smbSessionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbSessionsComputerUser
     * @param smbSessionsComputerUser Close the SMB session. (required)
     * @param computer  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbSessionsComputerUserCall(String smbSessionsComputerUser, String computer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/smb/sessions/{Computer}/{SmbSessionsComputerUser}"
            .replaceAll("\\{" + "SmbSessionsComputerUser" + "\\}", apiClient.escapeString(smbSessionsComputerUser.toString()))
            .replaceAll("\\{" + "Computer" + "\\}", apiClient.escapeString(computer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbSessionsComputerUserValidateBeforeCall(String smbSessionsComputerUser, String computer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbSessionsComputerUser' is set
        if (smbSessionsComputerUser == null) {
            throw new ApiException("Missing the required parameter 'smbSessionsComputerUser' when calling deleteSmbSessionsComputerUser(Async)");
        }
        
        // verify the required parameter 'computer' is set
        if (computer == null) {
            throw new ApiException("Missing the required parameter 'computer' when calling deleteSmbSessionsComputerUser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSmbSessionsComputerUserCall(smbSessionsComputerUser, computer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Close the SMB session.
     * @param smbSessionsComputerUser Close the SMB session. (required)
     * @param computer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbSessionsComputerUser(String smbSessionsComputerUser, String computer) throws ApiException {
        deleteSmbSessionsComputerUserWithHttpInfo(smbSessionsComputerUser, computer);
    }

    /**
     * 
     * Close the SMB session.
     * @param smbSessionsComputerUser Close the SMB session. (required)
     * @param computer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbSessionsComputerUserWithHttpInfo(String smbSessionsComputerUser, String computer) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbSessionsComputerUserValidateBeforeCall(smbSessionsComputerUser, computer, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Close the SMB session.
     * @param smbSessionsComputerUser Close the SMB session. (required)
     * @param computer  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbSessionsComputerUserAsync(String smbSessionsComputerUser, String computer, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbSessionsComputerUserValidateBeforeCall(smbSessionsComputerUser, computer, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbShare
     * @param smbShareId Delete the share. (required)
     * @param zone Zone which contains this share. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbShareCall(String smbShareId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/smb/shares/{SmbShareId}"
            .replaceAll("\\{" + "SmbShareId" + "\\}", apiClient.escapeString(smbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbShareValidateBeforeCall(String smbShareId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbShareId' is set
        if (smbShareId == null) {
            throw new ApiException("Missing the required parameter 'smbShareId' when calling deleteSmbShare(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSmbShareCall(smbShareId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the share.
     * @param smbShareId Delete the share. (required)
     * @param zone Zone which contains this share. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbShare(String smbShareId, String zone) throws ApiException {
        deleteSmbShareWithHttpInfo(smbShareId, zone);
    }

    /**
     * 
     * Delete the share.
     * @param smbShareId Delete the share. (required)
     * @param zone Zone which contains this share. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbShareWithHttpInfo(String smbShareId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbShareValidateBeforeCall(smbShareId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the share.
     * @param smbShareId Delete the share. (required)
     * @param zone Zone which contains this share. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbShareAsync(String smbShareId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbShareValidateBeforeCall(smbShareId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSmbShares
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmbSharesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/smb/shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSmbSharesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSmbSharesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete multiple smb shares.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSmbShares() throws ApiException {
        deleteSmbSharesWithHttpInfo();
    }

    /**
     * 
     * Delete multiple smb shares.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSmbSharesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteSmbSharesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete multiple smb shares.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmbSharesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmbSharesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSwiftAccount
     * @param swiftAccountId Delete a Swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSwiftAccountCall(String swiftAccountId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/swift/accounts/{SwiftAccountId}"
            .replaceAll("\\{" + "SwiftAccountId" + "\\}", apiClient.escapeString(swiftAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSwiftAccountValidateBeforeCall(String swiftAccountId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'swiftAccountId' is set
        if (swiftAccountId == null) {
            throw new ApiException("Missing the required parameter 'swiftAccountId' when calling deleteSwiftAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSwiftAccountCall(swiftAccountId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a Swift account.
     * @param swiftAccountId Delete a Swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSwiftAccount(String swiftAccountId, String zone) throws ApiException {
        deleteSwiftAccountWithHttpInfo(swiftAccountId, zone);
    }

    /**
     * 
     * Delete a Swift account.
     * @param swiftAccountId Delete a Swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSwiftAccountWithHttpInfo(String swiftAccountId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = deleteSwiftAccountValidateBeforeCall(swiftAccountId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a Swift account.
     * @param swiftAccountId Delete a Swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSwiftAccountAsync(String swiftAccountId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSwiftAccountValidateBeforeCall(swiftAccountId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getFtpSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFtpSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ftp/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFtpSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFtpSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the FTP settings.
     * @return FtpSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FtpSettings getFtpSettings() throws ApiException {
        ApiResponse<FtpSettings> resp = getFtpSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the FTP settings.
     * @return ApiResponse&lt;FtpSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FtpSettings> getFtpSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getFtpSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FtpSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the FTP settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFtpSettingsAsync(final ApiCallback<FtpSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFtpSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FtpSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHdfsLogLevel
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHdfsLogLevelCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/hdfs/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHdfsLogLevelValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHdfsLogLevelCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the HDFS service log-level.
     * @return HdfsLogLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsLogLevel getHdfsLogLevel() throws ApiException {
        ApiResponse<HdfsLogLevel> resp = getHdfsLogLevelWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the HDFS service log-level.
     * @return ApiResponse&lt;HdfsLogLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsLogLevel> getHdfsLogLevelWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHdfsLogLevelValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<HdfsLogLevel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the HDFS service log-level.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHdfsLogLevelAsync(final ApiCallback<HdfsLogLevel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHdfsLogLevelValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsLogLevel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHdfsProxyuser
     * @param hdfsProxyuserId View the proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHdfsProxyuserCall(String hdfsProxyuserId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}"
            .replaceAll("\\{" + "HdfsProxyuserId" + "\\}", apiClient.escapeString(hdfsProxyuserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHdfsProxyuserValidateBeforeCall(String hdfsProxyuserId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsProxyuserId' is set
        if (hdfsProxyuserId == null) {
            throw new ApiException("Missing the required parameter 'hdfsProxyuserId' when calling getHdfsProxyuser(Async)");
        }
        

        com.squareup.okhttp.Call call = getHdfsProxyuserCall(hdfsProxyuserId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View the proxyuser.
     * @param hdfsProxyuserId View the proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @return HdfsProxyusers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsProxyusers getHdfsProxyuser(String hdfsProxyuserId, String zone) throws ApiException {
        ApiResponse<HdfsProxyusers> resp = getHdfsProxyuserWithHttpInfo(hdfsProxyuserId, zone);
        return resp.getData();
    }

    /**
     * 
     * View the proxyuser.
     * @param hdfsProxyuserId View the proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @return ApiResponse&lt;HdfsProxyusers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsProxyusers> getHdfsProxyuserWithHttpInfo(String hdfsProxyuserId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getHdfsProxyuserValidateBeforeCall(hdfsProxyuserId, zone, null, null);
        Type localVarReturnType = new TypeToken<HdfsProxyusers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View the proxyuser.
     * @param hdfsProxyuserId View the proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHdfsProxyuserAsync(String hdfsProxyuserId, String zone, final ApiCallback<HdfsProxyusers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHdfsProxyuserValidateBeforeCall(hdfsProxyuserId, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsProxyusers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHdfsRack
     * @param hdfsRackId Retrieve the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHdfsRackCall(String hdfsRackId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/racks/{HdfsRackId}"
            .replaceAll("\\{" + "HdfsRackId" + "\\}", apiClient.escapeString(hdfsRackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHdfsRackValidateBeforeCall(String hdfsRackId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsRackId' is set
        if (hdfsRackId == null) {
            throw new ApiException("Missing the required parameter 'hdfsRackId' when calling getHdfsRack(Async)");
        }
        

        com.squareup.okhttp.Call call = getHdfsRackCall(hdfsRackId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the HDFS rack.
     * @param hdfsRackId Retrieve the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @return HdfsRacks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsRacks getHdfsRack(String hdfsRackId, String zone) throws ApiException {
        ApiResponse<HdfsRacks> resp = getHdfsRackWithHttpInfo(hdfsRackId, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the HDFS rack.
     * @param hdfsRackId Retrieve the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @return ApiResponse&lt;HdfsRacks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsRacks> getHdfsRackWithHttpInfo(String hdfsRackId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getHdfsRackValidateBeforeCall(hdfsRackId, zone, null, null);
        Type localVarReturnType = new TypeToken<HdfsRacks>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the HDFS rack.
     * @param hdfsRackId Retrieve the HDFS rack. (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHdfsRackAsync(String hdfsRackId, String zone, final ApiCallback<HdfsRacks> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHdfsRackValidateBeforeCall(hdfsRackId, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsRacks>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHdfsRangerPluginSettings
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHdfsRangerPluginSettingsCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/hdfs/ranger-plugin/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHdfsRangerPluginSettingsValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHdfsRangerPluginSettingsCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve HDFS ranger-plugin properties.
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @return HdfsRangerPluginSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsRangerPluginSettings getHdfsRangerPluginSettings(String zone) throws ApiException {
        ApiResponse<HdfsRangerPluginSettings> resp = getHdfsRangerPluginSettingsWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve HDFS ranger-plugin properties.
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @return ApiResponse&lt;HdfsRangerPluginSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsRangerPluginSettings> getHdfsRangerPluginSettingsWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = getHdfsRangerPluginSettingsValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<HdfsRangerPluginSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve HDFS ranger-plugin properties.
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHdfsRangerPluginSettingsAsync(String zone, final ApiCallback<HdfsRangerPluginSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHdfsRangerPluginSettingsValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsRangerPluginSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHdfsSettings
     * @param zone Access zone which contains HDFS settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHdfsSettingsCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/hdfs/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHdfsSettingsValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHdfsSettingsCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve HDFS properties.
     * @param zone Access zone which contains HDFS settings. (optional)
     * @return HdfsSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsSettings getHdfsSettings(String zone) throws ApiException {
        ApiResponse<HdfsSettings> resp = getHdfsSettingsWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve HDFS properties.
     * @param zone Access zone which contains HDFS settings. (optional)
     * @return ApiResponse&lt;HdfsSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsSettings> getHdfsSettingsWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = getHdfsSettingsValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<HdfsSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve HDFS properties.
     * @param zone Access zone which contains HDFS settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHdfsSettingsAsync(String zone, final ApiCallback<HdfsSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHdfsSettingsValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHttpSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHttpSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/http/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHttpSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHttpSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve HTTP properties.
     * @return HttpSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HttpSettings getHttpSettings() throws ApiException {
        ApiResponse<HttpSettings> resp = getHttpSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve HTTP properties.
     * @return ApiResponse&lt;HttpSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HttpSettings> getHttpSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getHttpSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<HttpSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve HTTP properties.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHttpSettingsAsync(final ApiCallback<HttpSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHttpSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HttpSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpContextsBackup
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBackupCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/backup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpContextsBackupValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpContextsBackupCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get List of NDMP Backup Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NdmpContextsBackupExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpContextsBackupExtended getNdmpContextsBackup(Integer limit, String resume) throws ApiException {
        ApiResponse<NdmpContextsBackupExtended> resp = getNdmpContextsBackupWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Get List of NDMP Backup Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NdmpContextsBackupExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpContextsBackupExtended> getNdmpContextsBackupWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpContextsBackupValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<NdmpContextsBackupExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get List of NDMP Backup Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBackupAsync(Integer limit, String resume, final ApiCallback<NdmpContextsBackupExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpContextsBackupValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpContextsBackupExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpContextsBackupById
     * @param ndmpContextsBackupId View a NDMP backup context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBackupByIdCall(String ndmpContextsBackupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/backup/{NdmpContextsBackupId}"
            .replaceAll("\\{" + "NdmpContextsBackupId" + "\\}", apiClient.escapeString(ndmpContextsBackupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpContextsBackupByIdValidateBeforeCall(String ndmpContextsBackupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpContextsBackupId' is set
        if (ndmpContextsBackupId == null) {
            throw new ApiException("Missing the required parameter 'ndmpContextsBackupId' when calling getNdmpContextsBackupById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpContextsBackupByIdCall(ndmpContextsBackupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a NDMP backup context
     * @param ndmpContextsBackupId View a NDMP backup context (required)
     * @return NdmpContextsBackup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpContextsBackup getNdmpContextsBackupById(String ndmpContextsBackupId) throws ApiException {
        ApiResponse<NdmpContextsBackup> resp = getNdmpContextsBackupByIdWithHttpInfo(ndmpContextsBackupId);
        return resp.getData();
    }

    /**
     * 
     * View a NDMP backup context
     * @param ndmpContextsBackupId View a NDMP backup context (required)
     * @return ApiResponse&lt;NdmpContextsBackup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpContextsBackup> getNdmpContextsBackupByIdWithHttpInfo(String ndmpContextsBackupId) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpContextsBackupByIdValidateBeforeCall(ndmpContextsBackupId, null, null);
        Type localVarReturnType = new TypeToken<NdmpContextsBackup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a NDMP backup context
     * @param ndmpContextsBackupId View a NDMP backup context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBackupByIdAsync(String ndmpContextsBackupId, final ApiCallback<NdmpContextsBackup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpContextsBackupByIdValidateBeforeCall(ndmpContextsBackupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpContextsBackup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpContextsBre
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBreCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/bre";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpContextsBreValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpContextsBreCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get list of NDMP BRE Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NdmpContextsBreExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpContextsBreExtended getNdmpContextsBre(Integer limit, String resume) throws ApiException {
        ApiResponse<NdmpContextsBreExtended> resp = getNdmpContextsBreWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Get list of NDMP BRE Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NdmpContextsBreExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpContextsBreExtended> getNdmpContextsBreWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpContextsBreValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<NdmpContextsBreExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of NDMP BRE Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBreAsync(Integer limit, String resume, final ApiCallback<NdmpContextsBreExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpContextsBreValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpContextsBreExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpContextsBreById
     * @param ndmpContextsBreId View a NDMP BRE context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBreByIdCall(String ndmpContextsBreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/bre/{NdmpContextsBreId}"
            .replaceAll("\\{" + "NdmpContextsBreId" + "\\}", apiClient.escapeString(ndmpContextsBreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpContextsBreByIdValidateBeforeCall(String ndmpContextsBreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpContextsBreId' is set
        if (ndmpContextsBreId == null) {
            throw new ApiException("Missing the required parameter 'ndmpContextsBreId' when calling getNdmpContextsBreById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpContextsBreByIdCall(ndmpContextsBreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a NDMP BRE context
     * @param ndmpContextsBreId View a NDMP BRE context (required)
     * @return NdmpContextsBre
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpContextsBre getNdmpContextsBreById(String ndmpContextsBreId) throws ApiException {
        ApiResponse<NdmpContextsBre> resp = getNdmpContextsBreByIdWithHttpInfo(ndmpContextsBreId);
        return resp.getData();
    }

    /**
     * 
     * View a NDMP BRE context
     * @param ndmpContextsBreId View a NDMP BRE context (required)
     * @return ApiResponse&lt;NdmpContextsBre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpContextsBre> getNdmpContextsBreByIdWithHttpInfo(String ndmpContextsBreId) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpContextsBreByIdValidateBeforeCall(ndmpContextsBreId, null, null);
        Type localVarReturnType = new TypeToken<NdmpContextsBre>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a NDMP BRE context
     * @param ndmpContextsBreId View a NDMP BRE context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsBreByIdAsync(String ndmpContextsBreId, final ApiCallback<NdmpContextsBre> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpContextsBreByIdValidateBeforeCall(ndmpContextsBreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpContextsBre>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpContextsRestore
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsRestoreCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpContextsRestoreValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpContextsRestoreCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get List of NDMP Restore Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NdmpContextsBackupExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpContextsBackupExtended getNdmpContextsRestore(Integer limit, String resume) throws ApiException {
        ApiResponse<NdmpContextsBackupExtended> resp = getNdmpContextsRestoreWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Get List of NDMP Restore Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NdmpContextsBackupExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpContextsBackupExtended> getNdmpContextsRestoreWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpContextsRestoreValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<NdmpContextsBackupExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get List of NDMP Restore Contexts.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsRestoreAsync(Integer limit, String resume, final ApiCallback<NdmpContextsBackupExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpContextsRestoreValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpContextsBackupExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpContextsRestoreById
     * @param ndmpContextsRestoreId View a NDMP restore context (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsRestoreByIdCall(String ndmpContextsRestoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/contexts/restore/{NdmpContextsRestoreId}"
            .replaceAll("\\{" + "NdmpContextsRestoreId" + "\\}", apiClient.escapeString(ndmpContextsRestoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpContextsRestoreByIdValidateBeforeCall(String ndmpContextsRestoreId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpContextsRestoreId' is set
        if (ndmpContextsRestoreId == null) {
            throw new ApiException("Missing the required parameter 'ndmpContextsRestoreId' when calling getNdmpContextsRestoreById(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpContextsRestoreByIdCall(ndmpContextsRestoreId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a NDMP restore context
     * @param ndmpContextsRestoreId View a NDMP restore context (required)
     * @return NdmpContextsBackup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpContextsBackup getNdmpContextsRestoreById(String ndmpContextsRestoreId) throws ApiException {
        ApiResponse<NdmpContextsBackup> resp = getNdmpContextsRestoreByIdWithHttpInfo(ndmpContextsRestoreId);
        return resp.getData();
    }

    /**
     * 
     * View a NDMP restore context
     * @param ndmpContextsRestoreId View a NDMP restore context (required)
     * @return ApiResponse&lt;NdmpContextsBackup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpContextsBackup> getNdmpContextsRestoreByIdWithHttpInfo(String ndmpContextsRestoreId) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpContextsRestoreByIdValidateBeforeCall(ndmpContextsRestoreId, null, null);
        Type localVarReturnType = new TypeToken<NdmpContextsBackup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a NDMP restore context
     * @param ndmpContextsRestoreId View a NDMP restore context (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpContextsRestoreByIdAsync(String ndmpContextsRestoreId, final ApiCallback<NdmpContextsBackup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpContextsRestoreByIdValidateBeforeCall(ndmpContextsRestoreId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpContextsBackup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpDiagnostics
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpDiagnosticsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/diagnostics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpDiagnosticsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpDiagnosticsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List ndmp diagnostics settings.
     * @return NdmpDiagnostics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpDiagnostics getNdmpDiagnostics() throws ApiException {
        ApiResponse<NdmpDiagnostics> resp = getNdmpDiagnosticsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List ndmp diagnostics settings.
     * @return ApiResponse&lt;NdmpDiagnostics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpDiagnostics> getNdmpDiagnosticsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNdmpDiagnosticsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NdmpDiagnostics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List ndmp diagnostics settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpDiagnosticsAsync(final ApiCallback<NdmpDiagnostics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpDiagnosticsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpDiagnostics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpDumpdate
     * @param ndmpDumpdateId List of dumpdates entries. (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param level Filter by dumpdate level. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param path Filter by file path. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpDumpdateCall(String ndmpDumpdateId, String sort, String resume, Integer level, Integer limit, String path, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/dumpdates/{NdmpDumpdateId}"
            .replaceAll("\\{" + "NdmpDumpdateId" + "\\}", apiClient.escapeString(ndmpDumpdateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpDumpdateValidateBeforeCall(String ndmpDumpdateId, String sort, String resume, Integer level, Integer limit, String path, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpDumpdateId' is set
        if (ndmpDumpdateId == null) {
            throw new ApiException("Missing the required parameter 'ndmpDumpdateId' when calling getNdmpDumpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpDumpdateCall(ndmpDumpdateId, sort, resume, level, limit, path, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List of dumpdates entries.
     * @param ndmpDumpdateId List of dumpdates entries. (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param level Filter by dumpdate level. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param path Filter by file path. (optional)
     * @param dir The direction of the sort. (optional)
     * @return NdmpDumpdates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpDumpdates getNdmpDumpdate(String ndmpDumpdateId, String sort, String resume, Integer level, Integer limit, String path, String dir) throws ApiException {
        ApiResponse<NdmpDumpdates> resp = getNdmpDumpdateWithHttpInfo(ndmpDumpdateId, sort, resume, level, limit, path, dir);
        return resp.getData();
    }

    /**
     * 
     * List of dumpdates entries.
     * @param ndmpDumpdateId List of dumpdates entries. (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param level Filter by dumpdate level. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param path Filter by file path. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;NdmpDumpdates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpDumpdates> getNdmpDumpdateWithHttpInfo(String ndmpDumpdateId, String sort, String resume, Integer level, Integer limit, String path, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpDumpdateValidateBeforeCall(ndmpDumpdateId, sort, resume, level, limit, path, dir, null, null);
        Type localVarReturnType = new TypeToken<NdmpDumpdates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of dumpdates entries.
     * @param ndmpDumpdateId List of dumpdates entries. (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param level Filter by dumpdate level. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param path Filter by file path. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpDumpdateAsync(String ndmpDumpdateId, String sort, String resume, Integer level, Integer limit, String path, String dir, final ApiCallback<NdmpDumpdates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpDumpdateValidateBeforeCall(ndmpDumpdateId, sort, resume, level, limit, path, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpDumpdates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpLogs
     * @param lnn Logical node number. (optional)
     * @param page The page number of the NDMP logs file. (optional)
     * @param pagesize The page size of each page of the NDMP log file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpLogsCall(String lnn, Integer page, Integer pagesize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pagesize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pagesize", pagesize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpLogsValidateBeforeCall(String lnn, Integer page, Integer pagesize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpLogsCall(lnn, page, pagesize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get NDMP logs
     * @param lnn Logical node number. (optional)
     * @param page The page number of the NDMP logs file. (optional)
     * @param pagesize The page size of each page of the NDMP log file. (optional)
     * @return NdmpLogs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpLogs getNdmpLogs(String lnn, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<NdmpLogs> resp = getNdmpLogsWithHttpInfo(lnn, page, pagesize);
        return resp.getData();
    }

    /**
     * 
     * Get NDMP logs
     * @param lnn Logical node number. (optional)
     * @param page The page number of the NDMP logs file. (optional)
     * @param pagesize The page size of each page of the NDMP log file. (optional)
     * @return ApiResponse&lt;NdmpLogs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpLogs> getNdmpLogsWithHttpInfo(String lnn, Integer page, Integer pagesize) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpLogsValidateBeforeCall(lnn, page, pagesize, null, null);
        Type localVarReturnType = new TypeToken<NdmpLogs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get NDMP logs
     * @param lnn Logical node number. (optional)
     * @param page The page number of the NDMP logs file. (optional)
     * @param pagesize The page size of each page of the NDMP log file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpLogsAsync(String lnn, Integer page, Integer pagesize, final ApiCallback<NdmpLogs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpLogsValidateBeforeCall(lnn, page, pagesize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpLogs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpSession
     * @param ndmpSessionId Retrieve the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpSessionCall(String ndmpSessionId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/sessions/{NdmpSessionId}"
            .replaceAll("\\{" + "NdmpSessionId" + "\\}", apiClient.escapeString(ndmpSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpSessionValidateBeforeCall(String ndmpSessionId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSessionId' is set
        if (ndmpSessionId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSessionId' when calling getNdmpSession(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpSessionCall(ndmpSessionId, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the ndmp session.
     * @param ndmpSessionId Retrieve the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @return NdmpSessions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSessions getNdmpSession(String ndmpSessionId, String lnn) throws ApiException {
        ApiResponse<NdmpSessions> resp = getNdmpSessionWithHttpInfo(ndmpSessionId, lnn);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the ndmp session.
     * @param ndmpSessionId Retrieve the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @return ApiResponse&lt;NdmpSessions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSessions> getNdmpSessionWithHttpInfo(String ndmpSessionId, String lnn) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpSessionValidateBeforeCall(ndmpSessionId, lnn, null, null);
        Type localVarReturnType = new TypeToken<NdmpSessions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the ndmp session.
     * @param ndmpSessionId Retrieve the ndmp session. (required)
     * @param lnn Logical node number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpSessionAsync(String ndmpSessionId, String lnn, final ApiCallback<NdmpSessions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpSessionValidateBeforeCall(ndmpSessionId, lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSessions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpSessions
     * @param consolidate Combine sessions in the same context. (optional)
     * @param node Only return sessions of the node. (optional)
     * @param session Only return the specified session. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpSessionsCall(Boolean consolidate, String node, String session, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (consolidate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("consolidate", consolidate));
        if (node != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node", node));
        if (session != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("session", session));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpSessionsValidateBeforeCall(Boolean consolidate, String node, String session, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpSessionsCall(consolidate, node, session, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all ndmp sessions.
     * @param consolidate Combine sessions in the same context. (optional)
     * @param node Only return sessions of the node. (optional)
     * @param session Only return the specified session. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NdmpSessionsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSessionsExtended getNdmpSessions(Boolean consolidate, String node, String session, Integer limit, String resume) throws ApiException {
        ApiResponse<NdmpSessionsExtended> resp = getNdmpSessionsWithHttpInfo(consolidate, node, session, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List all ndmp sessions.
     * @param consolidate Combine sessions in the same context. (optional)
     * @param node Only return sessions of the node. (optional)
     * @param session Only return the specified session. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NdmpSessionsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSessionsExtended> getNdmpSessionsWithHttpInfo(Boolean consolidate, String node, String session, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpSessionsValidateBeforeCall(consolidate, node, session, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<NdmpSessionsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ndmp sessions.
     * @param consolidate Combine sessions in the same context. (optional)
     * @param node Only return sessions of the node. (optional)
     * @param session Only return the specified session. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpSessionsAsync(Boolean consolidate, String node, String session, Integer limit, String resume, final ApiCallback<NdmpSessionsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpSessionsValidateBeforeCall(consolidate, node, session, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSessionsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpSettingsDmas
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsDmasCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/dmas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpSettingsDmasValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpSettingsDmasCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List of supported dma vendors.
     * @return NdmpSettingsDmas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSettingsDmas getNdmpSettingsDmas() throws ApiException {
        ApiResponse<NdmpSettingsDmas> resp = getNdmpSettingsDmasWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List of supported dma vendors.
     * @return ApiResponse&lt;NdmpSettingsDmas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSettingsDmas> getNdmpSettingsDmasWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNdmpSettingsDmasValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NdmpSettingsDmas>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of supported dma vendors.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsDmasAsync(final ApiCallback<NdmpSettingsDmas> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpSettingsDmasValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSettingsDmas>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpSettingsGlobal
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsGlobalCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpSettingsGlobalValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNdmpSettingsGlobalCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List global ndmp settings.
     * @return NdmpSettingsGlobal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSettingsGlobal getNdmpSettingsGlobal() throws ApiException {
        ApiResponse<NdmpSettingsGlobal> resp = getNdmpSettingsGlobalWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List global ndmp settings.
     * @return ApiResponse&lt;NdmpSettingsGlobal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSettingsGlobal> getNdmpSettingsGlobalWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNdmpSettingsGlobalValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NdmpSettingsGlobal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List global ndmp settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsGlobalAsync(final ApiCallback<NdmpSettingsGlobal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpSettingsGlobalValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSettingsGlobal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpSettingsPreferredIp
     * @param ndmpSettingsPreferredIpId Get one preference by id. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsPreferredIpCall(String ndmpSettingsPreferredIpId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/ndmp/settings/preferred-ips/{NdmpSettingsPreferredIpId}"
            .replaceAll("\\{" + "NdmpSettingsPreferredIpId" + "\\}", apiClient.escapeString(ndmpSettingsPreferredIpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpSettingsPreferredIpValidateBeforeCall(String ndmpSettingsPreferredIpId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsPreferredIpId' is set
        if (ndmpSettingsPreferredIpId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsPreferredIpId' when calling getNdmpSettingsPreferredIp(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpSettingsPreferredIpCall(ndmpSettingsPreferredIpId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get one preference by id.
     * @param ndmpSettingsPreferredIpId Get one preference by id. (required)
     * @return NdmpSettingsPreferredIps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSettingsPreferredIps getNdmpSettingsPreferredIp(String ndmpSettingsPreferredIpId) throws ApiException {
        ApiResponse<NdmpSettingsPreferredIps> resp = getNdmpSettingsPreferredIpWithHttpInfo(ndmpSettingsPreferredIpId);
        return resp.getData();
    }

    /**
     * 
     * Get one preference by id.
     * @param ndmpSettingsPreferredIpId Get one preference by id. (required)
     * @return ApiResponse&lt;NdmpSettingsPreferredIps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSettingsPreferredIps> getNdmpSettingsPreferredIpWithHttpInfo(String ndmpSettingsPreferredIpId) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIpId, null, null);
        Type localVarReturnType = new TypeToken<NdmpSettingsPreferredIps>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get one preference by id.
     * @param ndmpSettingsPreferredIpId Get one preference by id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsPreferredIpAsync(String ndmpSettingsPreferredIpId, final ApiCallback<NdmpSettingsPreferredIps> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIpId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSettingsPreferredIps>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpSettingsVariable
     * @param ndmpSettingsVariableId List of preferred environment variables. (required)
     * @param path Return variables of the path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsVariableCall(String ndmpSettingsVariableId, String path, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}"
            .replaceAll("\\{" + "NdmpSettingsVariableId" + "\\}", apiClient.escapeString(ndmpSettingsVariableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpSettingsVariableValidateBeforeCall(String ndmpSettingsVariableId, String path, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsVariableId' is set
        if (ndmpSettingsVariableId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsVariableId' when calling getNdmpSettingsVariable(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpSettingsVariableCall(ndmpSettingsVariableId, path, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List of preferred environment variables.
     * @param ndmpSettingsVariableId List of preferred environment variables. (required)
     * @param path Return variables of the path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NdmpSettingsVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSettingsVariables getNdmpSettingsVariable(String ndmpSettingsVariableId, String path, Integer limit, String resume) throws ApiException {
        ApiResponse<NdmpSettingsVariables> resp = getNdmpSettingsVariableWithHttpInfo(ndmpSettingsVariableId, path, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * List of preferred environment variables.
     * @param ndmpSettingsVariableId List of preferred environment variables. (required)
     * @param path Return variables of the path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NdmpSettingsVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSettingsVariables> getNdmpSettingsVariableWithHttpInfo(String ndmpSettingsVariableId, String path, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariableId, path, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<NdmpSettingsVariables>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of preferred environment variables.
     * @param ndmpSettingsVariableId List of preferred environment variables. (required)
     * @param path Return variables of the path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpSettingsVariableAsync(String ndmpSettingsVariableId, String path, Integer limit, String resume, final ApiCallback<NdmpSettingsVariables> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariableId, path, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSettingsVariables>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNdmpUser
     * @param ndmpUserId Retrieve the user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNdmpUserCall(String ndmpUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/users/{NdmpUserId}"
            .replaceAll("\\{" + "NdmpUserId" + "\\}", apiClient.escapeString(ndmpUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNdmpUserValidateBeforeCall(String ndmpUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpUserId' is set
        if (ndmpUserId == null) {
            throw new ApiException("Missing the required parameter 'ndmpUserId' when calling getNdmpUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getNdmpUserCall(ndmpUserId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the user.
     * @param ndmpUserId Retrieve the user. (required)
     * @return NdmpUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpUsers getNdmpUser(String ndmpUserId) throws ApiException {
        ApiResponse<NdmpUsers> resp = getNdmpUserWithHttpInfo(ndmpUserId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the user.
     * @param ndmpUserId Retrieve the user. (required)
     * @return ApiResponse&lt;NdmpUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpUsers> getNdmpUserWithHttpInfo(String ndmpUserId) throws ApiException {
        com.squareup.okhttp.Call call = getNdmpUserValidateBeforeCall(ndmpUserId, null, null);
        Type localVarReturnType = new TypeToken<NdmpUsers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the user.
     * @param ndmpUserId Retrieve the user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNdmpUserAsync(String ndmpUserId, final ApiCallback<NdmpUsers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNdmpUserValidateBeforeCall(ndmpUserId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpUsers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsAlias
     * @param nfsAliasId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param check Check for conflicts when viewing alias. (optional)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsAliasCall(String nfsAliasId, String scope, Boolean check, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/aliases/{NfsAliasId}"
            .replaceAll("\\{" + "NfsAliasId" + "\\}", apiClient.escapeString(nfsAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (check != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("check", check));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsAliasValidateBeforeCall(String nfsAliasId, String scope, Boolean check, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsAliasId' is set
        if (nfsAliasId == null) {
            throw new ApiException("Missing the required parameter 'nfsAliasId' when calling getNfsAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = getNfsAliasCall(nfsAliasId, scope, check, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve export information.
     * @param nfsAliasId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param check Check for conflicts when viewing alias. (optional)
     * @param zone Access zone (optional)
     * @return NfsAliases
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsAliases getNfsAlias(String nfsAliasId, String scope, Boolean check, String zone) throws ApiException {
        ApiResponse<NfsAliases> resp = getNfsAliasWithHttpInfo(nfsAliasId, scope, check, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve export information.
     * @param nfsAliasId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param check Check for conflicts when viewing alias. (optional)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;NfsAliases&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsAliases> getNfsAliasWithHttpInfo(String nfsAliasId, String scope, Boolean check, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getNfsAliasValidateBeforeCall(nfsAliasId, scope, check, zone, null, null);
        Type localVarReturnType = new TypeToken<NfsAliases>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve export information.
     * @param nfsAliasId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param check Check for conflicts when viewing alias. (optional)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsAliasAsync(String nfsAliasId, String scope, Boolean check, String zone, final ApiCallback<NfsAliases> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsAliasValidateBeforeCall(nfsAliasId, scope, check, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsAliases>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsCheck
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param zone Access zone (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsCheckCall(Boolean ignoreBadPaths, Boolean ignoreBadAuth, String zone, Boolean ignoreUnresolvableHosts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreBadPaths != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_bad_paths", ignoreBadPaths));
        if (ignoreBadAuth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_bad_auth", ignoreBadAuth));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (ignoreUnresolvableHosts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_unresolvable_hosts", ignoreUnresolvableHosts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsCheckValidateBeforeCall(Boolean ignoreBadPaths, Boolean ignoreBadAuth, String zone, Boolean ignoreUnresolvableHosts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsCheckCall(ignoreBadPaths, ignoreBadAuth, zone, ignoreUnresolvableHosts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve NFS export validation information.
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param zone Access zone (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @return NfsCheckExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsCheckExtended getNfsCheck(Boolean ignoreBadPaths, Boolean ignoreBadAuth, String zone, Boolean ignoreUnresolvableHosts) throws ApiException {
        ApiResponse<NfsCheckExtended> resp = getNfsCheckWithHttpInfo(ignoreBadPaths, ignoreBadAuth, zone, ignoreUnresolvableHosts);
        return resp.getData();
    }

    /**
     * 
     * Retrieve NFS export validation information.
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param zone Access zone (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @return ApiResponse&lt;NfsCheckExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsCheckExtended> getNfsCheckWithHttpInfo(Boolean ignoreBadPaths, Boolean ignoreBadAuth, String zone, Boolean ignoreUnresolvableHosts) throws ApiException {
        com.squareup.okhttp.Call call = getNfsCheckValidateBeforeCall(ignoreBadPaths, ignoreBadAuth, zone, ignoreUnresolvableHosts, null, null);
        Type localVarReturnType = new TypeToken<NfsCheckExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve NFS export validation information.
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param zone Access zone (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsCheckAsync(Boolean ignoreBadPaths, Boolean ignoreBadAuth, String zone, Boolean ignoreUnresolvableHosts, final ApiCallback<NfsCheckExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsCheckValidateBeforeCall(ignoreBadPaths, ignoreBadAuth, zone, ignoreUnresolvableHosts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsCheckExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsExport
     * @param nfsExportId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsExportCall(String nfsExportId, String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/nfs/exports/{NfsExportId}"
            .replaceAll("\\{" + "NfsExportId" + "\\}", apiClient.escapeString(nfsExportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsExportValidateBeforeCall(String nfsExportId, String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsExportId' is set
        if (nfsExportId == null) {
            throw new ApiException("Missing the required parameter 'nfsExportId' when calling getNfsExport(Async)");
        }
        

        com.squareup.okhttp.Call call = getNfsExportCall(nfsExportId, scope, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve export information.
     * @param nfsExportId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @return NfsExports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsExports getNfsExport(String nfsExportId, String scope, String zone) throws ApiException {
        ApiResponse<NfsExports> resp = getNfsExportWithHttpInfo(nfsExportId, scope, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve export information.
     * @param nfsExportId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;NfsExports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsExports> getNfsExportWithHttpInfo(String nfsExportId, String scope, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getNfsExportValidateBeforeCall(nfsExportId, scope, zone, null, null);
        Type localVarReturnType = new TypeToken<NfsExports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve export information.
     * @param nfsExportId Retrieve export information. (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsExportAsync(String nfsExportId, String scope, String zone, final ApiCallback<NfsExports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsExportValidateBeforeCall(nfsExportId, scope, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsExports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsExportsSummary
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsExportsSummaryCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/exports-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsExportsSummaryValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsExportsSummaryCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve NFS export summary information.
     * @param zone Access zone (optional)
     * @return NfsExportsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsExportsSummary getNfsExportsSummary(String zone) throws ApiException {
        ApiResponse<NfsExportsSummary> resp = getNfsExportsSummaryWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve NFS export summary information.
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;NfsExportsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsExportsSummary> getNfsExportsSummaryWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = getNfsExportsSummaryValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<NfsExportsSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve NFS export summary information.
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsExportsSummaryAsync(String zone, final ApiCallback<NfsExportsSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsExportsSummaryValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsExportsSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsLogLevel
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsLogLevelCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsLogLevelValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsLogLevelCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the current NFS service logging level.
     * @return NfsLogLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsLogLevel getNfsLogLevel() throws ApiException {
        ApiResponse<NfsLogLevel> resp = getNfsLogLevelWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get the current NFS service logging level.
     * @return ApiResponse&lt;NfsLogLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsLogLevel> getNfsLogLevelWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNfsLogLevelValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NfsLogLevel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current NFS service logging level.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsLogLevelAsync(final ApiCallback<NfsLogLevel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsLogLevelValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsLogLevel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsNetgroup
     * @param host Host to retrieve netgroup cache settings from. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsNetgroupCall(String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/netgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (host != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host", host));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsNetgroupValidateBeforeCall(String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsNetgroupCall(host, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the current NFS netgroup cache settings.
     * @param host Host to retrieve netgroup cache settings from. (optional)
     * @return NfsNetgroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsNetgroup getNfsNetgroup(String host) throws ApiException {
        ApiResponse<NfsNetgroup> resp = getNfsNetgroupWithHttpInfo(host);
        return resp.getData();
    }

    /**
     * 
     * Get the current NFS netgroup cache settings.
     * @param host Host to retrieve netgroup cache settings from. (optional)
     * @return ApiResponse&lt;NfsNetgroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsNetgroup> getNfsNetgroupWithHttpInfo(String host) throws ApiException {
        com.squareup.okhttp.Call call = getNfsNetgroupValidateBeforeCall(host, null, null);
        Type localVarReturnType = new TypeToken<NfsNetgroup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current NFS netgroup cache settings.
     * @param host Host to retrieve netgroup cache settings from. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsNetgroupAsync(String host, final ApiCallback<NfsNetgroup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsNetgroupValidateBeforeCall(host, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsNetgroup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsNlmLocks
     * @param sort The field that will be used for sorting. (optional)
     * @param created Return locks created after the specified unix epoch time. (optional)
     * @param lin Filter locks by the specified LIN in /ifs that is locked. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param client Filter locks by the specified client host name and IP address. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param clientId Filter locks by the specified client ID. (optional)
     * @param path Filter locks by the specified path under /ifs. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmLocksCall(String sort, String created, String lin, String resume, String client, Integer limit, String clientId, String path, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/nlm/locks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (created != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created", created));
        if (lin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lin", lin));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (client != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client", client));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("client_id", clientId));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsNlmLocksValidateBeforeCall(String sort, String created, String lin, String resume, String client, Integer limit, String clientId, String path, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsNlmLocksCall(sort, created, lin, resume, client, limit, clientId, path, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NLM locks.
     * @param sort The field that will be used for sorting. (optional)
     * @param created Return locks created after the specified unix epoch time. (optional)
     * @param lin Filter locks by the specified LIN in /ifs that is locked. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param client Filter locks by the specified client host name and IP address. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param clientId Filter locks by the specified client ID. (optional)
     * @param path Filter locks by the specified path under /ifs. (optional)
     * @param dir The direction of the sort. (optional)
     * @return NfsNlmLocks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsNlmLocks getNfsNlmLocks(String sort, String created, String lin, String resume, String client, Integer limit, String clientId, String path, String dir) throws ApiException {
        ApiResponse<NfsNlmLocks> resp = getNfsNlmLocksWithHttpInfo(sort, created, lin, resume, client, limit, clientId, path, dir);
        return resp.getData();
    }

    /**
     * 
     * List all NLM locks.
     * @param sort The field that will be used for sorting. (optional)
     * @param created Return locks created after the specified unix epoch time. (optional)
     * @param lin Filter locks by the specified LIN in /ifs that is locked. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param client Filter locks by the specified client host name and IP address. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param clientId Filter locks by the specified client ID. (optional)
     * @param path Filter locks by the specified path under /ifs. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;NfsNlmLocks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsNlmLocks> getNfsNlmLocksWithHttpInfo(String sort, String created, String lin, String resume, String client, Integer limit, String clientId, String path, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getNfsNlmLocksValidateBeforeCall(sort, created, lin, resume, client, limit, clientId, path, dir, null, null);
        Type localVarReturnType = new TypeToken<NfsNlmLocks>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NLM locks.
     * @param sort The field that will be used for sorting. (optional)
     * @param created Return locks created after the specified unix epoch time. (optional)
     * @param lin Filter locks by the specified LIN in /ifs that is locked. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param client Filter locks by the specified client host name and IP address. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param clientId Filter locks by the specified client ID. (optional)
     * @param path Filter locks by the specified path under /ifs. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmLocksAsync(String sort, String created, String lin, String resume, String client, Integer limit, String clientId, String path, String dir, final ApiCallback<NfsNlmLocks> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsNlmLocksValidateBeforeCall(sort, created, lin, resume, client, limit, clientId, path, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsNlmLocks>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsNlmSession
     * @param nfsNlmSessionId Retrieve all lock state for a single client. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmSessionCall(String nfsNlmSessionId, String clusterIp, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/nlm/sessions/{NfsNlmSessionId}"
            .replaceAll("\\{" + "NfsNlmSessionId" + "\\}", apiClient.escapeString(nfsNlmSessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clusterIp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cluster_ip", clusterIp));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsNlmSessionValidateBeforeCall(String nfsNlmSessionId, String clusterIp, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsNlmSessionId' is set
        if (nfsNlmSessionId == null) {
            throw new ApiException("Missing the required parameter 'nfsNlmSessionId' when calling getNfsNlmSession(Async)");
        }
        

        com.squareup.okhttp.Call call = getNfsNlmSessionCall(nfsNlmSessionId, clusterIp, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve all lock state for a single client.
     * @param nfsNlmSessionId Retrieve all lock state for a single client. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @return NfsNlmSessions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsNlmSessions getNfsNlmSession(String nfsNlmSessionId, String clusterIp, String zone) throws ApiException {
        ApiResponse<NfsNlmSessions> resp = getNfsNlmSessionWithHttpInfo(nfsNlmSessionId, clusterIp, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve all lock state for a single client.
     * @param nfsNlmSessionId Retrieve all lock state for a single client. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @return ApiResponse&lt;NfsNlmSessions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsNlmSessions> getNfsNlmSessionWithHttpInfo(String nfsNlmSessionId, String clusterIp, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getNfsNlmSessionValidateBeforeCall(nfsNlmSessionId, clusterIp, zone, null, null);
        Type localVarReturnType = new TypeToken<NfsNlmSessions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all lock state for a single client.
     * @param nfsNlmSessionId Retrieve all lock state for a single client. (required)
     * @param clusterIp An IP address for which NSM has client records (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmSessionAsync(String nfsNlmSessionId, String clusterIp, String zone, final ApiCallback<NfsNlmSessions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsNlmSessionValidateBeforeCall(nfsNlmSessionId, clusterIp, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsNlmSessions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsNlmSessions
     * @param sort The field that will be used for sorting. (optional)
     * @param ip An IP address for which NSM has client records (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmSessionsCall(String sort, String ip, Integer limit, String zone, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/nlm/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (ip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip", ip));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsNlmSessionsValidateBeforeCall(String sort, String ip, Integer limit, String zone, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsNlmSessionsCall(sort, ip, limit, zone, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NSM clients (optionally filtered by either zone or IP)
     * @param sort The field that will be used for sorting. (optional)
     * @param ip An IP address for which NSM has client records (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param dir The direction of the sort. (optional)
     * @return NfsNlmSessionsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsNlmSessionsExtended getNfsNlmSessions(String sort, String ip, Integer limit, String zone, String dir) throws ApiException {
        ApiResponse<NfsNlmSessionsExtended> resp = getNfsNlmSessionsWithHttpInfo(sort, ip, limit, zone, dir);
        return resp.getData();
    }

    /**
     * 
     * List all NSM clients (optionally filtered by either zone or IP)
     * @param sort The field that will be used for sorting. (optional)
     * @param ip An IP address for which NSM has client records (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;NfsNlmSessionsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsNlmSessionsExtended> getNfsNlmSessionsWithHttpInfo(String sort, String ip, Integer limit, String zone, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getNfsNlmSessionsValidateBeforeCall(sort, ip, limit, zone, dir, null, null);
        Type localVarReturnType = new TypeToken<NfsNlmSessionsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NSM clients (optionally filtered by either zone or IP)
     * @param sort The field that will be used for sorting. (optional)
     * @param ip An IP address for which NSM has client records (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param zone Represents an extant auth zone (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmSessionsAsync(String sort, String ip, Integer limit, String zone, String dir, final ApiCallback<NfsNlmSessionsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsNlmSessionsValidateBeforeCall(sort, ip, limit, zone, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsNlmSessionsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsNlmWaiters
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmWaitersCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/nlm/waiters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsNlmWaitersValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsNlmWaitersCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NLM lock waiters.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NfsNlmWaiters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsNlmWaiters getNfsNlmWaiters(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<NfsNlmWaiters> resp = getNfsNlmWaitersWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all NLM lock waiters.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NfsNlmWaiters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsNlmWaiters> getNfsNlmWaitersWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getNfsNlmWaitersValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<NfsNlmWaiters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NLM lock waiters.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsNlmWaitersAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<NfsNlmWaiters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsNlmWaitersValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsNlmWaiters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsSettingsExport
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsSettingsExportCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/settings/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsSettingsExportValidateBeforeCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsSettingsExportCall(scope, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve export information.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @return NfsSettingsExport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsSettingsExport getNfsSettingsExport(String scope, String zone) throws ApiException {
        ApiResponse<NfsSettingsExport> resp = getNfsSettingsExportWithHttpInfo(scope, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve export information.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;NfsSettingsExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsSettingsExport> getNfsSettingsExportWithHttpInfo(String scope, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getNfsSettingsExportValidateBeforeCall(scope, zone, null, null);
        Type localVarReturnType = new TypeToken<NfsSettingsExport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve export information.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsSettingsExportAsync(String scope, String zone, final ApiCallback<NfsSettingsExport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsSettingsExportValidateBeforeCall(scope, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsSettingsExport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsSettingsGlobal
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsSettingsGlobalCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsSettingsGlobalValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsSettingsGlobalCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the NFS configuration.
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @return NfsSettingsGlobal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsSettingsGlobal getNfsSettingsGlobal(String scope) throws ApiException {
        ApiResponse<NfsSettingsGlobal> resp = getNfsSettingsGlobalWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the NFS configuration.
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @return ApiResponse&lt;NfsSettingsGlobal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsSettingsGlobal> getNfsSettingsGlobalWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = getNfsSettingsGlobalValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<NfsSettingsGlobal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the NFS configuration.
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsSettingsGlobalAsync(String scope, final ApiCallback<NfsSettingsGlobal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsSettingsGlobalValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsSettingsGlobal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNfsSettingsZone
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNfsSettingsZoneCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/settings/zone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNfsSettingsZoneValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNfsSettingsZoneCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the NFS server settings for this zone.
     * @param zone Access zone (optional)
     * @return NfsSettingsZone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsSettingsZone getNfsSettingsZone(String zone) throws ApiException {
        ApiResponse<NfsSettingsZone> resp = getNfsSettingsZoneWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the NFS server settings for this zone.
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;NfsSettingsZone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsSettingsZone> getNfsSettingsZoneWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = getNfsSettingsZoneValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<NfsSettingsZone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the NFS server settings for this zone.
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNfsSettingsZoneAsync(String zone, final ApiCallback<NfsSettingsZone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNfsSettingsZoneValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsSettingsZone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNtpServer
     * @param ntpServerId Retrieve one NTP server. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNtpServerCall(String ntpServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/servers/{NtpServerId}"
            .replaceAll("\\{" + "NtpServerId" + "\\}", apiClient.escapeString(ntpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNtpServerValidateBeforeCall(String ntpServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ntpServerId' is set
        if (ntpServerId == null) {
            throw new ApiException("Missing the required parameter 'ntpServerId' when calling getNtpServer(Async)");
        }
        

        com.squareup.okhttp.Call call = getNtpServerCall(ntpServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve one NTP server.
     * @param ntpServerId Retrieve one NTP server. (required)
     * @return NtpServers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NtpServers getNtpServer(String ntpServerId) throws ApiException {
        ApiResponse<NtpServers> resp = getNtpServerWithHttpInfo(ntpServerId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve one NTP server.
     * @param ntpServerId Retrieve one NTP server. (required)
     * @return ApiResponse&lt;NtpServers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NtpServers> getNtpServerWithHttpInfo(String ntpServerId) throws ApiException {
        com.squareup.okhttp.Call call = getNtpServerValidateBeforeCall(ntpServerId, null, null);
        Type localVarReturnType = new TypeToken<NtpServers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve one NTP server.
     * @param ntpServerId Retrieve one NTP server. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNtpServerAsync(String ntpServerId, final ApiCallback<NtpServers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNtpServerValidateBeforeCall(ntpServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NtpServers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNtpSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNtpSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNtpSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNtpSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the NTP settings.
     * @return NtpSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NtpSettings getNtpSettings() throws ApiException {
        ApiResponse<NtpSettings> resp = getNtpSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the NTP settings.
     * @return ApiResponse&lt;NtpSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NtpSettings> getNtpSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getNtpSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NtpSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the NTP settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNtpSettingsAsync(final ApiCallback<NtpSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNtpSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NtpSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbLogLevel
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbLogLevelCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbLogLevelValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSmbLogLevelCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the current SMB logging level.
     * @return SmbLogLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbLogLevel getSmbLogLevel() throws ApiException {
        ApiResponse<SmbLogLevel> resp = getSmbLogLevelWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get the current SMB logging level.
     * @return ApiResponse&lt;SmbLogLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbLogLevel> getSmbLogLevelWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSmbLogLevelValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SmbLogLevel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current SMB logging level.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbLogLevelAsync(final ApiCallback<SmbLogLevel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbLogLevelValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbLogLevel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbLogLevelFilter
     * @param smbLogLevelFilterId View log filter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbLogLevelFilterCall(String smbLogLevelFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level/filters/{SmbLogLevelFilterId}"
            .replaceAll("\\{" + "SmbLogLevelFilterId" + "\\}", apiClient.escapeString(smbLogLevelFilterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbLogLevelFilterValidateBeforeCall(String smbLogLevelFilterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbLogLevelFilterId' is set
        if (smbLogLevelFilterId == null) {
            throw new ApiException("Missing the required parameter 'smbLogLevelFilterId' when calling getSmbLogLevelFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = getSmbLogLevelFilterCall(smbLogLevelFilterId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View log filter.
     * @param smbLogLevelFilterId View log filter. (required)
     * @return SmbLogLevelFilters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbLogLevelFilters getSmbLogLevelFilter(String smbLogLevelFilterId) throws ApiException {
        ApiResponse<SmbLogLevelFilters> resp = getSmbLogLevelFilterWithHttpInfo(smbLogLevelFilterId);
        return resp.getData();
    }

    /**
     * 
     * View log filter.
     * @param smbLogLevelFilterId View log filter. (required)
     * @return ApiResponse&lt;SmbLogLevelFilters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbLogLevelFilters> getSmbLogLevelFilterWithHttpInfo(String smbLogLevelFilterId) throws ApiException {
        com.squareup.okhttp.Call call = getSmbLogLevelFilterValidateBeforeCall(smbLogLevelFilterId, null, null);
        Type localVarReturnType = new TypeToken<SmbLogLevelFilters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View log filter.
     * @param smbLogLevelFilterId View log filter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbLogLevelFilterAsync(String smbLogLevelFilterId, final ApiCallback<SmbLogLevelFilters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbLogLevelFilterValidateBeforeCall(smbLogLevelFilterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbLogLevelFilters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbOpenfiles
     * @param sort Order results by this field. Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbOpenfilesCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/smb/openfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbOpenfilesValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSmbOpenfilesCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List open files.
     * @param sort Order results by this field. Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SmbOpenfiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbOpenfiles getSmbOpenfiles(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SmbOpenfiles> resp = getSmbOpenfilesWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List open files.
     * @param sort Order results by this field. Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SmbOpenfiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbOpenfiles> getSmbOpenfilesWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getSmbOpenfilesValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SmbOpenfiles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List open files.
     * @param sort Order results by this field. Default is id. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbOpenfilesAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<SmbOpenfiles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbOpenfilesValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbOpenfiles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbSessions
     * @param sort Order results by this field. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbSessionsCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/smb/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbSessionsValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSmbSessionsCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List open sessions.
     * @param sort Order results by this field. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SmbSessions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbSessions getSmbSessions(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SmbSessions> resp = getSmbSessionsWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List open sessions.
     * @param sort Order results by this field. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SmbSessions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbSessions> getSmbSessionsWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getSmbSessionsValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SmbSessions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List open sessions.
     * @param sort Order results by this field. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbSessionsAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<SmbSessions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbSessionsValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbSessions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbSettingsGlobal
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbSettingsGlobalCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbSettingsGlobalValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSmbSettingsGlobalCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return SmbSettingsGlobal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbSettingsGlobal getSmbSettingsGlobal(String scope) throws ApiException {
        ApiResponse<SmbSettingsGlobal> resp = getSmbSettingsGlobalWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;SmbSettingsGlobal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbSettingsGlobal> getSmbSettingsGlobalWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = getSmbSettingsGlobalValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<SmbSettingsGlobal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbSettingsGlobalAsync(String scope, final ApiCallback<SmbSettingsGlobal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbSettingsGlobalValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbSettingsGlobal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbSettingsShare
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains these share settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbSettingsShareCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/settings/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbSettingsShareValidateBeforeCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSmbSettingsShareCall(scope, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains these share settings. (optional)
     * @return SmbSettingsShare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbSettingsShare getSmbSettingsShare(String scope, String zone) throws ApiException {
        ApiResponse<SmbSettingsShare> resp = getSmbSettingsShareWithHttpInfo(scope, zone);
        return resp.getData();
    }

    /**
     * 
     * List all settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains these share settings. (optional)
     * @return ApiResponse&lt;SmbSettingsShare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbSettingsShare> getSmbSettingsShareWithHttpInfo(String scope, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getSmbSettingsShareValidateBeforeCall(scope, zone, null, null);
        Type localVarReturnType = new TypeToken<SmbSettingsShare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains these share settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbSettingsShareAsync(String scope, String zone, final ApiCallback<SmbSettingsShare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbSettingsShareValidateBeforeCall(scope, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbSettingsShare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbShare
     * @param smbShareId Retrieve share. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Zone which contains this share. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbShareCall(String smbShareId, String scope, Boolean resolveNames, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/smb/shares/{SmbShareId}"
            .replaceAll("\\{" + "SmbShareId" + "\\}", apiClient.escapeString(smbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbShareValidateBeforeCall(String smbShareId, String scope, Boolean resolveNames, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbShareId' is set
        if (smbShareId == null) {
            throw new ApiException("Missing the required parameter 'smbShareId' when calling getSmbShare(Async)");
        }
        

        com.squareup.okhttp.Call call = getSmbShareCall(smbShareId, scope, resolveNames, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve share.
     * @param smbShareId Retrieve share. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Zone which contains this share. (optional)
     * @return SmbShares
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbShares getSmbShare(String smbShareId, String scope, Boolean resolveNames, String zone) throws ApiException {
        ApiResponse<SmbShares> resp = getSmbShareWithHttpInfo(smbShareId, scope, resolveNames, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve share.
     * @param smbShareId Retrieve share. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Zone which contains this share. (optional)
     * @return ApiResponse&lt;SmbShares&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbShares> getSmbShareWithHttpInfo(String smbShareId, String scope, Boolean resolveNames, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getSmbShareValidateBeforeCall(smbShareId, scope, resolveNames, zone, null, null);
        Type localVarReturnType = new TypeToken<SmbShares>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve share.
     * @param smbShareId Retrieve share. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param zone Zone which contains this share. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbShareAsync(String smbShareId, String scope, Boolean resolveNames, String zone, final ApiCallback<SmbShares> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbShareValidateBeforeCall(smbShareId, scope, resolveNames, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbShares>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSmbSharesSummary
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSmbSharesSummaryCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/smb/shares-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSmbSharesSummaryValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSmbSharesSummaryCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Return summary information about shares.
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return SmbSharesSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbSharesSummary getSmbSharesSummary(String zone) throws ApiException {
        ApiResponse<SmbSharesSummary> resp = getSmbSharesSummaryWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * Return summary information about shares.
     * @param zone Specifies which access zone or zones to use. (optional)
     * @return ApiResponse&lt;SmbSharesSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbSharesSummary> getSmbSharesSummaryWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = getSmbSharesSummaryValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<SmbSharesSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return summary information about shares.
     * @param zone Specifies which access zone or zones to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSmbSharesSummaryAsync(String zone, final ApiCallback<SmbSharesSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSmbSharesSummaryValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbSharesSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnmpSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnmpSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/protocols/snmp/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnmpSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSnmpSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the SNMP settings.
     * @return SnmpSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SnmpSettings getSnmpSettings() throws ApiException {
        ApiResponse<SnmpSettings> resp = getSnmpSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the SNMP settings.
     * @return ApiResponse&lt;SnmpSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SnmpSettings> getSnmpSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSnmpSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SnmpSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the SNMP settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnmpSettingsAsync(final ApiCallback<SnmpSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnmpSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SnmpSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSwiftAccount
     * @param swiftAccountId List a swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSwiftAccountCall(String swiftAccountId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/swift/accounts/{SwiftAccountId}"
            .replaceAll("\\{" + "SwiftAccountId" + "\\}", apiClient.escapeString(swiftAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSwiftAccountValidateBeforeCall(String swiftAccountId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'swiftAccountId' is set
        if (swiftAccountId == null) {
            throw new ApiException("Missing the required parameter 'swiftAccountId' when calling getSwiftAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getSwiftAccountCall(swiftAccountId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List a swift account.
     * @param swiftAccountId List a swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @return SwiftAccounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwiftAccounts getSwiftAccount(String swiftAccountId, String zone) throws ApiException {
        ApiResponse<SwiftAccounts> resp = getSwiftAccountWithHttpInfo(swiftAccountId, zone);
        return resp.getData();
    }

    /**
     * 
     * List a swift account.
     * @param swiftAccountId List a swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @return ApiResponse&lt;SwiftAccounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwiftAccounts> getSwiftAccountWithHttpInfo(String swiftAccountId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getSwiftAccountValidateBeforeCall(swiftAccountId, zone, null, null);
        Type localVarReturnType = new TypeToken<SwiftAccounts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List a swift account.
     * @param swiftAccountId List a swift account. (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSwiftAccountAsync(String swiftAccountId, String zone, final ApiCallback<SwiftAccounts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSwiftAccountValidateBeforeCall(swiftAccountId, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwiftAccounts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listHdfsProxyusers
     * @param zone Access zone which contains HDFS proxyusers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listHdfsProxyusersCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listHdfsProxyusersValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listHdfsProxyusersCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all proxyusers.
     * @param zone Access zone which contains HDFS proxyusers. (optional)
     * @return HdfsProxyusers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsProxyusers listHdfsProxyusers(String zone) throws ApiException {
        ApiResponse<HdfsProxyusers> resp = listHdfsProxyusersWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * List all proxyusers.
     * @param zone Access zone which contains HDFS proxyusers. (optional)
     * @return ApiResponse&lt;HdfsProxyusers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsProxyusers> listHdfsProxyusersWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = listHdfsProxyusersValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<HdfsProxyusers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all proxyusers.
     * @param zone Access zone which contains HDFS proxyusers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHdfsProxyusersAsync(String zone, final ApiCallback<HdfsProxyusers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHdfsProxyusersValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsProxyusers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listHdfsRacks
     * @param zone Access zone which contains HDFS racks. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listHdfsRacksCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/racks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listHdfsRacksValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listHdfsRacksCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all racks.
     * @param zone Access zone which contains HDFS racks. (optional)
     * @return HdfsRacksExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HdfsRacksExtended listHdfsRacks(String zone) throws ApiException {
        ApiResponse<HdfsRacksExtended> resp = listHdfsRacksWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * List all racks.
     * @param zone Access zone which contains HDFS racks. (optional)
     * @return ApiResponse&lt;HdfsRacksExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HdfsRacksExtended> listHdfsRacksWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = listHdfsRacksValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<HdfsRacksExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all racks.
     * @param zone Access zone which contains HDFS racks. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHdfsRacksAsync(String zone, final ApiCallback<HdfsRacksExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHdfsRacksValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HdfsRacksExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNdmpSettingsPreferredIps
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNdmpSettingsPreferredIpsCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/ndmp/settings/preferred-ips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNdmpSettingsPreferredIpsValidateBeforeCall(Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listNdmpSettingsPreferredIpsCall(limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get list of preferences.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NdmpSettingsPreferredIps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpSettingsPreferredIps listNdmpSettingsPreferredIps(Integer limit, String resume) throws ApiException {
        ApiResponse<NdmpSettingsPreferredIps> resp = listNdmpSettingsPreferredIpsWithHttpInfo(limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Get list of preferences.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NdmpSettingsPreferredIps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpSettingsPreferredIps> listNdmpSettingsPreferredIpsWithHttpInfo(Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listNdmpSettingsPreferredIpsValidateBeforeCall(limit, resume, null, null);
        Type localVarReturnType = new TypeToken<NdmpSettingsPreferredIps>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of preferences.
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNdmpSettingsPreferredIpsAsync(Integer limit, String resume, final ApiCallback<NdmpSettingsPreferredIps> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNdmpSettingsPreferredIpsValidateBeforeCall(limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpSettingsPreferredIps>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNdmpUsers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNdmpUsersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNdmpUsersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listNdmpUsersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all ndmp administrators.
     * @return NdmpUsersExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NdmpUsersExtended listNdmpUsers() throws ApiException {
        ApiResponse<NdmpUsersExtended> resp = listNdmpUsersWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all ndmp administrators.
     * @return ApiResponse&lt;NdmpUsersExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NdmpUsersExtended> listNdmpUsersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listNdmpUsersValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<NdmpUsersExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ndmp administrators.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNdmpUsersAsync(final ApiCallback<NdmpUsersExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNdmpUsersValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NdmpUsersExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNfsAliases
     * @param sort The field that will be used for sorting. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param check Check for conflicts when listing aliases. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNfsAliasesCall(String sort, String zone, String resume, Integer limit, Boolean check, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (check != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("check", check));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNfsAliasesValidateBeforeCall(String sort, String zone, String resume, Integer limit, Boolean check, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listNfsAliasesCall(sort, zone, resume, limit, check, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NFS aliases.
     * @param sort The field that will be used for sorting. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param check Check for conflicts when listing aliases. (optional)
     * @param dir The direction of the sort. (optional)
     * @return NfsAliasesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsAliasesExtended listNfsAliases(String sort, String zone, String resume, Integer limit, Boolean check, String dir) throws ApiException {
        ApiResponse<NfsAliasesExtended> resp = listNfsAliasesWithHttpInfo(sort, zone, resume, limit, check, dir);
        return resp.getData();
    }

    /**
     * 
     * List all NFS aliases.
     * @param sort The field that will be used for sorting. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param check Check for conflicts when listing aliases. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;NfsAliasesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsAliasesExtended> listNfsAliasesWithHttpInfo(String sort, String zone, String resume, Integer limit, Boolean check, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listNfsAliasesValidateBeforeCall(sort, zone, resume, limit, check, dir, null, null);
        Type localVarReturnType = new TypeToken<NfsAliasesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NFS aliases.
     * @param sort The field that will be used for sorting. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param check Check for conflicts when listing aliases. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNfsAliasesAsync(String sort, String zone, String resume, Integer limit, Boolean check, String dir, final ApiCallback<NfsAliasesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNfsAliasesValidateBeforeCall(sort, zone, resume, limit, check, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsAliasesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNfsExports
     * @param sort The field that will be used for sorting. Default is id. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param path If specified, only exports that explicitly reference at least one of the given paths will be returned. (optional)
     * @param check Check for conflicts when listing exports. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNfsExportsCall(String sort, String zone, String resume, String scope, Integer limit, Integer offset, String path, Boolean check, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/nfs/exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (check != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("check", check));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNfsExportsValidateBeforeCall(String sort, String zone, String resume, String scope, Integer limit, Integer offset, String path, Boolean check, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listNfsExportsCall(sort, zone, resume, scope, limit, offset, path, check, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NFS exports.
     * @param sort The field that will be used for sorting. Default is id. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param path If specified, only exports that explicitly reference at least one of the given paths will be returned. (optional)
     * @param check Check for conflicts when listing exports. (optional)
     * @param dir The direction of the sort. (optional)
     * @return NfsExportsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NfsExportsExtended listNfsExports(String sort, String zone, String resume, String scope, Integer limit, Integer offset, String path, Boolean check, String dir) throws ApiException {
        ApiResponse<NfsExportsExtended> resp = listNfsExportsWithHttpInfo(sort, zone, resume, scope, limit, offset, path, check, dir);
        return resp.getData();
    }

    /**
     * 
     * List all NFS exports.
     * @param sort The field that will be used for sorting. Default is id. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param path If specified, only exports that explicitly reference at least one of the given paths will be returned. (optional)
     * @param check Check for conflicts when listing exports. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;NfsExportsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NfsExportsExtended> listNfsExportsWithHttpInfo(String sort, String zone, String resume, String scope, Integer limit, Integer offset, String path, Boolean check, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listNfsExportsValidateBeforeCall(sort, zone, resume, scope, limit, offset, path, check, dir, null, null);
        Type localVarReturnType = new TypeToken<NfsExportsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NFS exports.
     * @param sort The field that will be used for sorting. Default is id. (optional)
     * @param zone Access zone (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param path If specified, only exports that explicitly reference at least one of the given paths will be returned. (optional)
     * @param check Check for conflicts when listing exports. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNfsExportsAsync(String sort, String zone, String resume, String scope, Integer limit, Integer offset, String path, Boolean check, String dir, final ApiCallback<NfsExportsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNfsExportsValidateBeforeCall(sort, zone, resume, scope, limit, offset, path, check, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NfsExportsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNtpServers
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNtpServersCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNtpServersValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listNtpServersCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NTP servers.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return NtpServersExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NtpServersExtended listNtpServers(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<NtpServersExtended> resp = listNtpServersWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all NTP servers.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;NtpServersExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NtpServersExtended> listNtpServersWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listNtpServersValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<NtpServersExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NTP servers.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNtpServersAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<NtpServersExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNtpServersValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NtpServersExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSmbLogLevelFilters
     * @param sort The field that will be used for sorting. (optional)
     * @param dir The direction of the sort. (optional)
     * @param level Valid SMB logging levels (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSmbLogLevelFiltersCall(String sort, String dir, String level, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (level != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("level", level));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSmbLogLevelFiltersValidateBeforeCall(String sort, String dir, String level, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSmbLogLevelFiltersCall(sort, dir, level, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the current SMB log filters.
     * @param sort The field that will be used for sorting. (optional)
     * @param dir The direction of the sort. (optional)
     * @param level Valid SMB logging levels (optional)
     * @return SmbLogLevelFilters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbLogLevelFilters listSmbLogLevelFilters(String sort, String dir, String level) throws ApiException {
        ApiResponse<SmbLogLevelFilters> resp = listSmbLogLevelFiltersWithHttpInfo(sort, dir, level);
        return resp.getData();
    }

    /**
     * 
     * Get the current SMB log filters.
     * @param sort The field that will be used for sorting. (optional)
     * @param dir The direction of the sort. (optional)
     * @param level Valid SMB logging levels (optional)
     * @return ApiResponse&lt;SmbLogLevelFilters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbLogLevelFilters> listSmbLogLevelFiltersWithHttpInfo(String sort, String dir, String level) throws ApiException {
        com.squareup.okhttp.Call call = listSmbLogLevelFiltersValidateBeforeCall(sort, dir, level, null, null);
        Type localVarReturnType = new TypeToken<SmbLogLevelFilters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current SMB log filters.
     * @param sort The field that will be used for sorting. (optional)
     * @param dir The direction of the sort. (optional)
     * @param level Valid SMB logging levels (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSmbLogLevelFiltersAsync(String sort, String dir, String level, final ApiCallback<SmbLogLevelFilters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSmbLogLevelFiltersValidateBeforeCall(sort, dir, level, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbLogLevelFilters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSmbShares
     * @param sort Order results by this field. Default is id. (optional)
     * @param zone Zone which contains this share. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSmbSharesCall(String sort, String zone, String resume, Boolean resolveNames, Integer limit, Integer offset, String scope, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/smb/shares";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSmbSharesValidateBeforeCall(String sort, String zone, String resume, Boolean resolveNames, Integer limit, Integer offset, String scope, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSmbSharesCall(sort, zone, resume, resolveNames, limit, offset, scope, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all shares.
     * @param sort Order results by this field. Default is id. (optional)
     * @param zone Zone which contains this share. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @return SmbSharesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmbSharesExtended listSmbShares(String sort, String zone, String resume, Boolean resolveNames, Integer limit, Integer offset, String scope, String dir) throws ApiException {
        ApiResponse<SmbSharesExtended> resp = listSmbSharesWithHttpInfo(sort, zone, resume, resolveNames, limit, offset, scope, dir);
        return resp.getData();
    }

    /**
     * 
     * List all shares.
     * @param sort Order results by this field. Default is id. (optional)
     * @param zone Zone which contains this share. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;SmbSharesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmbSharesExtended> listSmbSharesWithHttpInfo(String sort, String zone, String resume, Boolean resolveNames, Integer limit, Integer offset, String scope, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listSmbSharesValidateBeforeCall(sort, zone, resume, resolveNames, limit, offset, scope, dir, null, null);
        Type localVarReturnType = new TypeToken<SmbSharesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all shares.
     * @param sort Order results by this field. Default is id. (optional)
     * @param zone Zone which contains this share. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param resolveNames If true, resolve group and user names in personas. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param offset The position of the first item returned for a paginated query within the full result set. (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSmbSharesAsync(String sort, String zone, String resume, Boolean resolveNames, Integer limit, Integer offset, String scope, String dir, final ApiCallback<SmbSharesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSmbSharesValidateBeforeCall(sort, zone, resume, resolveNames, limit, offset, scope, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SmbSharesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSwiftAccounts
     * @param zone Access zone which contains Swift accounts. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSwiftAccountsCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/swift/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSwiftAccountsValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSwiftAccountsCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all swift accounts.
     * @param zone Access zone which contains Swift accounts. (optional)
     * @return SwiftAccountsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwiftAccountsExtended listSwiftAccounts(String zone) throws ApiException {
        ApiResponse<SwiftAccountsExtended> resp = listSwiftAccountsWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * List all swift accounts.
     * @param zone Access zone which contains Swift accounts. (optional)
     * @return ApiResponse&lt;SwiftAccountsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwiftAccountsExtended> listSwiftAccountsWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = listSwiftAccountsValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<SwiftAccountsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all swift accounts.
     * @param zone Access zone which contains Swift accounts. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSwiftAccountsAsync(String zone, final ApiCallback<SwiftAccountsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSwiftAccountsValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwiftAccountsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFtpSettings
     * @param ftpSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFtpSettingsCall(FtpSettingsExtended ftpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ftpSettings;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ftp/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFtpSettingsValidateBeforeCall(FtpSettingsExtended ftpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ftpSettings' is set
        if (ftpSettings == null) {
            throw new ApiException("Missing the required parameter 'ftpSettings' when calling updateFtpSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFtpSettingsCall(ftpSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the FTP settings. All input fields are optional, but one or more must be supplied.
     * @param ftpSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateFtpSettings(FtpSettingsExtended ftpSettings) throws ApiException {
        updateFtpSettingsWithHttpInfo(ftpSettings);
    }

    /**
     * 
     * Modify the FTP settings. All input fields are optional, but one or more must be supplied.
     * @param ftpSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateFtpSettingsWithHttpInfo(FtpSettingsExtended ftpSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateFtpSettingsValidateBeforeCall(ftpSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the FTP settings. All input fields are optional, but one or more must be supplied.
     * @param ftpSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFtpSettingsAsync(FtpSettingsExtended ftpSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFtpSettingsValidateBeforeCall(ftpSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHdfsLogLevel
     * @param hdfsLogLevel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHdfsLogLevelCall(HdfsLogLevel hdfsLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsLogLevel;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/hdfs/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHdfsLogLevelValidateBeforeCall(HdfsLogLevel hdfsLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsLogLevel' is set
        if (hdfsLogLevel == null) {
            throw new ApiException("Missing the required parameter 'hdfsLogLevel' when calling updateHdfsLogLevel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHdfsLogLevelCall(hdfsLogLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the HDFS service log-level.
     * @param hdfsLogLevel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHdfsLogLevel(HdfsLogLevel hdfsLogLevel) throws ApiException {
        updateHdfsLogLevelWithHttpInfo(hdfsLogLevel);
    }

    /**
     * 
     * Modify the HDFS service log-level.
     * @param hdfsLogLevel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHdfsLogLevelWithHttpInfo(HdfsLogLevel hdfsLogLevel) throws ApiException {
        com.squareup.okhttp.Call call = updateHdfsLogLevelValidateBeforeCall(hdfsLogLevel, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the HDFS service log-level.
     * @param hdfsLogLevel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHdfsLogLevelAsync(HdfsLogLevel hdfsLogLevel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHdfsLogLevelValidateBeforeCall(hdfsLogLevel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHdfsProxyuser
     * @param hdfsProxyuser  (required)
     * @param hdfsProxyuserId Modify an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHdfsProxyuserCall(Empty hdfsProxyuser, String hdfsProxyuserId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsProxyuser;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}"
            .replaceAll("\\{" + "HdfsProxyuserId" + "\\}", apiClient.escapeString(hdfsProxyuserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHdfsProxyuserValidateBeforeCall(Empty hdfsProxyuser, String hdfsProxyuserId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsProxyuser' is set
        if (hdfsProxyuser == null) {
            throw new ApiException("Missing the required parameter 'hdfsProxyuser' when calling updateHdfsProxyuser(Async)");
        }
        
        // verify the required parameter 'hdfsProxyuserId' is set
        if (hdfsProxyuserId == null) {
            throw new ApiException("Missing the required parameter 'hdfsProxyuserId' when calling updateHdfsProxyuser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHdfsProxyuserCall(hdfsProxyuser, hdfsProxyuserId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify an HDFS proxyuser.
     * @param hdfsProxyuser  (required)
     * @param hdfsProxyuserId Modify an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHdfsProxyuser(Empty hdfsProxyuser, String hdfsProxyuserId, String zone) throws ApiException {
        updateHdfsProxyuserWithHttpInfo(hdfsProxyuser, hdfsProxyuserId, zone);
    }

    /**
     * 
     * Modify an HDFS proxyuser.
     * @param hdfsProxyuser  (required)
     * @param hdfsProxyuserId Modify an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHdfsProxyuserWithHttpInfo(Empty hdfsProxyuser, String hdfsProxyuserId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateHdfsProxyuserValidateBeforeCall(hdfsProxyuser, hdfsProxyuserId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify an HDFS proxyuser.
     * @param hdfsProxyuser  (required)
     * @param hdfsProxyuserId Modify an HDFS proxyuser. (required)
     * @param zone Access zone which contains HDFS proxyuser. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHdfsProxyuserAsync(Empty hdfsProxyuser, String hdfsProxyuserId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHdfsProxyuserValidateBeforeCall(hdfsProxyuser, hdfsProxyuserId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHdfsRack
     * @param hdfsRack  (required)
     * @param hdfsRackId Modify the HDFS rack (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHdfsRackCall(HdfsRack hdfsRack, String hdfsRackId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsRack;

        // create path and map variables
        String localVarPath = "/platform/1/protocols/hdfs/racks/{HdfsRackId}"
            .replaceAll("\\{" + "HdfsRackId" + "\\}", apiClient.escapeString(hdfsRackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHdfsRackValidateBeforeCall(HdfsRack hdfsRack, String hdfsRackId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsRack' is set
        if (hdfsRack == null) {
            throw new ApiException("Missing the required parameter 'hdfsRack' when calling updateHdfsRack(Async)");
        }
        
        // verify the required parameter 'hdfsRackId' is set
        if (hdfsRackId == null) {
            throw new ApiException("Missing the required parameter 'hdfsRackId' when calling updateHdfsRack(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHdfsRackCall(hdfsRack, hdfsRackId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the HDFS rack
     * @param hdfsRack  (required)
     * @param hdfsRackId Modify the HDFS rack (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHdfsRack(HdfsRack hdfsRack, String hdfsRackId, String zone) throws ApiException {
        updateHdfsRackWithHttpInfo(hdfsRack, hdfsRackId, zone);
    }

    /**
     * 
     * Modify the HDFS rack
     * @param hdfsRack  (required)
     * @param hdfsRackId Modify the HDFS rack (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHdfsRackWithHttpInfo(HdfsRack hdfsRack, String hdfsRackId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateHdfsRackValidateBeforeCall(hdfsRack, hdfsRackId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the HDFS rack
     * @param hdfsRack  (required)
     * @param hdfsRackId Modify the HDFS rack (required)
     * @param zone Access zone which contains HDFS rack. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHdfsRackAsync(HdfsRack hdfsRack, String hdfsRackId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHdfsRackValidateBeforeCall(hdfsRack, hdfsRackId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHdfsRangerPluginSettings
     * @param hdfsRangerPluginSettings  (required)
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHdfsRangerPluginSettingsCall(HdfsRangerPluginSettingsSettings hdfsRangerPluginSettings, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsRangerPluginSettings;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/hdfs/ranger-plugin/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHdfsRangerPluginSettingsValidateBeforeCall(HdfsRangerPluginSettingsSettings hdfsRangerPluginSettings, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsRangerPluginSettings' is set
        if (hdfsRangerPluginSettings == null) {
            throw new ApiException("Missing the required parameter 'hdfsRangerPluginSettings' when calling updateHdfsRangerPluginSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHdfsRangerPluginSettingsCall(hdfsRangerPluginSettings, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify HDFS ranger-plugin properties.
     * @param hdfsRangerPluginSettings  (required)
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHdfsRangerPluginSettings(HdfsRangerPluginSettingsSettings hdfsRangerPluginSettings, String zone) throws ApiException {
        updateHdfsRangerPluginSettingsWithHttpInfo(hdfsRangerPluginSettings, zone);
    }

    /**
     * 
     * Modify HDFS ranger-plugin properties.
     * @param hdfsRangerPluginSettings  (required)
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHdfsRangerPluginSettingsWithHttpInfo(HdfsRangerPluginSettingsSettings hdfsRangerPluginSettings, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateHdfsRangerPluginSettingsValidateBeforeCall(hdfsRangerPluginSettings, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify HDFS ranger-plugin properties.
     * @param hdfsRangerPluginSettings  (required)
     * @param zone Access zone which contains HDFS ranger-plugin settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHdfsRangerPluginSettingsAsync(HdfsRangerPluginSettingsSettings hdfsRangerPluginSettings, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHdfsRangerPluginSettingsValidateBeforeCall(hdfsRangerPluginSettings, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHdfsSettings
     * @param hdfsSettings  (required)
     * @param zone Access zone which contains HDFS settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHdfsSettingsCall(HdfsSettingsSettings hdfsSettings, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hdfsSettings;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/hdfs/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHdfsSettingsValidateBeforeCall(HdfsSettingsSettings hdfsSettings, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hdfsSettings' is set
        if (hdfsSettings == null) {
            throw new ApiException("Missing the required parameter 'hdfsSettings' when calling updateHdfsSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHdfsSettingsCall(hdfsSettings, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify HDFS properties.
     * @param hdfsSettings  (required)
     * @param zone Access zone which contains HDFS settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHdfsSettings(HdfsSettingsSettings hdfsSettings, String zone) throws ApiException {
        updateHdfsSettingsWithHttpInfo(hdfsSettings, zone);
    }

    /**
     * 
     * Modify HDFS properties.
     * @param hdfsSettings  (required)
     * @param zone Access zone which contains HDFS settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHdfsSettingsWithHttpInfo(HdfsSettingsSettings hdfsSettings, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateHdfsSettingsValidateBeforeCall(hdfsSettings, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify HDFS properties.
     * @param hdfsSettings  (required)
     * @param zone Access zone which contains HDFS settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHdfsSettingsAsync(HdfsSettingsSettings hdfsSettings, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHdfsSettingsValidateBeforeCall(hdfsSettings, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHttpSettings
     * @param httpSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHttpSettingsCall(HttpSettingsSettings httpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = httpSettings;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/http/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHttpSettingsValidateBeforeCall(HttpSettingsSettings httpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'httpSettings' is set
        if (httpSettings == null) {
            throw new ApiException("Missing the required parameter 'httpSettings' when calling updateHttpSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHttpSettingsCall(httpSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify HTTP properties.
     * @param httpSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHttpSettings(HttpSettingsSettings httpSettings) throws ApiException {
        updateHttpSettingsWithHttpInfo(httpSettings);
    }

    /**
     * 
     * Modify HTTP properties.
     * @param httpSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHttpSettingsWithHttpInfo(HttpSettingsSettings httpSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateHttpSettingsValidateBeforeCall(httpSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify HTTP properties.
     * @param httpSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHttpSettingsAsync(HttpSettingsSettings httpSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHttpSettingsValidateBeforeCall(httpSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNdmpDiagnostics
     * @param ndmpDiagnostics  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNdmpDiagnosticsCall(NdmpDiagnosticsDiagnostics ndmpDiagnostics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpDiagnostics;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/diagnostics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNdmpDiagnosticsValidateBeforeCall(NdmpDiagnosticsDiagnostics ndmpDiagnostics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpDiagnostics' is set
        if (ndmpDiagnostics == null) {
            throw new ApiException("Missing the required parameter 'ndmpDiagnostics' when calling updateNdmpDiagnostics(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNdmpDiagnosticsCall(ndmpDiagnostics, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify ndmp diagnostics settings.
     * @param ndmpDiagnostics  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNdmpDiagnostics(NdmpDiagnosticsDiagnostics ndmpDiagnostics) throws ApiException {
        updateNdmpDiagnosticsWithHttpInfo(ndmpDiagnostics);
    }

    /**
     * 
     * Modify ndmp diagnostics settings.
     * @param ndmpDiagnostics  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNdmpDiagnosticsWithHttpInfo(NdmpDiagnosticsDiagnostics ndmpDiagnostics) throws ApiException {
        com.squareup.okhttp.Call call = updateNdmpDiagnosticsValidateBeforeCall(ndmpDiagnostics, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify ndmp diagnostics settings.
     * @param ndmpDiagnostics  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNdmpDiagnosticsAsync(NdmpDiagnosticsDiagnostics ndmpDiagnostics, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNdmpDiagnosticsValidateBeforeCall(ndmpDiagnostics, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNdmpSettingsGlobal
     * @param ndmpSettingsGlobal  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNdmpSettingsGlobalCall(NdmpSettingsGlobalGlobal ndmpSettingsGlobal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpSettingsGlobal;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNdmpSettingsGlobalValidateBeforeCall(NdmpSettingsGlobalGlobal ndmpSettingsGlobal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsGlobal' is set
        if (ndmpSettingsGlobal == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsGlobal' when calling updateNdmpSettingsGlobal(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNdmpSettingsGlobalCall(ndmpSettingsGlobal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more settings.
     * @param ndmpSettingsGlobal  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNdmpSettingsGlobal(NdmpSettingsGlobalGlobal ndmpSettingsGlobal) throws ApiException {
        updateNdmpSettingsGlobalWithHttpInfo(ndmpSettingsGlobal);
    }

    /**
     * 
     * Modify one or more settings.
     * @param ndmpSettingsGlobal  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNdmpSettingsGlobalWithHttpInfo(NdmpSettingsGlobalGlobal ndmpSettingsGlobal) throws ApiException {
        com.squareup.okhttp.Call call = updateNdmpSettingsGlobalValidateBeforeCall(ndmpSettingsGlobal, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more settings.
     * @param ndmpSettingsGlobal  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNdmpSettingsGlobalAsync(NdmpSettingsGlobalGlobal ndmpSettingsGlobal, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNdmpSettingsGlobalValidateBeforeCall(ndmpSettingsGlobal, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNdmpSettingsPreferredIp
     * @param ndmpSettingsPreferredIp  (required)
     * @param ndmpSettingsPreferredIpId Modify a preferred ip preference. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNdmpSettingsPreferredIpCall(NdmpSettingsPreferredIp ndmpSettingsPreferredIp, String ndmpSettingsPreferredIpId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpSettingsPreferredIp;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/ndmp/settings/preferred-ips/{NdmpSettingsPreferredIpId}"
            .replaceAll("\\{" + "NdmpSettingsPreferredIpId" + "\\}", apiClient.escapeString(ndmpSettingsPreferredIpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNdmpSettingsPreferredIpValidateBeforeCall(NdmpSettingsPreferredIp ndmpSettingsPreferredIp, String ndmpSettingsPreferredIpId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsPreferredIp' is set
        if (ndmpSettingsPreferredIp == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsPreferredIp' when calling updateNdmpSettingsPreferredIp(Async)");
        }
        
        // verify the required parameter 'ndmpSettingsPreferredIpId' is set
        if (ndmpSettingsPreferredIpId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsPreferredIpId' when calling updateNdmpSettingsPreferredIp(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNdmpSettingsPreferredIpCall(ndmpSettingsPreferredIp, ndmpSettingsPreferredIpId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a preferred ip preference.
     * @param ndmpSettingsPreferredIp  (required)
     * @param ndmpSettingsPreferredIpId Modify a preferred ip preference. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNdmpSettingsPreferredIp(NdmpSettingsPreferredIp ndmpSettingsPreferredIp, String ndmpSettingsPreferredIpId) throws ApiException {
        updateNdmpSettingsPreferredIpWithHttpInfo(ndmpSettingsPreferredIp, ndmpSettingsPreferredIpId);
    }

    /**
     * 
     * Modify a preferred ip preference.
     * @param ndmpSettingsPreferredIp  (required)
     * @param ndmpSettingsPreferredIpId Modify a preferred ip preference. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNdmpSettingsPreferredIpWithHttpInfo(NdmpSettingsPreferredIp ndmpSettingsPreferredIp, String ndmpSettingsPreferredIpId) throws ApiException {
        com.squareup.okhttp.Call call = updateNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIp, ndmpSettingsPreferredIpId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a preferred ip preference.
     * @param ndmpSettingsPreferredIp  (required)
     * @param ndmpSettingsPreferredIpId Modify a preferred ip preference. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNdmpSettingsPreferredIpAsync(NdmpSettingsPreferredIp ndmpSettingsPreferredIp, String ndmpSettingsPreferredIpId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNdmpSettingsPreferredIpValidateBeforeCall(ndmpSettingsPreferredIp, ndmpSettingsPreferredIpId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNdmpSettingsVariable
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Modify or create a NDMP preferred environment variable. (required)
     * @param name Name of the variable to modify. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNdmpSettingsVariableCall(NdmpSettingsVariable ndmpSettingsVariable, String ndmpSettingsVariableId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpSettingsVariable;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}"
            .replaceAll("\\{" + "NdmpSettingsVariableId" + "\\}", apiClient.escapeString(ndmpSettingsVariableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNdmpSettingsVariableValidateBeforeCall(NdmpSettingsVariable ndmpSettingsVariable, String ndmpSettingsVariableId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpSettingsVariable' is set
        if (ndmpSettingsVariable == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsVariable' when calling updateNdmpSettingsVariable(Async)");
        }
        
        // verify the required parameter 'ndmpSettingsVariableId' is set
        if (ndmpSettingsVariableId == null) {
            throw new ApiException("Missing the required parameter 'ndmpSettingsVariableId' when calling updateNdmpSettingsVariable(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNdmpSettingsVariableCall(ndmpSettingsVariable, ndmpSettingsVariableId, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify or create a NDMP preferred environment variable.
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Modify or create a NDMP preferred environment variable. (required)
     * @param name Name of the variable to modify. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNdmpSettingsVariable(NdmpSettingsVariable ndmpSettingsVariable, String ndmpSettingsVariableId, String name) throws ApiException {
        updateNdmpSettingsVariableWithHttpInfo(ndmpSettingsVariable, ndmpSettingsVariableId, name);
    }

    /**
     * 
     * Modify or create a NDMP preferred environment variable.
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Modify or create a NDMP preferred environment variable. (required)
     * @param name Name of the variable to modify. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNdmpSettingsVariableWithHttpInfo(NdmpSettingsVariable ndmpSettingsVariable, String ndmpSettingsVariableId, String name) throws ApiException {
        com.squareup.okhttp.Call call = updateNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariable, ndmpSettingsVariableId, name, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify or create a NDMP preferred environment variable.
     * @param ndmpSettingsVariable  (required)
     * @param ndmpSettingsVariableId Modify or create a NDMP preferred environment variable. (required)
     * @param name Name of the variable to modify. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNdmpSettingsVariableAsync(NdmpSettingsVariable ndmpSettingsVariable, String ndmpSettingsVariableId, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNdmpSettingsVariableValidateBeforeCall(ndmpSettingsVariable, ndmpSettingsVariableId, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNdmpUser
     * @param ndmpUser  (required)
     * @param ndmpUserId Modify the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNdmpUserCall(NdmpUser ndmpUser, String ndmpUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ndmpUser;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ndmp/users/{NdmpUserId}"
            .replaceAll("\\{" + "NdmpUserId" + "\\}", apiClient.escapeString(ndmpUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNdmpUserValidateBeforeCall(NdmpUser ndmpUser, String ndmpUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ndmpUser' is set
        if (ndmpUser == null) {
            throw new ApiException("Missing the required parameter 'ndmpUser' when calling updateNdmpUser(Async)");
        }
        
        // verify the required parameter 'ndmpUserId' is set
        if (ndmpUserId == null) {
            throw new ApiException("Missing the required parameter 'ndmpUserId' when calling updateNdmpUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNdmpUserCall(ndmpUser, ndmpUserId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the user
     * @param ndmpUser  (required)
     * @param ndmpUserId Modify the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNdmpUser(NdmpUser ndmpUser, String ndmpUserId) throws ApiException {
        updateNdmpUserWithHttpInfo(ndmpUser, ndmpUserId);
    }

    /**
     * 
     * Modify the user
     * @param ndmpUser  (required)
     * @param ndmpUserId Modify the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNdmpUserWithHttpInfo(NdmpUser ndmpUser, String ndmpUserId) throws ApiException {
        com.squareup.okhttp.Call call = updateNdmpUserValidateBeforeCall(ndmpUser, ndmpUserId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the user
     * @param ndmpUser  (required)
     * @param ndmpUserId Modify the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNdmpUserAsync(NdmpUser ndmpUser, String ndmpUserId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNdmpUserValidateBeforeCall(ndmpUser, ndmpUserId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsAlias
     * @param nfsAlias  (required)
     * @param nfsAliasId Modify the alias. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsAliasCall(NfsAlias nfsAlias, String nfsAliasId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsAlias;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/aliases/{NfsAliasId}"
            .replaceAll("\\{" + "NfsAliasId" + "\\}", apiClient.escapeString(nfsAliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsAliasValidateBeforeCall(NfsAlias nfsAlias, String nfsAliasId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsAlias' is set
        if (nfsAlias == null) {
            throw new ApiException("Missing the required parameter 'nfsAlias' when calling updateNfsAlias(Async)");
        }
        
        // verify the required parameter 'nfsAliasId' is set
        if (nfsAliasId == null) {
            throw new ApiException("Missing the required parameter 'nfsAliasId' when calling updateNfsAlias(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsAliasCall(nfsAlias, nfsAliasId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the alias. All input fields are optional, but one or more must be supplied.
     * @param nfsAlias  (required)
     * @param nfsAliasId Modify the alias. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Access zone (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsAlias(NfsAlias nfsAlias, String nfsAliasId, String zone) throws ApiException {
        updateNfsAliasWithHttpInfo(nfsAlias, nfsAliasId, zone);
    }

    /**
     * 
     * Modify the alias. All input fields are optional, but one or more must be supplied.
     * @param nfsAlias  (required)
     * @param nfsAliasId Modify the alias. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsAliasWithHttpInfo(NfsAlias nfsAlias, String nfsAliasId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsAliasValidateBeforeCall(nfsAlias, nfsAliasId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the alias. All input fields are optional, but one or more must be supplied.
     * @param nfsAlias  (required)
     * @param nfsAliasId Modify the alias. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsAliasAsync(NfsAlias nfsAlias, String nfsAliasId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsAliasValidateBeforeCall(nfsAlias, nfsAliasId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsExport
     * @param nfsExport  (required)
     * @param nfsExportId Modify the export. All input fields are optional, but one or more must be supplied. (required)
     * @param force If true, the export will be updated even if that change conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsExportCall(NfsExport nfsExport, String nfsExportId, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsExport;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/nfs/exports/{NfsExportId}"
            .replaceAll("\\{" + "NfsExportId" + "\\}", apiClient.escapeString(nfsExportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (ignoreUnresolvableHosts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_unresolvable_hosts", ignoreUnresolvableHosts));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (ignoreConflicts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_conflicts", ignoreConflicts));
        if (ignoreBadPaths != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_bad_paths", ignoreBadPaths));
        if (ignoreBadAuth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_bad_auth", ignoreBadAuth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsExportValidateBeforeCall(NfsExport nfsExport, String nfsExportId, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsExport' is set
        if (nfsExport == null) {
            throw new ApiException("Missing the required parameter 'nfsExport' when calling updateNfsExport(Async)");
        }
        
        // verify the required parameter 'nfsExportId' is set
        if (nfsExportId == null) {
            throw new ApiException("Missing the required parameter 'nfsExportId' when calling updateNfsExport(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsExportCall(nfsExport, nfsExportId, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the export. All input fields are optional, but one or more must be supplied.
     * @param nfsExport  (required)
     * @param nfsExportId Modify the export. All input fields are optional, but one or more must be supplied. (required)
     * @param force If true, the export will be updated even if that change conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsExport(NfsExport nfsExport, String nfsExportId, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth) throws ApiException {
        updateNfsExportWithHttpInfo(nfsExport, nfsExportId, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth);
    }

    /**
     * 
     * Modify the export. All input fields are optional, but one or more must be supplied.
     * @param nfsExport  (required)
     * @param nfsExportId Modify the export. All input fields are optional, but one or more must be supplied. (required)
     * @param force If true, the export will be updated even if that change conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsExportWithHttpInfo(NfsExport nfsExport, String nfsExportId, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsExportValidateBeforeCall(nfsExport, nfsExportId, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the export. All input fields are optional, but one or more must be supplied.
     * @param nfsExport  (required)
     * @param nfsExportId Modify the export. All input fields are optional, but one or more must be supplied. (required)
     * @param force If true, the export will be updated even if that change conflicts with another export. (optional)
     * @param ignoreUnresolvableHosts Ignore unresolvable hosts. (optional)
     * @param zone Access zone (optional)
     * @param ignoreConflicts Ignore conflicts with existing exports. (optional)
     * @param ignoreBadPaths Ignore nonexistent or otherwise bad paths. (optional)
     * @param ignoreBadAuth Ignore invalid users. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsExportAsync(NfsExport nfsExport, String nfsExportId, Boolean force, Boolean ignoreUnresolvableHosts, String zone, Boolean ignoreConflicts, Boolean ignoreBadPaths, Boolean ignoreBadAuth, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsExportValidateBeforeCall(nfsExport, nfsExportId, force, ignoreUnresolvableHosts, zone, ignoreConflicts, ignoreBadPaths, ignoreBadAuth, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsLogLevel
     * @param nfsLogLevel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsLogLevelCall(NfsLogLevel nfsLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsLogLevel;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsLogLevelValidateBeforeCall(NfsLogLevel nfsLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsLogLevel' is set
        if (nfsLogLevel == null) {
            throw new ApiException("Missing the required parameter 'nfsLogLevel' when calling updateNfsLogLevel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsLogLevelCall(nfsLogLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set the current NFS service logging level.
     * @param nfsLogLevel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsLogLevel(NfsLogLevel nfsLogLevel) throws ApiException {
        updateNfsLogLevelWithHttpInfo(nfsLogLevel);
    }

    /**
     * 
     * Set the current NFS service logging level.
     * @param nfsLogLevel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsLogLevelWithHttpInfo(NfsLogLevel nfsLogLevel) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsLogLevelValidateBeforeCall(nfsLogLevel, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set the current NFS service logging level.
     * @param nfsLogLevel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsLogLevelAsync(NfsLogLevel nfsLogLevel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsLogLevelValidateBeforeCall(nfsLogLevel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsNetgroup
     * @param nfsNetgroup  (required)
     * @param host Host to retrieve netgroup cache settings for. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsNetgroupCall(NfsNetgroup nfsNetgroup, String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsNetgroup;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/netgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (host != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("host", host));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsNetgroupValidateBeforeCall(NfsNetgroup nfsNetgroup, String host, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsNetgroup' is set
        if (nfsNetgroup == null) {
            throw new ApiException("Missing the required parameter 'nfsNetgroup' when calling updateNfsNetgroup(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsNetgroupCall(nfsNetgroup, host, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the current NFS netgroup settings.
     * @param nfsNetgroup  (required)
     * @param host Host to retrieve netgroup cache settings for. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsNetgroup(NfsNetgroup nfsNetgroup, String host) throws ApiException {
        updateNfsNetgroupWithHttpInfo(nfsNetgroup, host);
    }

    /**
     * 
     * Modify the current NFS netgroup settings.
     * @param nfsNetgroup  (required)
     * @param host Host to retrieve netgroup cache settings for. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsNetgroupWithHttpInfo(NfsNetgroup nfsNetgroup, String host) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsNetgroupValidateBeforeCall(nfsNetgroup, host, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the current NFS netgroup settings.
     * @param nfsNetgroup  (required)
     * @param host Host to retrieve netgroup cache settings for. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsNetgroupAsync(NfsNetgroup nfsNetgroup, String host, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsNetgroupValidateBeforeCall(nfsNetgroup, host, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsSettingsExport
     * @param nfsSettingsExport  (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsSettingsExportCall(NfsSettingsExportSettings nfsSettingsExport, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsSettingsExport;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/settings/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsSettingsExportValidateBeforeCall(NfsSettingsExportSettings nfsSettingsExport, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsSettingsExport' is set
        if (nfsSettingsExport == null) {
            throw new ApiException("Missing the required parameter 'nfsSettingsExport' when calling updateNfsSettingsExport(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsSettingsExportCall(nfsSettingsExport, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     * @param nfsSettingsExport  (required)
     * @param zone Access zone (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsSettingsExport(NfsSettingsExportSettings nfsSettingsExport, String zone) throws ApiException {
        updateNfsSettingsExportWithHttpInfo(nfsSettingsExport, zone);
    }

    /**
     * 
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     * @param nfsSettingsExport  (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsSettingsExportWithHttpInfo(NfsSettingsExportSettings nfsSettingsExport, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsSettingsExportValidateBeforeCall(nfsSettingsExport, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     * @param nfsSettingsExport  (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsSettingsExportAsync(NfsSettingsExportSettings nfsSettingsExport, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsSettingsExportValidateBeforeCall(nfsSettingsExport, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsSettingsGlobal
     * @param nfsSettingsGlobal  (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsSettingsGlobalCall(NfsSettingsGlobalSettings nfsSettingsGlobal, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsSettingsGlobal;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/nfs/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsSettingsGlobalValidateBeforeCall(NfsSettingsGlobalSettings nfsSettingsGlobal, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsSettingsGlobal' is set
        if (nfsSettingsGlobal == null) {
            throw new ApiException("Missing the required parameter 'nfsSettingsGlobal' when calling updateNfsSettingsGlobal(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsSettingsGlobalCall(nfsSettingsGlobal, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     * @param nfsSettingsGlobal  (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsSettingsGlobal(NfsSettingsGlobalSettings nfsSettingsGlobal, String scope) throws ApiException {
        updateNfsSettingsGlobalWithHttpInfo(nfsSettingsGlobal, scope);
    }

    /**
     * 
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     * @param nfsSettingsGlobal  (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsSettingsGlobalWithHttpInfo(NfsSettingsGlobalSettings nfsSettingsGlobal, String scope) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsSettingsGlobalValidateBeforeCall(nfsSettingsGlobal, scope, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
     * @param nfsSettingsGlobal  (required)
     * @param scope When specified as &#39;effective&#39;, or not specified, all fields are returned. When specified as &#39;user&#39;, only fields with non-default values are shown. When specified as &#39;default&#39;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsSettingsGlobalAsync(NfsSettingsGlobalSettings nfsSettingsGlobal, String scope, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsSettingsGlobalValidateBeforeCall(nfsSettingsGlobal, scope, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNfsSettingsZone
     * @param nfsSettingsZone  (required)
     * @param zone Access zone (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNfsSettingsZoneCall(NfsSettingsZoneSettings nfsSettingsZone, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = nfsSettingsZone;

        // create path and map variables
        String localVarPath = "/platform/2/protocols/nfs/settings/zone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNfsSettingsZoneValidateBeforeCall(NfsSettingsZoneSettings nfsSettingsZone, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nfsSettingsZone' is set
        if (nfsSettingsZone == null) {
            throw new ApiException("Missing the required parameter 'nfsSettingsZone' when calling updateNfsSettingsZone(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNfsSettingsZoneCall(nfsSettingsZone, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the NFS server settings for this zone.
     * @param nfsSettingsZone  (required)
     * @param zone Access zone (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNfsSettingsZone(NfsSettingsZoneSettings nfsSettingsZone, String zone) throws ApiException {
        updateNfsSettingsZoneWithHttpInfo(nfsSettingsZone, zone);
    }

    /**
     * 
     * Modify the NFS server settings for this zone.
     * @param nfsSettingsZone  (required)
     * @param zone Access zone (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNfsSettingsZoneWithHttpInfo(NfsSettingsZoneSettings nfsSettingsZone, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateNfsSettingsZoneValidateBeforeCall(nfsSettingsZone, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the NFS server settings for this zone.
     * @param nfsSettingsZone  (required)
     * @param zone Access zone (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNfsSettingsZoneAsync(NfsSettingsZoneSettings nfsSettingsZone, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNfsSettingsZoneValidateBeforeCall(nfsSettingsZone, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNtpServer
     * @param ntpServer  (required)
     * @param ntpServerId Modify the key value for an NTP server. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNtpServerCall(NtpServer ntpServer, String ntpServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ntpServer;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/servers/{NtpServerId}"
            .replaceAll("\\{" + "NtpServerId" + "\\}", apiClient.escapeString(ntpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNtpServerValidateBeforeCall(NtpServer ntpServer, String ntpServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ntpServer' is set
        if (ntpServer == null) {
            throw new ApiException("Missing the required parameter 'ntpServer' when calling updateNtpServer(Async)");
        }
        
        // verify the required parameter 'ntpServerId' is set
        if (ntpServerId == null) {
            throw new ApiException("Missing the required parameter 'ntpServerId' when calling updateNtpServer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNtpServerCall(ntpServer, ntpServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the key value for an NTP server.
     * @param ntpServer  (required)
     * @param ntpServerId Modify the key value for an NTP server. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNtpServer(NtpServer ntpServer, String ntpServerId) throws ApiException {
        updateNtpServerWithHttpInfo(ntpServer, ntpServerId);
    }

    /**
     * 
     * Modify the key value for an NTP server.
     * @param ntpServer  (required)
     * @param ntpServerId Modify the key value for an NTP server. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNtpServerWithHttpInfo(NtpServer ntpServer, String ntpServerId) throws ApiException {
        com.squareup.okhttp.Call call = updateNtpServerValidateBeforeCall(ntpServer, ntpServerId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the key value for an NTP server.
     * @param ntpServer  (required)
     * @param ntpServerId Modify the key value for an NTP server. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNtpServerAsync(NtpServer ntpServer, String ntpServerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNtpServerValidateBeforeCall(ntpServer, ntpServerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateNtpSettings
     * @param ntpSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNtpSettingsCall(NtpSettingsSettings ntpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = ntpSettings;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/ntp/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNtpSettingsValidateBeforeCall(NtpSettingsSettings ntpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ntpSettings' is set
        if (ntpSettings == null) {
            throw new ApiException("Missing the required parameter 'ntpSettings' when calling updateNtpSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNtpSettingsCall(ntpSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the NTP settings. All input fields are optional, but one or more must be supplied.
     * @param ntpSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateNtpSettings(NtpSettingsSettings ntpSettings) throws ApiException {
        updateNtpSettingsWithHttpInfo(ntpSettings);
    }

    /**
     * 
     * Modify the NTP settings. All input fields are optional, but one or more must be supplied.
     * @param ntpSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateNtpSettingsWithHttpInfo(NtpSettingsSettings ntpSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateNtpSettingsValidateBeforeCall(ntpSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the NTP settings. All input fields are optional, but one or more must be supplied.
     * @param ntpSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNtpSettingsAsync(NtpSettingsSettings ntpSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNtpSettingsValidateBeforeCall(ntpSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSmbLogLevel
     * @param smbLogLevel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSmbLogLevelCall(SmbLogLevel smbLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smbLogLevel;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSmbLogLevelValidateBeforeCall(SmbLogLevel smbLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbLogLevel' is set
        if (smbLogLevel == null) {
            throw new ApiException("Missing the required parameter 'smbLogLevel' when calling updateSmbLogLevel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSmbLogLevelCall(smbLogLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set the current SMB logging level.
     * @param smbLogLevel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSmbLogLevel(SmbLogLevel smbLogLevel) throws ApiException {
        updateSmbLogLevelWithHttpInfo(smbLogLevel);
    }

    /**
     * 
     * Set the current SMB logging level.
     * @param smbLogLevel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSmbLogLevelWithHttpInfo(SmbLogLevel smbLogLevel) throws ApiException {
        com.squareup.okhttp.Call call = updateSmbLogLevelValidateBeforeCall(smbLogLevel, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set the current SMB logging level.
     * @param smbLogLevel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSmbLogLevelAsync(SmbLogLevel smbLogLevel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSmbLogLevelValidateBeforeCall(smbLogLevel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSmbSettingsGlobal
     * @param smbSettingsGlobal  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSmbSettingsGlobalCall(SmbSettingsGlobalExtended smbSettingsGlobal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smbSettingsGlobal;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSmbSettingsGlobalValidateBeforeCall(SmbSettingsGlobalExtended smbSettingsGlobal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbSettingsGlobal' is set
        if (smbSettingsGlobal == null) {
            throw new ApiException("Missing the required parameter 'smbSettingsGlobal' when calling updateSmbSettingsGlobal(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSmbSettingsGlobalCall(smbSettingsGlobal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more settings.
     * @param smbSettingsGlobal  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSmbSettingsGlobal(SmbSettingsGlobalExtended smbSettingsGlobal) throws ApiException {
        updateSmbSettingsGlobalWithHttpInfo(smbSettingsGlobal);
    }

    /**
     * 
     * Modify one or more settings.
     * @param smbSettingsGlobal  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSmbSettingsGlobalWithHttpInfo(SmbSettingsGlobalExtended smbSettingsGlobal) throws ApiException {
        com.squareup.okhttp.Call call = updateSmbSettingsGlobalValidateBeforeCall(smbSettingsGlobal, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more settings.
     * @param smbSettingsGlobal  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSmbSettingsGlobalAsync(SmbSettingsGlobalExtended smbSettingsGlobal, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSmbSettingsGlobalValidateBeforeCall(smbSettingsGlobal, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSmbSettingsShare
     * @param smbSettingsShare  (required)
     * @param zone Zone which contains these share settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSmbSettingsShareCall(SmbSettingsShareExtended smbSettingsShare, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smbSettingsShare;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/smb/settings/share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSmbSettingsShareValidateBeforeCall(SmbSettingsShareExtended smbSettingsShare, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbSettingsShare' is set
        if (smbSettingsShare == null) {
            throw new ApiException("Missing the required parameter 'smbSettingsShare' when calling updateSmbSettingsShare(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSmbSettingsShareCall(smbSettingsShare, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify one or more settings.
     * @param smbSettingsShare  (required)
     * @param zone Zone which contains these share settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSmbSettingsShare(SmbSettingsShareExtended smbSettingsShare, String zone) throws ApiException {
        updateSmbSettingsShareWithHttpInfo(smbSettingsShare, zone);
    }

    /**
     * 
     * Modify one or more settings.
     * @param smbSettingsShare  (required)
     * @param zone Zone which contains these share settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSmbSettingsShareWithHttpInfo(SmbSettingsShareExtended smbSettingsShare, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateSmbSettingsShareValidateBeforeCall(smbSettingsShare, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify one or more settings.
     * @param smbSettingsShare  (required)
     * @param zone Zone which contains these share settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSmbSettingsShareAsync(SmbSettingsShareExtended smbSettingsShare, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSmbSettingsShareValidateBeforeCall(smbSettingsShare, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSmbShare
     * @param smbShare  (required)
     * @param smbShareId Modify share. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Zone which contains this share. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSmbShareCall(SmbShare smbShare, String smbShareId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = smbShare;

        // create path and map variables
        String localVarPath = "/platform/4/protocols/smb/shares/{SmbShareId}"
            .replaceAll("\\{" + "SmbShareId" + "\\}", apiClient.escapeString(smbShareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSmbShareValidateBeforeCall(SmbShare smbShare, String smbShareId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'smbShare' is set
        if (smbShare == null) {
            throw new ApiException("Missing the required parameter 'smbShare' when calling updateSmbShare(Async)");
        }
        
        // verify the required parameter 'smbShareId' is set
        if (smbShareId == null) {
            throw new ApiException("Missing the required parameter 'smbShareId' when calling updateSmbShare(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSmbShareCall(smbShare, smbShareId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify share. All input fields are optional, but one or more must be supplied.
     * @param smbShare  (required)
     * @param smbShareId Modify share. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Zone which contains this share. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSmbShare(SmbShare smbShare, String smbShareId, String zone) throws ApiException {
        updateSmbShareWithHttpInfo(smbShare, smbShareId, zone);
    }

    /**
     * 
     * Modify share. All input fields are optional, but one or more must be supplied.
     * @param smbShare  (required)
     * @param smbShareId Modify share. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Zone which contains this share. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSmbShareWithHttpInfo(SmbShare smbShare, String smbShareId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateSmbShareValidateBeforeCall(smbShare, smbShareId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify share. All input fields are optional, but one or more must be supplied.
     * @param smbShare  (required)
     * @param smbShareId Modify share. All input fields are optional, but one or more must be supplied. (required)
     * @param zone Zone which contains this share. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSmbShareAsync(SmbShare smbShare, String smbShareId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSmbShareValidateBeforeCall(smbShare, smbShareId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSnmpSettings
     * @param snmpSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSnmpSettingsCall(SnmpSettingsExtended snmpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = snmpSettings;

        // create path and map variables
        String localVarPath = "/platform/5/protocols/snmp/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSnmpSettingsValidateBeforeCall(SnmpSettingsExtended snmpSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'snmpSettings' is set
        if (snmpSettings == null) {
            throw new ApiException("Missing the required parameter 'snmpSettings' when calling updateSnmpSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSnmpSettingsCall(snmpSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the SNMP settings. All input fields are optional, but one or more must be supplied.
     * @param snmpSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSnmpSettings(SnmpSettingsExtended snmpSettings) throws ApiException {
        updateSnmpSettingsWithHttpInfo(snmpSettings);
    }

    /**
     * 
     * Modify the SNMP settings. All input fields are optional, but one or more must be supplied.
     * @param snmpSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSnmpSettingsWithHttpInfo(SnmpSettingsExtended snmpSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateSnmpSettingsValidateBeforeCall(snmpSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the SNMP settings. All input fields are optional, but one or more must be supplied.
     * @param snmpSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSnmpSettingsAsync(SnmpSettingsExtended snmpSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSnmpSettingsValidateBeforeCall(snmpSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSwiftAccount
     * @param swiftAccount  (required)
     * @param swiftAccountId Modify a Swift account (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSwiftAccountCall(SwiftAccount swiftAccount, String swiftAccountId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = swiftAccount;

        // create path and map variables
        String localVarPath = "/platform/3/protocols/swift/accounts/{SwiftAccountId}"
            .replaceAll("\\{" + "SwiftAccountId" + "\\}", apiClient.escapeString(swiftAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSwiftAccountValidateBeforeCall(SwiftAccount swiftAccount, String swiftAccountId, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'swiftAccount' is set
        if (swiftAccount == null) {
            throw new ApiException("Missing the required parameter 'swiftAccount' when calling updateSwiftAccount(Async)");
        }
        
        // verify the required parameter 'swiftAccountId' is set
        if (swiftAccountId == null) {
            throw new ApiException("Missing the required parameter 'swiftAccountId' when calling updateSwiftAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSwiftAccountCall(swiftAccount, swiftAccountId, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a Swift account
     * @param swiftAccount  (required)
     * @param swiftAccountId Modify a Swift account (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSwiftAccount(SwiftAccount swiftAccount, String swiftAccountId, String zone) throws ApiException {
        updateSwiftAccountWithHttpInfo(swiftAccount, swiftAccountId, zone);
    }

    /**
     * 
     * Modify a Swift account
     * @param swiftAccount  (required)
     * @param swiftAccountId Modify a Swift account (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSwiftAccountWithHttpInfo(SwiftAccount swiftAccount, String swiftAccountId, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateSwiftAccountValidateBeforeCall(swiftAccount, swiftAccountId, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a Swift account
     * @param swiftAccount  (required)
     * @param swiftAccountId Modify a Swift account (required)
     * @param zone Access zone which contains Swift account. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSwiftAccountAsync(SwiftAccount swiftAccount, String swiftAccountId, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSwiftAccountValidateBeforeCall(swiftAccount, swiftAccountId, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
