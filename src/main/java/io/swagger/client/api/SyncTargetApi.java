/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.ReportsReportSubreports;
import io.swagger.client.model.ReportsReportSubreportsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SyncTargetApi {
    private ApiClient apiClient;

    public SyncTargetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SyncTargetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPoliciesPolicyCancelItem
     * @param policiesPolicyCancelItem  (required)
     * @param policy  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPoliciesPolicyCancelItemCall(Empty policiesPolicyCancelItem, String policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policiesPolicyCancelItem;

        // create path and map variables
        String localVarPath = "/platform/1/sync/target/policies/{Policy}/cancel"
            .replaceAll("\\{" + "Policy" + "\\}", apiClient.escapeString(policy.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPoliciesPolicyCancelItemValidateBeforeCall(Empty policiesPolicyCancelItem, String policy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'policiesPolicyCancelItem' is set
        if (policiesPolicyCancelItem == null) {
            throw new ApiException("Missing the required parameter 'policiesPolicyCancelItem' when calling createPoliciesPolicyCancelItem(Async)");
        }
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling createPoliciesPolicyCancelItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createPoliciesPolicyCancelItemCall(policiesPolicyCancelItem, policy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Cancel the most recent SyncIQ job for this policy from the target side.
     * @param policiesPolicyCancelItem  (required)
     * @param policy  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createPoliciesPolicyCancelItem(Empty policiesPolicyCancelItem, String policy) throws ApiException {
        ApiResponse<CreateResponse> resp = createPoliciesPolicyCancelItemWithHttpInfo(policiesPolicyCancelItem, policy);
        return resp.getData();
    }

    /**
     * 
     * Cancel the most recent SyncIQ job for this policy from the target side.
     * @param policiesPolicyCancelItem  (required)
     * @param policy  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createPoliciesPolicyCancelItemWithHttpInfo(Empty policiesPolicyCancelItem, String policy) throws ApiException {
        com.squareup.okhttp.Call call = createPoliciesPolicyCancelItemValidateBeforeCall(policiesPolicyCancelItem, policy, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel the most recent SyncIQ job for this policy from the target side.
     * @param policiesPolicyCancelItem  (required)
     * @param policy  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPoliciesPolicyCancelItemAsync(Empty policiesPolicyCancelItem, String policy, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPoliciesPolicyCancelItemValidateBeforeCall(policiesPolicyCancelItem, policy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportsReportSubreport
     * @param reportsReportSubreportId View a single SyncIQ target subreport. (required)
     * @param rid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsReportSubreportCall(String reportsReportSubreportId, String rid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/target/reports/{Rid}/subreports/{ReportsReportSubreportId}"
            .replaceAll("\\{" + "ReportsReportSubreportId" + "\\}", apiClient.escapeString(reportsReportSubreportId.toString()))
            .replaceAll("\\{" + "Rid" + "\\}", apiClient.escapeString(rid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsReportSubreportValidateBeforeCall(String reportsReportSubreportId, String rid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportsReportSubreportId' is set
        if (reportsReportSubreportId == null) {
            throw new ApiException("Missing the required parameter 'reportsReportSubreportId' when calling getReportsReportSubreport(Async)");
        }
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling getReportsReportSubreport(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportsReportSubreportCall(reportsReportSubreportId, rid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ target subreport.
     * @param reportsReportSubreportId View a single SyncIQ target subreport. (required)
     * @param rid  (required)
     * @return ReportsReportSubreports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsReportSubreports getReportsReportSubreport(String reportsReportSubreportId, String rid) throws ApiException {
        ApiResponse<ReportsReportSubreports> resp = getReportsReportSubreportWithHttpInfo(reportsReportSubreportId, rid);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ target subreport.
     * @param reportsReportSubreportId View a single SyncIQ target subreport. (required)
     * @param rid  (required)
     * @return ApiResponse&lt;ReportsReportSubreports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsReportSubreports> getReportsReportSubreportWithHttpInfo(String reportsReportSubreportId, String rid) throws ApiException {
        com.squareup.okhttp.Call call = getReportsReportSubreportValidateBeforeCall(reportsReportSubreportId, rid, null, null);
        Type localVarReturnType = new TypeToken<ReportsReportSubreports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ target subreport.
     * @param reportsReportSubreportId View a single SyncIQ target subreport. (required)
     * @param rid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsReportSubreportAsync(String reportsReportSubreportId, String rid, final ApiCallback<ReportsReportSubreports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsReportSubreportValidateBeforeCall(reportsReportSubreportId, rid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsReportSubreports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportsReportSubreports
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsReportSubreportsCall(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/target/reports/{Rid}/subreports"
            .replaceAll("\\{" + "Rid" + "\\}", apiClient.escapeString(rid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (newerThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newer_than", newerThan));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsReportSubreportsValidateBeforeCall(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'rid' is set
        if (rid == null) {
            throw new ApiException("Missing the required parameter 'rid' when calling getReportsReportSubreports(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportsReportSubreportsCall(rid, sort, resume, newerThan, state, limit, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of SyncIQ target subreports for a report.
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return ReportsReportSubreportsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsReportSubreportsExtended getReportsReportSubreports(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir) throws ApiException {
        ApiResponse<ReportsReportSubreportsExtended> resp = getReportsReportSubreportsWithHttpInfo(rid, sort, resume, newerThan, state, limit, dir);
        return resp.getData();
    }

    /**
     * 
     * Get a list of SyncIQ target subreports for a report.
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;ReportsReportSubreportsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsReportSubreportsExtended> getReportsReportSubreportsWithHttpInfo(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getReportsReportSubreportsValidateBeforeCall(rid, sort, resume, newerThan, state, limit, dir, null, null);
        Type localVarReturnType = new TypeToken<ReportsReportSubreportsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of SyncIQ target subreports for a report.
     * @param rid  (required)
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsReportSubreportsAsync(String rid, String sort, String resume, Integer newerThan, String state, Integer limit, String dir, final ApiCallback<ReportsReportSubreportsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsReportSubreportsValidateBeforeCall(rid, sort, resume, newerThan, state, limit, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsReportSubreportsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
