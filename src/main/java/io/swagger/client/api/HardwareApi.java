/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.CreateHardwareTapeNameResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.HardwareFcport;
import io.swagger.client.model.HardwareFcports;
import io.swagger.client.model.HardwareTapeNameParams;
import io.swagger.client.model.HardwareTapes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HardwareApi {
    private ApiClient apiClient;

    public HardwareApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HardwareApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHardwareTapeName
     * @param hardwareTapeName  (required)
     * @param hardwareTapeName2 Tape/Changer devices rescan (required)
     * @param lnn Logical node number. (optional)
     * @param port Scan only specified port. (optional)
     * @param timeout Timeout for request. (optional)
     * @param reconcile Remove entries for devices or paths that have become inaccessible. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHardwareTapeNameCall(Empty hardwareTapeName, String hardwareTapeName2, String lnn, Integer port, BigDecimal timeout, Boolean reconcile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardwareTapeName;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/tape/{HardwareTapeName}"
            .replaceAll("\\{" + "HardwareTapeName" + "\\}", apiClient.escapeString(hardwareTapeName2.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));
        if (port != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("port", port));
        if (timeout != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeout", timeout));
        if (reconcile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reconcile", reconcile));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHardwareTapeNameValidateBeforeCall(Empty hardwareTapeName, String hardwareTapeName2, String lnn, Integer port, BigDecimal timeout, Boolean reconcile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareTapeName' is set
        if (hardwareTapeName == null) {
            throw new ApiException("Missing the required parameter 'hardwareTapeName' when calling createHardwareTapeName(Async)");
        }
        
        // verify the required parameter 'hardwareTapeName2' is set
        if (hardwareTapeName2 == null) {
            throw new ApiException("Missing the required parameter 'hardwareTapeName2' when calling createHardwareTapeName(Async)");
        }
        

        com.squareup.okhttp.Call call = createHardwareTapeNameCall(hardwareTapeName, hardwareTapeName2, lnn, port, timeout, reconcile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Tape/Changer devices rescan
     * @param hardwareTapeName  (required)
     * @param hardwareTapeName2 Tape/Changer devices rescan (required)
     * @param lnn Logical node number. (optional)
     * @param port Scan only specified port. (optional)
     * @param timeout Timeout for request. (optional)
     * @param reconcile Remove entries for devices or paths that have become inaccessible. (optional)
     * @return CreateHardwareTapeNameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateHardwareTapeNameResponse createHardwareTapeName(Empty hardwareTapeName, String hardwareTapeName2, String lnn, Integer port, BigDecimal timeout, Boolean reconcile) throws ApiException {
        ApiResponse<CreateHardwareTapeNameResponse> resp = createHardwareTapeNameWithHttpInfo(hardwareTapeName, hardwareTapeName2, lnn, port, timeout, reconcile);
        return resp.getData();
    }

    /**
     * 
     * Tape/Changer devices rescan
     * @param hardwareTapeName  (required)
     * @param hardwareTapeName2 Tape/Changer devices rescan (required)
     * @param lnn Logical node number. (optional)
     * @param port Scan only specified port. (optional)
     * @param timeout Timeout for request. (optional)
     * @param reconcile Remove entries for devices or paths that have become inaccessible. (optional)
     * @return ApiResponse&lt;CreateHardwareTapeNameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateHardwareTapeNameResponse> createHardwareTapeNameWithHttpInfo(Empty hardwareTapeName, String hardwareTapeName2, String lnn, Integer port, BigDecimal timeout, Boolean reconcile) throws ApiException {
        com.squareup.okhttp.Call call = createHardwareTapeNameValidateBeforeCall(hardwareTapeName, hardwareTapeName2, lnn, port, timeout, reconcile, null, null);
        Type localVarReturnType = new TypeToken<CreateHardwareTapeNameResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tape/Changer devices rescan
     * @param hardwareTapeName  (required)
     * @param hardwareTapeName2 Tape/Changer devices rescan (required)
     * @param lnn Logical node number. (optional)
     * @param port Scan only specified port. (optional)
     * @param timeout Timeout for request. (optional)
     * @param reconcile Remove entries for devices or paths that have become inaccessible. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHardwareTapeNameAsync(Empty hardwareTapeName, String hardwareTapeName2, String lnn, Integer port, BigDecimal timeout, Boolean reconcile, final ApiCallback<CreateHardwareTapeNameResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHardwareTapeNameValidateBeforeCall(hardwareTapeName, hardwareTapeName2, lnn, port, timeout, reconcile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateHardwareTapeNameResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHardwareTapeName
     * @param hardwareTapeName Tape/Changer devices remove (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHardwareTapeNameCall(String hardwareTapeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/tape/{HardwareTapeName}"
            .replaceAll("\\{" + "HardwareTapeName" + "\\}", apiClient.escapeString(hardwareTapeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHardwareTapeNameValidateBeforeCall(String hardwareTapeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareTapeName' is set
        if (hardwareTapeName == null) {
            throw new ApiException("Missing the required parameter 'hardwareTapeName' when calling deleteHardwareTapeName(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteHardwareTapeNameCall(hardwareTapeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Tape/Changer devices remove
     * @param hardwareTapeName Tape/Changer devices remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteHardwareTapeName(String hardwareTapeName) throws ApiException {
        deleteHardwareTapeNameWithHttpInfo(hardwareTapeName);
    }

    /**
     * 
     * Tape/Changer devices remove
     * @param hardwareTapeName Tape/Changer devices remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteHardwareTapeNameWithHttpInfo(String hardwareTapeName) throws ApiException {
        com.squareup.okhttp.Call call = deleteHardwareTapeNameValidateBeforeCall(hardwareTapeName, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Tape/Changer devices remove
     * @param hardwareTapeName Tape/Changer devices remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHardwareTapeNameAsync(String hardwareTapeName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHardwareTapeNameValidateBeforeCall(hardwareTapeName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getHardwareFcport
     * @param hardwareFcportId Get one fibre-channel port (required)
     * @param lnn Logical node number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHardwareFcportCall(Integer hardwareFcportId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/fcports/{HardwareFcportId}"
            .replaceAll("\\{" + "HardwareFcportId" + "\\}", apiClient.escapeString(hardwareFcportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHardwareFcportValidateBeforeCall(Integer hardwareFcportId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareFcportId' is set
        if (hardwareFcportId == null) {
            throw new ApiException("Missing the required parameter 'hardwareFcportId' when calling getHardwareFcport(Async)");
        }
        

        com.squareup.okhttp.Call call = getHardwareFcportCall(hardwareFcportId, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get one fibre-channel port
     * @param hardwareFcportId Get one fibre-channel port (required)
     * @param lnn Logical node number. (optional)
     * @return HardwareFcports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HardwareFcports getHardwareFcport(Integer hardwareFcportId, String lnn) throws ApiException {
        ApiResponse<HardwareFcports> resp = getHardwareFcportWithHttpInfo(hardwareFcportId, lnn);
        return resp.getData();
    }

    /**
     * 
     * Get one fibre-channel port
     * @param hardwareFcportId Get one fibre-channel port (required)
     * @param lnn Logical node number. (optional)
     * @return ApiResponse&lt;HardwareFcports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HardwareFcports> getHardwareFcportWithHttpInfo(Integer hardwareFcportId, String lnn) throws ApiException {
        com.squareup.okhttp.Call call = getHardwareFcportValidateBeforeCall(hardwareFcportId, lnn, null, null);
        Type localVarReturnType = new TypeToken<HardwareFcports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get one fibre-channel port
     * @param hardwareFcportId Get one fibre-channel port (required)
     * @param lnn Logical node number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHardwareFcportAsync(Integer hardwareFcportId, String lnn, final ApiCallback<HardwareFcports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHardwareFcportValidateBeforeCall(hardwareFcportId, lnn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HardwareFcports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHardwareFcports
     * @param lnn Logical node number. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHardwareFcportsCall(String lnn, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/fcports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHardwareFcportsValidateBeforeCall(String lnn, Integer limit, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHardwareFcportsCall(lnn, limit, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get list of fibre-channel ports
     * @param lnn Logical node number. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return HardwareFcports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HardwareFcports getHardwareFcports(String lnn, Integer limit, String resume) throws ApiException {
        ApiResponse<HardwareFcports> resp = getHardwareFcportsWithHttpInfo(lnn, limit, resume);
        return resp.getData();
    }

    /**
     * 
     * Get list of fibre-channel ports
     * @param lnn Logical node number. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;HardwareFcports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HardwareFcports> getHardwareFcportsWithHttpInfo(String lnn, Integer limit, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getHardwareFcportsValidateBeforeCall(lnn, limit, resume, null, null);
        Type localVarReturnType = new TypeToken<HardwareFcports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of fibre-channel ports
     * @param lnn Logical node number. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHardwareFcportsAsync(String lnn, Integer limit, String resume, final ApiCallback<HardwareFcports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHardwareFcportsValidateBeforeCall(lnn, limit, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HardwareFcports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHardwareTapes
     * @param node List only devices on the specified node. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param devname List only the named device. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param activepath List devices with only active paths. (optional)
     * @param type Restrict to list on tape or mc device. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHardwareTapesCall(String node, String resume, String devname, Integer limit, String activepath, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/tapes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (node != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("node", node));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (devname != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("devname", devname));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (activepath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activepath", activepath));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHardwareTapesValidateBeforeCall(String node, String resume, String devname, Integer limit, String activepath, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHardwareTapesCall(node, resume, devname, limit, activepath, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get list Tape and Changer devices
     * @param node List only devices on the specified node. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param devname List only the named device. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param activepath List devices with only active paths. (optional)
     * @param type Restrict to list on tape or mc device. (optional)
     * @return HardwareTapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HardwareTapes getHardwareTapes(String node, String resume, String devname, Integer limit, String activepath, String type) throws ApiException {
        ApiResponse<HardwareTapes> resp = getHardwareTapesWithHttpInfo(node, resume, devname, limit, activepath, type);
        return resp.getData();
    }

    /**
     * 
     * Get list Tape and Changer devices
     * @param node List only devices on the specified node. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param devname List only the named device. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param activepath List devices with only active paths. (optional)
     * @param type Restrict to list on tape or mc device. (optional)
     * @return ApiResponse&lt;HardwareTapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HardwareTapes> getHardwareTapesWithHttpInfo(String node, String resume, String devname, Integer limit, String activepath, String type) throws ApiException {
        com.squareup.okhttp.Call call = getHardwareTapesValidateBeforeCall(node, resume, devname, limit, activepath, type, null, null);
        Type localVarReturnType = new TypeToken<HardwareTapes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list Tape and Changer devices
     * @param node List only devices on the specified node. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param devname List only the named device. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param activepath List devices with only active paths. (optional)
     * @param type Restrict to list on tape or mc device. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHardwareTapesAsync(String node, String resume, String devname, Integer limit, String activepath, String type, final ApiCallback<HardwareTapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHardwareTapesValidateBeforeCall(node, resume, devname, limit, activepath, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HardwareTapes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateHardwareFcport
     * @param hardwareFcport  (required)
     * @param hardwareFcportId Change wwnn, wwpn, state, topology, or rate of a FC port (required)
     * @param lnn Logical node number. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHardwareFcportCall(HardwareFcport hardwareFcport, Integer hardwareFcportId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardwareFcport;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/fcports/{HardwareFcportId}"
            .replaceAll("\\{" + "HardwareFcportId" + "\\}", apiClient.escapeString(hardwareFcportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lnn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lnn", lnn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHardwareFcportValidateBeforeCall(HardwareFcport hardwareFcport, Integer hardwareFcportId, String lnn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareFcport' is set
        if (hardwareFcport == null) {
            throw new ApiException("Missing the required parameter 'hardwareFcport' when calling updateHardwareFcport(Async)");
        }
        
        // verify the required parameter 'hardwareFcportId' is set
        if (hardwareFcportId == null) {
            throw new ApiException("Missing the required parameter 'hardwareFcportId' when calling updateHardwareFcport(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHardwareFcportCall(hardwareFcport, hardwareFcportId, lnn, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Change wwnn, wwpn, state, topology, or rate of a FC port
     * @param hardwareFcport  (required)
     * @param hardwareFcportId Change wwnn, wwpn, state, topology, or rate of a FC port (required)
     * @param lnn Logical node number. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHardwareFcport(HardwareFcport hardwareFcport, Integer hardwareFcportId, String lnn) throws ApiException {
        updateHardwareFcportWithHttpInfo(hardwareFcport, hardwareFcportId, lnn);
    }

    /**
     * 
     * Change wwnn, wwpn, state, topology, or rate of a FC port
     * @param hardwareFcport  (required)
     * @param hardwareFcportId Change wwnn, wwpn, state, topology, or rate of a FC port (required)
     * @param lnn Logical node number. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHardwareFcportWithHttpInfo(HardwareFcport hardwareFcport, Integer hardwareFcportId, String lnn) throws ApiException {
        com.squareup.okhttp.Call call = updateHardwareFcportValidateBeforeCall(hardwareFcport, hardwareFcportId, lnn, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Change wwnn, wwpn, state, topology, or rate of a FC port
     * @param hardwareFcport  (required)
     * @param hardwareFcportId Change wwnn, wwpn, state, topology, or rate of a FC port (required)
     * @param lnn Logical node number. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHardwareFcportAsync(HardwareFcport hardwareFcport, Integer hardwareFcportId, String lnn, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHardwareFcportValidateBeforeCall(hardwareFcport, hardwareFcportId, lnn, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateHardwareTapeName
     * @param hardwareTapeNameParams  (required)
     * @param hardwareTapeName Tape/Changer device modify (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHardwareTapeNameCall(HardwareTapeNameParams hardwareTapeNameParams, String hardwareTapeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = hardwareTapeNameParams;

        // create path and map variables
        String localVarPath = "/platform/3/hardware/tape/{HardwareTapeName}"
            .replaceAll("\\{" + "HardwareTapeName" + "\\}", apiClient.escapeString(hardwareTapeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHardwareTapeNameValidateBeforeCall(HardwareTapeNameParams hardwareTapeNameParams, String hardwareTapeName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'hardwareTapeNameParams' is set
        if (hardwareTapeNameParams == null) {
            throw new ApiException("Missing the required parameter 'hardwareTapeNameParams' when calling updateHardwareTapeName(Async)");
        }
        
        // verify the required parameter 'hardwareTapeName' is set
        if (hardwareTapeName == null) {
            throw new ApiException("Missing the required parameter 'hardwareTapeName' when calling updateHardwareTapeName(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHardwareTapeNameCall(hardwareTapeNameParams, hardwareTapeName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Tape/Changer device modify
     * @param hardwareTapeNameParams  (required)
     * @param hardwareTapeName Tape/Changer device modify (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateHardwareTapeName(HardwareTapeNameParams hardwareTapeNameParams, String hardwareTapeName) throws ApiException {
        updateHardwareTapeNameWithHttpInfo(hardwareTapeNameParams, hardwareTapeName);
    }

    /**
     * 
     * Tape/Changer device modify
     * @param hardwareTapeNameParams  (required)
     * @param hardwareTapeName Tape/Changer device modify (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateHardwareTapeNameWithHttpInfo(HardwareTapeNameParams hardwareTapeNameParams, String hardwareTapeName) throws ApiException {
        com.squareup.okhttp.Call call = updateHardwareTapeNameValidateBeforeCall(hardwareTapeNameParams, hardwareTapeName, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Tape/Changer device modify
     * @param hardwareTapeNameParams  (required)
     * @param hardwareTapeName Tape/Changer device modify (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHardwareTapeNameAsync(HardwareTapeNameParams hardwareTapeNameParams, String hardwareTapeName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHardwareTapeNameValidateBeforeCall(hardwareTapeNameParams, hardwareTapeName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
