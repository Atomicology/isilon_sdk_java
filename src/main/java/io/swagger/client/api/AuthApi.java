/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthAccess;
import io.swagger.client.model.AuthCacheItem;
import io.swagger.client.model.AuthGroup;
import io.swagger.client.model.AuthGroupCreateParams;
import io.swagger.client.model.AuthGroups;
import io.swagger.client.model.AuthGroupsExtended;
import io.swagger.client.model.AuthId;
import io.swagger.client.model.AuthLdapTemplates;
import io.swagger.client.model.AuthLdapTemplatesExtended;
import io.swagger.client.model.AuthLogLevel;
import io.swagger.client.model.AuthLogLevelExtended;
import io.swagger.client.model.AuthNetgroups;
import io.swagger.client.model.AuthPrivileges;
import io.swagger.client.model.AuthRole;
import io.swagger.client.model.AuthRoleCreateParams;
import io.swagger.client.model.AuthRoles;
import io.swagger.client.model.AuthRolesExtended;
import io.swagger.client.model.AuthShells;
import io.swagger.client.model.AuthUser;
import io.swagger.client.model.AuthUserCreateParams;
import io.swagger.client.model.AuthUsers;
import io.swagger.client.model.AuthUsersExtended;
import io.swagger.client.model.AuthWellknowns;
import io.swagger.client.model.CreateAuthRefreshItemResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.MappingDump;
import io.swagger.client.model.MappingIdentities;
import io.swagger.client.model.MappingIdentityCreateParams;
import io.swagger.client.model.MappingImport;
import io.swagger.client.model.MappingUsersLookup;
import io.swagger.client.model.MappingUsersRules;
import io.swagger.client.model.MappingUsersRulesExtended;
import io.swagger.client.model.ProvidersAds;
import io.swagger.client.model.ProvidersAdsExtended;
import io.swagger.client.model.ProvidersAdsIdParams;
import io.swagger.client.model.ProvidersAdsItem;
import io.swagger.client.model.ProvidersFile;
import io.swagger.client.model.ProvidersFileIdParams;
import io.swagger.client.model.ProvidersFileItem;
import io.swagger.client.model.ProvidersKrb5;
import io.swagger.client.model.ProvidersKrb5Extended;
import io.swagger.client.model.ProvidersKrb5IdParams;
import io.swagger.client.model.ProvidersKrb5Item;
import io.swagger.client.model.ProvidersLdap;
import io.swagger.client.model.ProvidersLdapIdParams;
import io.swagger.client.model.ProvidersLdapItem;
import io.swagger.client.model.ProvidersLocal;
import io.swagger.client.model.ProvidersLocalIdParams;
import io.swagger.client.model.ProvidersNis;
import io.swagger.client.model.ProvidersNisExtended;
import io.swagger.client.model.ProvidersNisIdParams;
import io.swagger.client.model.ProvidersNisItem;
import io.swagger.client.model.ProvidersSummary;
import io.swagger.client.model.SettingsAcls;
import io.swagger.client.model.SettingsAclsExtended;
import io.swagger.client.model.SettingsGlobal;
import io.swagger.client.model.SettingsGlobalGlobalSettings;
import io.swagger.client.model.SettingsKrb5Defaults;
import io.swagger.client.model.SettingsKrb5DefaultsKrb5Settings;
import io.swagger.client.model.SettingsKrb5Domain;
import io.swagger.client.model.SettingsKrb5DomainCreateParams;
import io.swagger.client.model.SettingsKrb5Domains;
import io.swagger.client.model.SettingsKrb5Realm;
import io.swagger.client.model.SettingsKrb5RealmCreateParams;
import io.swagger.client.model.SettingsKrb5Realms;
import io.swagger.client.model.SettingsMapping;
import io.swagger.client.model.SettingsMappingMappingSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient apiClient;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAuthCacheItem
     * @param authCacheItem  (required)
     * @param zone Specifies access zone from which to flush objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthCacheItemCall(AuthCacheItem authCacheItem, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authCacheItem;

        // create path and map variables
        String localVarPath = "/platform/4/auth/cache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthCacheItemValidateBeforeCall(AuthCacheItem authCacheItem, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authCacheItem' is set
        if (authCacheItem == null) {
            throw new ApiException("Missing the required parameter 'authCacheItem' when calling createAuthCacheItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthCacheItemCall(authCacheItem, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Flush the Security Objects Cache.
     * @param authCacheItem  (required)
     * @param zone Specifies access zone from which to flush objects. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createAuthCacheItem(AuthCacheItem authCacheItem, String zone) throws ApiException {
        ApiResponse<CreateResponse> resp = createAuthCacheItemWithHttpInfo(authCacheItem, zone);
        return resp.getData();
    }

    /**
     * 
     * Flush the Security Objects Cache.
     * @param authCacheItem  (required)
     * @param zone Specifies access zone from which to flush objects. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createAuthCacheItemWithHttpInfo(AuthCacheItem authCacheItem, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createAuthCacheItemValidateBeforeCall(authCacheItem, zone, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Flush the Security Objects Cache.
     * @param authCacheItem  (required)
     * @param zone Specifies access zone from which to flush objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthCacheItemAsync(AuthCacheItem authCacheItem, String zone, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthCacheItemValidateBeforeCall(authCacheItem, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthGroup
     * @param authGroup  (required)
     * @param force Skip validation checks when creating a group. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthGroupCall(AuthGroupCreateParams authGroup, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authGroup;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthGroupValidateBeforeCall(AuthGroupCreateParams authGroup, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authGroup' is set
        if (authGroup == null) {
            throw new ApiException("Missing the required parameter 'authGroup' when calling createAuthGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthGroupCall(authGroup, force, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new group.
     * @param authGroup  (required)
     * @param force Skip validation checks when creating a group. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createAuthGroup(AuthGroupCreateParams authGroup, Boolean force, String zone, String provider) throws ApiException {
        ApiResponse<CreateResponse> resp = createAuthGroupWithHttpInfo(authGroup, force, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * Create a new group.
     * @param authGroup  (required)
     * @param force Skip validation checks when creating a group. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createAuthGroupWithHttpInfo(AuthGroupCreateParams authGroup, Boolean force, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = createAuthGroupValidateBeforeCall(authGroup, force, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new group.
     * @param authGroup  (required)
     * @param force Skip validation checks when creating a group. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthGroupAsync(AuthGroupCreateParams authGroup, Boolean force, String zone, String provider, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthGroupValidateBeforeCall(authGroup, force, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthRefreshItem
     * @param authRefreshItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthRefreshItemCall(Empty authRefreshItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authRefreshItem;

        // create path and map variables
        String localVarPath = "/platform/3/auth/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthRefreshItemValidateBeforeCall(Empty authRefreshItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authRefreshItem' is set
        if (authRefreshItem == null) {
            throw new ApiException("Missing the required parameter 'authRefreshItem' when calling createAuthRefreshItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthRefreshItemCall(authRefreshItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Refresh the authentication service configuration.
     * @param authRefreshItem  (required)
     * @return CreateAuthRefreshItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateAuthRefreshItemResponse createAuthRefreshItem(Empty authRefreshItem) throws ApiException {
        ApiResponse<CreateAuthRefreshItemResponse> resp = createAuthRefreshItemWithHttpInfo(authRefreshItem);
        return resp.getData();
    }

    /**
     * 
     * Refresh the authentication service configuration.
     * @param authRefreshItem  (required)
     * @return ApiResponse&lt;CreateAuthRefreshItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateAuthRefreshItemResponse> createAuthRefreshItemWithHttpInfo(Empty authRefreshItem) throws ApiException {
        com.squareup.okhttp.Call call = createAuthRefreshItemValidateBeforeCall(authRefreshItem, null, null);
        Type localVarReturnType = new TypeToken<CreateAuthRefreshItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Refresh the authentication service configuration.
     * @param authRefreshItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthRefreshItemAsync(Empty authRefreshItem, final ApiCallback<CreateAuthRefreshItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthRefreshItemValidateBeforeCall(authRefreshItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAuthRefreshItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthRole
     * @param authRole  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthRoleCall(AuthRoleCreateParams authRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authRole;

        // create path and map variables
        String localVarPath = "/platform/1/auth/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthRoleValidateBeforeCall(AuthRoleCreateParams authRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authRole' is set
        if (authRole == null) {
            throw new ApiException("Missing the required parameter 'authRole' when calling createAuthRole(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthRoleCall(authRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new role.
     * @param authRole  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createAuthRole(AuthRoleCreateParams authRole) throws ApiException {
        ApiResponse<CreateResponse> resp = createAuthRoleWithHttpInfo(authRole);
        return resp.getData();
    }

    /**
     * 
     * Create a new role.
     * @param authRole  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createAuthRoleWithHttpInfo(AuthRoleCreateParams authRole) throws ApiException {
        com.squareup.okhttp.Call call = createAuthRoleValidateBeforeCall(authRole, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new role.
     * @param authRole  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthRoleAsync(AuthRoleCreateParams authRole, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthRoleValidateBeforeCall(authRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAuthUser
     * @param authUser  (required)
     * @param force Skip validation checks when creating user. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAuthUserCall(AuthUserCreateParams authUser, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authUser;

        // create path and map variables
        String localVarPath = "/platform/1/auth/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAuthUserValidateBeforeCall(AuthUserCreateParams authUser, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authUser' is set
        if (authUser == null) {
            throw new ApiException("Missing the required parameter 'authUser' when calling createAuthUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createAuthUserCall(authUser, force, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new user.
     * @param authUser  (required)
     * @param force Skip validation checks when creating user. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createAuthUser(AuthUserCreateParams authUser, Boolean force, String zone, String provider) throws ApiException {
        ApiResponse<CreateResponse> resp = createAuthUserWithHttpInfo(authUser, force, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * Create a new user.
     * @param authUser  (required)
     * @param force Skip validation checks when creating user. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createAuthUserWithHttpInfo(AuthUserCreateParams authUser, Boolean force, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = createAuthUserValidateBeforeCall(authUser, force, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new user.
     * @param authUser  (required)
     * @param force Skip validation checks when creating user. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAuthUserAsync(AuthUserCreateParams authUser, Boolean force, String zone, String provider, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAuthUserValidateBeforeCall(authUser, force, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMappingIdentity
     * @param mappingIdentity  (required)
     * @param _2way Create a bi-directional mapping from source to target and target to source. (optional)
     * @param zone Optional zone. (optional)
     * @param replace Replace existing mappings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMappingIdentityCall(MappingIdentityCreateParams mappingIdentity, Boolean _2way, String zone, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mappingIdentity;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (_2way != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("2way", _2way));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (replace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replace", replace));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMappingIdentityValidateBeforeCall(MappingIdentityCreateParams mappingIdentity, Boolean _2way, String zone, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mappingIdentity' is set
        if (mappingIdentity == null) {
            throw new ApiException("Missing the required parameter 'mappingIdentity' when calling createMappingIdentity(Async)");
        }
        

        com.squareup.okhttp.Call call = createMappingIdentityCall(mappingIdentity, _2way, zone, replace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Manually set or modify a mapping between two personae.
     * @param mappingIdentity  (required)
     * @param _2way Create a bi-directional mapping from source to target and target to source. (optional)
     * @param zone Optional zone. (optional)
     * @param replace Replace existing mappings. (optional)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createMappingIdentity(MappingIdentityCreateParams mappingIdentity, Boolean _2way, String zone, Boolean replace) throws ApiException {
        ApiResponse<Empty> resp = createMappingIdentityWithHttpInfo(mappingIdentity, _2way, zone, replace);
        return resp.getData();
    }

    /**
     * 
     * Manually set or modify a mapping between two personae.
     * @param mappingIdentity  (required)
     * @param _2way Create a bi-directional mapping from source to target and target to source. (optional)
     * @param zone Optional zone. (optional)
     * @param replace Replace existing mappings. (optional)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createMappingIdentityWithHttpInfo(MappingIdentityCreateParams mappingIdentity, Boolean _2way, String zone, Boolean replace) throws ApiException {
        com.squareup.okhttp.Call call = createMappingIdentityValidateBeforeCall(mappingIdentity, _2way, zone, replace, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Manually set or modify a mapping between two personae.
     * @param mappingIdentity  (required)
     * @param _2way Create a bi-directional mapping from source to target and target to source. (optional)
     * @param zone Optional zone. (optional)
     * @param replace Replace existing mappings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMappingIdentityAsync(MappingIdentityCreateParams mappingIdentity, Boolean _2way, String zone, Boolean replace, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMappingIdentityValidateBeforeCall(mappingIdentity, _2way, zone, replace, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createMappingIdentity_0
     * @param mappingIdentity  (required)
     * @param mappingIdentityId Manually set or modify a mapping between two personae. (required)
     * @param type Desired mapping target to fetch/generate. (optional)
     * @param zone Optional zone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createMappingIdentity_0Call(Empty mappingIdentity, String mappingIdentityId, String type, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mappingIdentity;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/identities/{MappingIdentityId}"
            .replaceAll("\\{" + "MappingIdentityId" + "\\}", apiClient.escapeString(mappingIdentityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createMappingIdentity_0ValidateBeforeCall(Empty mappingIdentity, String mappingIdentityId, String type, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mappingIdentity' is set
        if (mappingIdentity == null) {
            throw new ApiException("Missing the required parameter 'mappingIdentity' when calling createMappingIdentity_0(Async)");
        }
        
        // verify the required parameter 'mappingIdentityId' is set
        if (mappingIdentityId == null) {
            throw new ApiException("Missing the required parameter 'mappingIdentityId' when calling createMappingIdentity_0(Async)");
        }
        

        com.squareup.okhttp.Call call = createMappingIdentity_0Call(mappingIdentity, mappingIdentityId, type, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Manually set or modify a mapping between two personae.
     * @param mappingIdentity  (required)
     * @param mappingIdentityId Manually set or modify a mapping between two personae. (required)
     * @param type Desired mapping target to fetch/generate. (optional)
     * @param zone Optional zone. (optional)
     * @return MappingIdentities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingIdentities createMappingIdentity_0(Empty mappingIdentity, String mappingIdentityId, String type, String zone) throws ApiException {
        ApiResponse<MappingIdentities> resp = createMappingIdentity_0WithHttpInfo(mappingIdentity, mappingIdentityId, type, zone);
        return resp.getData();
    }

    /**
     * 
     * Manually set or modify a mapping between two personae.
     * @param mappingIdentity  (required)
     * @param mappingIdentityId Manually set or modify a mapping between two personae. (required)
     * @param type Desired mapping target to fetch/generate. (optional)
     * @param zone Optional zone. (optional)
     * @return ApiResponse&lt;MappingIdentities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingIdentities> createMappingIdentity_0WithHttpInfo(Empty mappingIdentity, String mappingIdentityId, String type, String zone) throws ApiException {
        com.squareup.okhttp.Call call = createMappingIdentity_0ValidateBeforeCall(mappingIdentity, mappingIdentityId, type, zone, null, null);
        Type localVarReturnType = new TypeToken<MappingIdentities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Manually set or modify a mapping between two personae.
     * @param mappingIdentity  (required)
     * @param mappingIdentityId Manually set or modify a mapping between two personae. (required)
     * @param type Desired mapping target to fetch/generate. (optional)
     * @param zone Optional zone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createMappingIdentity_0Async(Empty mappingIdentity, String mappingIdentityId, String type, String zone, final ApiCallback<MappingIdentities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createMappingIdentity_0ValidateBeforeCall(mappingIdentity, mappingIdentityId, type, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingIdentities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProvidersAdsItem
     * @param providersAdsItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProvidersAdsItemCall(ProvidersAdsItem providersAdsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersAdsItem;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProvidersAdsItemValidateBeforeCall(ProvidersAdsItem providersAdsItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersAdsItem' is set
        if (providersAdsItem == null) {
            throw new ApiException("Missing the required parameter 'providersAdsItem' when calling createProvidersAdsItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createProvidersAdsItemCall(providersAdsItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new ADS provider.
     * @param providersAdsItem  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createProvidersAdsItem(ProvidersAdsItem providersAdsItem) throws ApiException {
        ApiResponse<CreateResponse> resp = createProvidersAdsItemWithHttpInfo(providersAdsItem);
        return resp.getData();
    }

    /**
     * 
     * Create a new ADS provider.
     * @param providersAdsItem  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createProvidersAdsItemWithHttpInfo(ProvidersAdsItem providersAdsItem) throws ApiException {
        com.squareup.okhttp.Call call = createProvidersAdsItemValidateBeforeCall(providersAdsItem, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new ADS provider.
     * @param providersAdsItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProvidersAdsItemAsync(ProvidersAdsItem providersAdsItem, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProvidersAdsItemValidateBeforeCall(providersAdsItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProvidersFileItem
     * @param providersFileItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProvidersFileItemCall(ProvidersFileItem providersFileItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersFileItem;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProvidersFileItemValidateBeforeCall(ProvidersFileItem providersFileItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersFileItem' is set
        if (providersFileItem == null) {
            throw new ApiException("Missing the required parameter 'providersFileItem' when calling createProvidersFileItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createProvidersFileItemCall(providersFileItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new file provider.
     * @param providersFileItem  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createProvidersFileItem(ProvidersFileItem providersFileItem) throws ApiException {
        ApiResponse<CreateResponse> resp = createProvidersFileItemWithHttpInfo(providersFileItem);
        return resp.getData();
    }

    /**
     * 
     * Create a new file provider.
     * @param providersFileItem  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createProvidersFileItemWithHttpInfo(ProvidersFileItem providersFileItem) throws ApiException {
        com.squareup.okhttp.Call call = createProvidersFileItemValidateBeforeCall(providersFileItem, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new file provider.
     * @param providersFileItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProvidersFileItemAsync(ProvidersFileItem providersFileItem, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProvidersFileItemValidateBeforeCall(providersFileItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProvidersKrb5Item
     * @param providersKrb5Item  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProvidersKrb5ItemCall(ProvidersKrb5Item providersKrb5Item, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersKrb5Item;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/krb5";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProvidersKrb5ItemValidateBeforeCall(ProvidersKrb5Item providersKrb5Item, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersKrb5Item' is set
        if (providersKrb5Item == null) {
            throw new ApiException("Missing the required parameter 'providersKrb5Item' when calling createProvidersKrb5Item(Async)");
        }
        

        com.squareup.okhttp.Call call = createProvidersKrb5ItemCall(providersKrb5Item, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new KRB5 provider.
     * @param providersKrb5Item  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createProvidersKrb5Item(ProvidersKrb5Item providersKrb5Item) throws ApiException {
        ApiResponse<CreateResponse> resp = createProvidersKrb5ItemWithHttpInfo(providersKrb5Item);
        return resp.getData();
    }

    /**
     * 
     * Create a new KRB5 provider.
     * @param providersKrb5Item  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createProvidersKrb5ItemWithHttpInfo(ProvidersKrb5Item providersKrb5Item) throws ApiException {
        com.squareup.okhttp.Call call = createProvidersKrb5ItemValidateBeforeCall(providersKrb5Item, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new KRB5 provider.
     * @param providersKrb5Item  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProvidersKrb5ItemAsync(ProvidersKrb5Item providersKrb5Item, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProvidersKrb5ItemValidateBeforeCall(providersKrb5Item, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProvidersLdapItem
     * @param providersLdapItem  (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProvidersLdapItemCall(ProvidersLdapItem providersLdapItem, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersLdapItem;

        // create path and map variables
        String localVarPath = "/platform/4/auth/providers/ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProvidersLdapItemValidateBeforeCall(ProvidersLdapItem providersLdapItem, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLdapItem' is set
        if (providersLdapItem == null) {
            throw new ApiException("Missing the required parameter 'providersLdapItem' when calling createProvidersLdapItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createProvidersLdapItemCall(providersLdapItem, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new LDAP provider.
     * @param providersLdapItem  (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createProvidersLdapItem(ProvidersLdapItem providersLdapItem, Boolean force) throws ApiException {
        ApiResponse<CreateResponse> resp = createProvidersLdapItemWithHttpInfo(providersLdapItem, force);
        return resp.getData();
    }

    /**
     * 
     * Create a new LDAP provider.
     * @param providersLdapItem  (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createProvidersLdapItemWithHttpInfo(ProvidersLdapItem providersLdapItem, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = createProvidersLdapItemValidateBeforeCall(providersLdapItem, force, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new LDAP provider.
     * @param providersLdapItem  (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProvidersLdapItemAsync(ProvidersLdapItem providersLdapItem, Boolean force, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProvidersLdapItemValidateBeforeCall(providersLdapItem, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProvidersNisItem
     * @param providersNisItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProvidersNisItemCall(ProvidersNisItem providersNisItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersNisItem;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProvidersNisItemValidateBeforeCall(ProvidersNisItem providersNisItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersNisItem' is set
        if (providersNisItem == null) {
            throw new ApiException("Missing the required parameter 'providersNisItem' when calling createProvidersNisItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createProvidersNisItemCall(providersNisItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new NIS provider.
     * @param providersNisItem  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createProvidersNisItem(ProvidersNisItem providersNisItem) throws ApiException {
        ApiResponse<CreateResponse> resp = createProvidersNisItemWithHttpInfo(providersNisItem);
        return resp.getData();
    }

    /**
     * 
     * Create a new NIS provider.
     * @param providersNisItem  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createProvidersNisItemWithHttpInfo(ProvidersNisItem providersNisItem) throws ApiException {
        com.squareup.okhttp.Call call = createProvidersNisItemValidateBeforeCall(providersNisItem, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new NIS provider.
     * @param providersNisItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProvidersNisItemAsync(ProvidersNisItem providersNisItem, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProvidersNisItemValidateBeforeCall(providersNisItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSettingsKrb5Domain
     * @param settingsKrb5Domain  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSettingsKrb5DomainCall(SettingsKrb5DomainCreateParams settingsKrb5Domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsKrb5Domain;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSettingsKrb5DomainValidateBeforeCall(SettingsKrb5DomainCreateParams settingsKrb5Domain, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5Domain' is set
        if (settingsKrb5Domain == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5Domain' when calling createSettingsKrb5Domain(Async)");
        }
        

        com.squareup.okhttp.Call call = createSettingsKrb5DomainCall(settingsKrb5Domain, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new krb5 domain.
     * @param settingsKrb5Domain  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSettingsKrb5Domain(SettingsKrb5DomainCreateParams settingsKrb5Domain) throws ApiException {
        ApiResponse<CreateResponse> resp = createSettingsKrb5DomainWithHttpInfo(settingsKrb5Domain);
        return resp.getData();
    }

    /**
     * 
     * Create a new krb5 domain.
     * @param settingsKrb5Domain  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSettingsKrb5DomainWithHttpInfo(SettingsKrb5DomainCreateParams settingsKrb5Domain) throws ApiException {
        com.squareup.okhttp.Call call = createSettingsKrb5DomainValidateBeforeCall(settingsKrb5Domain, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new krb5 domain.
     * @param settingsKrb5Domain  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSettingsKrb5DomainAsync(SettingsKrb5DomainCreateParams settingsKrb5Domain, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSettingsKrb5DomainValidateBeforeCall(settingsKrb5Domain, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSettingsKrb5Realm
     * @param settingsKrb5Realm  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSettingsKrb5RealmCall(SettingsKrb5RealmCreateParams settingsKrb5Realm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsKrb5Realm;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/realms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSettingsKrb5RealmValidateBeforeCall(SettingsKrb5RealmCreateParams settingsKrb5Realm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5Realm' is set
        if (settingsKrb5Realm == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5Realm' when calling createSettingsKrb5Realm(Async)");
        }
        

        com.squareup.okhttp.Call call = createSettingsKrb5RealmCall(settingsKrb5Realm, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new krb5 realm.
     * @param settingsKrb5Realm  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSettingsKrb5Realm(SettingsKrb5RealmCreateParams settingsKrb5Realm) throws ApiException {
        ApiResponse<CreateResponse> resp = createSettingsKrb5RealmWithHttpInfo(settingsKrb5Realm);
        return resp.getData();
    }

    /**
     * 
     * Create a new krb5 realm.
     * @param settingsKrb5Realm  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSettingsKrb5RealmWithHttpInfo(SettingsKrb5RealmCreateParams settingsKrb5Realm) throws ApiException {
        com.squareup.okhttp.Call call = createSettingsKrb5RealmValidateBeforeCall(settingsKrb5Realm, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new krb5 realm.
     * @param settingsKrb5Realm  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSettingsKrb5RealmAsync(SettingsKrb5RealmCreateParams settingsKrb5Realm, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSettingsKrb5RealmValidateBeforeCall(settingsKrb5Realm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAuthGroup
     * @param authGroupId Delete the group. (required)
     * @param cached If true, flush the group from the cache. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuthGroupCall(String authGroupId, Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups/{AuthGroupId}"
            .replaceAll("\\{" + "AuthGroupId" + "\\}", apiClient.escapeString(authGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuthGroupValidateBeforeCall(String authGroupId, Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authGroupId' is set
        if (authGroupId == null) {
            throw new ApiException("Missing the required parameter 'authGroupId' when calling deleteAuthGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAuthGroupCall(authGroupId, cached, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the group.
     * @param authGroupId Delete the group. (required)
     * @param cached If true, flush the group from the cache. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAuthGroup(String authGroupId, Boolean cached, String zone, String provider) throws ApiException {
        deleteAuthGroupWithHttpInfo(authGroupId, cached, zone, provider);
    }

    /**
     * 
     * Delete the group.
     * @param authGroupId Delete the group. (required)
     * @param cached If true, flush the group from the cache. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAuthGroupWithHttpInfo(String authGroupId, Boolean cached, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuthGroupValidateBeforeCall(authGroupId, cached, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the group.
     * @param authGroupId Delete the group. (required)
     * @param cached If true, flush the group from the cache. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuthGroupAsync(String authGroupId, Boolean cached, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuthGroupValidateBeforeCall(authGroupId, cached, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAuthGroups
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuthGroupsCall(Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuthGroupsValidateBeforeCall(Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteAuthGroupsCall(cached, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Flush the groups cache.
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAuthGroups(Boolean cached, String zone, String provider) throws ApiException {
        deleteAuthGroupsWithHttpInfo(cached, zone, provider);
    }

    /**
     * 
     * Flush the groups cache.
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAuthGroupsWithHttpInfo(Boolean cached, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuthGroupsValidateBeforeCall(cached, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Flush the groups cache.
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuthGroupsAsync(Boolean cached, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuthGroupsValidateBeforeCall(cached, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAuthRole
     * @param authRoleId Delete the role. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuthRoleCall(String authRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/roles/{AuthRoleId}"
            .replaceAll("\\{" + "AuthRoleId" + "\\}", apiClient.escapeString(authRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuthRoleValidateBeforeCall(String authRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authRoleId' is set
        if (authRoleId == null) {
            throw new ApiException("Missing the required parameter 'authRoleId' when calling deleteAuthRole(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAuthRoleCall(authRoleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the role.
     * @param authRoleId Delete the role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAuthRole(String authRoleId) throws ApiException {
        deleteAuthRoleWithHttpInfo(authRoleId);
    }

    /**
     * 
     * Delete the role.
     * @param authRoleId Delete the role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAuthRoleWithHttpInfo(String authRoleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuthRoleValidateBeforeCall(authRoleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the role.
     * @param authRoleId Delete the role. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuthRoleAsync(String authRoleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuthRoleValidateBeforeCall(authRoleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAuthUser
     * @param authUserId Delete the user. (required)
     * @param cached If true, flush the user from the cache. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuthUserCall(String authUserId, Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/users/{AuthUserId}"
            .replaceAll("\\{" + "AuthUserId" + "\\}", apiClient.escapeString(authUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuthUserValidateBeforeCall(String authUserId, Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authUserId' is set
        if (authUserId == null) {
            throw new ApiException("Missing the required parameter 'authUserId' when calling deleteAuthUser(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAuthUserCall(authUserId, cached, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the user.
     * @param authUserId Delete the user. (required)
     * @param cached If true, flush the user from the cache. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAuthUser(String authUserId, Boolean cached, String zone, String provider) throws ApiException {
        deleteAuthUserWithHttpInfo(authUserId, cached, zone, provider);
    }

    /**
     * 
     * Delete the user.
     * @param authUserId Delete the user. (required)
     * @param cached If true, flush the user from the cache. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAuthUserWithHttpInfo(String authUserId, Boolean cached, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuthUserValidateBeforeCall(authUserId, cached, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the user.
     * @param authUserId Delete the user. (required)
     * @param cached If true, flush the user from the cache. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuthUserAsync(String authUserId, Boolean cached, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuthUserValidateBeforeCall(authUserId, cached, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAuthUsers
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuthUsersCall(Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuthUsersValidateBeforeCall(Boolean cached, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteAuthUsersCall(cached, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Flush the users cache.
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAuthUsers(Boolean cached, String zone, String provider) throws ApiException {
        deleteAuthUsersWithHttpInfo(cached, zone, provider);
    }

    /**
     * 
     * Flush the users cache.
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAuthUsersWithHttpInfo(Boolean cached, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuthUsersValidateBeforeCall(cached, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Flush the users cache.
     * @param cached If true, only flush cached objects. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuthUsersAsync(Boolean cached, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuthUsersValidateBeforeCall(cached, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMappingIdentities
     * @param filter Filter to apply when deleting identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param remove Delete mapping instead of flush mapping cache. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMappingIdentitiesCall(String filter, String zone, Boolean remove, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/identities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (remove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remove", remove));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMappingIdentitiesValidateBeforeCall(String filter, String zone, Boolean remove, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteMappingIdentitiesCall(filter, zone, remove, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Flush the entire idmap cache.
     * @param filter Filter to apply when deleting identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param remove Delete mapping instead of flush mapping cache. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMappingIdentities(String filter, String zone, Boolean remove) throws ApiException {
        deleteMappingIdentitiesWithHttpInfo(filter, zone, remove);
    }

    /**
     * 
     * Flush the entire idmap cache.
     * @param filter Filter to apply when deleting identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param remove Delete mapping instead of flush mapping cache. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMappingIdentitiesWithHttpInfo(String filter, String zone, Boolean remove) throws ApiException {
        com.squareup.okhttp.Call call = deleteMappingIdentitiesValidateBeforeCall(filter, zone, remove, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Flush the entire idmap cache.
     * @param filter Filter to apply when deleting identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param remove Delete mapping instead of flush mapping cache. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMappingIdentitiesAsync(String filter, String zone, Boolean remove, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMappingIdentitiesValidateBeforeCall(filter, zone, remove, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteMappingIdentity
     * @param mappingIdentityId Flush the entire idmap cache. (required)
     * @param zone Optional zone. (optional)
     * @param _2way Delete the bi-directional mapping from source to target and target to source. (optional)
     * @param target Target identity persona. (optional)
     * @param remove Delete mapping instead of flush mapping from cache. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteMappingIdentityCall(String mappingIdentityId, String zone, Boolean _2way, String target, Boolean remove, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/identities/{MappingIdentityId}"
            .replaceAll("\\{" + "MappingIdentityId" + "\\}", apiClient.escapeString(mappingIdentityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (_2way != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("2way", _2way));
        if (target != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target", target));
        if (remove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remove", remove));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteMappingIdentityValidateBeforeCall(String mappingIdentityId, String zone, Boolean _2way, String target, Boolean remove, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mappingIdentityId' is set
        if (mappingIdentityId == null) {
            throw new ApiException("Missing the required parameter 'mappingIdentityId' when calling deleteMappingIdentity(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteMappingIdentityCall(mappingIdentityId, zone, _2way, target, remove, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Flush the entire idmap cache.
     * @param mappingIdentityId Flush the entire idmap cache. (required)
     * @param zone Optional zone. (optional)
     * @param _2way Delete the bi-directional mapping from source to target and target to source. (optional)
     * @param target Target identity persona. (optional)
     * @param remove Delete mapping instead of flush mapping from cache. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteMappingIdentity(String mappingIdentityId, String zone, Boolean _2way, String target, Boolean remove) throws ApiException {
        deleteMappingIdentityWithHttpInfo(mappingIdentityId, zone, _2way, target, remove);
    }

    /**
     * 
     * Flush the entire idmap cache.
     * @param mappingIdentityId Flush the entire idmap cache. (required)
     * @param zone Optional zone. (optional)
     * @param _2way Delete the bi-directional mapping from source to target and target to source. (optional)
     * @param target Target identity persona. (optional)
     * @param remove Delete mapping instead of flush mapping from cache. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteMappingIdentityWithHttpInfo(String mappingIdentityId, String zone, Boolean _2way, String target, Boolean remove) throws ApiException {
        com.squareup.okhttp.Call call = deleteMappingIdentityValidateBeforeCall(mappingIdentityId, zone, _2way, target, remove, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Flush the entire idmap cache.
     * @param mappingIdentityId Flush the entire idmap cache. (required)
     * @param zone Optional zone. (optional)
     * @param _2way Delete the bi-directional mapping from source to target and target to source. (optional)
     * @param target Target identity persona. (optional)
     * @param remove Delete mapping instead of flush mapping from cache. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteMappingIdentityAsync(String mappingIdentityId, String zone, Boolean _2way, String target, Boolean remove, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteMappingIdentityValidateBeforeCall(mappingIdentityId, zone, _2way, target, remove, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProvidersAdsById
     * @param providersAdsId Delete the ADS provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersAdsByIdCall(String providersAdsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads/{ProvidersAdsId}"
            .replaceAll("\\{" + "ProvidersAdsId" + "\\}", apiClient.escapeString(providersAdsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProvidersAdsByIdValidateBeforeCall(String providersAdsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersAdsId' is set
        if (providersAdsId == null) {
            throw new ApiException("Missing the required parameter 'providersAdsId' when calling deleteProvidersAdsById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProvidersAdsByIdCall(providersAdsId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the ADS provider.
     * @param providersAdsId Delete the ADS provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProvidersAdsById(String providersAdsId) throws ApiException {
        deleteProvidersAdsByIdWithHttpInfo(providersAdsId);
    }

    /**
     * 
     * Delete the ADS provider.
     * @param providersAdsId Delete the ADS provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProvidersAdsByIdWithHttpInfo(String providersAdsId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProvidersAdsByIdValidateBeforeCall(providersAdsId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the ADS provider.
     * @param providersAdsId Delete the ADS provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersAdsByIdAsync(String providersAdsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProvidersAdsByIdValidateBeforeCall(providersAdsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProvidersFileById
     * @param providersFileId Delete the file provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersFileByIdCall(String providersFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/file/{ProvidersFileId}"
            .replaceAll("\\{" + "ProvidersFileId" + "\\}", apiClient.escapeString(providersFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProvidersFileByIdValidateBeforeCall(String providersFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersFileId' is set
        if (providersFileId == null) {
            throw new ApiException("Missing the required parameter 'providersFileId' when calling deleteProvidersFileById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProvidersFileByIdCall(providersFileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the file provider.
     * @param providersFileId Delete the file provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProvidersFileById(String providersFileId) throws ApiException {
        deleteProvidersFileByIdWithHttpInfo(providersFileId);
    }

    /**
     * 
     * Delete the file provider.
     * @param providersFileId Delete the file provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProvidersFileByIdWithHttpInfo(String providersFileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProvidersFileByIdValidateBeforeCall(providersFileId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the file provider.
     * @param providersFileId Delete the file provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersFileByIdAsync(String providersFileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProvidersFileByIdValidateBeforeCall(providersFileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProvidersKrb5ById
     * @param providersKrb5Id Delete the KRB5 provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersKrb5ByIdCall(String providersKrb5Id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/krb5/{ProvidersKrb5Id}"
            .replaceAll("\\{" + "ProvidersKrb5Id" + "\\}", apiClient.escapeString(providersKrb5Id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProvidersKrb5ByIdValidateBeforeCall(String providersKrb5Id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersKrb5Id' is set
        if (providersKrb5Id == null) {
            throw new ApiException("Missing the required parameter 'providersKrb5Id' when calling deleteProvidersKrb5ById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProvidersKrb5ByIdCall(providersKrb5Id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the KRB5 provider.
     * @param providersKrb5Id Delete the KRB5 provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProvidersKrb5ById(String providersKrb5Id) throws ApiException {
        deleteProvidersKrb5ByIdWithHttpInfo(providersKrb5Id);
    }

    /**
     * 
     * Delete the KRB5 provider.
     * @param providersKrb5Id Delete the KRB5 provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProvidersKrb5ByIdWithHttpInfo(String providersKrb5Id) throws ApiException {
        com.squareup.okhttp.Call call = deleteProvidersKrb5ByIdValidateBeforeCall(providersKrb5Id, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the KRB5 provider.
     * @param providersKrb5Id Delete the KRB5 provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersKrb5ByIdAsync(String providersKrb5Id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProvidersKrb5ByIdValidateBeforeCall(providersKrb5Id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProvidersLdapById
     * @param providersLdapId Delete the LDAP provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersLdapByIdCall(String providersLdapId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/auth/providers/ldap/{ProvidersLdapId}"
            .replaceAll("\\{" + "ProvidersLdapId" + "\\}", apiClient.escapeString(providersLdapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProvidersLdapByIdValidateBeforeCall(String providersLdapId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLdapId' is set
        if (providersLdapId == null) {
            throw new ApiException("Missing the required parameter 'providersLdapId' when calling deleteProvidersLdapById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProvidersLdapByIdCall(providersLdapId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the LDAP provider.
     * @param providersLdapId Delete the LDAP provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProvidersLdapById(String providersLdapId) throws ApiException {
        deleteProvidersLdapByIdWithHttpInfo(providersLdapId);
    }

    /**
     * 
     * Delete the LDAP provider.
     * @param providersLdapId Delete the LDAP provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProvidersLdapByIdWithHttpInfo(String providersLdapId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProvidersLdapByIdValidateBeforeCall(providersLdapId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the LDAP provider.
     * @param providersLdapId Delete the LDAP provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersLdapByIdAsync(String providersLdapId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProvidersLdapByIdValidateBeforeCall(providersLdapId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProvidersLocalById
     * @param providersLocalId Delete the local provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersLocalByIdCall(String providersLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/local/{ProvidersLocalId}"
            .replaceAll("\\{" + "ProvidersLocalId" + "\\}", apiClient.escapeString(providersLocalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProvidersLocalByIdValidateBeforeCall(String providersLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLocalId' is set
        if (providersLocalId == null) {
            throw new ApiException("Missing the required parameter 'providersLocalId' when calling deleteProvidersLocalById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProvidersLocalByIdCall(providersLocalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the local provider.
     * @param providersLocalId Delete the local provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProvidersLocalById(String providersLocalId) throws ApiException {
        deleteProvidersLocalByIdWithHttpInfo(providersLocalId);
    }

    /**
     * 
     * Delete the local provider.
     * @param providersLocalId Delete the local provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProvidersLocalByIdWithHttpInfo(String providersLocalId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProvidersLocalByIdValidateBeforeCall(providersLocalId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the local provider.
     * @param providersLocalId Delete the local provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersLocalByIdAsync(String providersLocalId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProvidersLocalByIdValidateBeforeCall(providersLocalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteProvidersNisById
     * @param providersNisId Delete the NIS provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersNisByIdCall(String providersNisId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/nis/{ProvidersNisId}"
            .replaceAll("\\{" + "ProvidersNisId" + "\\}", apiClient.escapeString(providersNisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProvidersNisByIdValidateBeforeCall(String providersNisId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersNisId' is set
        if (providersNisId == null) {
            throw new ApiException("Missing the required parameter 'providersNisId' when calling deleteProvidersNisById(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProvidersNisByIdCall(providersNisId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete the NIS provider.
     * @param providersNisId Delete the NIS provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteProvidersNisById(String providersNisId) throws ApiException {
        deleteProvidersNisByIdWithHttpInfo(providersNisId);
    }

    /**
     * 
     * Delete the NIS provider.
     * @param providersNisId Delete the NIS provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteProvidersNisByIdWithHttpInfo(String providersNisId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProvidersNisByIdValidateBeforeCall(providersNisId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete the NIS provider.
     * @param providersNisId Delete the NIS provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProvidersNisByIdAsync(String providersNisId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProvidersNisByIdValidateBeforeCall(providersNisId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSettingsKrb5Domain
     * @param settingsKrb5DomainId Remove a krb5 domain. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsKrb5DomainCall(String settingsKrb5DomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}"
            .replaceAll("\\{" + "SettingsKrb5DomainId" + "\\}", apiClient.escapeString(settingsKrb5DomainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSettingsKrb5DomainValidateBeforeCall(String settingsKrb5DomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5DomainId' is set
        if (settingsKrb5DomainId == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5DomainId' when calling deleteSettingsKrb5Domain(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSettingsKrb5DomainCall(settingsKrb5DomainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Remove a krb5 domain.
     * @param settingsKrb5DomainId Remove a krb5 domain. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSettingsKrb5Domain(String settingsKrb5DomainId) throws ApiException {
        deleteSettingsKrb5DomainWithHttpInfo(settingsKrb5DomainId);
    }

    /**
     * 
     * Remove a krb5 domain.
     * @param settingsKrb5DomainId Remove a krb5 domain. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSettingsKrb5DomainWithHttpInfo(String settingsKrb5DomainId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSettingsKrb5DomainValidateBeforeCall(settingsKrb5DomainId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove a krb5 domain.
     * @param settingsKrb5DomainId Remove a krb5 domain. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsKrb5DomainAsync(String settingsKrb5DomainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSettingsKrb5DomainValidateBeforeCall(settingsKrb5DomainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSettingsKrb5Realm
     * @param settingsKrb5RealmId Remove a realm. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsKrb5RealmCall(String settingsKrb5RealmId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}"
            .replaceAll("\\{" + "SettingsKrb5RealmId" + "\\}", apiClient.escapeString(settingsKrb5RealmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSettingsKrb5RealmValidateBeforeCall(String settingsKrb5RealmId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5RealmId' is set
        if (settingsKrb5RealmId == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5RealmId' when calling deleteSettingsKrb5Realm(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSettingsKrb5RealmCall(settingsKrb5RealmId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Remove a realm.
     * @param settingsKrb5RealmId Remove a realm. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSettingsKrb5Realm(String settingsKrb5RealmId) throws ApiException {
        deleteSettingsKrb5RealmWithHttpInfo(settingsKrb5RealmId);
    }

    /**
     * 
     * Remove a realm.
     * @param settingsKrb5RealmId Remove a realm. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSettingsKrb5RealmWithHttpInfo(String settingsKrb5RealmId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSettingsKrb5RealmValidateBeforeCall(settingsKrb5RealmId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Remove a realm.
     * @param settingsKrb5RealmId Remove a realm. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSettingsKrb5RealmAsync(String settingsKrb5RealmId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSettingsKrb5RealmValidateBeforeCall(settingsKrb5RealmId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAuthAccessUser
     * @param authAccessUser Determine user&#39;s access rights to a file (required)
     * @param path Path to the file. Must be within /ifs. (optional)
     * @param share SMB share name (optional)
     * @param zone Access zone the user is in. (optional)
     * @param numeric Show the user&#39;s numeric identifier. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthAccessUserCall(String authAccessUser, String path, String share, String zone, Boolean numeric, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/access/{AuthAccessUser}"
            .replaceAll("\\{" + "AuthAccessUser" + "\\}", apiClient.escapeString(authAccessUser.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (share != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("share", share));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (numeric != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("numeric", numeric));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthAccessUserValidateBeforeCall(String authAccessUser, String path, String share, String zone, Boolean numeric, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authAccessUser' is set
        if (authAccessUser == null) {
            throw new ApiException("Missing the required parameter 'authAccessUser' when calling getAuthAccessUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthAccessUserCall(authAccessUser, path, share, zone, numeric, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Determine user&#39;s access rights to a file
     * @param authAccessUser Determine user&#39;s access rights to a file (required)
     * @param path Path to the file. Must be within /ifs. (optional)
     * @param share SMB share name (optional)
     * @param zone Access zone the user is in. (optional)
     * @param numeric Show the user&#39;s numeric identifier. (optional)
     * @return AuthAccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthAccess getAuthAccessUser(String authAccessUser, String path, String share, String zone, Boolean numeric) throws ApiException {
        ApiResponse<AuthAccess> resp = getAuthAccessUserWithHttpInfo(authAccessUser, path, share, zone, numeric);
        return resp.getData();
    }

    /**
     * 
     * Determine user&#39;s access rights to a file
     * @param authAccessUser Determine user&#39;s access rights to a file (required)
     * @param path Path to the file. Must be within /ifs. (optional)
     * @param share SMB share name (optional)
     * @param zone Access zone the user is in. (optional)
     * @param numeric Show the user&#39;s numeric identifier. (optional)
     * @return ApiResponse&lt;AuthAccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthAccess> getAuthAccessUserWithHttpInfo(String authAccessUser, String path, String share, String zone, Boolean numeric) throws ApiException {
        com.squareup.okhttp.Call call = getAuthAccessUserValidateBeforeCall(authAccessUser, path, share, zone, numeric, null, null);
        Type localVarReturnType = new TypeToken<AuthAccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Determine user&#39;s access rights to a file
     * @param authAccessUser Determine user&#39;s access rights to a file (required)
     * @param path Path to the file. Must be within /ifs. (optional)
     * @param share SMB share name (optional)
     * @param zone Access zone the user is in. (optional)
     * @param numeric Show the user&#39;s numeric identifier. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthAccessUserAsync(String authAccessUser, String path, String share, String zone, Boolean numeric, final ApiCallback<AuthAccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthAccessUserValidateBeforeCall(authAccessUser, path, share, zone, numeric, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthAccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthGroup
     * @param authGroupId Retrieve the group information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthGroupCall(String authGroupId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups/{AuthGroupId}"
            .replaceAll("\\{" + "AuthGroupId" + "\\}", apiClient.escapeString(authGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (queryMemberOf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_member_of", queryMemberOf));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthGroupValidateBeforeCall(String authGroupId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authGroupId' is set
        if (authGroupId == null) {
            throw new ApiException("Missing the required parameter 'authGroupId' when calling getAuthGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthGroupCall(authGroupId, cached, resolveNames, queryMemberOf, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the group information.
     * @param authGroupId Retrieve the group information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @return AuthGroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthGroups getAuthGroup(String authGroupId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider) throws ApiException {
        ApiResponse<AuthGroups> resp = getAuthGroupWithHttpInfo(authGroupId, cached, resolveNames, queryMemberOf, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the group information.
     * @param authGroupId Retrieve the group information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @return ApiResponse&lt;AuthGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthGroups> getAuthGroupWithHttpInfo(String authGroupId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = getAuthGroupValidateBeforeCall(authGroupId, cached, resolveNames, queryMemberOf, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<AuthGroups>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the group information.
     * @param authGroupId Retrieve the group information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param provider Filter groups by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthGroupAsync(String authGroupId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider, final ApiCallback<AuthGroups> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthGroupValidateBeforeCall(authGroupId, cached, resolveNames, queryMemberOf, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthGroups>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthId
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthIdCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthIdValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthIdCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the current security token.
     * @return AuthId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthId getAuthId() throws ApiException {
        ApiResponse<AuthId> resp = getAuthIdWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the current security token.
     * @return ApiResponse&lt;AuthId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthId> getAuthIdWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthIdValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the current security token.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthIdAsync(final ApiCallback<AuthId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthIdValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthLdapTemplate
     * @param authLdapTemplateId Retrieve the LDAP provider template. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthLdapTemplateCall(String authLdapTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/auth/ldap-templates/{AuthLdapTemplateId}"
            .replaceAll("\\{" + "AuthLdapTemplateId" + "\\}", apiClient.escapeString(authLdapTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthLdapTemplateValidateBeforeCall(String authLdapTemplateId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authLdapTemplateId' is set
        if (authLdapTemplateId == null) {
            throw new ApiException("Missing the required parameter 'authLdapTemplateId' when calling getAuthLdapTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthLdapTemplateCall(authLdapTemplateId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the LDAP provider template.
     * @param authLdapTemplateId Retrieve the LDAP provider template. (required)
     * @return AuthLdapTemplates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthLdapTemplates getAuthLdapTemplate(String authLdapTemplateId) throws ApiException {
        ApiResponse<AuthLdapTemplates> resp = getAuthLdapTemplateWithHttpInfo(authLdapTemplateId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the LDAP provider template.
     * @param authLdapTemplateId Retrieve the LDAP provider template. (required)
     * @return ApiResponse&lt;AuthLdapTemplates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthLdapTemplates> getAuthLdapTemplateWithHttpInfo(String authLdapTemplateId) throws ApiException {
        com.squareup.okhttp.Call call = getAuthLdapTemplateValidateBeforeCall(authLdapTemplateId, null, null);
        Type localVarReturnType = new TypeToken<AuthLdapTemplates>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the LDAP provider template.
     * @param authLdapTemplateId Retrieve the LDAP provider template. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthLdapTemplateAsync(String authLdapTemplateId, final ApiCallback<AuthLdapTemplates> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthLdapTemplateValidateBeforeCall(authLdapTemplateId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthLdapTemplates>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthLdapTemplates
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthLdapTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/auth/ldap-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthLdapTemplatesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthLdapTemplatesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all LDAP provider templates.
     * @return AuthLdapTemplatesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthLdapTemplatesExtended getAuthLdapTemplates() throws ApiException {
        ApiResponse<AuthLdapTemplatesExtended> resp = getAuthLdapTemplatesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all LDAP provider templates.
     * @return ApiResponse&lt;AuthLdapTemplatesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthLdapTemplatesExtended> getAuthLdapTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthLdapTemplatesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthLdapTemplatesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all LDAP provider templates.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthLdapTemplatesAsync(final ApiCallback<AuthLdapTemplatesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthLdapTemplatesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthLdapTemplatesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthLogLevel
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthLogLevelCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthLogLevelValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthLogLevelCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get the current authentications service and netlogon logging level.
     * @return AuthLogLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthLogLevel getAuthLogLevel() throws ApiException {
        ApiResponse<AuthLogLevel> resp = getAuthLogLevelWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Get the current authentications service and netlogon logging level.
     * @return ApiResponse&lt;AuthLogLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthLogLevel> getAuthLogLevelWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthLogLevelValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthLogLevel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current authentications service and netlogon logging level.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthLogLevelAsync(final ApiCallback<AuthLogLevel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthLogLevelValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthLogLevel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthNetgroup
     * @param authNetgroupId Retrieve the user information. (required)
     * @param ignoreErrors Ignore netgroup errors. (optional)
     * @param recursive Perform recursive search. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthNetgroupCall(String authNetgroupId, Boolean ignoreErrors, Boolean recursive, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/netgroups/{AuthNetgroupId}"
            .replaceAll("\\{" + "AuthNetgroupId" + "\\}", apiClient.escapeString(authNetgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreErrors != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore_errors", ignoreErrors));
        if (recursive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recursive", recursive));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthNetgroupValidateBeforeCall(String authNetgroupId, Boolean ignoreErrors, Boolean recursive, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authNetgroupId' is set
        if (authNetgroupId == null) {
            throw new ApiException("Missing the required parameter 'authNetgroupId' when calling getAuthNetgroup(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthNetgroupCall(authNetgroupId, ignoreErrors, recursive, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the user information.
     * @param authNetgroupId Retrieve the user information. (required)
     * @param ignoreErrors Ignore netgroup errors. (optional)
     * @param recursive Perform recursive search. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @return AuthNetgroups
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthNetgroups getAuthNetgroup(String authNetgroupId, Boolean ignoreErrors, Boolean recursive, String zone, String provider) throws ApiException {
        ApiResponse<AuthNetgroups> resp = getAuthNetgroupWithHttpInfo(authNetgroupId, ignoreErrors, recursive, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the user information.
     * @param authNetgroupId Retrieve the user information. (required)
     * @param ignoreErrors Ignore netgroup errors. (optional)
     * @param recursive Perform recursive search. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @return ApiResponse&lt;AuthNetgroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthNetgroups> getAuthNetgroupWithHttpInfo(String authNetgroupId, Boolean ignoreErrors, Boolean recursive, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = getAuthNetgroupValidateBeforeCall(authNetgroupId, ignoreErrors, recursive, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<AuthNetgroups>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the user information.
     * @param authNetgroupId Retrieve the user information. (required)
     * @param ignoreErrors Ignore netgroup errors. (optional)
     * @param recursive Perform recursive search. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthNetgroupAsync(String authNetgroupId, Boolean ignoreErrors, Boolean recursive, String zone, String provider, final ApiCallback<AuthNetgroups> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthNetgroupValidateBeforeCall(authNetgroupId, ignoreErrors, recursive, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthNetgroups>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthPrivileges
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthPrivilegesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/privileges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthPrivilegesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthPrivilegesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all privileges.
     * @return AuthPrivileges
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthPrivileges getAuthPrivileges() throws ApiException {
        ApiResponse<AuthPrivileges> resp = getAuthPrivilegesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all privileges.
     * @return ApiResponse&lt;AuthPrivileges&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthPrivileges> getAuthPrivilegesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthPrivilegesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthPrivileges>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all privileges.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthPrivilegesAsync(final ApiCallback<AuthPrivileges> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthPrivilegesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthPrivileges>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthRole
     * @param authRoleId Retrieve the role information. (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthRoleCall(String authRoleId, Boolean resolveNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/roles/{AuthRoleId}"
            .replaceAll("\\{" + "AuthRoleId" + "\\}", apiClient.escapeString(authRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthRoleValidateBeforeCall(String authRoleId, Boolean resolveNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authRoleId' is set
        if (authRoleId == null) {
            throw new ApiException("Missing the required parameter 'authRoleId' when calling getAuthRole(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthRoleCall(authRoleId, resolveNames, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the role information.
     * @param authRoleId Retrieve the role information. (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @return AuthRoles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthRoles getAuthRole(String authRoleId, Boolean resolveNames) throws ApiException {
        ApiResponse<AuthRoles> resp = getAuthRoleWithHttpInfo(authRoleId, resolveNames);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the role information.
     * @param authRoleId Retrieve the role information. (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @return ApiResponse&lt;AuthRoles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthRoles> getAuthRoleWithHttpInfo(String authRoleId, Boolean resolveNames) throws ApiException {
        com.squareup.okhttp.Call call = getAuthRoleValidateBeforeCall(authRoleId, resolveNames, null, null);
        Type localVarReturnType = new TypeToken<AuthRoles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the role information.
     * @param authRoleId Retrieve the role information. (required)
     * @param resolveNames Resolve names of personas. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthRoleAsync(String authRoleId, Boolean resolveNames, final ApiCallback<AuthRoles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthRoleValidateBeforeCall(authRoleId, resolveNames, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthRoles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthShells
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthShellsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/shells";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthShellsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthShellsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all shells.
     * @return AuthShells
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthShells getAuthShells() throws ApiException {
        ApiResponse<AuthShells> resp = getAuthShellsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all shells.
     * @return ApiResponse&lt;AuthShells&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthShells> getAuthShellsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthShellsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthShells>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all shells.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthShellsAsync(final ApiCallback<AuthShells> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthShellsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthShells>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthUser
     * @param authUserId Retrieve the user information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthUserCall(String authUserId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/users/{AuthUserId}"
            .replaceAll("\\{" + "AuthUserId" + "\\}", apiClient.escapeString(authUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (queryMemberOf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_member_of", queryMemberOf));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthUserValidateBeforeCall(String authUserId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authUserId' is set
        if (authUserId == null) {
            throw new ApiException("Missing the required parameter 'authUserId' when calling getAuthUser(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthUserCall(authUserId, cached, resolveNames, queryMemberOf, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the user information.
     * @param authUserId Retrieve the user information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @return AuthUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthUsers getAuthUser(String authUserId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider) throws ApiException {
        ApiResponse<AuthUsers> resp = getAuthUserWithHttpInfo(authUserId, cached, resolveNames, queryMemberOf, zone, provider);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the user information.
     * @param authUserId Retrieve the user information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @return ApiResponse&lt;AuthUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthUsers> getAuthUserWithHttpInfo(String authUserId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = getAuthUserValidateBeforeCall(authUserId, cached, resolveNames, queryMemberOf, zone, provider, null, null);
        Type localVarReturnType = new TypeToken<AuthUsers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the user information.
     * @param authUserId Retrieve the user information. (required)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @param zone Filter users by zone. (optional)
     * @param provider Filter users by provider. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthUserAsync(String authUserId, Boolean cached, Boolean resolveNames, Boolean queryMemberOf, String zone, String provider, final ApiCallback<AuthUsers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthUserValidateBeforeCall(authUserId, cached, resolveNames, queryMemberOf, zone, provider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthUsers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthWellknown
     * @param authWellknownId Retrieve the wellknown persona. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthWellknownCall(String authWellknownId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/wellknowns/{AuthWellknownId}"
            .replaceAll("\\{" + "AuthWellknownId" + "\\}", apiClient.escapeString(authWellknownId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthWellknownValidateBeforeCall(String authWellknownId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authWellknownId' is set
        if (authWellknownId == null) {
            throw new ApiException("Missing the required parameter 'authWellknownId' when calling getAuthWellknown(Async)");
        }
        

        com.squareup.okhttp.Call call = getAuthWellknownCall(authWellknownId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the wellknown persona.
     * @param authWellknownId Retrieve the wellknown persona. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return AuthWellknowns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthWellknowns getAuthWellknown(String authWellknownId, String scope) throws ApiException {
        ApiResponse<AuthWellknowns> resp = getAuthWellknownWithHttpInfo(authWellknownId, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the wellknown persona.
     * @param authWellknownId Retrieve the wellknown persona. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;AuthWellknowns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthWellknowns> getAuthWellknownWithHttpInfo(String authWellknownId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getAuthWellknownValidateBeforeCall(authWellknownId, scope, null, null);
        Type localVarReturnType = new TypeToken<AuthWellknowns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the wellknown persona.
     * @param authWellknownId Retrieve the wellknown persona. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthWellknownAsync(String authWellknownId, String scope, final ApiCallback<AuthWellknowns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthWellknownValidateBeforeCall(authWellknownId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthWellknowns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuthWellknowns
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthWellknownsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/wellknowns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthWellknownsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAuthWellknownsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all wellknown personas.
     * @return AuthWellknowns
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthWellknowns getAuthWellknowns() throws ApiException {
        ApiResponse<AuthWellknowns> resp = getAuthWellknownsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * List all wellknown personas.
     * @return ApiResponse&lt;AuthWellknowns&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthWellknowns> getAuthWellknownsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAuthWellknownsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AuthWellknowns>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all wellknown personas.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthWellknownsAsync(final ApiCallback<AuthWellknowns> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthWellknownsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthWellknowns>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMappingDump
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMappingDumpCall(Boolean nocreate, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/mapping/dump";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nocreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nocreate", nocreate));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMappingDumpValidateBeforeCall(Boolean nocreate, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMappingDumpCall(nocreate, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @return MappingDump
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingDump getMappingDump(Boolean nocreate, String zone) throws ApiException {
        ApiResponse<MappingDump> resp = getMappingDumpWithHttpInfo(nocreate, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @return ApiResponse&lt;MappingDump&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingDump> getMappingDumpWithHttpInfo(Boolean nocreate, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getMappingDumpValidateBeforeCall(nocreate, zone, null, null);
        Type localVarReturnType = new TypeToken<MappingDump>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMappingDumpAsync(Boolean nocreate, String zone, final ApiCallback<MappingDump> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMappingDumpValidateBeforeCall(nocreate, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingDump>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMappingIdentity
     * @param mappingIdentityId Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona. (required)
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMappingIdentityCall(String mappingIdentityId, Boolean nocreate, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/identities/{MappingIdentityId}"
            .replaceAll("\\{" + "MappingIdentityId" + "\\}", apiClient.escapeString(mappingIdentityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nocreate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nocreate", nocreate));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMappingIdentityValidateBeforeCall(String mappingIdentityId, Boolean nocreate, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mappingIdentityId' is set
        if (mappingIdentityId == null) {
            throw new ApiException("Missing the required parameter 'mappingIdentityId' when calling getMappingIdentity(Async)");
        }
        

        com.squareup.okhttp.Call call = getMappingIdentityCall(mappingIdentityId, nocreate, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     * @param mappingIdentityId Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona. (required)
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @return MappingIdentities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingIdentities getMappingIdentity(String mappingIdentityId, Boolean nocreate, String zone) throws ApiException {
        ApiResponse<MappingIdentities> resp = getMappingIdentityWithHttpInfo(mappingIdentityId, nocreate, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     * @param mappingIdentityId Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona. (required)
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @return ApiResponse&lt;MappingIdentities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingIdentities> getMappingIdentityWithHttpInfo(String mappingIdentityId, Boolean nocreate, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getMappingIdentityValidateBeforeCall(mappingIdentityId, nocreate, zone, null, null);
        Type localVarReturnType = new TypeToken<MappingIdentities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
     * @param mappingIdentityId Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona. (required)
     * @param nocreate Idmap should attempt to create missing identity mappings. (optional)
     * @param zone Optional zone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMappingIdentityAsync(String mappingIdentityId, Boolean nocreate, String zone, final ApiCallback<MappingIdentities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMappingIdentityValidateBeforeCall(mappingIdentityId, nocreate, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingIdentities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMappingUsersLookup
     * @param primaryGid The user&#39;s primary group ID. (optional)
     * @param uid The user ID. (optional)
     * @param zone The zone the user belongs to. (optional)
     * @param gid The IDs of the groups that the user belongs to. (optional)
     * @param user The user name. (optional)
     * @param kerberosPrincipal The Kerberos principal name, of the form user@realm. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMappingUsersLookupCall(Integer primaryGid, Integer uid, String zone, List<Integer> gid, String user, String kerberosPrincipal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/users/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (primaryGid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("primary_gid", primaryGid));
        if (uid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("uid", uid));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (gid != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "gid", gid));
        if (user != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user", user));
        if (kerberosPrincipal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("kerberos_principal", kerberosPrincipal));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMappingUsersLookupValidateBeforeCall(Integer primaryGid, Integer uid, String zone, List<Integer> gid, String user, String kerberosPrincipal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMappingUsersLookupCall(primaryGid, uid, zone, gid, user, kerberosPrincipal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the user information.
     * @param primaryGid The user&#39;s primary group ID. (optional)
     * @param uid The user ID. (optional)
     * @param zone The zone the user belongs to. (optional)
     * @param gid The IDs of the groups that the user belongs to. (optional)
     * @param user The user name. (optional)
     * @param kerberosPrincipal The Kerberos principal name, of the form user@realm. (optional)
     * @return MappingUsersLookup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingUsersLookup getMappingUsersLookup(Integer primaryGid, Integer uid, String zone, List<Integer> gid, String user, String kerberosPrincipal) throws ApiException {
        ApiResponse<MappingUsersLookup> resp = getMappingUsersLookupWithHttpInfo(primaryGid, uid, zone, gid, user, kerberosPrincipal);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the user information.
     * @param primaryGid The user&#39;s primary group ID. (optional)
     * @param uid The user ID. (optional)
     * @param zone The zone the user belongs to. (optional)
     * @param gid The IDs of the groups that the user belongs to. (optional)
     * @param user The user name. (optional)
     * @param kerberosPrincipal The Kerberos principal name, of the form user@realm. (optional)
     * @return ApiResponse&lt;MappingUsersLookup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingUsersLookup> getMappingUsersLookupWithHttpInfo(Integer primaryGid, Integer uid, String zone, List<Integer> gid, String user, String kerberosPrincipal) throws ApiException {
        com.squareup.okhttp.Call call = getMappingUsersLookupValidateBeforeCall(primaryGid, uid, zone, gid, user, kerberosPrincipal, null, null);
        Type localVarReturnType = new TypeToken<MappingUsersLookup>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the user information.
     * @param primaryGid The user&#39;s primary group ID. (optional)
     * @param uid The user ID. (optional)
     * @param zone The zone the user belongs to. (optional)
     * @param gid The IDs of the groups that the user belongs to. (optional)
     * @param user The user name. (optional)
     * @param kerberosPrincipal The Kerberos principal name, of the form user@realm. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMappingUsersLookupAsync(Integer primaryGid, Integer uid, String zone, List<Integer> gid, String user, String kerberosPrincipal, final ApiCallback<MappingUsersLookup> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMappingUsersLookupValidateBeforeCall(primaryGid, uid, zone, gid, user, kerberosPrincipal, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingUsersLookup>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMappingUsersRules
     * @param zone The zone to which the user mapping applies. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMappingUsersRulesCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/users/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMappingUsersRulesValidateBeforeCall(String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getMappingUsersRulesCall(zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the user mapping rules.
     * @param zone The zone to which the user mapping applies. (optional)
     * @return MappingUsersRules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MappingUsersRules getMappingUsersRules(String zone) throws ApiException {
        ApiResponse<MappingUsersRules> resp = getMappingUsersRulesWithHttpInfo(zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the user mapping rules.
     * @param zone The zone to which the user mapping applies. (optional)
     * @return ApiResponse&lt;MappingUsersRules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MappingUsersRules> getMappingUsersRulesWithHttpInfo(String zone) throws ApiException {
        com.squareup.okhttp.Call call = getMappingUsersRulesValidateBeforeCall(zone, null, null);
        Type localVarReturnType = new TypeToken<MappingUsersRules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the user mapping rules.
     * @param zone The zone to which the user mapping applies. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMappingUsersRulesAsync(String zone, final ApiCallback<MappingUsersRules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMappingUsersRulesValidateBeforeCall(zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MappingUsersRules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersAdsById
     * @param providersAdsId Retrieve the ADS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersAdsByIdCall(String providersAdsId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads/{ProvidersAdsId}"
            .replaceAll("\\{" + "ProvidersAdsId" + "\\}", apiClient.escapeString(providersAdsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersAdsByIdValidateBeforeCall(String providersAdsId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersAdsId' is set
        if (providersAdsId == null) {
            throw new ApiException("Missing the required parameter 'providersAdsId' when calling getProvidersAdsById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProvidersAdsByIdCall(providersAdsId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the ADS provider.
     * @param providersAdsId Retrieve the ADS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersAds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersAds getProvidersAdsById(String providersAdsId, String scope) throws ApiException {
        ApiResponse<ProvidersAds> resp = getProvidersAdsByIdWithHttpInfo(providersAdsId, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the ADS provider.
     * @param providersAdsId Retrieve the ADS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersAds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersAds> getProvidersAdsByIdWithHttpInfo(String providersAdsId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersAdsByIdValidateBeforeCall(providersAdsId, scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersAds>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the ADS provider.
     * @param providersAdsId Retrieve the ADS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersAdsByIdAsync(String providersAdsId, String scope, final ApiCallback<ProvidersAds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersAdsByIdValidateBeforeCall(providersAdsId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersAds>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersFileById
     * @param providersFileId Retrieve the file provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersFileByIdCall(String providersFileId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/file/{ProvidersFileId}"
            .replaceAll("\\{" + "ProvidersFileId" + "\\}", apiClient.escapeString(providersFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersFileByIdValidateBeforeCall(String providersFileId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersFileId' is set
        if (providersFileId == null) {
            throw new ApiException("Missing the required parameter 'providersFileId' when calling getProvidersFileById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProvidersFileByIdCall(providersFileId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the file provider.
     * @param providersFileId Retrieve the file provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersFile getProvidersFileById(String providersFileId, String scope) throws ApiException {
        ApiResponse<ProvidersFile> resp = getProvidersFileByIdWithHttpInfo(providersFileId, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the file provider.
     * @param providersFileId Retrieve the file provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersFile> getProvidersFileByIdWithHttpInfo(String providersFileId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersFileByIdValidateBeforeCall(providersFileId, scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the file provider.
     * @param providersFileId Retrieve the file provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersFileByIdAsync(String providersFileId, String scope, final ApiCallback<ProvidersFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersFileByIdValidateBeforeCall(providersFileId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersKrb5ById
     * @param providersKrb5Id Retrieve the KRB5 provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersKrb5ByIdCall(String providersKrb5Id, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/krb5/{ProvidersKrb5Id}"
            .replaceAll("\\{" + "ProvidersKrb5Id" + "\\}", apiClient.escapeString(providersKrb5Id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersKrb5ByIdValidateBeforeCall(String providersKrb5Id, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersKrb5Id' is set
        if (providersKrb5Id == null) {
            throw new ApiException("Missing the required parameter 'providersKrb5Id' when calling getProvidersKrb5ById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProvidersKrb5ByIdCall(providersKrb5Id, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the KRB5 provider.
     * @param providersKrb5Id Retrieve the KRB5 provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersKrb5
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersKrb5 getProvidersKrb5ById(String providersKrb5Id, String scope) throws ApiException {
        ApiResponse<ProvidersKrb5> resp = getProvidersKrb5ByIdWithHttpInfo(providersKrb5Id, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the KRB5 provider.
     * @param providersKrb5Id Retrieve the KRB5 provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersKrb5&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersKrb5> getProvidersKrb5ByIdWithHttpInfo(String providersKrb5Id, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersKrb5ByIdValidateBeforeCall(providersKrb5Id, scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersKrb5>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the KRB5 provider.
     * @param providersKrb5Id Retrieve the KRB5 provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersKrb5ByIdAsync(String providersKrb5Id, String scope, final ApiCallback<ProvidersKrb5> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersKrb5ByIdValidateBeforeCall(providersKrb5Id, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersKrb5>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersLdapById
     * @param providersLdapId Retrieve the LDAP provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersLdapByIdCall(String providersLdapId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/auth/providers/ldap/{ProvidersLdapId}"
            .replaceAll("\\{" + "ProvidersLdapId" + "\\}", apiClient.escapeString(providersLdapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersLdapByIdValidateBeforeCall(String providersLdapId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLdapId' is set
        if (providersLdapId == null) {
            throw new ApiException("Missing the required parameter 'providersLdapId' when calling getProvidersLdapById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProvidersLdapByIdCall(providersLdapId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the LDAP provider.
     * @param providersLdapId Retrieve the LDAP provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersLdap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersLdap getProvidersLdapById(String providersLdapId, String scope) throws ApiException {
        ApiResponse<ProvidersLdap> resp = getProvidersLdapByIdWithHttpInfo(providersLdapId, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the LDAP provider.
     * @param providersLdapId Retrieve the LDAP provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersLdap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersLdap> getProvidersLdapByIdWithHttpInfo(String providersLdapId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersLdapByIdValidateBeforeCall(providersLdapId, scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersLdap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the LDAP provider.
     * @param providersLdapId Retrieve the LDAP provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersLdapByIdAsync(String providersLdapId, String scope, final ApiCallback<ProvidersLdap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersLdapByIdValidateBeforeCall(providersLdapId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersLdap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersLocal
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersLocalCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/local";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersLocalValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getProvidersLocalCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all local providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersLocal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersLocal getProvidersLocal(String scope) throws ApiException {
        ApiResponse<ProvidersLocal> resp = getProvidersLocalWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all local providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersLocal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersLocal> getProvidersLocalWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersLocalValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersLocal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all local providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersLocalAsync(String scope, final ApiCallback<ProvidersLocal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersLocalValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersLocal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersLocalById
     * @param providersLocalId Retrieve the local provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersLocalByIdCall(String providersLocalId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/local/{ProvidersLocalId}"
            .replaceAll("\\{" + "ProvidersLocalId" + "\\}", apiClient.escapeString(providersLocalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersLocalByIdValidateBeforeCall(String providersLocalId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLocalId' is set
        if (providersLocalId == null) {
            throw new ApiException("Missing the required parameter 'providersLocalId' when calling getProvidersLocalById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProvidersLocalByIdCall(providersLocalId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the local provider.
     * @param providersLocalId Retrieve the local provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersLocal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersLocal getProvidersLocalById(String providersLocalId, String scope) throws ApiException {
        ApiResponse<ProvidersLocal> resp = getProvidersLocalByIdWithHttpInfo(providersLocalId, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the local provider.
     * @param providersLocalId Retrieve the local provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersLocal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersLocal> getProvidersLocalByIdWithHttpInfo(String providersLocalId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersLocalByIdValidateBeforeCall(providersLocalId, scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersLocal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the local provider.
     * @param providersLocalId Retrieve the local provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersLocalByIdAsync(String providersLocalId, String scope, final ApiCallback<ProvidersLocal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersLocalByIdValidateBeforeCall(providersLocalId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersLocal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersNisById
     * @param providersNisId Retrieve the NIS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersNisByIdCall(String providersNisId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/nis/{ProvidersNisId}"
            .replaceAll("\\{" + "ProvidersNisId" + "\\}", apiClient.escapeString(providersNisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersNisByIdValidateBeforeCall(String providersNisId, String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersNisId' is set
        if (providersNisId == null) {
            throw new ApiException("Missing the required parameter 'providersNisId' when calling getProvidersNisById(Async)");
        }
        

        com.squareup.okhttp.Call call = getProvidersNisByIdCall(providersNisId, scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the NIS provider.
     * @param providersNisId Retrieve the NIS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersNis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersNis getProvidersNisById(String providersNisId, String scope) throws ApiException {
        ApiResponse<ProvidersNis> resp = getProvidersNisByIdWithHttpInfo(providersNisId, scope);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the NIS provider.
     * @param providersNisId Retrieve the NIS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersNis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersNis> getProvidersNisByIdWithHttpInfo(String providersNisId, String scope) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersNisByIdValidateBeforeCall(providersNisId, scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersNis>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the NIS provider.
     * @param providersNisId Retrieve the NIS provider. (required)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersNisByIdAsync(String providersNisId, String scope, final ApiCallback<ProvidersNis> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersNisByIdValidateBeforeCall(providersNisId, scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersNis>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProvidersSummary
     * @param groupnet Filter providers by groupnet. (optional)
     * @param zone Filter providers by zone. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProvidersSummaryCall(String groupnet, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupnet != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupnet", groupnet));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProvidersSummaryValidateBeforeCall(String groupnet, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getProvidersSummaryCall(groupnet, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the summary information.
     * @param groupnet Filter providers by groupnet. (optional)
     * @param zone Filter providers by zone. (optional)
     * @return ProvidersSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersSummary getProvidersSummary(String groupnet, String zone) throws ApiException {
        ApiResponse<ProvidersSummary> resp = getProvidersSummaryWithHttpInfo(groupnet, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the summary information.
     * @param groupnet Filter providers by groupnet. (optional)
     * @param zone Filter providers by zone. (optional)
     * @return ApiResponse&lt;ProvidersSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersSummary> getProvidersSummaryWithHttpInfo(String groupnet, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getProvidersSummaryValidateBeforeCall(groupnet, zone, null, null);
        Type localVarReturnType = new TypeToken<ProvidersSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the summary information.
     * @param groupnet Filter providers by groupnet. (optional)
     * @param zone Filter providers by zone. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProvidersSummaryAsync(String groupnet, String zone, final ApiCallback<ProvidersSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProvidersSummaryValidateBeforeCall(groupnet, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsAcls
     * @param preset If specified the preset configuration values for all applicable ACL policies are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsAclsCall(String preset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/settings/acls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (preset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preset", preset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsAclsValidateBeforeCall(String preset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSettingsAclsCall(preset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the ACL policy settings and preset configurations.
     * @param preset If specified the preset configuration values for all applicable ACL policies are returned. (optional)
     * @return SettingsAcls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsAcls getSettingsAcls(String preset) throws ApiException {
        ApiResponse<SettingsAcls> resp = getSettingsAclsWithHttpInfo(preset);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the ACL policy settings and preset configurations.
     * @param preset If specified the preset configuration values for all applicable ACL policies are returned. (optional)
     * @return ApiResponse&lt;SettingsAcls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsAcls> getSettingsAclsWithHttpInfo(String preset) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsAclsValidateBeforeCall(preset, null, null);
        Type localVarReturnType = new TypeToken<SettingsAcls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the ACL policy settings and preset configurations.
     * @param preset If specified the preset configuration values for all applicable ACL policies are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsAclsAsync(String preset, final ApiCallback<SettingsAcls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsAclsValidateBeforeCall(preset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsAcls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsGlobal
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsGlobalCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsGlobalValidateBeforeCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSettingsGlobalCall(scope, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the global settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @return SettingsGlobal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsGlobal getSettingsGlobal(String scope, String zone) throws ApiException {
        ApiResponse<SettingsGlobal> resp = getSettingsGlobalWithHttpInfo(scope, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the global settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @return ApiResponse&lt;SettingsGlobal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsGlobal> getSettingsGlobalWithHttpInfo(String scope, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsGlobalValidateBeforeCall(scope, zone, null, null);
        Type localVarReturnType = new TypeToken<SettingsGlobal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the global settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsGlobalAsync(String scope, String zone, final ApiCallback<SettingsGlobal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsGlobalValidateBeforeCall(scope, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsGlobal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsKrb5Defaults
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsKrb5DefaultsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsKrb5DefaultsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSettingsKrb5DefaultsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the krb5 settings.
     * @return SettingsKrb5Defaults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsKrb5Defaults getSettingsKrb5Defaults() throws ApiException {
        ApiResponse<SettingsKrb5Defaults> resp = getSettingsKrb5DefaultsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the krb5 settings.
     * @return ApiResponse&lt;SettingsKrb5Defaults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsKrb5Defaults> getSettingsKrb5DefaultsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSettingsKrb5DefaultsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SettingsKrb5Defaults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the krb5 settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsKrb5DefaultsAsync(final ApiCallback<SettingsKrb5Defaults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsKrb5DefaultsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsKrb5Defaults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsKrb5Domain
     * @param settingsKrb5DomainId View the krb5 domain settings. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsKrb5DomainCall(String settingsKrb5DomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}"
            .replaceAll("\\{" + "SettingsKrb5DomainId" + "\\}", apiClient.escapeString(settingsKrb5DomainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsKrb5DomainValidateBeforeCall(String settingsKrb5DomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5DomainId' is set
        if (settingsKrb5DomainId == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5DomainId' when calling getSettingsKrb5Domain(Async)");
        }
        

        com.squareup.okhttp.Call call = getSettingsKrb5DomainCall(settingsKrb5DomainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View the krb5 domain settings.
     * @param settingsKrb5DomainId View the krb5 domain settings. (required)
     * @return SettingsKrb5Domains
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsKrb5Domains getSettingsKrb5Domain(String settingsKrb5DomainId) throws ApiException {
        ApiResponse<SettingsKrb5Domains> resp = getSettingsKrb5DomainWithHttpInfo(settingsKrb5DomainId);
        return resp.getData();
    }

    /**
     * 
     * View the krb5 domain settings.
     * @param settingsKrb5DomainId View the krb5 domain settings. (required)
     * @return ApiResponse&lt;SettingsKrb5Domains&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsKrb5Domains> getSettingsKrb5DomainWithHttpInfo(String settingsKrb5DomainId) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsKrb5DomainValidateBeforeCall(settingsKrb5DomainId, null, null);
        Type localVarReturnType = new TypeToken<SettingsKrb5Domains>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View the krb5 domain settings.
     * @param settingsKrb5DomainId View the krb5 domain settings. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsKrb5DomainAsync(String settingsKrb5DomainId, final ApiCallback<SettingsKrb5Domains> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsKrb5DomainValidateBeforeCall(settingsKrb5DomainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsKrb5Domains>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsKrb5Realm
     * @param settingsKrb5RealmId Retrieve the krb5 settings for realms. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsKrb5RealmCall(String settingsKrb5RealmId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}"
            .replaceAll("\\{" + "SettingsKrb5RealmId" + "\\}", apiClient.escapeString(settingsKrb5RealmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsKrb5RealmValidateBeforeCall(String settingsKrb5RealmId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5RealmId' is set
        if (settingsKrb5RealmId == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5RealmId' when calling getSettingsKrb5Realm(Async)");
        }
        

        com.squareup.okhttp.Call call = getSettingsKrb5RealmCall(settingsKrb5RealmId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the krb5 settings for realms.
     * @param settingsKrb5RealmId Retrieve the krb5 settings for realms. (required)
     * @return SettingsKrb5Realms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsKrb5Realms getSettingsKrb5Realm(String settingsKrb5RealmId) throws ApiException {
        ApiResponse<SettingsKrb5Realms> resp = getSettingsKrb5RealmWithHttpInfo(settingsKrb5RealmId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the krb5 settings for realms.
     * @param settingsKrb5RealmId Retrieve the krb5 settings for realms. (required)
     * @return ApiResponse&lt;SettingsKrb5Realms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsKrb5Realms> getSettingsKrb5RealmWithHttpInfo(String settingsKrb5RealmId) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsKrb5RealmValidateBeforeCall(settingsKrb5RealmId, null, null);
        Type localVarReturnType = new TypeToken<SettingsKrb5Realms>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the krb5 settings for realms.
     * @param settingsKrb5RealmId Retrieve the krb5 settings for realms. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsKrb5RealmAsync(String settingsKrb5RealmId, final ApiCallback<SettingsKrb5Realms> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsKrb5RealmValidateBeforeCall(settingsKrb5RealmId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsKrb5Realms>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSettingsMapping
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone which contains mapping settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSettingsMappingCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/mapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSettingsMappingValidateBeforeCall(String scope, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSettingsMappingCall(scope, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the mapping settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone which contains mapping settings. (optional)
     * @return SettingsMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsMapping getSettingsMapping(String scope, String zone) throws ApiException {
        ApiResponse<SettingsMapping> resp = getSettingsMappingWithHttpInfo(scope, zone);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the mapping settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone which contains mapping settings. (optional)
     * @return ApiResponse&lt;SettingsMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsMapping> getSettingsMappingWithHttpInfo(String scope, String zone) throws ApiException {
        com.squareup.okhttp.Call call = getSettingsMappingValidateBeforeCall(scope, zone, null, null);
        Type localVarReturnType = new TypeToken<SettingsMapping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the mapping settings.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param zone Access zone which contains mapping settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSettingsMappingAsync(String scope, String zone, final ApiCallback<SettingsMapping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSettingsMappingValidateBeforeCall(scope, zone, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsMapping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAuthGroups
     * @param domain Filter groups by domain. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter groups by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter groups by provider. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAuthGroupsCall(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain", domain));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));
        if (queryMemberOf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_member_of", queryMemberOf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAuthGroupsValidateBeforeCall(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAuthGroupsCall(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all groups.
     * @param domain Filter groups by domain. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter groups by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter groups by provider. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @return AuthGroupsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthGroupsExtended listAuthGroups(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf) throws ApiException {
        ApiResponse<AuthGroupsExtended> resp = listAuthGroupsWithHttpInfo(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf);
        return resp.getData();
    }

    /**
     * 
     * List all groups.
     * @param domain Filter groups by domain. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter groups by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter groups by provider. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @return ApiResponse&lt;AuthGroupsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthGroupsExtended> listAuthGroupsWithHttpInfo(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf) throws ApiException {
        com.squareup.okhttp.Call call = listAuthGroupsValidateBeforeCall(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf, null, null);
        Type localVarReturnType = new TypeToken<AuthGroupsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all groups.
     * @param domain Filter groups by domain. (optional)
     * @param zone Filter groups by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter groups by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter groups by provider. (optional)
     * @param queryMemberOf Enumerate all groups that a group is a member of. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAuthGroupsAsync(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf, final ApiCallback<AuthGroupsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAuthGroupsValidateBeforeCall(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthGroupsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAuthRoles
     * @param sort The field that will be used for sorting. (optional)
     * @param resolveNames Filter users by zone. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAuthRolesCall(String sort, Boolean resolveNames, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAuthRolesValidateBeforeCall(String sort, Boolean resolveNames, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAuthRolesCall(sort, resolveNames, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all roles.
     * @param sort The field that will be used for sorting. (optional)
     * @param resolveNames Filter users by zone. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return AuthRolesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthRolesExtended listAuthRoles(String sort, Boolean resolveNames, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<AuthRolesExtended> resp = listAuthRolesWithHttpInfo(sort, resolveNames, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all roles.
     * @param sort The field that will be used for sorting. (optional)
     * @param resolveNames Filter users by zone. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;AuthRolesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthRolesExtended> listAuthRolesWithHttpInfo(String sort, Boolean resolveNames, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listAuthRolesValidateBeforeCall(sort, resolveNames, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<AuthRolesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all roles.
     * @param sort The field that will be used for sorting. (optional)
     * @param resolveNames Filter users by zone. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAuthRolesAsync(String sort, Boolean resolveNames, Integer limit, String dir, String resume, final ApiCallback<AuthRolesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAuthRolesValidateBeforeCall(sort, resolveNames, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthRolesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAuthUsers
     * @param domain Filter users by domain. (optional)
     * @param zone Filter users by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter users by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter users by provider. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAuthUsersCall(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (domain != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("domain", domain));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (cached != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cached", cached));
        if (resolveNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolve_names", resolveNames));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));
        if (queryMemberOf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query_member_of", queryMemberOf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAuthUsersValidateBeforeCall(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAuthUsersCall(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all users.
     * @param domain Filter users by domain. (optional)
     * @param zone Filter users by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter users by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter users by provider. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @return AuthUsersExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthUsersExtended listAuthUsers(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf) throws ApiException {
        ApiResponse<AuthUsersExtended> resp = listAuthUsersWithHttpInfo(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf);
        return resp.getData();
    }

    /**
     * 
     * List all users.
     * @param domain Filter users by domain. (optional)
     * @param zone Filter users by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter users by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter users by provider. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @return ApiResponse&lt;AuthUsersExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthUsersExtended> listAuthUsersWithHttpInfo(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf) throws ApiException {
        com.squareup.okhttp.Call call = listAuthUsersValidateBeforeCall(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf, null, null);
        Type localVarReturnType = new TypeToken<AuthUsersExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all users.
     * @param domain Filter users by domain. (optional)
     * @param zone Filter users by zone. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param cached If true, only return cached objects. (optional)
     * @param resolveNames Resolve names of personas. (optional)
     * @param filter Filter users by name prefix. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param provider Filter users by provider. (optional)
     * @param queryMemberOf Enumerate all users that a group is a member of. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAuthUsersAsync(String domain, String zone, String resume, Boolean cached, Boolean resolveNames, String filter, Integer limit, String provider, Boolean queryMemberOf, final ApiCallback<AuthUsersExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAuthUsersValidateBeforeCall(domain, zone, resume, cached, resolveNames, filter, limit, provider, queryMemberOf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthUsersExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProvidersAds
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProvidersAdsCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProvidersAdsValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProvidersAdsCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all ADS providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersAdsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersAdsExtended listProvidersAds(String scope) throws ApiException {
        ApiResponse<ProvidersAdsExtended> resp = listProvidersAdsWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all ADS providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersAdsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersAdsExtended> listProvidersAdsWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = listProvidersAdsValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersAdsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ADS providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProvidersAdsAsync(String scope, final ApiCallback<ProvidersAdsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProvidersAdsValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersAdsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProvidersFile
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProvidersFileCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProvidersFileValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProvidersFileCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all file providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersFile listProvidersFile(String scope) throws ApiException {
        ApiResponse<ProvidersFile> resp = listProvidersFileWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all file providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersFile> listProvidersFileWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = listProvidersFileValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all file providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProvidersFileAsync(String scope, final ApiCallback<ProvidersFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProvidersFileValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProvidersKrb5
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProvidersKrb5Call(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/krb5";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProvidersKrb5ValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProvidersKrb5Call(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all KRB5 providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersKrb5Extended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersKrb5Extended listProvidersKrb5(String scope) throws ApiException {
        ApiResponse<ProvidersKrb5Extended> resp = listProvidersKrb5WithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all KRB5 providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersKrb5Extended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersKrb5Extended> listProvidersKrb5WithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = listProvidersKrb5ValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersKrb5Extended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all KRB5 providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProvidersKrb5Async(String scope, final ApiCallback<ProvidersKrb5Extended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProvidersKrb5ValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersKrb5Extended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProvidersLdap
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProvidersLdapCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/auth/providers/ldap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProvidersLdapValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProvidersLdapCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all LDAP providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersLdap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersLdap listProvidersLdap(String scope) throws ApiException {
        ApiResponse<ProvidersLdap> resp = listProvidersLdapWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all LDAP providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersLdap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersLdap> listProvidersLdapWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = listProvidersLdapValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersLdap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all LDAP providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProvidersLdapAsync(String scope, final ApiCallback<ProvidersLdap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProvidersLdapValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersLdap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listProvidersNis
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listProvidersNisCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/nis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listProvidersNisValidateBeforeCall(String scope, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listProvidersNisCall(scope, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all NIS providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ProvidersNisExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProvidersNisExtended listProvidersNis(String scope) throws ApiException {
        ApiResponse<ProvidersNisExtended> resp = listProvidersNisWithHttpInfo(scope);
        return resp.getData();
    }

    /**
     * 
     * List all NIS providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @return ApiResponse&lt;ProvidersNisExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProvidersNisExtended> listProvidersNisWithHttpInfo(String scope) throws ApiException {
        com.squareup.okhttp.Call call = listProvidersNisValidateBeforeCall(scope, null, null);
        Type localVarReturnType = new TypeToken<ProvidersNisExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all NIS providers.
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listProvidersNisAsync(String scope, final ApiCallback<ProvidersNisExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listProvidersNisValidateBeforeCall(scope, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProvidersNisExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSettingsKrb5Domains
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSettingsKrb5DomainsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSettingsKrb5DomainsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSettingsKrb5DomainsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the krb5 settings for domains.
     * @return SettingsKrb5Domains
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsKrb5Domains listSettingsKrb5Domains() throws ApiException {
        ApiResponse<SettingsKrb5Domains> resp = listSettingsKrb5DomainsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the krb5 settings for domains.
     * @return ApiResponse&lt;SettingsKrb5Domains&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsKrb5Domains> listSettingsKrb5DomainsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listSettingsKrb5DomainsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SettingsKrb5Domains>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the krb5 settings for domains.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSettingsKrb5DomainsAsync(final ApiCallback<SettingsKrb5Domains> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSettingsKrb5DomainsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsKrb5Domains>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSettingsKrb5Realms
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSettingsKrb5RealmsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/realms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSettingsKrb5RealmsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSettingsKrb5RealmsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the krb5 settings for realms.
     * @return SettingsKrb5Realms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SettingsKrb5Realms listSettingsKrb5Realms() throws ApiException {
        ApiResponse<SettingsKrb5Realms> resp = listSettingsKrb5RealmsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the krb5 settings for realms.
     * @return ApiResponse&lt;SettingsKrb5Realms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SettingsKrb5Realms> listSettingsKrb5RealmsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listSettingsKrb5RealmsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SettingsKrb5Realms>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the krb5 settings for realms.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSettingsKrb5RealmsAsync(final ApiCallback<SettingsKrb5Realms> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSettingsKrb5RealmsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SettingsKrb5Realms>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAuthGroup
     * @param authGroup  (required)
     * @param authGroupId Modify the group. (required)
     * @param force Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthGroupCall(AuthGroup authGroup, String authGroupId, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authGroup;

        // create path and map variables
        String localVarPath = "/platform/1/auth/groups/{AuthGroupId}"
            .replaceAll("\\{" + "AuthGroupId" + "\\}", apiClient.escapeString(authGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthGroupValidateBeforeCall(AuthGroup authGroup, String authGroupId, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authGroup' is set
        if (authGroup == null) {
            throw new ApiException("Missing the required parameter 'authGroup' when calling updateAuthGroup(Async)");
        }
        
        // verify the required parameter 'authGroupId' is set
        if (authGroupId == null) {
            throw new ApiException("Missing the required parameter 'authGroupId' when calling updateAuthGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAuthGroupCall(authGroup, authGroupId, force, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the group.
     * @param authGroup  (required)
     * @param authGroupId Modify the group. (required)
     * @param force Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAuthGroup(AuthGroup authGroup, String authGroupId, Boolean force, String zone, String provider) throws ApiException {
        updateAuthGroupWithHttpInfo(authGroup, authGroupId, force, zone, provider);
    }

    /**
     * 
     * Modify the group.
     * @param authGroup  (required)
     * @param authGroupId Modify the group. (required)
     * @param force Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAuthGroupWithHttpInfo(AuthGroup authGroup, String authGroupId, Boolean force, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthGroupValidateBeforeCall(authGroup, authGroupId, force, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the group.
     * @param authGroup  (required)
     * @param authGroupId Modify the group. (required)
     * @param force Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthGroupAsync(AuthGroup authGroup, String authGroupId, Boolean force, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthGroupValidateBeforeCall(authGroup, authGroupId, force, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAuthLogLevel
     * @param authLogLevel  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthLogLevelCall(AuthLogLevelExtended authLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authLogLevel;

        // create path and map variables
        String localVarPath = "/platform/3/auth/log-level";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthLogLevelValidateBeforeCall(AuthLogLevelExtended authLogLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authLogLevel' is set
        if (authLogLevel == null) {
            throw new ApiException("Missing the required parameter 'authLogLevel' when calling updateAuthLogLevel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAuthLogLevelCall(authLogLevel, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set the current authentication service and netlogon logging level.
     * @param authLogLevel  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAuthLogLevel(AuthLogLevelExtended authLogLevel) throws ApiException {
        updateAuthLogLevelWithHttpInfo(authLogLevel);
    }

    /**
     * 
     * Set the current authentication service and netlogon logging level.
     * @param authLogLevel  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAuthLogLevelWithHttpInfo(AuthLogLevelExtended authLogLevel) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthLogLevelValidateBeforeCall(authLogLevel, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set the current authentication service and netlogon logging level.
     * @param authLogLevel  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthLogLevelAsync(AuthLogLevelExtended authLogLevel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthLogLevelValidateBeforeCall(authLogLevel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAuthRole
     * @param authRole  (required)
     * @param authRoleId Modify the role. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthRoleCall(AuthRole authRole, String authRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authRole;

        // create path and map variables
        String localVarPath = "/platform/1/auth/roles/{AuthRoleId}"
            .replaceAll("\\{" + "AuthRoleId" + "\\}", apiClient.escapeString(authRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthRoleValidateBeforeCall(AuthRole authRole, String authRoleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authRole' is set
        if (authRole == null) {
            throw new ApiException("Missing the required parameter 'authRole' when calling updateAuthRole(Async)");
        }
        
        // verify the required parameter 'authRoleId' is set
        if (authRoleId == null) {
            throw new ApiException("Missing the required parameter 'authRoleId' when calling updateAuthRole(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAuthRoleCall(authRole, authRoleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the role.
     * @param authRole  (required)
     * @param authRoleId Modify the role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAuthRole(AuthRole authRole, String authRoleId) throws ApiException {
        updateAuthRoleWithHttpInfo(authRole, authRoleId);
    }

    /**
     * 
     * Modify the role.
     * @param authRole  (required)
     * @param authRoleId Modify the role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAuthRoleWithHttpInfo(AuthRole authRole, String authRoleId) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthRoleValidateBeforeCall(authRole, authRoleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the role.
     * @param authRole  (required)
     * @param authRoleId Modify the role. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthRoleAsync(AuthRole authRole, String authRoleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthRoleValidateBeforeCall(authRole, authRoleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAuthUser
     * @param authUser  (required)
     * @param authUserId Modify the user. (required)
     * @param force Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAuthUserCall(AuthUser authUser, String authUserId, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = authUser;

        // create path and map variables
        String localVarPath = "/platform/1/auth/users/{AuthUserId}"
            .replaceAll("\\{" + "AuthUserId" + "\\}", apiClient.escapeString(authUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (provider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("provider", provider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAuthUserValidateBeforeCall(AuthUser authUser, String authUserId, Boolean force, String zone, String provider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authUser' is set
        if (authUser == null) {
            throw new ApiException("Missing the required parameter 'authUser' when calling updateAuthUser(Async)");
        }
        
        // verify the required parameter 'authUserId' is set
        if (authUserId == null) {
            throw new ApiException("Missing the required parameter 'authUserId' when calling updateAuthUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAuthUserCall(authUser, authUserId, force, zone, provider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the user.
     * @param authUser  (required)
     * @param authUserId Modify the user. (required)
     * @param force Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAuthUser(AuthUser authUser, String authUserId, Boolean force, String zone, String provider) throws ApiException {
        updateAuthUserWithHttpInfo(authUser, authUserId, force, zone, provider);
    }

    /**
     * 
     * Modify the user.
     * @param authUser  (required)
     * @param authUserId Modify the user. (required)
     * @param force Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAuthUserWithHttpInfo(AuthUser authUser, String authUserId, Boolean force, String zone, String provider) throws ApiException {
        com.squareup.okhttp.Call call = updateAuthUserValidateBeforeCall(authUser, authUserId, force, zone, provider, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the user.
     * @param authUser  (required)
     * @param authUserId Modify the user. (required)
     * @param force Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes. (optional)
     * @param zone Optional zone. (optional)
     * @param provider Optional provider type. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAuthUserAsync(AuthUser authUser, String authUserId, Boolean force, String zone, String provider, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAuthUserValidateBeforeCall(authUser, authUserId, force, zone, provider, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMappingImport
     * @param mappingImport  (required)
     * @param zone Optional zone. (optional)
     * @param replace Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMappingImportCall(MappingImport mappingImport, String zone, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mappingImport;

        // create path and map variables
        String localVarPath = "/platform/3/auth/mapping/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));
        if (replace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replace", replace));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMappingImportValidateBeforeCall(MappingImport mappingImport, String zone, Boolean replace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mappingImport' is set
        if (mappingImport == null) {
            throw new ApiException("Missing the required parameter 'mappingImport' when calling updateMappingImport(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMappingImportCall(mappingImport, zone, replace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set or update a list of mappings between two personae.
     * @param mappingImport  (required)
     * @param zone Optional zone. (optional)
     * @param replace Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMappingImport(MappingImport mappingImport, String zone, Boolean replace) throws ApiException {
        updateMappingImportWithHttpInfo(mappingImport, zone, replace);
    }

    /**
     * 
     * Set or update a list of mappings between two personae.
     * @param mappingImport  (required)
     * @param zone Optional zone. (optional)
     * @param replace Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMappingImportWithHttpInfo(MappingImport mappingImport, String zone, Boolean replace) throws ApiException {
        com.squareup.okhttp.Call call = updateMappingImportValidateBeforeCall(mappingImport, zone, replace, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set or update a list of mappings between two personae.
     * @param mappingImport  (required)
     * @param zone Optional zone. (optional)
     * @param replace Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMappingImportAsync(MappingImport mappingImport, String zone, Boolean replace, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMappingImportValidateBeforeCall(mappingImport, zone, replace, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateMappingUsersRules
     * @param mappingUsersRules  (required)
     * @param zone The zone to which the user mapping applies. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMappingUsersRulesCall(MappingUsersRulesExtended mappingUsersRules, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mappingUsersRules;

        // create path and map variables
        String localVarPath = "/platform/1/auth/mapping/users/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMappingUsersRulesValidateBeforeCall(MappingUsersRulesExtended mappingUsersRules, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mappingUsersRules' is set
        if (mappingUsersRules == null) {
            throw new ApiException("Missing the required parameter 'mappingUsersRules' when calling updateMappingUsersRules(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMappingUsersRulesCall(mappingUsersRules, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the user mapping rules.
     * @param mappingUsersRules  (required)
     * @param zone The zone to which the user mapping applies. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateMappingUsersRules(MappingUsersRulesExtended mappingUsersRules, String zone) throws ApiException {
        updateMappingUsersRulesWithHttpInfo(mappingUsersRules, zone);
    }

    /**
     * 
     * Modify the user mapping rules.
     * @param mappingUsersRules  (required)
     * @param zone The zone to which the user mapping applies. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateMappingUsersRulesWithHttpInfo(MappingUsersRulesExtended mappingUsersRules, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateMappingUsersRulesValidateBeforeCall(mappingUsersRules, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the user mapping rules.
     * @param mappingUsersRules  (required)
     * @param zone The zone to which the user mapping applies. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMappingUsersRulesAsync(MappingUsersRulesExtended mappingUsersRules, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMappingUsersRulesValidateBeforeCall(mappingUsersRules, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateProvidersAdsById
     * @param providersAdsIdParams  (required)
     * @param providersAdsId Modify the ADS provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProvidersAdsByIdCall(ProvidersAdsIdParams providersAdsIdParams, String providersAdsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersAdsIdParams;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/ads/{ProvidersAdsId}"
            .replaceAll("\\{" + "ProvidersAdsId" + "\\}", apiClient.escapeString(providersAdsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProvidersAdsByIdValidateBeforeCall(ProvidersAdsIdParams providersAdsIdParams, String providersAdsId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersAdsIdParams' is set
        if (providersAdsIdParams == null) {
            throw new ApiException("Missing the required parameter 'providersAdsIdParams' when calling updateProvidersAdsById(Async)");
        }
        
        // verify the required parameter 'providersAdsId' is set
        if (providersAdsId == null) {
            throw new ApiException("Missing the required parameter 'providersAdsId' when calling updateProvidersAdsById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProvidersAdsByIdCall(providersAdsIdParams, providersAdsId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the ADS provider.
     * @param providersAdsIdParams  (required)
     * @param providersAdsId Modify the ADS provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProvidersAdsById(ProvidersAdsIdParams providersAdsIdParams, String providersAdsId) throws ApiException {
        updateProvidersAdsByIdWithHttpInfo(providersAdsIdParams, providersAdsId);
    }

    /**
     * 
     * Modify the ADS provider.
     * @param providersAdsIdParams  (required)
     * @param providersAdsId Modify the ADS provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProvidersAdsByIdWithHttpInfo(ProvidersAdsIdParams providersAdsIdParams, String providersAdsId) throws ApiException {
        com.squareup.okhttp.Call call = updateProvidersAdsByIdValidateBeforeCall(providersAdsIdParams, providersAdsId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the ADS provider.
     * @param providersAdsIdParams  (required)
     * @param providersAdsId Modify the ADS provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProvidersAdsByIdAsync(ProvidersAdsIdParams providersAdsIdParams, String providersAdsId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProvidersAdsByIdValidateBeforeCall(providersAdsIdParams, providersAdsId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateProvidersFileById
     * @param providersFileIdParams  (required)
     * @param providersFileId Modify the file provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProvidersFileByIdCall(ProvidersFileIdParams providersFileIdParams, String providersFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersFileIdParams;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/file/{ProvidersFileId}"
            .replaceAll("\\{" + "ProvidersFileId" + "\\}", apiClient.escapeString(providersFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProvidersFileByIdValidateBeforeCall(ProvidersFileIdParams providersFileIdParams, String providersFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersFileIdParams' is set
        if (providersFileIdParams == null) {
            throw new ApiException("Missing the required parameter 'providersFileIdParams' when calling updateProvidersFileById(Async)");
        }
        
        // verify the required parameter 'providersFileId' is set
        if (providersFileId == null) {
            throw new ApiException("Missing the required parameter 'providersFileId' when calling updateProvidersFileById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProvidersFileByIdCall(providersFileIdParams, providersFileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the file provider.
     * @param providersFileIdParams  (required)
     * @param providersFileId Modify the file provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProvidersFileById(ProvidersFileIdParams providersFileIdParams, String providersFileId) throws ApiException {
        updateProvidersFileByIdWithHttpInfo(providersFileIdParams, providersFileId);
    }

    /**
     * 
     * Modify the file provider.
     * @param providersFileIdParams  (required)
     * @param providersFileId Modify the file provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProvidersFileByIdWithHttpInfo(ProvidersFileIdParams providersFileIdParams, String providersFileId) throws ApiException {
        com.squareup.okhttp.Call call = updateProvidersFileByIdValidateBeforeCall(providersFileIdParams, providersFileId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the file provider.
     * @param providersFileIdParams  (required)
     * @param providersFileId Modify the file provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProvidersFileByIdAsync(ProvidersFileIdParams providersFileIdParams, String providersFileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProvidersFileByIdValidateBeforeCall(providersFileIdParams, providersFileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateProvidersKrb5ById
     * @param providersKrb5IdParams  (required)
     * @param providersKrb5Id Modify the KRB5 provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProvidersKrb5ByIdCall(ProvidersKrb5IdParams providersKrb5IdParams, String providersKrb5Id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersKrb5IdParams;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/krb5/{ProvidersKrb5Id}"
            .replaceAll("\\{" + "ProvidersKrb5Id" + "\\}", apiClient.escapeString(providersKrb5Id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProvidersKrb5ByIdValidateBeforeCall(ProvidersKrb5IdParams providersKrb5IdParams, String providersKrb5Id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersKrb5IdParams' is set
        if (providersKrb5IdParams == null) {
            throw new ApiException("Missing the required parameter 'providersKrb5IdParams' when calling updateProvidersKrb5ById(Async)");
        }
        
        // verify the required parameter 'providersKrb5Id' is set
        if (providersKrb5Id == null) {
            throw new ApiException("Missing the required parameter 'providersKrb5Id' when calling updateProvidersKrb5ById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProvidersKrb5ByIdCall(providersKrb5IdParams, providersKrb5Id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the KRB5 provider.
     * @param providersKrb5IdParams  (required)
     * @param providersKrb5Id Modify the KRB5 provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProvidersKrb5ById(ProvidersKrb5IdParams providersKrb5IdParams, String providersKrb5Id) throws ApiException {
        updateProvidersKrb5ByIdWithHttpInfo(providersKrb5IdParams, providersKrb5Id);
    }

    /**
     * 
     * Modify the KRB5 provider.
     * @param providersKrb5IdParams  (required)
     * @param providersKrb5Id Modify the KRB5 provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProvidersKrb5ByIdWithHttpInfo(ProvidersKrb5IdParams providersKrb5IdParams, String providersKrb5Id) throws ApiException {
        com.squareup.okhttp.Call call = updateProvidersKrb5ByIdValidateBeforeCall(providersKrb5IdParams, providersKrb5Id, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the KRB5 provider.
     * @param providersKrb5IdParams  (required)
     * @param providersKrb5Id Modify the KRB5 provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProvidersKrb5ByIdAsync(ProvidersKrb5IdParams providersKrb5IdParams, String providersKrb5Id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProvidersKrb5ByIdValidateBeforeCall(providersKrb5IdParams, providersKrb5Id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateProvidersLdapById
     * @param providersLdapIdParams  (required)
     * @param providersLdapId Modify the LDAP provider. (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProvidersLdapByIdCall(ProvidersLdapIdParams providersLdapIdParams, String providersLdapId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersLdapIdParams;

        // create path and map variables
        String localVarPath = "/platform/4/auth/providers/ldap/{ProvidersLdapId}"
            .replaceAll("\\{" + "ProvidersLdapId" + "\\}", apiClient.escapeString(providersLdapId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProvidersLdapByIdValidateBeforeCall(ProvidersLdapIdParams providersLdapIdParams, String providersLdapId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLdapIdParams' is set
        if (providersLdapIdParams == null) {
            throw new ApiException("Missing the required parameter 'providersLdapIdParams' when calling updateProvidersLdapById(Async)");
        }
        
        // verify the required parameter 'providersLdapId' is set
        if (providersLdapId == null) {
            throw new ApiException("Missing the required parameter 'providersLdapId' when calling updateProvidersLdapById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProvidersLdapByIdCall(providersLdapIdParams, providersLdapId, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the LDAP provider.
     * @param providersLdapIdParams  (required)
     * @param providersLdapId Modify the LDAP provider. (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProvidersLdapById(ProvidersLdapIdParams providersLdapIdParams, String providersLdapId, Boolean force) throws ApiException {
        updateProvidersLdapByIdWithHttpInfo(providersLdapIdParams, providersLdapId, force);
    }

    /**
     * 
     * Modify the LDAP provider.
     * @param providersLdapIdParams  (required)
     * @param providersLdapId Modify the LDAP provider. (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProvidersLdapByIdWithHttpInfo(ProvidersLdapIdParams providersLdapIdParams, String providersLdapId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = updateProvidersLdapByIdValidateBeforeCall(providersLdapIdParams, providersLdapId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the LDAP provider.
     * @param providersLdapIdParams  (required)
     * @param providersLdapId Modify the LDAP provider. (required)
     * @param force Ignore unresolvable server URIs. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProvidersLdapByIdAsync(ProvidersLdapIdParams providersLdapIdParams, String providersLdapId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProvidersLdapByIdValidateBeforeCall(providersLdapIdParams, providersLdapId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateProvidersLocalById
     * @param providersLocalIdParams  (required)
     * @param providersLocalId Modify the local provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProvidersLocalByIdCall(ProvidersLocalIdParams providersLocalIdParams, String providersLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersLocalIdParams;

        // create path and map variables
        String localVarPath = "/platform/1/auth/providers/local/{ProvidersLocalId}"
            .replaceAll("\\{" + "ProvidersLocalId" + "\\}", apiClient.escapeString(providersLocalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProvidersLocalByIdValidateBeforeCall(ProvidersLocalIdParams providersLocalIdParams, String providersLocalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersLocalIdParams' is set
        if (providersLocalIdParams == null) {
            throw new ApiException("Missing the required parameter 'providersLocalIdParams' when calling updateProvidersLocalById(Async)");
        }
        
        // verify the required parameter 'providersLocalId' is set
        if (providersLocalId == null) {
            throw new ApiException("Missing the required parameter 'providersLocalId' when calling updateProvidersLocalById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProvidersLocalByIdCall(providersLocalIdParams, providersLocalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the local provider.
     * @param providersLocalIdParams  (required)
     * @param providersLocalId Modify the local provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProvidersLocalById(ProvidersLocalIdParams providersLocalIdParams, String providersLocalId) throws ApiException {
        updateProvidersLocalByIdWithHttpInfo(providersLocalIdParams, providersLocalId);
    }

    /**
     * 
     * Modify the local provider.
     * @param providersLocalIdParams  (required)
     * @param providersLocalId Modify the local provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProvidersLocalByIdWithHttpInfo(ProvidersLocalIdParams providersLocalIdParams, String providersLocalId) throws ApiException {
        com.squareup.okhttp.Call call = updateProvidersLocalByIdValidateBeforeCall(providersLocalIdParams, providersLocalId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the local provider.
     * @param providersLocalIdParams  (required)
     * @param providersLocalId Modify the local provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProvidersLocalByIdAsync(ProvidersLocalIdParams providersLocalIdParams, String providersLocalId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProvidersLocalByIdValidateBeforeCall(providersLocalIdParams, providersLocalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateProvidersNisById
     * @param providersNisIdParams  (required)
     * @param providersNisId Modify the NIS provider. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProvidersNisByIdCall(ProvidersNisIdParams providersNisIdParams, String providersNisId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = providersNisIdParams;

        // create path and map variables
        String localVarPath = "/platform/3/auth/providers/nis/{ProvidersNisId}"
            .replaceAll("\\{" + "ProvidersNisId" + "\\}", apiClient.escapeString(providersNisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProvidersNisByIdValidateBeforeCall(ProvidersNisIdParams providersNisIdParams, String providersNisId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'providersNisIdParams' is set
        if (providersNisIdParams == null) {
            throw new ApiException("Missing the required parameter 'providersNisIdParams' when calling updateProvidersNisById(Async)");
        }
        
        // verify the required parameter 'providersNisId' is set
        if (providersNisId == null) {
            throw new ApiException("Missing the required parameter 'providersNisId' when calling updateProvidersNisById(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProvidersNisByIdCall(providersNisIdParams, providersNisId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the NIS provider.
     * @param providersNisIdParams  (required)
     * @param providersNisId Modify the NIS provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateProvidersNisById(ProvidersNisIdParams providersNisIdParams, String providersNisId) throws ApiException {
        updateProvidersNisByIdWithHttpInfo(providersNisIdParams, providersNisId);
    }

    /**
     * 
     * Modify the NIS provider.
     * @param providersNisIdParams  (required)
     * @param providersNisId Modify the NIS provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateProvidersNisByIdWithHttpInfo(ProvidersNisIdParams providersNisIdParams, String providersNisId) throws ApiException {
        com.squareup.okhttp.Call call = updateProvidersNisByIdValidateBeforeCall(providersNisIdParams, providersNisId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the NIS provider.
     * @param providersNisIdParams  (required)
     * @param providersNisId Modify the NIS provider. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProvidersNisByIdAsync(ProvidersNisIdParams providersNisIdParams, String providersNisId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProvidersNisByIdValidateBeforeCall(providersNisIdParams, providersNisId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsAcls
     * @param settingsAcls  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsAclsCall(SettingsAclsExtended settingsAcls, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsAcls;

        // create path and map variables
        String localVarPath = "/platform/3/auth/settings/acls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsAclsValidateBeforeCall(SettingsAclsExtended settingsAcls, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsAcls' is set
        if (settingsAcls == null) {
            throw new ApiException("Missing the required parameter 'settingsAcls' when calling updateSettingsAcls(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsAclsCall(settingsAcls, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify cluster ACL policy settings.
     * @param settingsAcls  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsAcls(SettingsAclsExtended settingsAcls) throws ApiException {
        updateSettingsAclsWithHttpInfo(settingsAcls);
    }

    /**
     * 
     * Modify cluster ACL policy settings.
     * @param settingsAcls  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsAclsWithHttpInfo(SettingsAclsExtended settingsAcls) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsAclsValidateBeforeCall(settingsAcls, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify cluster ACL policy settings.
     * @param settingsAcls  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsAclsAsync(SettingsAclsExtended settingsAcls, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsAclsValidateBeforeCall(settingsAcls, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsGlobal
     * @param settingsGlobal  (required)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsGlobalCall(SettingsGlobalGlobalSettings settingsGlobal, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsGlobal;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/global";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsGlobalValidateBeforeCall(SettingsGlobalGlobalSettings settingsGlobal, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsGlobal' is set
        if (settingsGlobal == null) {
            throw new ApiException("Missing the required parameter 'settingsGlobal' when calling updateSettingsGlobal(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsGlobalCall(settingsGlobal, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the global settings.
     * @param settingsGlobal  (required)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsGlobal(SettingsGlobalGlobalSettings settingsGlobal, String zone) throws ApiException {
        updateSettingsGlobalWithHttpInfo(settingsGlobal, zone);
    }

    /**
     * 
     * Modify the global settings.
     * @param settingsGlobal  (required)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsGlobalWithHttpInfo(SettingsGlobalGlobalSettings settingsGlobal, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsGlobalValidateBeforeCall(settingsGlobal, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the global settings.
     * @param settingsGlobal  (required)
     * @param zone Zone which contains any per-zone settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsGlobalAsync(SettingsGlobalGlobalSettings settingsGlobal, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsGlobalValidateBeforeCall(settingsGlobal, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsKrb5Defaults
     * @param settingsKrb5Defaults  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsKrb5DefaultsCall(SettingsKrb5DefaultsKrb5Settings settingsKrb5Defaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsKrb5Defaults;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsKrb5DefaultsValidateBeforeCall(SettingsKrb5DefaultsKrb5Settings settingsKrb5Defaults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5Defaults' is set
        if (settingsKrb5Defaults == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5Defaults' when calling updateSettingsKrb5Defaults(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsKrb5DefaultsCall(settingsKrb5Defaults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the krb5 settings.
     * @param settingsKrb5Defaults  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsKrb5Defaults(SettingsKrb5DefaultsKrb5Settings settingsKrb5Defaults) throws ApiException {
        updateSettingsKrb5DefaultsWithHttpInfo(settingsKrb5Defaults);
    }

    /**
     * 
     * Modify the krb5 settings.
     * @param settingsKrb5Defaults  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsKrb5DefaultsWithHttpInfo(SettingsKrb5DefaultsKrb5Settings settingsKrb5Defaults) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsKrb5DefaultsValidateBeforeCall(settingsKrb5Defaults, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the krb5 settings.
     * @param settingsKrb5Defaults  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsKrb5DefaultsAsync(SettingsKrb5DefaultsKrb5Settings settingsKrb5Defaults, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsKrb5DefaultsValidateBeforeCall(settingsKrb5Defaults, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsKrb5Domain
     * @param settingsKrb5Domain  (required)
     * @param settingsKrb5DomainId Modify the krb5 domain settings. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsKrb5DomainCall(SettingsKrb5Domain settingsKrb5Domain, String settingsKrb5DomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsKrb5Domain;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}"
            .replaceAll("\\{" + "SettingsKrb5DomainId" + "\\}", apiClient.escapeString(settingsKrb5DomainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsKrb5DomainValidateBeforeCall(SettingsKrb5Domain settingsKrb5Domain, String settingsKrb5DomainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5Domain' is set
        if (settingsKrb5Domain == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5Domain' when calling updateSettingsKrb5Domain(Async)");
        }
        
        // verify the required parameter 'settingsKrb5DomainId' is set
        if (settingsKrb5DomainId == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5DomainId' when calling updateSettingsKrb5Domain(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsKrb5DomainCall(settingsKrb5Domain, settingsKrb5DomainId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the krb5 domain settings.
     * @param settingsKrb5Domain  (required)
     * @param settingsKrb5DomainId Modify the krb5 domain settings. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsKrb5Domain(SettingsKrb5Domain settingsKrb5Domain, String settingsKrb5DomainId) throws ApiException {
        updateSettingsKrb5DomainWithHttpInfo(settingsKrb5Domain, settingsKrb5DomainId);
    }

    /**
     * 
     * Modify the krb5 domain settings.
     * @param settingsKrb5Domain  (required)
     * @param settingsKrb5DomainId Modify the krb5 domain settings. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsKrb5DomainWithHttpInfo(SettingsKrb5Domain settingsKrb5Domain, String settingsKrb5DomainId) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsKrb5DomainValidateBeforeCall(settingsKrb5Domain, settingsKrb5DomainId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the krb5 domain settings.
     * @param settingsKrb5Domain  (required)
     * @param settingsKrb5DomainId Modify the krb5 domain settings. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsKrb5DomainAsync(SettingsKrb5Domain settingsKrb5Domain, String settingsKrb5DomainId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsKrb5DomainValidateBeforeCall(settingsKrb5Domain, settingsKrb5DomainId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsKrb5Realm
     * @param settingsKrb5Realm  (required)
     * @param settingsKrb5RealmId Modify the krb5 realm settings. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsKrb5RealmCall(SettingsKrb5Realm settingsKrb5Realm, String settingsKrb5RealmId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsKrb5Realm;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}"
            .replaceAll("\\{" + "SettingsKrb5RealmId" + "\\}", apiClient.escapeString(settingsKrb5RealmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsKrb5RealmValidateBeforeCall(SettingsKrb5Realm settingsKrb5Realm, String settingsKrb5RealmId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsKrb5Realm' is set
        if (settingsKrb5Realm == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5Realm' when calling updateSettingsKrb5Realm(Async)");
        }
        
        // verify the required parameter 'settingsKrb5RealmId' is set
        if (settingsKrb5RealmId == null) {
            throw new ApiException("Missing the required parameter 'settingsKrb5RealmId' when calling updateSettingsKrb5Realm(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsKrb5RealmCall(settingsKrb5Realm, settingsKrb5RealmId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the krb5 realm settings.
     * @param settingsKrb5Realm  (required)
     * @param settingsKrb5RealmId Modify the krb5 realm settings. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsKrb5Realm(SettingsKrb5Realm settingsKrb5Realm, String settingsKrb5RealmId) throws ApiException {
        updateSettingsKrb5RealmWithHttpInfo(settingsKrb5Realm, settingsKrb5RealmId);
    }

    /**
     * 
     * Modify the krb5 realm settings.
     * @param settingsKrb5Realm  (required)
     * @param settingsKrb5RealmId Modify the krb5 realm settings. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsKrb5RealmWithHttpInfo(SettingsKrb5Realm settingsKrb5Realm, String settingsKrb5RealmId) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsKrb5RealmValidateBeforeCall(settingsKrb5Realm, settingsKrb5RealmId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the krb5 realm settings.
     * @param settingsKrb5Realm  (required)
     * @param settingsKrb5RealmId Modify the krb5 realm settings. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsKrb5RealmAsync(SettingsKrb5Realm settingsKrb5Realm, String settingsKrb5RealmId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsKrb5RealmValidateBeforeCall(settingsKrb5Realm, settingsKrb5RealmId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSettingsMapping
     * @param settingsMapping  (required)
     * @param zone Access zone which contains mapping settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSettingsMappingCall(SettingsMappingMappingSettings settingsMapping, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = settingsMapping;

        // create path and map variables
        String localVarPath = "/platform/1/auth/settings/mapping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zone != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zone", zone));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSettingsMappingValidateBeforeCall(SettingsMappingMappingSettings settingsMapping, String zone, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settingsMapping' is set
        if (settingsMapping == null) {
            throw new ApiException("Missing the required parameter 'settingsMapping' when calling updateSettingsMapping(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSettingsMappingCall(settingsMapping, zone, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the mapping settings.
     * @param settingsMapping  (required)
     * @param zone Access zone which contains mapping settings. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSettingsMapping(SettingsMappingMappingSettings settingsMapping, String zone) throws ApiException {
        updateSettingsMappingWithHttpInfo(settingsMapping, zone);
    }

    /**
     * 
     * Modify the mapping settings.
     * @param settingsMapping  (required)
     * @param zone Access zone which contains mapping settings. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSettingsMappingWithHttpInfo(SettingsMappingMappingSettings settingsMapping, String zone) throws ApiException {
        com.squareup.okhttp.Call call = updateSettingsMappingValidateBeforeCall(settingsMapping, zone, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the mapping settings.
     * @param settingsMapping  (required)
     * @param zone Access zone which contains mapping settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSettingsMappingAsync(SettingsMappingMappingSettings settingsMapping, String zone, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSettingsMappingValidateBeforeCall(settingsMapping, zone, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
