/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.LicenseGenerate;
import io.swagger.client.model.LicenseLicenseCreateParams;
import io.swagger.client.model.LicenseLicenses;
import io.swagger.client.model.LicenseLicensesExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicenseApi {
    private ApiClient apiClient;

    public LicenseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicenseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLicenseLicense
     * @param licenseLicense  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLicenseLicenseCall(LicenseLicenseCreateParams licenseLicense, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = licenseLicense;

        // create path and map variables
        String localVarPath = "/platform/5/license/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLicenseLicenseValidateBeforeCall(LicenseLicenseCreateParams licenseLicense, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'licenseLicense' is set
        if (licenseLicense == null) {
            throw new ApiException("Missing the required parameter 'licenseLicense' when calling createLicenseLicense(Async)");
        }
        

        com.squareup.okhttp.Call call = createLicenseLicenseCall(licenseLicense, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Install a new license file and/or activate evaluation licenses.
     * @param licenseLicense  (required)
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty createLicenseLicense(LicenseLicenseCreateParams licenseLicense) throws ApiException {
        ApiResponse<Empty> resp = createLicenseLicenseWithHttpInfo(licenseLicense);
        return resp.getData();
    }

    /**
     * 
     * Install a new license file and/or activate evaluation licenses.
     * @param licenseLicense  (required)
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> createLicenseLicenseWithHttpInfo(LicenseLicenseCreateParams licenseLicense) throws ApiException {
        com.squareup.okhttp.Call call = createLicenseLicenseValidateBeforeCall(licenseLicense, null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Install a new license file and/or activate evaluation licenses.
     * @param licenseLicense  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLicenseLicenseAsync(LicenseLicenseCreateParams licenseLicense, final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLicenseLicenseValidateBeforeCall(licenseLicense, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLicenseGenerate
     * @param action enum: license_list_only (default), generate_activation, download_activation. Generate an activation file or return a list of activated licenses. If generating an activation file and no licenses are specified, the default configuration is to generate an activation file with the current set of licensed features. download_activation returns HTTP headers and the same XML content as seen in the response activation. (optional, default to license_list_only)
     * @param licensesToInclude Licenses to include in activation file. (optional)
     * @param licensesToExclude Licenses to omit from activation file. (optional)
     * @param onlyTheseLicenses Activate only the defined licenses. This setting overrides all other license activation settings. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLicenseGenerateCall(String action, String licensesToInclude, String licensesToExclude, String onlyTheseLicenses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/license/generate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (action != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("action", action));
        if (licensesToInclude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("licenses_to_include", licensesToInclude));
        if (licensesToExclude != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("licenses_to_exclude", licensesToExclude));
        if (onlyTheseLicenses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("only_these_licenses", onlyTheseLicenses));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLicenseGenerateValidateBeforeCall(String action, String licensesToInclude, String licensesToExclude, String onlyTheseLicenses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getLicenseGenerateCall(action, licensesToInclude, licensesToExclude, onlyTheseLicenses, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Generate license activation file.
     * @param action enum: license_list_only (default), generate_activation, download_activation. Generate an activation file or return a list of activated licenses. If generating an activation file and no licenses are specified, the default configuration is to generate an activation file with the current set of licensed features. download_activation returns HTTP headers and the same XML content as seen in the response activation. (optional, default to license_list_only)
     * @param licensesToInclude Licenses to include in activation file. (optional)
     * @param licensesToExclude Licenses to omit from activation file. (optional)
     * @param onlyTheseLicenses Activate only the defined licenses. This setting overrides all other license activation settings. (optional)
     * @return LicenseGenerate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseGenerate getLicenseGenerate(String action, String licensesToInclude, String licensesToExclude, String onlyTheseLicenses) throws ApiException {
        ApiResponse<LicenseGenerate> resp = getLicenseGenerateWithHttpInfo(action, licensesToInclude, licensesToExclude, onlyTheseLicenses);
        return resp.getData();
    }

    /**
     * 
     * Generate license activation file.
     * @param action enum: license_list_only (default), generate_activation, download_activation. Generate an activation file or return a list of activated licenses. If generating an activation file and no licenses are specified, the default configuration is to generate an activation file with the current set of licensed features. download_activation returns HTTP headers and the same XML content as seen in the response activation. (optional, default to license_list_only)
     * @param licensesToInclude Licenses to include in activation file. (optional)
     * @param licensesToExclude Licenses to omit from activation file. (optional)
     * @param onlyTheseLicenses Activate only the defined licenses. This setting overrides all other license activation settings. (optional)
     * @return ApiResponse&lt;LicenseGenerate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseGenerate> getLicenseGenerateWithHttpInfo(String action, String licensesToInclude, String licensesToExclude, String onlyTheseLicenses) throws ApiException {
        com.squareup.okhttp.Call call = getLicenseGenerateValidateBeforeCall(action, licensesToInclude, licensesToExclude, onlyTheseLicenses, null, null);
        Type localVarReturnType = new TypeToken<LicenseGenerate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate license activation file.
     * @param action enum: license_list_only (default), generate_activation, download_activation. Generate an activation file or return a list of activated licenses. If generating an activation file and no licenses are specified, the default configuration is to generate an activation file with the current set of licensed features. download_activation returns HTTP headers and the same XML content as seen in the response activation. (optional, default to license_list_only)
     * @param licensesToInclude Licenses to include in activation file. (optional)
     * @param licensesToExclude Licenses to omit from activation file. (optional)
     * @param onlyTheseLicenses Activate only the defined licenses. This setting overrides all other license activation settings. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLicenseGenerateAsync(String action, String licensesToInclude, String licensesToExclude, String onlyTheseLicenses, final ApiCallback<LicenseGenerate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLicenseGenerateValidateBeforeCall(action, licensesToInclude, licensesToExclude, onlyTheseLicenses, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseGenerate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLicenseLicense
     * @param licenseLicenseId Retrieve license information for the feature. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLicenseLicenseCall(String licenseLicenseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/license/licenses/{LicenseLicenseId}"
            .replaceAll("\\{" + "LicenseLicenseId" + "\\}", apiClient.escapeString(licenseLicenseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLicenseLicenseValidateBeforeCall(String licenseLicenseId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'licenseLicenseId' is set
        if (licenseLicenseId == null) {
            throw new ApiException("Missing the required parameter 'licenseLicenseId' when calling getLicenseLicense(Async)");
        }
        

        com.squareup.okhttp.Call call = getLicenseLicenseCall(licenseLicenseId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve license information for the feature.
     * @param licenseLicenseId Retrieve license information for the feature. (required)
     * @return LicenseLicenses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseLicenses getLicenseLicense(String licenseLicenseId) throws ApiException {
        ApiResponse<LicenseLicenses> resp = getLicenseLicenseWithHttpInfo(licenseLicenseId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve license information for the feature.
     * @param licenseLicenseId Retrieve license information for the feature. (required)
     * @return ApiResponse&lt;LicenseLicenses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseLicenses> getLicenseLicenseWithHttpInfo(String licenseLicenseId) throws ApiException {
        com.squareup.okhttp.Call call = getLicenseLicenseValidateBeforeCall(licenseLicenseId, null, null);
        Type localVarReturnType = new TypeToken<LicenseLicenses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve license information for the feature.
     * @param licenseLicenseId Retrieve license information for the feature. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLicenseLicenseAsync(String licenseLicenseId, final ApiCallback<LicenseLicenses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLicenseLicenseValidateBeforeCall(licenseLicenseId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseLicenses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLicenseLicenses
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLicenseLicensesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/license/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLicenseLicensesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listLicenseLicensesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve license information for all licensable products.
     * @return LicenseLicensesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseLicensesExtended listLicenseLicenses() throws ApiException {
        ApiResponse<LicenseLicensesExtended> resp = listLicenseLicensesWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve license information for all licensable products.
     * @return ApiResponse&lt;LicenseLicensesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseLicensesExtended> listLicenseLicensesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listLicenseLicensesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LicenseLicensesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve license information for all licensable products.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLicenseLicensesAsync(final ApiCallback<LicenseLicensesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLicenseLicensesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseLicensesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
