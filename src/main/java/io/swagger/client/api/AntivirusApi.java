/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AntivirusPolicies;
import io.swagger.client.model.AntivirusPoliciesExtended;
import io.swagger.client.model.AntivirusPolicy;
import io.swagger.client.model.AntivirusPolicyCreateParams;
import io.swagger.client.model.AntivirusQuarantine;
import io.swagger.client.model.AntivirusQuarantinePathParams;
import io.swagger.client.model.AntivirusScanItem;
import io.swagger.client.model.AntivirusServer;
import io.swagger.client.model.AntivirusServerCreateParams;
import io.swagger.client.model.AntivirusServers;
import io.swagger.client.model.AntivirusServersExtended;
import io.swagger.client.model.AntivirusSettings;
import io.swagger.client.model.AntivirusSettingsSettings;
import io.swagger.client.model.CreateAntivirusScanItemResponse;
import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.ReportsScans;
import io.swagger.client.model.ReportsScansExtended;
import io.swagger.client.model.ReportsThreats;
import io.swagger.client.model.ReportsThreatsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AntivirusApi {
    private ApiClient apiClient;

    public AntivirusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AntivirusApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAntivirusPolicy
     * @param antivirusPolicy  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAntivirusPolicyCall(AntivirusPolicyCreateParams antivirusPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusPolicy;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAntivirusPolicyValidateBeforeCall(AntivirusPolicyCreateParams antivirusPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusPolicy' is set
        if (antivirusPolicy == null) {
            throw new ApiException("Missing the required parameter 'antivirusPolicy' when calling createAntivirusPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = createAntivirusPolicyCall(antivirusPolicy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create new antivirus scan policies.
     * @param antivirusPolicy  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createAntivirusPolicy(AntivirusPolicyCreateParams antivirusPolicy) throws ApiException {
        ApiResponse<CreateResponse> resp = createAntivirusPolicyWithHttpInfo(antivirusPolicy);
        return resp.getData();
    }

    /**
     * 
     * Create new antivirus scan policies.
     * @param antivirusPolicy  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createAntivirusPolicyWithHttpInfo(AntivirusPolicyCreateParams antivirusPolicy) throws ApiException {
        com.squareup.okhttp.Call call = createAntivirusPolicyValidateBeforeCall(antivirusPolicy, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new antivirus scan policies.
     * @param antivirusPolicy  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAntivirusPolicyAsync(AntivirusPolicyCreateParams antivirusPolicy, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAntivirusPolicyValidateBeforeCall(antivirusPolicy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAntivirusScanItem
     * @param antivirusScanItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAntivirusScanItemCall(AntivirusScanItem antivirusScanItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusScanItem;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/scan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAntivirusScanItemValidateBeforeCall(AntivirusScanItem antivirusScanItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusScanItem' is set
        if (antivirusScanItem == null) {
            throw new ApiException("Missing the required parameter 'antivirusScanItem' when calling createAntivirusScanItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createAntivirusScanItemCall(antivirusScanItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Manually scan a file.
     * @param antivirusScanItem  (required)
     * @return CreateAntivirusScanItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateAntivirusScanItemResponse createAntivirusScanItem(AntivirusScanItem antivirusScanItem) throws ApiException {
        ApiResponse<CreateAntivirusScanItemResponse> resp = createAntivirusScanItemWithHttpInfo(antivirusScanItem);
        return resp.getData();
    }

    /**
     * 
     * Manually scan a file.
     * @param antivirusScanItem  (required)
     * @return ApiResponse&lt;CreateAntivirusScanItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateAntivirusScanItemResponse> createAntivirusScanItemWithHttpInfo(AntivirusScanItem antivirusScanItem) throws ApiException {
        com.squareup.okhttp.Call call = createAntivirusScanItemValidateBeforeCall(antivirusScanItem, null, null);
        Type localVarReturnType = new TypeToken<CreateAntivirusScanItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Manually scan a file.
     * @param antivirusScanItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAntivirusScanItemAsync(AntivirusScanItem antivirusScanItem, final ApiCallback<CreateAntivirusScanItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAntivirusScanItemValidateBeforeCall(antivirusScanItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateAntivirusScanItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAntivirusServer
     * @param antivirusServer  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAntivirusServerCall(AntivirusServerCreateParams antivirusServer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusServer;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAntivirusServerValidateBeforeCall(AntivirusServerCreateParams antivirusServer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusServer' is set
        if (antivirusServer == null) {
            throw new ApiException("Missing the required parameter 'antivirusServer' when calling createAntivirusServer(Async)");
        }
        

        com.squareup.okhttp.Call call = createAntivirusServerCall(antivirusServer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create new antivirus servers.
     * @param antivirusServer  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createAntivirusServer(AntivirusServerCreateParams antivirusServer) throws ApiException {
        ApiResponse<CreateResponse> resp = createAntivirusServerWithHttpInfo(antivirusServer);
        return resp.getData();
    }

    /**
     * 
     * Create new antivirus servers.
     * @param antivirusServer  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createAntivirusServerWithHttpInfo(AntivirusServerCreateParams antivirusServer) throws ApiException {
        com.squareup.okhttp.Call call = createAntivirusServerValidateBeforeCall(antivirusServer, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new antivirus servers.
     * @param antivirusServer  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAntivirusServerAsync(AntivirusServerCreateParams antivirusServer, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAntivirusServerValidateBeforeCall(antivirusServer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAntivirusPolicies
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusPoliciesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAntivirusPoliciesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteAntivirusPoliciesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all antivirus scan policies.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAntivirusPolicies() throws ApiException {
        deleteAntivirusPoliciesWithHttpInfo();
    }

    /**
     * 
     * Delete all antivirus scan policies.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAntivirusPoliciesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteAntivirusPoliciesValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all antivirus scan policies.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusPoliciesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAntivirusPoliciesValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAntivirusPolicy
     * @param antivirusPolicyId Delete an antivirus scan policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusPolicyCall(String antivirusPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/policies/{AntivirusPolicyId}"
            .replaceAll("\\{" + "AntivirusPolicyId" + "\\}", apiClient.escapeString(antivirusPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAntivirusPolicyValidateBeforeCall(String antivirusPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusPolicyId' is set
        if (antivirusPolicyId == null) {
            throw new ApiException("Missing the required parameter 'antivirusPolicyId' when calling deleteAntivirusPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAntivirusPolicyCall(antivirusPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete an antivirus scan policy.
     * @param antivirusPolicyId Delete an antivirus scan policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAntivirusPolicy(String antivirusPolicyId) throws ApiException {
        deleteAntivirusPolicyWithHttpInfo(antivirusPolicyId);
    }

    /**
     * 
     * Delete an antivirus scan policy.
     * @param antivirusPolicyId Delete an antivirus scan policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAntivirusPolicyWithHttpInfo(String antivirusPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAntivirusPolicyValidateBeforeCall(antivirusPolicyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an antivirus scan policy.
     * @param antivirusPolicyId Delete an antivirus scan policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusPolicyAsync(String antivirusPolicyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAntivirusPolicyValidateBeforeCall(antivirusPolicyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAntivirusServer
     * @param antivirusServerId Delete an antivirus server entry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusServerCall(String antivirusServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/servers/{AntivirusServerId}"
            .replaceAll("\\{" + "AntivirusServerId" + "\\}", apiClient.escapeString(antivirusServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAntivirusServerValidateBeforeCall(String antivirusServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusServerId' is set
        if (antivirusServerId == null) {
            throw new ApiException("Missing the required parameter 'antivirusServerId' when calling deleteAntivirusServer(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAntivirusServerCall(antivirusServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete an antivirus server entry.
     * @param antivirusServerId Delete an antivirus server entry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAntivirusServer(String antivirusServerId) throws ApiException {
        deleteAntivirusServerWithHttpInfo(antivirusServerId);
    }

    /**
     * 
     * Delete an antivirus server entry.
     * @param antivirusServerId Delete an antivirus server entry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAntivirusServerWithHttpInfo(String antivirusServerId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAntivirusServerValidateBeforeCall(antivirusServerId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete an antivirus server entry.
     * @param antivirusServerId Delete an antivirus server entry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusServerAsync(String antivirusServerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAntivirusServerValidateBeforeCall(antivirusServerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAntivirusServers
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusServersCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAntivirusServersValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteAntivirusServersCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all antivirus servers.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAntivirusServers() throws ApiException {
        deleteAntivirusServersWithHttpInfo();
    }

    /**
     * 
     * Delete all antivirus servers.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAntivirusServersWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deleteAntivirusServersValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all antivirus servers.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAntivirusServersAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAntivirusServersValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReportsScan
     * @param reportsScanId Delete one antivirus scan report, and all of its associated threat reports. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReportsScanCall(String reportsScanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/reports/scans/{ReportsScanId}"
            .replaceAll("\\{" + "ReportsScanId" + "\\}", apiClient.escapeString(reportsScanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReportsScanValidateBeforeCall(String reportsScanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportsScanId' is set
        if (reportsScanId == null) {
            throw new ApiException("Missing the required parameter 'reportsScanId' when calling deleteReportsScan(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteReportsScanCall(reportsScanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete one antivirus scan report, and all of its associated threat reports.
     * @param reportsScanId Delete one antivirus scan report, and all of its associated threat reports. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReportsScan(String reportsScanId) throws ApiException {
        deleteReportsScanWithHttpInfo(reportsScanId);
    }

    /**
     * 
     * Delete one antivirus scan report, and all of its associated threat reports.
     * @param reportsScanId Delete one antivirus scan report, and all of its associated threat reports. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReportsScanWithHttpInfo(String reportsScanId) throws ApiException {
        com.squareup.okhttp.Call call = deleteReportsScanValidateBeforeCall(reportsScanId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete one antivirus scan report, and all of its associated threat reports.
     * @param reportsScanId Delete one antivirus scan report, and all of its associated threat reports. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReportsScanAsync(String reportsScanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReportsScanValidateBeforeCall(reportsScanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteReportsScans
     * @param age An amount of time in seconds. If present, only reports older than this age are deleted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteReportsScansCall(Integer age, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/reports/scans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (age != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("age", age));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteReportsScansValidateBeforeCall(Integer age, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteReportsScansCall(age, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete antivirus scan reports, and any threat reports associated with those scans.
     * @param age An amount of time in seconds. If present, only reports older than this age are deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteReportsScans(Integer age) throws ApiException {
        deleteReportsScansWithHttpInfo(age);
    }

    /**
     * 
     * Delete antivirus scan reports, and any threat reports associated with those scans.
     * @param age An amount of time in seconds. If present, only reports older than this age are deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteReportsScansWithHttpInfo(Integer age) throws ApiException {
        com.squareup.okhttp.Call call = deleteReportsScansValidateBeforeCall(age, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete antivirus scan reports, and any threat reports associated with those scans.
     * @param age An amount of time in seconds. If present, only reports older than this age are deleted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteReportsScansAsync(Integer age, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteReportsScansValidateBeforeCall(age, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAntivirusPolicy
     * @param antivirusPolicyId Retrieve one antivirus scan policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAntivirusPolicyCall(String antivirusPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/policies/{AntivirusPolicyId}"
            .replaceAll("\\{" + "AntivirusPolicyId" + "\\}", apiClient.escapeString(antivirusPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAntivirusPolicyValidateBeforeCall(String antivirusPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusPolicyId' is set
        if (antivirusPolicyId == null) {
            throw new ApiException("Missing the required parameter 'antivirusPolicyId' when calling getAntivirusPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = getAntivirusPolicyCall(antivirusPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve one antivirus scan policy.
     * @param antivirusPolicyId Retrieve one antivirus scan policy. (required)
     * @return AntivirusPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AntivirusPolicies getAntivirusPolicy(String antivirusPolicyId) throws ApiException {
        ApiResponse<AntivirusPolicies> resp = getAntivirusPolicyWithHttpInfo(antivirusPolicyId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve one antivirus scan policy.
     * @param antivirusPolicyId Retrieve one antivirus scan policy. (required)
     * @return ApiResponse&lt;AntivirusPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AntivirusPolicies> getAntivirusPolicyWithHttpInfo(String antivirusPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = getAntivirusPolicyValidateBeforeCall(antivirusPolicyId, null, null);
        Type localVarReturnType = new TypeToken<AntivirusPolicies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve one antivirus scan policy.
     * @param antivirusPolicyId Retrieve one antivirus scan policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAntivirusPolicyAsync(String antivirusPolicyId, final ApiCallback<AntivirusPolicies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAntivirusPolicyValidateBeforeCall(antivirusPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AntivirusPolicies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAntivirusQuarantinePath
     * @param antivirusQuarantinePath Retrieve the quarantine status of the file at the specified path. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAntivirusQuarantinePathCall(String antivirusQuarantinePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}"
            .replaceAll("\\{" + "AntivirusQuarantinePath" + "\\}", apiClient.escapeString(antivirusQuarantinePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAntivirusQuarantinePathValidateBeforeCall(String antivirusQuarantinePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusQuarantinePath' is set
        if (antivirusQuarantinePath == null) {
            throw new ApiException("Missing the required parameter 'antivirusQuarantinePath' when calling getAntivirusQuarantinePath(Async)");
        }
        

        com.squareup.okhttp.Call call = getAntivirusQuarantinePathCall(antivirusQuarantinePath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the quarantine status of the file at the specified path.
     * @param antivirusQuarantinePath Retrieve the quarantine status of the file at the specified path. (required)
     * @return AntivirusQuarantine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AntivirusQuarantine getAntivirusQuarantinePath(String antivirusQuarantinePath) throws ApiException {
        ApiResponse<AntivirusQuarantine> resp = getAntivirusQuarantinePathWithHttpInfo(antivirusQuarantinePath);
        return resp.getData();
    }

    /**
     * 
     * Retrieve the quarantine status of the file at the specified path.
     * @param antivirusQuarantinePath Retrieve the quarantine status of the file at the specified path. (required)
     * @return ApiResponse&lt;AntivirusQuarantine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AntivirusQuarantine> getAntivirusQuarantinePathWithHttpInfo(String antivirusQuarantinePath) throws ApiException {
        com.squareup.okhttp.Call call = getAntivirusQuarantinePathValidateBeforeCall(antivirusQuarantinePath, null, null);
        Type localVarReturnType = new TypeToken<AntivirusQuarantine>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the quarantine status of the file at the specified path.
     * @param antivirusQuarantinePath Retrieve the quarantine status of the file at the specified path. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAntivirusQuarantinePathAsync(String antivirusQuarantinePath, final ApiCallback<AntivirusQuarantine> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAntivirusQuarantinePathValidateBeforeCall(antivirusQuarantinePath, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AntivirusQuarantine>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAntivirusServer
     * @param antivirusServerId Retrieve one antivirus server entry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAntivirusServerCall(String antivirusServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/servers/{AntivirusServerId}"
            .replaceAll("\\{" + "AntivirusServerId" + "\\}", apiClient.escapeString(antivirusServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAntivirusServerValidateBeforeCall(String antivirusServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusServerId' is set
        if (antivirusServerId == null) {
            throw new ApiException("Missing the required parameter 'antivirusServerId' when calling getAntivirusServer(Async)");
        }
        

        com.squareup.okhttp.Call call = getAntivirusServerCall(antivirusServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve one antivirus server entry.
     * @param antivirusServerId Retrieve one antivirus server entry. (required)
     * @return AntivirusServers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AntivirusServers getAntivirusServer(String antivirusServerId) throws ApiException {
        ApiResponse<AntivirusServers> resp = getAntivirusServerWithHttpInfo(antivirusServerId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve one antivirus server entry.
     * @param antivirusServerId Retrieve one antivirus server entry. (required)
     * @return ApiResponse&lt;AntivirusServers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AntivirusServers> getAntivirusServerWithHttpInfo(String antivirusServerId) throws ApiException {
        com.squareup.okhttp.Call call = getAntivirusServerValidateBeforeCall(antivirusServerId, null, null);
        Type localVarReturnType = new TypeToken<AntivirusServers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve one antivirus server entry.
     * @param antivirusServerId Retrieve one antivirus server entry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAntivirusServerAsync(String antivirusServerId, final ApiCallback<AntivirusServers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAntivirusServerValidateBeforeCall(antivirusServerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AntivirusServers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAntivirusSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAntivirusSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAntivirusSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAntivirusSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the Antivirus settings.
     * @return AntivirusSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AntivirusSettings getAntivirusSettings() throws ApiException {
        ApiResponse<AntivirusSettings> resp = getAntivirusSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the Antivirus settings.
     * @return ApiResponse&lt;AntivirusSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AntivirusSettings> getAntivirusSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAntivirusSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<AntivirusSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the Antivirus settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAntivirusSettingsAsync(final ApiCallback<AntivirusSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAntivirusSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AntivirusSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportsScan
     * @param reportsScanId Retrieve one antivirus scan report. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsScanCall(String reportsScanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/reports/scans/{ReportsScanId}"
            .replaceAll("\\{" + "ReportsScanId" + "\\}", apiClient.escapeString(reportsScanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsScanValidateBeforeCall(String reportsScanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportsScanId' is set
        if (reportsScanId == null) {
            throw new ApiException("Missing the required parameter 'reportsScanId' when calling getReportsScan(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportsScanCall(reportsScanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve one antivirus scan report.
     * @param reportsScanId Retrieve one antivirus scan report. (required)
     * @return ReportsScans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsScans getReportsScan(String reportsScanId) throws ApiException {
        ApiResponse<ReportsScans> resp = getReportsScanWithHttpInfo(reportsScanId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve one antivirus scan report.
     * @param reportsScanId Retrieve one antivirus scan report. (required)
     * @return ApiResponse&lt;ReportsScans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsScans> getReportsScanWithHttpInfo(String reportsScanId) throws ApiException {
        com.squareup.okhttp.Call call = getReportsScanValidateBeforeCall(reportsScanId, null, null);
        Type localVarReturnType = new TypeToken<ReportsScans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve one antivirus scan report.
     * @param reportsScanId Retrieve one antivirus scan report. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsScanAsync(String reportsScanId, final ApiCallback<ReportsScans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsScanValidateBeforeCall(reportsScanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsScans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportsScans
     * @param sort The field that will be used for sorting. (optional)
     * @param status If present, only scan reports with this status will be returned. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param policyId If present, only reports for scans associated with this policy will be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsScansCall(String sort, String status, String resume, Integer limit, String dir, String policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/reports/scans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (policyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy_id", policyId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsScansValidateBeforeCall(String sort, String status, String resume, Integer limit, String dir, String policyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReportsScansCall(sort, status, resume, limit, dir, policyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List antivirus scan reports.
     * @param sort The field that will be used for sorting. (optional)
     * @param status If present, only scan reports with this status will be returned. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param policyId If present, only reports for scans associated with this policy will be returned. (optional)
     * @return ReportsScansExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsScansExtended getReportsScans(String sort, String status, String resume, Integer limit, String dir, String policyId) throws ApiException {
        ApiResponse<ReportsScansExtended> resp = getReportsScansWithHttpInfo(sort, status, resume, limit, dir, policyId);
        return resp.getData();
    }

    /**
     * 
     * List antivirus scan reports.
     * @param sort The field that will be used for sorting. (optional)
     * @param status If present, only scan reports with this status will be returned. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param policyId If present, only reports for scans associated with this policy will be returned. (optional)
     * @return ApiResponse&lt;ReportsScansExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsScansExtended> getReportsScansWithHttpInfo(String sort, String status, String resume, Integer limit, String dir, String policyId) throws ApiException {
        com.squareup.okhttp.Call call = getReportsScansValidateBeforeCall(sort, status, resume, limit, dir, policyId, null, null);
        Type localVarReturnType = new TypeToken<ReportsScansExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List antivirus scan reports.
     * @param sort The field that will be used for sorting. (optional)
     * @param status If present, only scan reports with this status will be returned. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param policyId If present, only reports for scans associated with this policy will be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsScansAsync(String sort, String status, String resume, Integer limit, String dir, String policyId, final ApiCallback<ReportsScansExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsScansValidateBeforeCall(sort, status, resume, limit, dir, policyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsScansExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportsThreat
     * @param reportsThreatId Retrieve one antivirus threat report. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsThreatCall(String reportsThreatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/reports/threats/{ReportsThreatId}"
            .replaceAll("\\{" + "ReportsThreatId" + "\\}", apiClient.escapeString(reportsThreatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsThreatValidateBeforeCall(String reportsThreatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reportsThreatId' is set
        if (reportsThreatId == null) {
            throw new ApiException("Missing the required parameter 'reportsThreatId' when calling getReportsThreat(Async)");
        }
        

        com.squareup.okhttp.Call call = getReportsThreatCall(reportsThreatId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve one antivirus threat report.
     * @param reportsThreatId Retrieve one antivirus threat report. (required)
     * @return ReportsThreats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsThreats getReportsThreat(String reportsThreatId) throws ApiException {
        ApiResponse<ReportsThreats> resp = getReportsThreatWithHttpInfo(reportsThreatId);
        return resp.getData();
    }

    /**
     * 
     * Retrieve one antivirus threat report.
     * @param reportsThreatId Retrieve one antivirus threat report. (required)
     * @return ApiResponse&lt;ReportsThreats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsThreats> getReportsThreatWithHttpInfo(String reportsThreatId) throws ApiException {
        com.squareup.okhttp.Call call = getReportsThreatValidateBeforeCall(reportsThreatId, null, null);
        Type localVarReturnType = new TypeToken<ReportsThreats>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve one antivirus threat report.
     * @param reportsThreatId Retrieve one antivirus threat report. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsThreatAsync(String reportsThreatId, final ApiCallback<ReportsThreats> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsThreatValidateBeforeCall(reportsThreatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsThreats>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReportsThreats
     * @param sort The field that will be used for sorting. (optional)
     * @param scanId If present, only returns threat reports associated with the given scan report. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param file If present, only returns threat reports for the given file. (optional)
     * @param remediation If present, only returns threat reports with the given remediation. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReportsThreatsCall(String sort, String scanId, String resume, Integer limit, String file, String remediation, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/reports/threats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (scanId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scan_id", scanId));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (file != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file", file));
        if (remediation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remediation", remediation));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReportsThreatsValidateBeforeCall(String sort, String scanId, String resume, Integer limit, String file, String remediation, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getReportsThreatsCall(sort, scanId, resume, limit, file, remediation, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List antivirus threat reports.
     * @param sort The field that will be used for sorting. (optional)
     * @param scanId If present, only returns threat reports associated with the given scan report. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param file If present, only returns threat reports for the given file. (optional)
     * @param remediation If present, only returns threat reports with the given remediation. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ReportsThreatsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ReportsThreatsExtended getReportsThreats(String sort, String scanId, String resume, Integer limit, String file, String remediation, String dir) throws ApiException {
        ApiResponse<ReportsThreatsExtended> resp = getReportsThreatsWithHttpInfo(sort, scanId, resume, limit, file, remediation, dir);
        return resp.getData();
    }

    /**
     * 
     * List antivirus threat reports.
     * @param sort The field that will be used for sorting. (optional)
     * @param scanId If present, only returns threat reports associated with the given scan report. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param file If present, only returns threat reports for the given file. (optional)
     * @param remediation If present, only returns threat reports with the given remediation. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;ReportsThreatsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ReportsThreatsExtended> getReportsThreatsWithHttpInfo(String sort, String scanId, String resume, Integer limit, String file, String remediation, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getReportsThreatsValidateBeforeCall(sort, scanId, resume, limit, file, remediation, dir, null, null);
        Type localVarReturnType = new TypeToken<ReportsThreatsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List antivirus threat reports.
     * @param sort The field that will be used for sorting. (optional)
     * @param scanId If present, only returns threat reports associated with the given scan report. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param file If present, only returns threat reports for the given file. (optional)
     * @param remediation If present, only returns threat reports with the given remediation. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReportsThreatsAsync(String sort, String scanId, String resume, Integer limit, String file, String remediation, String dir, final ApiCallback<ReportsThreatsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReportsThreatsValidateBeforeCall(sort, scanId, resume, limit, file, remediation, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ReportsThreatsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAntivirusPolicies
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAntivirusPoliciesCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAntivirusPoliciesValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAntivirusPoliciesCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List antivirus scan policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return AntivirusPoliciesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AntivirusPoliciesExtended listAntivirusPolicies(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<AntivirusPoliciesExtended> resp = listAntivirusPoliciesWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List antivirus scan policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;AntivirusPoliciesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AntivirusPoliciesExtended> listAntivirusPoliciesWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listAntivirusPoliciesValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<AntivirusPoliciesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List antivirus scan policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAntivirusPoliciesAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<AntivirusPoliciesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAntivirusPoliciesValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AntivirusPoliciesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAntivirusServers
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAntivirusServersCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAntivirusServersValidateBeforeCall(String sort, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listAntivirusServersCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List antivirus servers.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return AntivirusServersExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AntivirusServersExtended listAntivirusServers(String sort, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<AntivirusServersExtended> resp = listAntivirusServersWithHttpInfo(sort, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List antivirus servers.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;AntivirusServersExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AntivirusServersExtended> listAntivirusServersWithHttpInfo(String sort, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listAntivirusServersValidateBeforeCall(sort, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<AntivirusServersExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List antivirus servers.
     * @param sort The field that will be used for sorting. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAntivirusServersAsync(String sort, Integer limit, String dir, String resume, final ApiCallback<AntivirusServersExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAntivirusServersValidateBeforeCall(sort, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AntivirusServersExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAntivirusPolicy
     * @param antivirusPolicy  (required)
     * @param antivirusPolicyId Modify an antivirus scan policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusPolicyCall(AntivirusPolicy antivirusPolicy, String antivirusPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusPolicy;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/policies/{AntivirusPolicyId}"
            .replaceAll("\\{" + "AntivirusPolicyId" + "\\}", apiClient.escapeString(antivirusPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAntivirusPolicyValidateBeforeCall(AntivirusPolicy antivirusPolicy, String antivirusPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusPolicy' is set
        if (antivirusPolicy == null) {
            throw new ApiException("Missing the required parameter 'antivirusPolicy' when calling updateAntivirusPolicy(Async)");
        }
        
        // verify the required parameter 'antivirusPolicyId' is set
        if (antivirusPolicyId == null) {
            throw new ApiException("Missing the required parameter 'antivirusPolicyId' when calling updateAntivirusPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAntivirusPolicyCall(antivirusPolicy, antivirusPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify an antivirus scan policy.
     * @param antivirusPolicy  (required)
     * @param antivirusPolicyId Modify an antivirus scan policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAntivirusPolicy(AntivirusPolicy antivirusPolicy, String antivirusPolicyId) throws ApiException {
        updateAntivirusPolicyWithHttpInfo(antivirusPolicy, antivirusPolicyId);
    }

    /**
     * 
     * Modify an antivirus scan policy.
     * @param antivirusPolicy  (required)
     * @param antivirusPolicyId Modify an antivirus scan policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAntivirusPolicyWithHttpInfo(AntivirusPolicy antivirusPolicy, String antivirusPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = updateAntivirusPolicyValidateBeforeCall(antivirusPolicy, antivirusPolicyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify an antivirus scan policy.
     * @param antivirusPolicy  (required)
     * @param antivirusPolicyId Modify an antivirus scan policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusPolicyAsync(AntivirusPolicy antivirusPolicy, String antivirusPolicyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAntivirusPolicyValidateBeforeCall(antivirusPolicy, antivirusPolicyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAntivirusQuarantinePath
     * @param antivirusQuarantinePathParams  (required)
     * @param antivirusQuarantinePath Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusQuarantinePathCall(AntivirusQuarantinePathParams antivirusQuarantinePathParams, String antivirusQuarantinePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusQuarantinePathParams;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}"
            .replaceAll("\\{" + "AntivirusQuarantinePath" + "\\}", apiClient.escapeString(antivirusQuarantinePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAntivirusQuarantinePathValidateBeforeCall(AntivirusQuarantinePathParams antivirusQuarantinePathParams, String antivirusQuarantinePath, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusQuarantinePathParams' is set
        if (antivirusQuarantinePathParams == null) {
            throw new ApiException("Missing the required parameter 'antivirusQuarantinePathParams' when calling updateAntivirusQuarantinePath(Async)");
        }
        
        // verify the required parameter 'antivirusQuarantinePath' is set
        if (antivirusQuarantinePath == null) {
            throw new ApiException("Missing the required parameter 'antivirusQuarantinePath' when calling updateAntivirusQuarantinePath(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAntivirusQuarantinePathCall(antivirusQuarantinePathParams, antivirusQuarantinePath, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file.
     * @param antivirusQuarantinePathParams  (required)
     * @param antivirusQuarantinePath Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAntivirusQuarantinePath(AntivirusQuarantinePathParams antivirusQuarantinePathParams, String antivirusQuarantinePath) throws ApiException {
        updateAntivirusQuarantinePathWithHttpInfo(antivirusQuarantinePathParams, antivirusQuarantinePath);
    }

    /**
     * 
     * Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file.
     * @param antivirusQuarantinePathParams  (required)
     * @param antivirusQuarantinePath Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAntivirusQuarantinePathWithHttpInfo(AntivirusQuarantinePathParams antivirusQuarantinePathParams, String antivirusQuarantinePath) throws ApiException {
        com.squareup.okhttp.Call call = updateAntivirusQuarantinePathValidateBeforeCall(antivirusQuarantinePathParams, antivirusQuarantinePath, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file.
     * @param antivirusQuarantinePathParams  (required)
     * @param antivirusQuarantinePath Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {\&quot;quarantined\&quot;:true} to quarantine the file, and {\&quot;quarantined\&quot;:false} to unquarantine the file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusQuarantinePathAsync(AntivirusQuarantinePathParams antivirusQuarantinePathParams, String antivirusQuarantinePath, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAntivirusQuarantinePathValidateBeforeCall(antivirusQuarantinePathParams, antivirusQuarantinePath, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAntivirusServer
     * @param antivirusServer  (required)
     * @param antivirusServerId Modify an antivirus server entry. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusServerCall(AntivirusServer antivirusServer, String antivirusServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusServer;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/servers/{AntivirusServerId}"
            .replaceAll("\\{" + "AntivirusServerId" + "\\}", apiClient.escapeString(antivirusServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAntivirusServerValidateBeforeCall(AntivirusServer antivirusServer, String antivirusServerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusServer' is set
        if (antivirusServer == null) {
            throw new ApiException("Missing the required parameter 'antivirusServer' when calling updateAntivirusServer(Async)");
        }
        
        // verify the required parameter 'antivirusServerId' is set
        if (antivirusServerId == null) {
            throw new ApiException("Missing the required parameter 'antivirusServerId' when calling updateAntivirusServer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAntivirusServerCall(antivirusServer, antivirusServerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify an antivirus server entry.
     * @param antivirusServer  (required)
     * @param antivirusServerId Modify an antivirus server entry. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAntivirusServer(AntivirusServer antivirusServer, String antivirusServerId) throws ApiException {
        updateAntivirusServerWithHttpInfo(antivirusServer, antivirusServerId);
    }

    /**
     * 
     * Modify an antivirus server entry.
     * @param antivirusServer  (required)
     * @param antivirusServerId Modify an antivirus server entry. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAntivirusServerWithHttpInfo(AntivirusServer antivirusServer, String antivirusServerId) throws ApiException {
        com.squareup.okhttp.Call call = updateAntivirusServerValidateBeforeCall(antivirusServer, antivirusServerId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify an antivirus server entry.
     * @param antivirusServer  (required)
     * @param antivirusServerId Modify an antivirus server entry. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusServerAsync(AntivirusServer antivirusServer, String antivirusServerId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAntivirusServerValidateBeforeCall(antivirusServer, antivirusServerId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateAntivirusSettings
     * @param antivirusSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusSettingsCall(AntivirusSettingsSettings antivirusSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = antivirusSettings;

        // create path and map variables
        String localVarPath = "/platform/3/antivirus/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAntivirusSettingsValidateBeforeCall(AntivirusSettingsSettings antivirusSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'antivirusSettings' is set
        if (antivirusSettings == null) {
            throw new ApiException("Missing the required parameter 'antivirusSettings' when calling updateAntivirusSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAntivirusSettingsCall(antivirusSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.
     * @param antivirusSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateAntivirusSettings(AntivirusSettingsSettings antivirusSettings) throws ApiException {
        updateAntivirusSettingsWithHttpInfo(antivirusSettings);
    }

    /**
     * 
     * Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.
     * @param antivirusSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateAntivirusSettingsWithHttpInfo(AntivirusSettingsSettings antivirusSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateAntivirusSettingsValidateBeforeCall(antivirusSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.
     * @param antivirusSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAntivirusSettingsAsync(AntivirusSettingsSettings antivirusSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAntivirusSettingsValidateBeforeCall(antivirusSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
