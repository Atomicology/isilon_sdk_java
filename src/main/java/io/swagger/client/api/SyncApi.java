/*
 * Isilon SDK
 * Isilon SDK - Language bindings for the OneFS API
 *
 * OpenAPI spec version: 5
 * Contact: sdk@isilon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateResponse;
import io.swagger.client.model.CreateSyncReportsRotateItemResponse;
import io.swagger.client.model.Empty;
import io.swagger.client.model.Error;
import io.swagger.client.model.HistoryFile;
import io.swagger.client.model.LicenseLicense;
import io.swagger.client.model.SyncJob;
import io.swagger.client.model.SyncJobCreateParams;
import io.swagger.client.model.SyncJobs;
import io.swagger.client.model.SyncJobsExtended;
import io.swagger.client.model.SyncPolicies;
import io.swagger.client.model.SyncPoliciesExtended;
import io.swagger.client.model.SyncPolicy;
import io.swagger.client.model.SyncPolicyCreateParams;
import io.swagger.client.model.SyncReports;
import io.swagger.client.model.SyncReportsExtended;
import io.swagger.client.model.SyncReportsRotate;
import io.swagger.client.model.SyncRule;
import io.swagger.client.model.SyncRuleCreateParams;
import io.swagger.client.model.SyncRules;
import io.swagger.client.model.SyncRulesExtended;
import io.swagger.client.model.SyncSettings;
import io.swagger.client.model.SyncSettingsExtended;
import io.swagger.client.model.TargetPolicies;
import io.swagger.client.model.TargetPoliciesExtended;
import io.swagger.client.model.TargetReports;
import io.swagger.client.model.TargetReportsExtended;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SyncApi {
    private ApiClient apiClient;

    public SyncApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SyncApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSyncJob
     * @param syncJob  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSyncJobCall(SyncJobCreateParams syncJob, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncJob;

        // create path and map variables
        String localVarPath = "/platform/3/sync/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSyncJobValidateBeforeCall(SyncJobCreateParams syncJob, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncJob' is set
        if (syncJob == null) {
            throw new ApiException("Missing the required parameter 'syncJob' when calling createSyncJob(Async)");
        }
        

        com.squareup.okhttp.Call call = createSyncJobCall(syncJob, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Start a SyncIQ job.
     * @param syncJob  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSyncJob(SyncJobCreateParams syncJob) throws ApiException {
        ApiResponse<CreateResponse> resp = createSyncJobWithHttpInfo(syncJob);
        return resp.getData();
    }

    /**
     * 
     * Start a SyncIQ job.
     * @param syncJob  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSyncJobWithHttpInfo(SyncJobCreateParams syncJob) throws ApiException {
        com.squareup.okhttp.Call call = createSyncJobValidateBeforeCall(syncJob, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start a SyncIQ job.
     * @param syncJob  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSyncJobAsync(SyncJobCreateParams syncJob, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSyncJobValidateBeforeCall(syncJob, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSyncPolicy
     * @param syncPolicy  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSyncPolicyCall(SyncPolicyCreateParams syncPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncPolicy;

        // create path and map variables
        String localVarPath = "/platform/3/sync/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSyncPolicyValidateBeforeCall(SyncPolicyCreateParams syncPolicy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncPolicy' is set
        if (syncPolicy == null) {
            throw new ApiException("Missing the required parameter 'syncPolicy' when calling createSyncPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = createSyncPolicyCall(syncPolicy, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a SyncIQ policy.
     * @param syncPolicy  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSyncPolicy(SyncPolicyCreateParams syncPolicy) throws ApiException {
        ApiResponse<CreateResponse> resp = createSyncPolicyWithHttpInfo(syncPolicy);
        return resp.getData();
    }

    /**
     * 
     * Create a SyncIQ policy.
     * @param syncPolicy  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSyncPolicyWithHttpInfo(SyncPolicyCreateParams syncPolicy) throws ApiException {
        com.squareup.okhttp.Call call = createSyncPolicyValidateBeforeCall(syncPolicy, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a SyncIQ policy.
     * @param syncPolicy  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSyncPolicyAsync(SyncPolicyCreateParams syncPolicy, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSyncPolicyValidateBeforeCall(syncPolicy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSyncReportsRotateItem
     * @param syncReportsRotateItem  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSyncReportsRotateItemCall(Empty syncReportsRotateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncReportsRotateItem;

        // create path and map variables
        String localVarPath = "/platform/1/sync/reports-rotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSyncReportsRotateItemValidateBeforeCall(Empty syncReportsRotateItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncReportsRotateItem' is set
        if (syncReportsRotateItem == null) {
            throw new ApiException("Missing the required parameter 'syncReportsRotateItem' when calling createSyncReportsRotateItem(Async)");
        }
        

        com.squareup.okhttp.Call call = createSyncReportsRotateItemCall(syncReportsRotateItem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Rotate the records in the database(s).
     * @param syncReportsRotateItem  (required)
     * @return CreateSyncReportsRotateItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateSyncReportsRotateItemResponse createSyncReportsRotateItem(Empty syncReportsRotateItem) throws ApiException {
        ApiResponse<CreateSyncReportsRotateItemResponse> resp = createSyncReportsRotateItemWithHttpInfo(syncReportsRotateItem);
        return resp.getData();
    }

    /**
     * 
     * Rotate the records in the database(s).
     * @param syncReportsRotateItem  (required)
     * @return ApiResponse&lt;CreateSyncReportsRotateItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateSyncReportsRotateItemResponse> createSyncReportsRotateItemWithHttpInfo(Empty syncReportsRotateItem) throws ApiException {
        com.squareup.okhttp.Call call = createSyncReportsRotateItemValidateBeforeCall(syncReportsRotateItem, null, null);
        Type localVarReturnType = new TypeToken<CreateSyncReportsRotateItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rotate the records in the database(s).
     * @param syncReportsRotateItem  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSyncReportsRotateItemAsync(Empty syncReportsRotateItem, final ApiCallback<CreateSyncReportsRotateItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSyncReportsRotateItemValidateBeforeCall(syncReportsRotateItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSyncReportsRotateItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSyncRule
     * @param syncRule  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSyncRuleCall(SyncRuleCreateParams syncRule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncRule;

        // create path and map variables
        String localVarPath = "/platform/3/sync/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSyncRuleValidateBeforeCall(SyncRuleCreateParams syncRule, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncRule' is set
        if (syncRule == null) {
            throw new ApiException("Missing the required parameter 'syncRule' when calling createSyncRule(Async)");
        }
        

        com.squareup.okhttp.Call call = createSyncRuleCall(syncRule, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a new SyncIQ performance rule.
     * @param syncRule  (required)
     * @return CreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateResponse createSyncRule(SyncRuleCreateParams syncRule) throws ApiException {
        ApiResponse<CreateResponse> resp = createSyncRuleWithHttpInfo(syncRule);
        return resp.getData();
    }

    /**
     * 
     * Create a new SyncIQ performance rule.
     * @param syncRule  (required)
     * @return ApiResponse&lt;CreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateResponse> createSyncRuleWithHttpInfo(SyncRuleCreateParams syncRule) throws ApiException {
        com.squareup.okhttp.Call call = createSyncRuleValidateBeforeCall(syncRule, null, null);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new SyncIQ performance rule.
     * @param syncRule  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSyncRuleAsync(SyncRuleCreateParams syncRule, final ApiCallback<CreateResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSyncRuleValidateBeforeCall(syncRule, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSyncPolicies
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSyncPoliciesCall(Boolean localOnly, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (localOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local_only", localOnly));
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSyncPoliciesValidateBeforeCall(Boolean localOnly, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSyncPoliciesCall(localOnly, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all SyncIQ policies.
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSyncPolicies(Boolean localOnly, Boolean force) throws ApiException {
        deleteSyncPoliciesWithHttpInfo(localOnly, force);
    }

    /**
     * 
     * Delete all SyncIQ policies.
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSyncPoliciesWithHttpInfo(Boolean localOnly, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteSyncPoliciesValidateBeforeCall(localOnly, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all SyncIQ policies.
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSyncPoliciesAsync(Boolean localOnly, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSyncPoliciesValidateBeforeCall(localOnly, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSyncPolicy
     * @param syncPolicyId Delete a single SyncIQ policy. (required)
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSyncPolicyCall(String syncPolicyId, Boolean localOnly, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/policies/{SyncPolicyId}"
            .replaceAll("\\{" + "SyncPolicyId" + "\\}", apiClient.escapeString(syncPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (localOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("local_only", localOnly));
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSyncPolicyValidateBeforeCall(String syncPolicyId, Boolean localOnly, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncPolicyId' is set
        if (syncPolicyId == null) {
            throw new ApiException("Missing the required parameter 'syncPolicyId' when calling deleteSyncPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSyncPolicyCall(syncPolicyId, localOnly, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a single SyncIQ policy.
     * @param syncPolicyId Delete a single SyncIQ policy. (required)
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSyncPolicy(String syncPolicyId, Boolean localOnly, Boolean force) throws ApiException {
        deleteSyncPolicyWithHttpInfo(syncPolicyId, localOnly, force);
    }

    /**
     * 
     * Delete a single SyncIQ policy.
     * @param syncPolicyId Delete a single SyncIQ policy. (required)
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSyncPolicyWithHttpInfo(String syncPolicyId, Boolean localOnly, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteSyncPolicyValidateBeforeCall(syncPolicyId, localOnly, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a single SyncIQ policy.
     * @param syncPolicyId Delete a single SyncIQ policy. (required)
     * @param localOnly Skip deleting the policy association on the target. (optional)
     * @param force Ignore any running jobs when preparing to delete a policy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSyncPolicyAsync(String syncPolicyId, Boolean localOnly, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSyncPolicyValidateBeforeCall(syncPolicyId, localOnly, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSyncRule
     * @param syncRuleId Delete a single SyncIQ performance rule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSyncRuleCall(String syncRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/rules/{SyncRuleId}"
            .replaceAll("\\{" + "SyncRuleId" + "\\}", apiClient.escapeString(syncRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSyncRuleValidateBeforeCall(String syncRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncRuleId' is set
        if (syncRuleId == null) {
            throw new ApiException("Missing the required parameter 'syncRuleId' when calling deleteSyncRule(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSyncRuleCall(syncRuleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete a single SyncIQ performance rule.
     * @param syncRuleId Delete a single SyncIQ performance rule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSyncRule(String syncRuleId) throws ApiException {
        deleteSyncRuleWithHttpInfo(syncRuleId);
    }

    /**
     * 
     * Delete a single SyncIQ performance rule.
     * @param syncRuleId Delete a single SyncIQ performance rule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSyncRuleWithHttpInfo(String syncRuleId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSyncRuleValidateBeforeCall(syncRuleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete a single SyncIQ performance rule.
     * @param syncRuleId Delete a single SyncIQ performance rule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSyncRuleAsync(String syncRuleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSyncRuleValidateBeforeCall(syncRuleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSyncRules
     * @param type Delete all rules of the specified rule type only. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSyncRulesCall(String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSyncRulesValidateBeforeCall(String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteSyncRulesCall(type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Delete all SyncIQ performance rules or all rules of a specified type.
     * @param type Delete all rules of the specified rule type only. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteSyncRules(String type) throws ApiException {
        deleteSyncRulesWithHttpInfo(type);
    }

    /**
     * 
     * Delete all SyncIQ performance rules or all rules of a specified type.
     * @param type Delete all rules of the specified rule type only. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteSyncRulesWithHttpInfo(String type) throws ApiException {
        com.squareup.okhttp.Call call = deleteSyncRulesValidateBeforeCall(type, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Delete all SyncIQ performance rules or all rules of a specified type.
     * @param type Delete all rules of the specified rule type only. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSyncRulesAsync(String type, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSyncRulesValidateBeforeCall(type, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTargetPolicy
     * @param targetPolicyId Break the target association with this cluster for this policy. (required)
     * @param force Ignore any running jobs when preparing to delete the policy target association. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTargetPolicyCall(String targetPolicyId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/sync/target/policies/{TargetPolicyId}"
            .replaceAll("\\{" + "TargetPolicyId" + "\\}", apiClient.escapeString(targetPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTargetPolicyValidateBeforeCall(String targetPolicyId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'targetPolicyId' is set
        if (targetPolicyId == null) {
            throw new ApiException("Missing the required parameter 'targetPolicyId' when calling deleteTargetPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTargetPolicyCall(targetPolicyId, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Break the target association with this cluster for this policy.
     * @param targetPolicyId Break the target association with this cluster for this policy. (required)
     * @param force Ignore any running jobs when preparing to delete the policy target association. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTargetPolicy(String targetPolicyId, Boolean force) throws ApiException {
        deleteTargetPolicyWithHttpInfo(targetPolicyId, force);
    }

    /**
     * 
     * Break the target association with this cluster for this policy.
     * @param targetPolicyId Break the target association with this cluster for this policy. (required)
     * @param force Ignore any running jobs when preparing to delete the policy target association. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTargetPolicyWithHttpInfo(String targetPolicyId, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = deleteTargetPolicyValidateBeforeCall(targetPolicyId, force, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Break the target association with this cluster for this policy.
     * @param targetPolicyId Break the target association with this cluster for this policy. (required)
     * @param force Ignore any running jobs when preparing to delete the policy target association. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTargetPolicyAsync(String targetPolicyId, Boolean force, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTargetPolicyValidateBeforeCall(targetPolicyId, force, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getHistoryCpu
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoryCpuCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/history/cpu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoryCpuValidateBeforeCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHistoryCpuCall(begin, end, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List cpu performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return HistoryFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryFile getHistoryCpu(Integer begin, Integer end) throws ApiException {
        ApiResponse<HistoryFile> resp = getHistoryCpuWithHttpInfo(begin, end);
        return resp.getData();
    }

    /**
     * 
     * List cpu performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return ApiResponse&lt;HistoryFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryFile> getHistoryCpuWithHttpInfo(Integer begin, Integer end) throws ApiException {
        com.squareup.okhttp.Call call = getHistoryCpuValidateBeforeCall(begin, end, null, null);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List cpu performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoryCpuAsync(Integer begin, Integer end, final ApiCallback<HistoryFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoryCpuValidateBeforeCall(begin, end, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoryFile
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoryFileCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/sync/history/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoryFileValidateBeforeCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHistoryFileCall(begin, end, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List file operations performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return HistoryFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryFile getHistoryFile(Integer begin, Integer end) throws ApiException {
        ApiResponse<HistoryFile> resp = getHistoryFileWithHttpInfo(begin, end);
        return resp.getData();
    }

    /**
     * 
     * List file operations performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return ApiResponse&lt;HistoryFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryFile> getHistoryFileWithHttpInfo(Integer begin, Integer end) throws ApiException {
        com.squareup.okhttp.Call call = getHistoryFileValidateBeforeCall(begin, end, null, null);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List file operations performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoryFileAsync(Integer begin, Integer end, final ApiCallback<HistoryFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoryFileValidateBeforeCall(begin, end, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoryNetwork
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoryNetworkCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/sync/history/network";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoryNetworkValidateBeforeCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHistoryNetworkCall(begin, end, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List network operations performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return HistoryFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryFile getHistoryNetwork(Integer begin, Integer end) throws ApiException {
        ApiResponse<HistoryFile> resp = getHistoryNetworkWithHttpInfo(begin, end);
        return resp.getData();
    }

    /**
     * 
     * List network operations performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return ApiResponse&lt;HistoryFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryFile> getHistoryNetworkWithHttpInfo(Integer begin, Integer end) throws ApiException {
        com.squareup.okhttp.Call call = getHistoryNetworkValidateBeforeCall(begin, end, null, null);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List network operations performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoryNetworkAsync(Integer begin, Integer end, final ApiCallback<HistoryFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoryNetworkValidateBeforeCall(begin, end, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHistoryWorker
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHistoryWorkerCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/history/worker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (begin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin", begin));
        if (end != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end", end));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHistoryWorkerValidateBeforeCall(Integer begin, Integer end, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHistoryWorkerCall(begin, end, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List worker performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return HistoryFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HistoryFile getHistoryWorker(Integer begin, Integer end) throws ApiException {
        ApiResponse<HistoryFile> resp = getHistoryWorkerWithHttpInfo(begin, end);
        return resp.getData();
    }

    /**
     * 
     * List worker performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @return ApiResponse&lt;HistoryFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HistoryFile> getHistoryWorkerWithHttpInfo(Integer begin, Integer end) throws ApiException {
        com.squareup.okhttp.Call call = getHistoryWorkerValidateBeforeCall(begin, end, null, null);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List worker performance data.
     * @param begin Begin timestamp for time-series report. (optional)
     * @param end End timestamp for time-series report. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHistoryWorkerAsync(Integer begin, Integer end, final ApiCallback<HistoryFile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHistoryWorkerValidateBeforeCall(begin, end, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HistoryFile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncJob
     * @param syncJobId View a single SyncIQ job. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncJobCall(String syncJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/jobs/{SyncJobId}"
            .replaceAll("\\{" + "SyncJobId" + "\\}", apiClient.escapeString(syncJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncJobValidateBeforeCall(String syncJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncJobId' is set
        if (syncJobId == null) {
            throw new ApiException("Missing the required parameter 'syncJobId' when calling getSyncJob(Async)");
        }
        

        com.squareup.okhttp.Call call = getSyncJobCall(syncJobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ job.
     * @param syncJobId View a single SyncIQ job. (required)
     * @return SyncJobs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncJobs getSyncJob(String syncJobId) throws ApiException {
        ApiResponse<SyncJobs> resp = getSyncJobWithHttpInfo(syncJobId);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ job.
     * @param syncJobId View a single SyncIQ job. (required)
     * @return ApiResponse&lt;SyncJobs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncJobs> getSyncJobWithHttpInfo(String syncJobId) throws ApiException {
        com.squareup.okhttp.Call call = getSyncJobValidateBeforeCall(syncJobId, null, null);
        Type localVarReturnType = new TypeToken<SyncJobs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ job.
     * @param syncJobId View a single SyncIQ job. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncJobAsync(String syncJobId, final ApiCallback<SyncJobs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncJobValidateBeforeCall(syncJobId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncJobs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncLicense
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncLicenseCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/5/sync/license";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncLicenseValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSyncLicenseCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve license information.
     * @return LicenseLicense
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LicenseLicense getSyncLicense() throws ApiException {
        ApiResponse<LicenseLicense> resp = getSyncLicenseWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve license information.
     * @return ApiResponse&lt;LicenseLicense&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LicenseLicense> getSyncLicenseWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSyncLicenseValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LicenseLicense>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve license information.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncLicenseAsync(final ApiCallback<LicenseLicense> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncLicenseValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LicenseLicense>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncPolicy
     * @param syncPolicyId View a single SyncIQ policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncPolicyCall(String syncPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/policies/{SyncPolicyId}"
            .replaceAll("\\{" + "SyncPolicyId" + "\\}", apiClient.escapeString(syncPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncPolicyValidateBeforeCall(String syncPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncPolicyId' is set
        if (syncPolicyId == null) {
            throw new ApiException("Missing the required parameter 'syncPolicyId' when calling getSyncPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = getSyncPolicyCall(syncPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ policy.
     * @param syncPolicyId View a single SyncIQ policy. (required)
     * @return SyncPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncPolicies getSyncPolicy(String syncPolicyId) throws ApiException {
        ApiResponse<SyncPolicies> resp = getSyncPolicyWithHttpInfo(syncPolicyId);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ policy.
     * @param syncPolicyId View a single SyncIQ policy. (required)
     * @return ApiResponse&lt;SyncPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncPolicies> getSyncPolicyWithHttpInfo(String syncPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = getSyncPolicyValidateBeforeCall(syncPolicyId, null, null);
        Type localVarReturnType = new TypeToken<SyncPolicies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ policy.
     * @param syncPolicyId View a single SyncIQ policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncPolicyAsync(String syncPolicyId, final ApiCallback<SyncPolicies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncPolicyValidateBeforeCall(syncPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncPolicies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncReport
     * @param syncReportId View a single SyncIQ report. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncReportCall(String syncReportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/reports/{SyncReportId}"
            .replaceAll("\\{" + "SyncReportId" + "\\}", apiClient.escapeString(syncReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncReportValidateBeforeCall(String syncReportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncReportId' is set
        if (syncReportId == null) {
            throw new ApiException("Missing the required parameter 'syncReportId' when calling getSyncReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getSyncReportCall(syncReportId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ report.
     * @param syncReportId View a single SyncIQ report. (required)
     * @return SyncReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncReports getSyncReport(String syncReportId) throws ApiException {
        ApiResponse<SyncReports> resp = getSyncReportWithHttpInfo(syncReportId);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ report.
     * @param syncReportId View a single SyncIQ report. (required)
     * @return ApiResponse&lt;SyncReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncReports> getSyncReportWithHttpInfo(String syncReportId) throws ApiException {
        com.squareup.okhttp.Call call = getSyncReportValidateBeforeCall(syncReportId, null, null);
        Type localVarReturnType = new TypeToken<SyncReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ report.
     * @param syncReportId View a single SyncIQ report. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncReportAsync(String syncReportId, final ApiCallback<SyncReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncReportValidateBeforeCall(syncReportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncReports
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncReportsCall(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (newerThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newer_than", newerThan));
        if (policyName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy_name", policyName));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (reportsPerPolicy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reports_per_policy", reportsPerPolicy));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncReportsValidateBeforeCall(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSyncReportsCall(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of SyncIQ reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @return SyncReportsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncReportsExtended getSyncReports(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir) throws ApiException {
        ApiResponse<SyncReportsExtended> resp = getSyncReportsWithHttpInfo(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir);
        return resp.getData();
    }

    /**
     * 
     * Get a list of SyncIQ reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;SyncReportsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncReportsExtended> getSyncReportsWithHttpInfo(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getSyncReportsValidateBeforeCall(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir, null, null);
        Type localVarReturnType = new TypeToken<SyncReportsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of SyncIQ reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncReportsAsync(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir, final ApiCallback<SyncReportsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncReportsValidateBeforeCall(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncReportsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncRule
     * @param syncRuleId View a single SyncIQ performance rule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncRuleCall(String syncRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/rules/{SyncRuleId}"
            .replaceAll("\\{" + "SyncRuleId" + "\\}", apiClient.escapeString(syncRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncRuleValidateBeforeCall(String syncRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncRuleId' is set
        if (syncRuleId == null) {
            throw new ApiException("Missing the required parameter 'syncRuleId' when calling getSyncRule(Async)");
        }
        

        com.squareup.okhttp.Call call = getSyncRuleCall(syncRuleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ performance rule.
     * @param syncRuleId View a single SyncIQ performance rule. (required)
     * @return SyncRules
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncRules getSyncRule(String syncRuleId) throws ApiException {
        ApiResponse<SyncRules> resp = getSyncRuleWithHttpInfo(syncRuleId);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ performance rule.
     * @param syncRuleId View a single SyncIQ performance rule. (required)
     * @return ApiResponse&lt;SyncRules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncRules> getSyncRuleWithHttpInfo(String syncRuleId) throws ApiException {
        com.squareup.okhttp.Call call = getSyncRuleValidateBeforeCall(syncRuleId, null, null);
        Type localVarReturnType = new TypeToken<SyncRules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ performance rule.
     * @param syncRuleId View a single SyncIQ performance rule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncRuleAsync(String syncRuleId, final ApiCallback<SyncRules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncRuleValidateBeforeCall(syncRuleId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncRules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSyncSettings
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSyncSettingsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSyncSettingsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSyncSettingsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieve the global SyncIQ settings.
     * @return SyncSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncSettings getSyncSettings() throws ApiException {
        ApiResponse<SyncSettings> resp = getSyncSettingsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve the global SyncIQ settings.
     * @return ApiResponse&lt;SyncSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncSettings> getSyncSettingsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getSyncSettingsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SyncSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the global SyncIQ settings.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSyncSettingsAsync(final ApiCallback<SyncSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSyncSettingsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTargetPolicies
     * @param sort The field that will be used for sorting. (optional)
     * @param targetPath Filter the returned policies to include only those with this target path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTargetPoliciesCall(String sort, String targetPath, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/sync/target/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (targetPath != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_path", targetPath));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTargetPoliciesValidateBeforeCall(String sort, String targetPath, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTargetPoliciesCall(sort, targetPath, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all SyncIQ target policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param targetPath Filter the returned policies to include only those with this target path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return TargetPoliciesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetPoliciesExtended getTargetPolicies(String sort, String targetPath, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<TargetPoliciesExtended> resp = getTargetPoliciesWithHttpInfo(sort, targetPath, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all SyncIQ target policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param targetPath Filter the returned policies to include only those with this target path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;TargetPoliciesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetPoliciesExtended> getTargetPoliciesWithHttpInfo(String sort, String targetPath, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = getTargetPoliciesValidateBeforeCall(sort, targetPath, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<TargetPoliciesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all SyncIQ target policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param targetPath Filter the returned policies to include only those with this target path. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTargetPoliciesAsync(String sort, String targetPath, Integer limit, String dir, String resume, final ApiCallback<TargetPoliciesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTargetPoliciesValidateBeforeCall(sort, targetPath, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetPoliciesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTargetPolicy
     * @param targetPolicyId View a single SyncIQ target policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTargetPolicyCall(String targetPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/sync/target/policies/{TargetPolicyId}"
            .replaceAll("\\{" + "TargetPolicyId" + "\\}", apiClient.escapeString(targetPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTargetPolicyValidateBeforeCall(String targetPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'targetPolicyId' is set
        if (targetPolicyId == null) {
            throw new ApiException("Missing the required parameter 'targetPolicyId' when calling getTargetPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = getTargetPolicyCall(targetPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ target policy.
     * @param targetPolicyId View a single SyncIQ target policy. (required)
     * @return TargetPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetPolicies getTargetPolicy(String targetPolicyId) throws ApiException {
        ApiResponse<TargetPolicies> resp = getTargetPolicyWithHttpInfo(targetPolicyId);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ target policy.
     * @param targetPolicyId View a single SyncIQ target policy. (required)
     * @return ApiResponse&lt;TargetPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetPolicies> getTargetPolicyWithHttpInfo(String targetPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = getTargetPolicyValidateBeforeCall(targetPolicyId, null, null);
        Type localVarReturnType = new TypeToken<TargetPolicies>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ target policy.
     * @param targetPolicyId View a single SyncIQ target policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTargetPolicyAsync(String targetPolicyId, final ApiCallback<TargetPolicies> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTargetPolicyValidateBeforeCall(targetPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetPolicies>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTargetReport
     * @param targetReportId View a single SyncIQ target report. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTargetReportCall(String targetReportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/target/reports/{TargetReportId}"
            .replaceAll("\\{" + "TargetReportId" + "\\}", apiClient.escapeString(targetReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTargetReportValidateBeforeCall(String targetReportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'targetReportId' is set
        if (targetReportId == null) {
            throw new ApiException("Missing the required parameter 'targetReportId' when calling getTargetReport(Async)");
        }
        

        com.squareup.okhttp.Call call = getTargetReportCall(targetReportId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * View a single SyncIQ target report.
     * @param targetReportId View a single SyncIQ target report. (required)
     * @return TargetReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetReports getTargetReport(String targetReportId) throws ApiException {
        ApiResponse<TargetReports> resp = getTargetReportWithHttpInfo(targetReportId);
        return resp.getData();
    }

    /**
     * 
     * View a single SyncIQ target report.
     * @param targetReportId View a single SyncIQ target report. (required)
     * @return ApiResponse&lt;TargetReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetReports> getTargetReportWithHttpInfo(String targetReportId) throws ApiException {
        com.squareup.okhttp.Call call = getTargetReportValidateBeforeCall(targetReportId, null, null);
        Type localVarReturnType = new TypeToken<TargetReports>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View a single SyncIQ target report.
     * @param targetReportId View a single SyncIQ target report. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTargetReportAsync(String targetReportId, final ApiCallback<TargetReports> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTargetReportValidateBeforeCall(targetReportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetReports>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTargetReports
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTargetReportsCall(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/4/sync/target/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (newerThan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newer_than", newerThan));
        if (policyName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("policy_name", policyName));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (reportsPerPolicy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reports_per_policy", reportsPerPolicy));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTargetReportsValidateBeforeCall(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getTargetReportsCall(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of SyncIQ target reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @return TargetReportsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TargetReportsExtended getTargetReports(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir) throws ApiException {
        ApiResponse<TargetReportsExtended> resp = getTargetReportsWithHttpInfo(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir);
        return resp.getData();
    }

    /**
     * 
     * Get a list of SyncIQ target reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;TargetReportsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TargetReportsExtended> getTargetReportsWithHttpInfo(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir) throws ApiException {
        com.squareup.okhttp.Call call = getTargetReportsValidateBeforeCall(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir, null, null);
        Type localVarReturnType = new TypeToken<TargetReportsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of SyncIQ target reports.  By default 10 reports are returned per policy, unless otherwise specified by &#39;reports_per_policy&#39;.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param newerThan Filter the returned reports to include only those whose jobs started more recently than the specified number of days ago. (optional)
     * @param policyName Filter the returned reports to include only those with this policy name. (optional)
     * @param state Filter the returned reports to include only those whose jobs are in this state. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param reportsPerPolicy If specified, only the N most recent reports will be returned per policy.  If no other query args are present this argument defaults to 10.  (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTargetReportsAsync(String sort, String resume, Integer newerThan, String policyName, String state, Integer limit, Integer reportsPerPolicy, String dir, final ApiCallback<TargetReportsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTargetReportsValidateBeforeCall(sort, resume, newerThan, policyName, state, limit, reportsPerPolicy, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TargetReportsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSyncJobs
     * @param sort The field that will be used for sorting. (optional)
     * @param state The state of the job. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSyncJobsCall(String sort, String state, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("state", state));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSyncJobsValidateBeforeCall(String sort, String state, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSyncJobsCall(sort, state, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get a list of SyncIQ jobs.
     * @param sort The field that will be used for sorting. (optional)
     * @param state The state of the job. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SyncJobsExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncJobsExtended listSyncJobs(String sort, String state, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SyncJobsExtended> resp = listSyncJobsWithHttpInfo(sort, state, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * Get a list of SyncIQ jobs.
     * @param sort The field that will be used for sorting. (optional)
     * @param state The state of the job. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SyncJobsExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncJobsExtended> listSyncJobsWithHttpInfo(String sort, String state, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSyncJobsValidateBeforeCall(sort, state, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SyncJobsExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of SyncIQ jobs.
     * @param sort The field that will be used for sorting. (optional)
     * @param state The state of the job. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSyncJobsAsync(String sort, String state, Integer limit, String dir, String resume, final ApiCallback<SyncJobsExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSyncJobsValidateBeforeCall(sort, state, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncJobsExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSyncPolicies
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param summary Show only summary properties (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSyncPoliciesCall(String sort, String resume, Boolean summary, Integer limit, String scope, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));
        if (summary != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("summary", summary));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (scope != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scope", scope));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSyncPoliciesValidateBeforeCall(String sort, String resume, Boolean summary, Integer limit, String scope, String dir, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSyncPoliciesCall(sort, resume, summary, limit, scope, dir, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all SyncIQ policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param summary Show only summary properties (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @return SyncPoliciesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncPoliciesExtended listSyncPolicies(String sort, String resume, Boolean summary, Integer limit, String scope, String dir) throws ApiException {
        ApiResponse<SyncPoliciesExtended> resp = listSyncPoliciesWithHttpInfo(sort, resume, summary, limit, scope, dir);
        return resp.getData();
    }

    /**
     * 
     * List all SyncIQ policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param summary Show only summary properties (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @return ApiResponse&lt;SyncPoliciesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncPoliciesExtended> listSyncPoliciesWithHttpInfo(String sort, String resume, Boolean summary, Integer limit, String scope, String dir) throws ApiException {
        com.squareup.okhttp.Call call = listSyncPoliciesValidateBeforeCall(sort, resume, summary, limit, scope, dir, null, null);
        Type localVarReturnType = new TypeToken<SyncPoliciesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all SyncIQ policies.
     * @param sort The field that will be used for sorting. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param summary Show only summary properties (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param scope If specified as \&quot;effective\&quot; or not specified, all fields are returned.  If specified as \&quot;user\&quot;, only fields with non-default values are shown.  If specified as \&quot;default\&quot;, the original values are returned. (optional)
     * @param dir The direction of the sort. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSyncPoliciesAsync(String sort, String resume, Boolean summary, Integer limit, String scope, String dir, final ApiCallback<SyncPoliciesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSyncPoliciesValidateBeforeCall(sort, resume, summary, limit, scope, dir, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncPoliciesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSyncReportsRotate
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSyncReportsRotateCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/1/sync/reports-rotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSyncReportsRotateValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSyncReportsRotateCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Whether the rotation is still running or not.
     * @return SyncReportsRotate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncReportsRotate listSyncReportsRotate() throws ApiException {
        ApiResponse<SyncReportsRotate> resp = listSyncReportsRotateWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Whether the rotation is still running or not.
     * @return ApiResponse&lt;SyncReportsRotate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncReportsRotate> listSyncReportsRotateWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listSyncReportsRotateValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<SyncReportsRotate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Whether the rotation is still running or not.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSyncReportsRotateAsync(final ApiCallback<SyncReportsRotate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSyncReportsRotateValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncReportsRotate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSyncRules
     * @param sort The field that will be used for sorting. (optional)
     * @param type Filter the returned rules to include only those with this rule type. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSyncRulesCall(String sort, String type, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/3/sync/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (dir != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dir", dir));
        if (resume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resume", resume));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSyncRulesValidateBeforeCall(String sort, String type, Integer limit, String dir, String resume, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSyncRulesCall(sort, type, limit, dir, resume, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List all SyncIQ performance rules.
     * @param sort The field that will be used for sorting. (optional)
     * @param type Filter the returned rules to include only those with this rule type. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return SyncRulesExtended
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SyncRulesExtended listSyncRules(String sort, String type, Integer limit, String dir, String resume) throws ApiException {
        ApiResponse<SyncRulesExtended> resp = listSyncRulesWithHttpInfo(sort, type, limit, dir, resume);
        return resp.getData();
    }

    /**
     * 
     * List all SyncIQ performance rules.
     * @param sort The field that will be used for sorting. (optional)
     * @param type Filter the returned rules to include only those with this rule type. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @return ApiResponse&lt;SyncRulesExtended&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SyncRulesExtended> listSyncRulesWithHttpInfo(String sort, String type, Integer limit, String dir, String resume) throws ApiException {
        com.squareup.okhttp.Call call = listSyncRulesValidateBeforeCall(sort, type, limit, dir, resume, null, null);
        Type localVarReturnType = new TypeToken<SyncRulesExtended>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all SyncIQ performance rules.
     * @param sort The field that will be used for sorting. (optional)
     * @param type Filter the returned rules to include only those with this rule type. (optional)
     * @param limit Return no more than this many results at once (see resume). (optional)
     * @param dir The direction of the sort. (optional)
     * @param resume Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSyncRulesAsync(String sort, String type, Integer limit, String dir, String resume, final ApiCallback<SyncRulesExtended> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSyncRulesValidateBeforeCall(sort, type, limit, dir, resume, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SyncRulesExtended>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSyncJob
     * @param syncJob  (required)
     * @param syncJobId Perform an action (pause, cancel, etc...) on a single job. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSyncJobCall(SyncJob syncJob, String syncJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncJob;

        // create path and map variables
        String localVarPath = "/platform/3/sync/jobs/{SyncJobId}"
            .replaceAll("\\{" + "SyncJobId" + "\\}", apiClient.escapeString(syncJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSyncJobValidateBeforeCall(SyncJob syncJob, String syncJobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncJob' is set
        if (syncJob == null) {
            throw new ApiException("Missing the required parameter 'syncJob' when calling updateSyncJob(Async)");
        }
        
        // verify the required parameter 'syncJobId' is set
        if (syncJobId == null) {
            throw new ApiException("Missing the required parameter 'syncJobId' when calling updateSyncJob(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSyncJobCall(syncJob, syncJobId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Perform an action (pause, cancel, etc...) on a single job.
     * @param syncJob  (required)
     * @param syncJobId Perform an action (pause, cancel, etc...) on a single job. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSyncJob(SyncJob syncJob, String syncJobId) throws ApiException {
        updateSyncJobWithHttpInfo(syncJob, syncJobId);
    }

    /**
     * 
     * Perform an action (pause, cancel, etc...) on a single job.
     * @param syncJob  (required)
     * @param syncJobId Perform an action (pause, cancel, etc...) on a single job. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSyncJobWithHttpInfo(SyncJob syncJob, String syncJobId) throws ApiException {
        com.squareup.okhttp.Call call = updateSyncJobValidateBeforeCall(syncJob, syncJobId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Perform an action (pause, cancel, etc...) on a single job.
     * @param syncJob  (required)
     * @param syncJobId Perform an action (pause, cancel, etc...) on a single job. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSyncJobAsync(SyncJob syncJob, String syncJobId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSyncJobValidateBeforeCall(syncJob, syncJobId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSyncPolicy
     * @param syncPolicy  (required)
     * @param syncPolicyId Modify a single SyncIQ policy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSyncPolicyCall(SyncPolicy syncPolicy, String syncPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncPolicy;

        // create path and map variables
        String localVarPath = "/platform/3/sync/policies/{SyncPolicyId}"
            .replaceAll("\\{" + "SyncPolicyId" + "\\}", apiClient.escapeString(syncPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSyncPolicyValidateBeforeCall(SyncPolicy syncPolicy, String syncPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncPolicy' is set
        if (syncPolicy == null) {
            throw new ApiException("Missing the required parameter 'syncPolicy' when calling updateSyncPolicy(Async)");
        }
        
        // verify the required parameter 'syncPolicyId' is set
        if (syncPolicyId == null) {
            throw new ApiException("Missing the required parameter 'syncPolicyId' when calling updateSyncPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSyncPolicyCall(syncPolicy, syncPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a single SyncIQ policy.
     * @param syncPolicy  (required)
     * @param syncPolicyId Modify a single SyncIQ policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSyncPolicy(SyncPolicy syncPolicy, String syncPolicyId) throws ApiException {
        updateSyncPolicyWithHttpInfo(syncPolicy, syncPolicyId);
    }

    /**
     * 
     * Modify a single SyncIQ policy.
     * @param syncPolicy  (required)
     * @param syncPolicyId Modify a single SyncIQ policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSyncPolicyWithHttpInfo(SyncPolicy syncPolicy, String syncPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = updateSyncPolicyValidateBeforeCall(syncPolicy, syncPolicyId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a single SyncIQ policy.
     * @param syncPolicy  (required)
     * @param syncPolicyId Modify a single SyncIQ policy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSyncPolicyAsync(SyncPolicy syncPolicy, String syncPolicyId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSyncPolicyValidateBeforeCall(syncPolicy, syncPolicyId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSyncRule
     * @param syncRule  (required)
     * @param syncRuleId Modify a single SyncIQ performance rule. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSyncRuleCall(SyncRule syncRule, String syncRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncRule;

        // create path and map variables
        String localVarPath = "/platform/3/sync/rules/{SyncRuleId}"
            .replaceAll("\\{" + "SyncRuleId" + "\\}", apiClient.escapeString(syncRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSyncRuleValidateBeforeCall(SyncRule syncRule, String syncRuleId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncRule' is set
        if (syncRule == null) {
            throw new ApiException("Missing the required parameter 'syncRule' when calling updateSyncRule(Async)");
        }
        
        // verify the required parameter 'syncRuleId' is set
        if (syncRuleId == null) {
            throw new ApiException("Missing the required parameter 'syncRuleId' when calling updateSyncRule(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSyncRuleCall(syncRule, syncRuleId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify a single SyncIQ performance rule.
     * @param syncRule  (required)
     * @param syncRuleId Modify a single SyncIQ performance rule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSyncRule(SyncRule syncRule, String syncRuleId) throws ApiException {
        updateSyncRuleWithHttpInfo(syncRule, syncRuleId);
    }

    /**
     * 
     * Modify a single SyncIQ performance rule.
     * @param syncRule  (required)
     * @param syncRuleId Modify a single SyncIQ performance rule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSyncRuleWithHttpInfo(SyncRule syncRule, String syncRuleId) throws ApiException {
        com.squareup.okhttp.Call call = updateSyncRuleValidateBeforeCall(syncRule, syncRuleId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify a single SyncIQ performance rule.
     * @param syncRule  (required)
     * @param syncRuleId Modify a single SyncIQ performance rule. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSyncRuleAsync(SyncRule syncRule, String syncRuleId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSyncRuleValidateBeforeCall(syncRule, syncRuleId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateSyncSettings
     * @param syncSettings  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSyncSettingsCall(SyncSettingsExtended syncSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = syncSettings;

        // create path and map variables
        String localVarPath = "/platform/3/sync/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSyncSettingsValidateBeforeCall(SyncSettingsExtended syncSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'syncSettings' is set
        if (syncSettings == null) {
            throw new ApiException("Missing the required parameter 'syncSettings' when calling updateSyncSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSyncSettingsCall(syncSettings, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Modify the global SyncIQ settings.  All input fields are optional, but one or more must be supplied.
     * @param syncSettings  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSyncSettings(SyncSettingsExtended syncSettings) throws ApiException {
        updateSyncSettingsWithHttpInfo(syncSettings);
    }

    /**
     * 
     * Modify the global SyncIQ settings.  All input fields are optional, but one or more must be supplied.
     * @param syncSettings  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSyncSettingsWithHttpInfo(SyncSettingsExtended syncSettings) throws ApiException {
        com.squareup.okhttp.Call call = updateSyncSettingsValidateBeforeCall(syncSettings, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Modify the global SyncIQ settings.  All input fields are optional, but one or more must be supplied.
     * @param syncSettings  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSyncSettingsAsync(SyncSettingsExtended syncSettings, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSyncSettingsValidateBeforeCall(syncSettings, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
